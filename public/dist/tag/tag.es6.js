riot.tag2('activate-session', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="level no-print"> <div class="level-left"> <h2 class="title has-text-centered" style="color: #ff3860;">Session Activation Management</h2> </div> <div class="level-right"> <button class="button is-link has-text-weight-bold ml5 is-pulled-right" onclick="{readSession}"> <span class="icon"> <i class="fas fa-sync-alt"></i> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Session Name</th> <th>Session Start Date</th> <th>Session End Date</th> <th>Current Session</th> <th>Active Session</th> <th></th> </tr> </thead> <tbody> <tr each="{s, i in sessions}"> <td>{i+1}</td> <td>{s.session_name}</td> <td>{s.session_start_date}</td> <td>{s.session_end_date}</td> <td>{s.is_current}</td> <td>{s.is_active}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{s.confirmCurrent}"> <span if="{role==\'ADMIN\'}"> <a class="button is-small is-rounded" rel="nofollow" onclick="{confirmCurrentSession}">Activate Session</a></span> </div> <div class="table-buttons" if="{s.confirmCurrent}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{markCurrent}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      flatpickr(".date", {

    	allowInput: true,
    	altFormat: "d/m/Y",
    	dateFormat: "Y-m-d",
  		})
      self.readSession()
    })
    self.on("unmount", function(){
      activatesessionStore.off('read_session_changed', ReadSessionChanged)
      activatesessionStore.off('current_session_changed',CurrentSessionChanged)
    })

    self.readSession = () => {
    	self.loading = true
    	activatesessionStore.trigger('read_session')
    }

   self.cancelOperation = (e) => {
      self.sessions.map(s => {
          s.confirmCurrent = false
      })
    }

    self.confirmCurrentSession = (e) =>{
      self.sessions.map(s => {
        if(s.session_id != e.item.s.session_id){
          s.confirmCurrent = false
        }else{
          s.confirmCurrent = true
        }
      })
    }
    self.markCurrent = (e) => {
      self.loading = true
      activatesessionStore.trigger('current_session', e.item.s.session_id)
    }

    activatesessionStore.on('read_session_changed',ReadSessionChanged)
    function ReadSessionChanged(sessions){
      self.loading = false
      self.sessions = sessions
      self.update()
    }

    activatesessionStore.on('current_session_changed',CurrentSessionChanged)
    function CurrentSessionChanged(sessions){
      self.loading = false
      self.sessions = sessions
      self.readSession()
      self.update()
    }

});
riot.tag2('activity-category', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Activity Category Management</h2> <div class="level box no-print"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"> <label class="label">Category</label> </div> <div class="column is-full"> <input class="input" type="text" ref="addCategoryInput" id="addCategoryInput" onkeyup="{addEnter}"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold " onclick="{add}"> {title} </button> </div> </div> </div> <div class="level-right"> <div class="control"> <input class="input" ref="searchActivityCategory" onkeyup="{filterActivityCategory}" type="text" placeholder="Search By Category"> </div> <button class="button is-link has-text-weight-bold ml5 " onclick="{getData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-success has-text-weight-bold ml5" onclick="{csvExport}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold ml5" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable "> <thead> <tr> <th>SL</th> <th>Category</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in filteredActivityCategory}"> <td>{i+1}</td> <td>{c.category_name}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden no-print" hide="{c.confirmDelete}"> <span><a class="button is-small" onclick="{edit.bind(this, c)}" title="Edit"> <i class="fa fa-edit" aria-hidden="true"></i> </a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"> <i class="fa fa-trash" aria-hidden="true"></i> </a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.loading = false;
      self.role = getCookie('role')
      self.update()
      self.readCategories()
    })
    self.on("unmount", function(){
      activitycategoryStore.off('categories_changed', CategoriesChanged)
    })

    self.readCategories = () => {
       activitycategoryStore.trigger('read_categories')
    }

    self.getData = () =>{
      self.loading = true
      activitycategoryStore.trigger('read_categories')
    }

    self.csvExport = () => {
      activitycategoryStore.trigger('csv_export_activity_category')
    }

    self.add = () => {
      if(!self.refs.addCategoryInput.value){
        toastr.info("Please enter Category and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          activitycategoryStore.trigger('add_category', self.refs.addCategoryInput.value)
        }else if(self.title=='Update'){
          self.loading = true
          activitycategoryStore.trigger('edit_category', self.refs.addCategoryInput.value,
            self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.categories.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.categories.map(c => {
        if(c.category_id != e.item.c.category_id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      activitycategoryStore.trigger('delete_category', e.item.c.category_id)
    }

    self.edit = (c,e) => {
      console.log(c)
      self.title='Update'
      document.getElementById("addCategoryInput").focus()
      self.refs.addCategoryInput.value = c.category_name
      self.edit_id = c.category_id
    }

    self.filterActivityCategory = ()=>{
      self.filteredActivityCategory = self.categories.filter(c => {
        return JSON.stringify(c).toLowerCase().indexOf(self.refs.searchActivityCategory.value.toLowerCase())>=0
      })
    }

    activitycategoryStore.on('categories_changed',CategoriesChanged)
    function CategoriesChanged(categories){
      self.title='Create'
      self.refs.addCategoryInput.value = ''
      self.loading = false
      self.categories = categories
      self.filteredActivityCategory = categories
      self.update()
    }

});
riot.tag2('activity-date-wise-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Date Wise Activity Detail</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Type</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="activity_type"> <option value="Intra-School">Intra-School</option> <option value="Inter-School">Inter-School</option> <option value="Both">Both</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label ">From Date</label> </div> <div class="column is-narrow"> <input class="input date " ref="start_date" id="start_date" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label ">To Date</label> </div> <div class="column is-narrow"> <input class="input date " ref="end_date" id="end_date" type="text" readonly="readonly"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold " onclick="{getData}"> GO </button> </div> <div class="column"> <button class="button is-success has-text-weight-bold ml5 is-pulled-right" onclick="{csvExport}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <table class="table is-striped is-hoverable is-bordered is-fullwidth"> <p><center><strong>From:{st_date} To: {en_date}</strong></center></p> <thead> <tr> <th>Sl No</th> <th>Date</th> <th>Event Name</th> <th>Organised By</th> <th>Venue</th> <th>Participant</th> <th>Teacher Incharge</th> <th>Result</th> </tr> </thead> <tbody> <tr each="{a, i in reportData}"> <td>{i+1}</td> <td>{a.activity_date}</td> <td>{a.event_name}</td> <td>{a.organised_by}</td> <td>{a.venue}</td> <td>{a.participant_name}</td> <td>{a.teacher_name}</td> <td>{a.result}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.loading = false;
      flatpickr(".date", {
	    allowInput: true,
        dateFormat: "d/m/Y",
  		})
      self.update();
    })

    self.on("unmount", function(){
      activityReportStore.off('read_activity_date_wise_report_changed',ReadActivityDateWiseReportChanged)
    })

    self.getData = () => {
    	var startDate = document.getElementById("start_date").value;
    	var endDate = document.getElementById("end_date").value;

    	if(!self.refs.start_date.value){
        	toastr.info("Please enter From Date and try again")
      	}else if(!self.refs.end_date.value){
      		toastr.info("Please enter To Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
       		toastr.info("Please enter To Date Grater Than From Date")
      	}else{
    	var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          obj['activity_type']=self.refs.activity_type.value
          self.loading = true
          activityReportStore.trigger('read_activity_date_wise_report', obj)
        }
    }

    self.csvExport = () => {
    	var startDate = document.getElementById("start_date").value;
        var endDate = document.getElementById("end_date").value;

        if(!self.refs.start_date.value){
        	toastr.info("Please enter Start Date and try again")
      	}else if(!self.refs.end_date.value){
      		toastr.info("Please enter End Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
          toastr.info("Please enter To Date Grater Than From Date")
        }else{
	    	var obj={}
	        obj['start_date']=convertDate(self.refs.start_date.value)
	        obj['end_date']=convertDate(self.refs.end_date.value)
	        obj['activity_type']=self.refs.activity_type.value
	      	activityReportStore.trigger('csv_activity_date_wise_report',obj)
      	}
    }

    activityReportStore.on('read_activity_date_wise_report_changed',ReadActivityDateWiseReportChanged)
    function ReadActivityDateWiseReportChanged(activity_date_wise_report){
      self.reportData=[];
      self.reportData = activity_date_wise_report
      if(self.reportData.length==0){
      	toastr.info("No Data Found")
      }
      self.st_date = self.refs.start_date.value
      self.en_date = self.refs.end_date.value
      self.loading = false;
      self.update();
    }
});
riot.tag2('activity-detail', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{activity_view ==\'show_activity\'}"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Activity Detail</h2> <div class="level box no-print"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"><label class="label">Category</label></div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="category_id" id="CategoryName" onchange="{getActivityData}"> <option value="-1">ALL</option> <option each="{categories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> </div> </div> <div class="level-right"> <button class="button is-warning has-text-weight-bold is-small" onclick="{add_new_activity}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> <button class="button is-link has-text-weight-bold is-small ml5" onclick="{getActivityData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-success has-text-weight-bold is-small ml5" onclick="{downloadCSV}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <a class="button is-primary has-text-weight-bold is-small ml5" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </a> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <p><center><strong>Category:{categoryName}</strong></center></p> <thead> <tr> <th>SL No</th> <th>Type</th> <th>Date</th> <th>Event Name</th> <th>Organised By</th> <th>Venue</th> <th>Teacher Incharge</th> <th>Item Taken</th> <th>Result</th> <th style="width: 160px;" class="no-print"></th> </tr> </thead> <tbody> <tr each="{ac, i in activities}"> <td>{i + 1}</td> <td>{ac.activity_type}</td> <td>{ac.activity_date}</td> <td>{ac.event_name}</td> <td>{ac.organised_by}</td> <td>{ac.venue}</td> <td>{ac.name}</td> <td>{ac.item_taken}</td> <td>{ac.result}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ac.confirmDelete}"> <span><a class="button is-small " onclick="{assign_student.bind(this, ac)}" title="Assign Participant"> <i class="fa fa-link" aria-hidden="true"></i> </a></span> <span><a class="button is-small" onclick="{printEventDetail.bind(this,ac.activity_id)}" title="Print"> <i class="fa fa-print" aria-hidden="true"></i> </a></span> <span><a class="button is-small" onclick="{edit.bind(this, ac.activity_id)}" title="Edit"> <i class="fa fa-edit" aria-hidden="true"></i> </a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"> <i class="fa fa-trash" aria-hidden="true"></i> </a></span> </div> <div class="table-buttons" if="{ac.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section class=" is-fluid" show="{activity_view ==\'add_activity\'}"> <div class="level"> <div class="level-left"> <div class="level-item"> <h2 class="title is-size-5" style="color: #ff3860;">{title} Activity</h2> </div> </div> <div class="level-right"> <button class="button is-warning has-text-weight-bold is-small" onclick="{close_new_activity}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <div class="box"> <div class="columns"> <div class="column is-2"> <label class="label is-small" for="activityTypeInput">Activity Type</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="activityTypeInput" id="activityTypeInput"> <option value="Intra-School">Intra-School</option> <option value="Inter-School">Inter-school</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="activityDateInput">Activity Date</label> </div> <div class="column is-2 "> <input class="input date is-small" type="text" ref="activityDateInput" readonly> </div> <div class="column is-2"> <label class="label is-small" for="activityCategoryidInput">Category</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="activityCategoryidInput" onchange="{readActivityEvent}"> <option each="{categories}" riot-value="{category_id}">{category_name}</option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="activityEventIdInput">Event</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="activityEventIdInput"> <option each="{readfilteredEvents}" riot-value="{event_id}">{event_name}</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="organisedByInput">Organised By</label> </div> <div class="column is-2 "> <input class="input is-small" ref="organisedByInput" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="venueInput">Venue</label> </div> <div class="column is-2"> <input class="input is-small" ref="venueInput" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="staffTakenInput">Employee</label> </div> <div class="column is-2"> <input class="input is-small" ref="staffTakenInput" type="text" id="staffModal" onclick="{ViewStaffList}"> </div> <div class="column is-2"> <label class="label is-small" for="itemTakenInput">Item Taken</label> </div> <div class="column is-2 "> <input class="input is-small" ref="itemTakenInput" type="text" id="itemModal" onclick="{ViewItemList}"> </div> <div class="column is-2"> <label class="label is-small" for="inTimeInput">In Time</label> </div> <div class="column is-2"> <input class="input is-small" ref="inTimeInput" type="time"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="outTimeInput">Out Time</label> </div> <div class="column is-2"> <input class="input is-small" ref="outTimeInput" type="time"> </div> <div class="column is-2"> <label class="label is-small" for="resultInput">Result</label> </div> <div class="column is-2 "> <input class="input is-small" ref="resultInput" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="activityRemarksInput">Remarks/Suggestion</label> </div> <div class="column is-2"> <textarea class="textarea is-small" ref="activityRemarksInput" rows="3"></textarea> </div> </div> <div class="columns mt60"> <div class="column is-full"> <button class="button is-success has-text-weight-bold adjusted-top" onclick="{add}">Submit </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{close_new_activity}">Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{activity_view ==\'participant_list_view\'}"> <div class="level no-print"> <div class="level-left"> <div class="level-item"> </div> </div> <div class="level-right"> <button class="button is-success has-text-weight-bold is-small" onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> <button class="button is-warning has-text-weight-bold ml5 is-small" onclick="{close_participant_list_view}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <center> <table class="table is-fullwidth is-bordered" style="width:860px;" each="{p, i in st}"> <caption class="caption-participantlist">Details of Event</caption> <tr><td width="120"><h>Activity Date</td><td>{p.activity_date}</td></tr> <tr><td width="120"><h>Event Name</td><td>{p.event_name}</td></tr> <tr><td width="120"><h>Organised By</td><td>{p.organised_by}</td></tr> <tr><td width="120"><h>Venue</td><td>{p.venue}</td></tr> <tr><td width="120"><h>Incharge</td><td>{teacher}</td></tr> </table> <table class="table is-fullwidth is-bordered" style="width:860px;"><caption class="caption-participantlist">NAME OF PARTICIPANTS</caption> <tr bgcolor="#efefef"> <td width="20"><h>Sl</td> <td><h>Name</td><td width="120"><h>Class</td> <td width="50"><h>Enroll No</td> <td width="130"><h>Mobile</td> </tr> <tr each="{p, i in print_event_detail}"> <td>{i + 1}</td> <td>{p.participant_name}</td> <td>{p.standard}</td> <td>{p.enroll_number}</td> <td>{p.mobile}</td> </tr> </table> <table style="height: 30; border:none"> <tr style="border:none"><td style="border:none"></td></tr> </table> <table class="table is-fullwidth is-bordered" style="width:860px;" each="{p, i in st}"> <tr height="70"><td width="120"><h>Item Taken</td><td>{p.item_taken}</td></tr> <tr><td width="120"><h>Out Time</td><td>{p.time_out}</td></tr> <tr><td width="120"><h>In Time</td><td>{p.time_in}</td></tr> <tr height="70"><td width="120"><h>Remarks/Suggestion</td><td>{p.remarks}</td></tr> <tr><td width="120"><h>Result</td><td>{p.result}</td></tr> </table> </center> </section> <section class=" is-fluid" show="{activity_view ==\'assign_student_view\'}"> <div class="level"> <div class="level-left"> <div class="level-item"> <h2 class="title is-size-5" style="color: #ff3860;">Assign Participants to Event</h2> </div> </div> <div class="level-right"> <button class="button is-warning has-text-weight-bold is-small" onclick="{close_assign_student_view}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-link has-text-weight-bold ml5 is-small" onclick="{refreshStudents}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"><label class="label">Standard</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="standardSelect" onchange="{changeSection}"> <option each="{classes}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="sectionSelect"> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{refreshStudents}">Show Data </button> </div> </div> </div> <div class="columns is-multiline is-mobile"> <div class="column"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="slno">Roll</th> <th>Enroll No</th> <th>Free Students</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in freeStudents}"> <td>{c.roll_number}</td> <td>{c.enroll_number}</td> <td>{c.student_name}</td> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'freeSubjectCheckBox\'+c.student_id}" onclick="{selectFreeSubject.bind(this,c)}"> </td> </tr> </tbody> </table> </div> <div class="column is-vertical-center is-narrow has-text-centered is-multiline"> <table> <tr> <td> <button class="button is-small" onclick="{assignStudents}" style="margin-top:20px;">Assign students <span style="margin-left:10px" class="fas fa-angle-double-right"></span> </button> </td> </tr> <tr> <td> <button class="button is-small" onclick="{freeUpStandard}" style="margin-top:20px;"><span style="margin-right:10px;" class="fas fa-angle-double-left"></span> Free up students</button> </td> </tr> </table> </div> <div class="column"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th></th> <th class="slno">Roll No</th> <th>Enroll No</th> <th>Assigned Students</th> </tr> </thead> <tbody> <tr each="{c, i in assignedStudents}"> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'assignedSubjectCheckBox\'+c.activity_id}" onclick="{selectAssigndSubject.bind(this,c)}"> </td> <td>{c.roll_number}</td> <td>{c.enroll_number}</td> <td>{c.student_name}</td> </tr> </tbody> </table> </div> </div> </section> <div id="showItemModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Select Item List</p> </header> <section class="modal-card-body"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>Item Name</th> <th></th> </tr> </thead> <tbody> <tr each="{r, i in items}"> <td>{r.item_name}</td> <td class="has-text-right"> <input type="checkbox" class="id_check_box" checked="{selected}" id="{\'AddItemName\' + r.item_id}" onclick="{selectItem.bind(this,r)}"> </td> </tr> </tbody> </table> </section> <footer class="modal-card-foot"> <button class="button is-danger" id="item-modal-close" onclick="{close_item_modal}">Cancel</button> </footer> </div> </div> <div id="showStaffModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Select Staff</p> </header> <section class="modal-card-body"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th> Name</th> <th></th> </tr> </thead> <tbody> <tr each="{s, i in staff}"> <td>{s.name} ({s.employee_id})</td> <td class="has-text-right"> <input type="checkbox" class="id_check_box" checked="{selected}" id="{\'AddStaffName\' + s.emp_id}" onclick="{selectStaff.bind(this,s)}"> </td> </tr> </tbody> </table> </section> <footer class="modal-card-foot"> <button class="button is-danger" id="staff-modal-close" onclick="{close_employee_modal}">Cancel</button> </footer> </div> </div>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Add'
      self.role = getCookie('role')
      self.loading = false;
      self.activity_view = 'show_activity'
      self.update()
      flatpickr(".date", {
      	allowInput: true,
      	dateFormat: "d/m/Y",
      })
      self.readCategories()
      self.readEvent()
      self.readItems()
      self.readStaff()
      self.readClass()
      self.readSection()
    })

    self.on("unmount", function(){
      activityStore.off('read_activity_categories_changed',ActivityCategoriesChanged)
      activityStore.off('read_activity_event_changed',ActivityEventChanged)
      activityStore.off('read_items_changed',ItemsChanged)
      activityStore.off('read_staff_changed',StaffChanged)
      activityStore.off('add_activity_changed',AddActivityChanged)
      activityStore.off('edit_activity_changed',EditActivityChanged)
      activityStore.off('delete_activity_changed',DeleteActivityChanged)
      activityStore.off('read_activity_by_category_changed',ActivitiesChanged)
      activityStore.off('read_data_for_update_changed',UpdateActivityDataChanged)
      activityStore.off('read_students_changed',ReadStudentsChanged)
      activityStore.off('assign_students_changed',AssignStandardChanged)
      activityStore.off('read_print_event_detail_changed',PrintEventDetailChanged)
    })

    self.readClass = () => {
       self.loading = true;
       activityStore.trigger('read_classes')
    }

    self.readSection = () => {
       self.loading = true;
       activityStore.trigger('read_section')
    }
    self.changeSection = () => {
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.standardSelect.value
        })
        self.update()
       }

    self.printEventDetail = (ac,e) =>{
    	self.activity_id = ac
    	self.activity_view='participant_list_view'
    	var today = new Date();
		var dd = today.getDate();
		var mm = today.getMonth()+1;

		var yyyy = today.getFullYear();
		if(dd<10){
    		dd='0'+dd;
		}
		if(mm<10){
    		mm='0'+mm;
		}
		var today = dd+'/'+mm+'/'+yyyy;
		self.print_date = today;

    	activityStore.trigger('read_print_event_detail',self.activity_id)
    }

    self.close_participant_list_view = () =>{
    	self.activity_view='show_activity'
    }

    self.assign_student = (ac) =>{
    	self.activity_id = ac.activity_id
    	self.activity_view='assign_student_view'
    	self.freeStudents = []
    	self.assignedStudents = []
    }

    self.close_assign_student_view = ()=>{
    	self.activity_view='show_activity'
    }

    self.refreshStudents = () =>{

      let error = '';

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading = true
        activityStore.trigger('read_students', self.activity_id, self.refs.standardSelect.value, self.refs.sectionSelect.value)
      }

    }
    self.selectFreeSubject = (student,e) => {
        self.freeStudents.map(i=>{
          if(student.student_id==i.student_id){
            i.selected=!i.selected
          }
        })
    }

    self.selectAssigndSubject = (student,e) => {
        self.assignedStudents.map(i=>{
          if(student.student_id==i.student_id){
            i.selected=!i.selected
          }
        })
        console.log(self.assignedStudents)
    }

    self.assignStudents = () =>{
      let students_to_assign = self.freeStudents.filter(c=>{
        return c.selected == true
      })
      console.log(self.activity_id)
      console.log(students_to_assign)

      if(students_to_assign.length==0){
        toastr.error('Please Select Student To Assign House.')
        return
      }else{
        self.loading = true
        activityStore.trigger('assign_students', self.activity_id, students_to_assign)
      }
    }

    self.freeUpStandard = () =>{
      let students_to_free = self.assignedStudents.filter(c=>{
        return c.selected == true
      })

      if(students_to_free.length==0){
        toastr.error('Please select students to free from house .')
        return
      }else{
        self.loading = true
        activityStore.trigger('free_up_student', self.activity_id, students_to_free)
      }
    }

    self.getActivityData = () => {
    	self.loading = true
    	var obj={}
          obj['category_id']=self.refs.category_id.value
          activityStore.trigger('read_activity_by_category', obj)
          console.log(obj)
    }

    self.readCategories = () => {
       activityStore.trigger('read_activity_categories')
    }

    self.readEvent = () => {
       activityStore.trigger('read_activity_event')
    }

    self.readActivityEvent = () => {
    	self.readfilteredEvents = []
    	self.readfilteredEvents = self.activity_events.filter(c => {
          return c.category_id == self.refs.activityCategoryidInput.value
        })
        self.update()
    }

    self.close_new_activity = () => {
    	self.activity_view='show_activity'
    	self.update()
    }

    self.add_new_activity = () =>{
    	self.activity_view='add_activity'
    	self.clearForm()
    	self.title='Add'
    	self.readStaff()
        self.readItems()
    	self.update()
    }

    self.readItems = () => {
    	activityStore.trigger('read_items')
    }

    self.readStaff = () => {
    	activityStore.trigger('read_staff')
    }

    self.ViewItemList = () =>{
    	$("#showItemModal").addClass("is-active");

    }

    self.close_item_modal = () =>{
    	$("#showItemModal").removeClass("is-active");
    	self.itemList()
    }
    self.itemList = () => {
    	let item_name='';
      	self.items.map( q => {
	        if(q.selected){
	          if(item_name==''){
	            item_name=q.item_name
	          }else{
	            item_name=item_name+','+q.item_name
	          }
	        }
		self.refs.itemTakenInput.value = item_name

    	})
    }
    self.selectItem = (item_name,e) => {
        self.items.map(i=>{
          if(item_name.item_name==i.item_name){
            i.selected=!i.selected
            console.log(i.selected);
              if(i.selected==true){
                console.log(i.item_name);
              }else if(i.selected==false){
              console.log(i.item_name);
              }
            }
        })
    }

    self.ViewStaffList = () =>{
		$("#showStaffModal").addClass("is-active");

    }

    self.close_employee_modal = () =>{
		$("#showStaffModal").removeClass("is-active");
		self.staffList()
    }

    self.staffList = () => {
    	let name='';
    	self.teachers = [];
      	self.staff.map( q => {
	        if(q.selected){
	          self.teachers.push(q.emp_id)
	          if(name==''){
	            name=q.name + "(" + q.employee_id + ")"
	          }else{
	            name=name+', '+q.name + "(" + q.employee_id + ")"
	          }
	        }
		self.refs.staffTakenInput.value = name

    	})
    }
    self.selectStaff = (name,e) => {
        self.staff.map(i=>{
          if(name.name==i.name){
            i.selected=!i.selected
            console.log(i.selected);
              if(i.selected==true){
                console.log(i.name);
              }else if(i.selected==false){
              	console.log(i.name);
              }
            }
        })
    }

    self.edit = (ac,e) => {
      console.log(ac)
      self.activity_id = ac
      self.activity_view='add_activity'
      self.title='Update'
      self.readStaff()
      self.readItems()
      activityStore.trigger('read_data_for_update', ac)
    }

    self.add = () => {
     	if(!self.refs.activityDateInput.value){
       		toastr.info("Please enter Activity Date and try again")
      	}else if(!self.refs.activityEventIdInput.value){
        	toastr.info("Please Select Event and try again")
      	}else if(!self.refs.organisedByInput.value){
        	toastr.info("Please enter Organised By and try again")
      	}else if(!self.refs.venueInput.value){
        	toastr.info("Please enter Venue and try again")
      	}else{
	     	var obj={}
	     	obj['activity_type']=self.refs.activityTypeInput.value
	     	obj['activity_date']=convertDate(self.refs.activityDateInput.value)
	     	obj['category_id']=self.refs.activityCategoryidInput.value
	     	obj['event_id']=self.refs.activityEventIdInput.value
	     	obj['event_name']=null
	     	obj['organised_by']=self.refs.organisedByInput.value
	     	obj['venue']=self.refs.venueInput.value
	     	obj['emp_id']=self.teachers
	     	obj['teacher_incharge']=null
	     	obj['item_taken']=self.refs.itemTakenInput.value
	     	obj['time_in']=self.refs.inTimeInput.value
	     	obj['time_out']=self.refs.outTimeInput.value
	     	obj['remarks']=self.refs.activityRemarksInput.value
	     	obj['result']=self.refs.resultInput.value
	     	console.log(obj)
	     	if(self.title=='Add'){
	           activityStore.trigger('add_activity', obj)
	           self.activity_view = 'show_activity'
	        }else if(self.title=='Update'){
	           activityStore.trigger('edit_activity', obj,self.activity_id)
	           self.activity_view = 'show_activity'
	        }
	    }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

    self.cancelOperation = (ac) => {
      self.activities.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }
    self.confirmDelete = (ac) => {
      self.activities.map(c => {
        if(c.activity_id != ac.item.ac.activity_id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      activityStore.trigger('delete_activity', e.item.ac.activity_id)
    }
    self.clearForm = () =>{
    	self.refs.activityTypeInput.value = 'Intra-School'
	    self.refs.activityDateInput.value = ''
	    self.refs.organisedByInput.value = ''
	    self.refs.venueInput.value = ''
	    self.refs.itemTakenInput.value = ''
	    self.refs.staffTakenInput.value = ''
	    self.refs.inTimeInput.value = ''
	    self.refs.outTimeInput.value = ''
	    self.refs.activityRemarksInput.value = ''
	    self.refs.resultInput.value = ''
	    self.readActivityEvent()
	    self.readCategories()
    }

    self.downloadCSV = () =>{
    	var obj={}
          obj['category_id']=self.refs.category_id.value
          activityStore.trigger('csv_export_activity', obj)
          console.log(obj)
    }

    activityStore.on('read_print_event_detail_changed',PrintEventDetailChanged)
    function PrintEventDetailChanged(print_event_detail,teacher){
      console.log(print_event_detail)
      console.log(teacher)
      self.print_event_detail = print_event_detail
      self.st = []
      self.st.push(print_event_detail[0])
      self.teacher = teacher
      self.update()
    }

    activityStore.on('read_activity_categories_changed',ActivityCategoriesChanged)
    function ActivityCategoriesChanged(categories){
      console.log(categories)
      self.categories = categories
      self.update()

      self.readEvent()
    }

    activityStore.on('read_activity_event_changed',ActivityEventChanged)
    function ActivityEventChanged(activity_events){
      console.log(activity_events)
      self.activity_events = activity_events
      self.update()
      self.readActivityEvent()
      self.getActivityData()
    }

    activityStore.on('read_items_changed',ItemsChanged)
    function ItemsChanged(items){
      console.log(items)
      self.items = items
      self.update()
      self.items.map(i=>{
        i.selected = false;
      })
    }

    activityStore.on('read_staff_changed',StaffChanged)
    function StaffChanged(staff){
      console.log(staff)
      self.staff = staff
      self.update()
      self.staff.map(i=>{
        i.selected = false;
      })
    }

    activityStore.on('add_activity_changed',AddActivityChanged)
    function AddActivityChanged(){
      self.update()
      self.getActivityData()
    }

    activityStore.on('edit_activity_changed',EditActivityChanged)
    function EditActivityChanged(){
      self.update()
      self.getActivityData()
    }

    activityStore.on('delete_activity_changed',DeleteActivityChanged)
    function DeleteActivityChanged(){
    	self.loading=false;
     	self.update()
     	self.getActivityData()
    }

    activityStore.on('read_activity_by_category_changed',ActivitiesChanged)
    function ActivitiesChanged(activities){
      console.log(activities)
      self.loading = false
      self.activities = activities
      if(self.activities.length==0){
      	toastr.info("No Data Found")
      }
      self.categoryName = $("#CategoryName option:selected").text();
      self.name = name
      self.update()
    }

    activityStore.on('read_data_for_update_changed',UpdateActivityDataChanged)
    function UpdateActivityDataChanged(update_activity, employees,techer_in_charge){
      self.update_activity = update_activity
      self.employees = employees
      self.techer_in_charge = techer_in_charge
      self.update_activity.map(i=>{
	    self.refs.activityTypeInput.value= i.activity_type
	    self.refs.activityCategoryidInput.value= i.category_id
        self.readfilteredEvents = []
    	self.readfilteredEvents = self.activity_events.filter(c => {
          return c.category_id == i.category_id
        })
	    self.refs.organisedByInput.value= i.organised_by
        self.refs.inTimeInput.value= i.time_in
        self.refs.activityDateInput.value= i.activity_date
        self.refs.venueInput.value= i.venue
        self.refs.outTimeInput.value= i.time_out
        self.refs.activityRemarksInput.value= i.remarks
        self.refs.resultInput.value= i.result

      })
      var str='';
      str = self.techer_in_charge.toString();
      var techer_in_charge = str.split(",");

      console.log(techer_in_charge);
      var name = "";
      self.teachers = [];
      techer_in_charge.map(i=>{
      	self.staff.map(e=>{
      		if(i==e.emp_id){
        		e.selected = true;
        		$('#AddStaffName' + e.emp_id ).prop('checked', true);
        		if(e.selected){
	          		self.teachers.push(e.emp_id)
	        		if(name==''){
			            name=e.name + "(" + e.employee_id + ")"
			          }else{
			            name=name+','+e.name + "(" + e.employee_id + ")"
			        }
			    }
      		}
      	})
      })
      self.refs.staffTakenInput.value = name

      var Items = self.update_activity[0].item_taken
      console.log(Items)
      var ItemTaken = Items.split(",");
      console.log(ItemTaken)

      let item_name='';
      ItemTaken.map(i=>{
      	console.log(i)
      	self.items.map(e=>{
      		if(i==e.item_name){
        		e.selected = true;
        		$('#AddItemName' + e.item_id ).prop('checked', true);

        		if(item_name==''){
		            item_name=e.item_name
		          }else{
		            item_name=item_name+','+e.item_name
		        }
      		}
      	})
      })

      self.refs.itemTakenInput.value = item_name
      self.update()
      self.refs.activityEventIdInput.value= self.update_activity[0].event_id

    }
    activityStore.on('read_classes_changed',ClassesChanged)
    function ClassesChanged(classes){
      self.loading = false
      self.classes = []
      self.classes = classes
      self.update()
    }

    activityStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      self.loading = false
      self.sections = []
      self.sections = sections
      self.update()
      self.changeSection()
    }
    activityStore.on('read_students_changed',ReadStudentsChanged)
    function ReadStudentsChanged(freeStudents,assignedStudents){
      self.loading = false
      self.freeStudents = []
      self.freeStudents = freeStudents
      self.freeStudents.map(c => {
          c.selected=false
      })
      console.log(freeStudents)
      self.assignedStudents = []
      self.assignedStudents = assignedStudents
      self.assignedStudents.map(c => {
          c.selected=false
      })

      self.update()
    }
    activityStore.on('assign_students_changed',AssignStandardChanged)
    function AssignStandardChanged(students_assigned){
      self.loading = false

      self.refreshStudents()

    }

});	
riot.tag2('activity-event-wise-graph-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered is-size-6" style="color: #ff3860;">Category Wise Activity Graph <br>Grand Total:{grand_total}</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Type</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="activity_type"> <option value="Intra-School">Intra-School</option> <option value="Inter-School">Inter-School</option> <option value="Both">Both</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Session</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="session_id" id="SessionName"> <option each="{sessions}" riot-value="{session_id}">{session_name} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getData}"> GO </button> <input type="checkbox" id="checkTable" checked="{e.done}" onclick="{viewTable}" style="margin-top: 12px;"> Table </div> <div class="column"> <button class="button is-success has-text-weight-bold ml5 is-pulled-right" onclick="{csvExport}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <center> <div id="piechart" style="width: 900px; height: 500px;" show="{report_view ==\'show_graph\'}"></div> </center> <div class="printOnly "> <div class="columns is-centered"> <table class="table is-striped is-hoverable is-bordered" style="margin-top:50px;width: 50%;"> <thead> <tr> <th>Category</th> <th class="has-text-right">Total</th> </tr> </thead> <tbody> <tr each="{cd, i in activity_event_wise_graph_report}"> <td>{cd.category_name}</td> <td class="has-text-right">{cd.total}</td> </tr> <tr> <td class="has-text-right">Total</td> <td class="has-text-right">{grand_total}</td> </tr> </tbody> </table> </div> </div> <div class="columns is-centered no-print"> <table class="table is-striped is-hoverable is-bordered" style="width:50%;" show="{report_view ==\'show_table\'}"> <thead> <tr> <th>Category</th> <th class="has-text-right">Total</th> </tr> </thead> <tbody> <tr each="{cd, i in activity_event_wise_graph_report}"> <td>{cd.category_name}</td> <td class="has-text-right">{cd.total}</td> </tr> <tr> <td class="has-text-right">Total</td> <td class="has-text-right">{grand_total}</td> </tr> </tbody> </table> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.loading = false;
      flatpickr(".date", {
	    allowInput: true,
        dateFormat: "d/m/Y",
  		})
      self.readSession()
      self.update();
    })

    self.on("unmount", function(){
      activityReportStore.off('read_activity_event_wise_graph_report_changed',ReadActivityEventWiseGraphReportChanged)
      activityReportStore.off('read_session_changed',SessionChanged)
    })

    self.readSession = () => {
       activityReportStore.trigger('read_session')
    }

    self.viewTable = () => {
    	if($('#checkTable').is(":checked")){
	        self.report_view = 'show_table'
    	}else{
	        self.report_view = 'show_graph'
    	}
    }
    self.getData = () => {
    	self.loading = true
    	activityReportStore.trigger('read_activity_event_wise_graph_report', self.refs.activity_type.value,
    	self.refs.session_id.value)
      	self.report_view = 'show_graph'
    }

    self.csvExport = () => {
    	activityReportStore.trigger('csv_activity_event_wise_graph_report', self.refs.activity_type.value,
      	self.refs.session_id.value)
    }

    activityReportStore.on('read_session_changed',SessionChanged)
    function SessionChanged(sessions){
      console.log(sessions)
      self.sessions = sessions
      self.update()
    }

    activityReportStore.on('read_activity_event_wise_graph_report_changed',ReadActivityEventWiseGraphReportChanged)
    function ReadActivityEventWiseGraphReportChanged(activity_event_wise_graph_report,grand_total){
      self.loading = false;
      self.activity_event_wise_graph_report = activity_event_wise_graph_report
      if(self.activity_event_wise_graph_report.length==0){
      	toastr.info("No Data Found")
      }
      self.activityType = self.refs.activity_type.value,
      self.Session = $("#SessionName option:selected").text();

      self.grand_total = grand_total
      var chart_percentage = []
      chart_percentage.push(['Task', 'Hours per Day'])
       for (var i = self.activity_event_wise_graph_report.length - 1; i >= 0; i--) {
		   chart_percentage.push([self.activity_event_wise_graph_report[i].category_name,self.activity_event_wise_graph_report[i].total])
		}

      google.charts.load("current", {packages:["corechart"]});
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {

        var data = google.visualization.arrayToDataTable(chart_percentage);

        var options = {
          is3D: true,
          legend:{position: 'labeled',
                  textStyle: {bold: true} },
          pieSliceText: 'value'
        };

        var chart = new google.visualization.PieChart(document.getElementById('piechart'));
        chart.draw(data, options);
      }

      self.update()
      console.log(self.activity_event_wise_graph_report)
    }
});
riot.tag2('activity-event-wise-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Event Wise Activity Detail</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Type</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="activity_type"> <option value="Intra-School">Intra-School</option> <option value="Inter-School">Inter-School</option> <option value="Both">Both</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Event</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="event_id" id="EventName"> <option each="{events}" riot-value="{event_id}">{event_name} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getData}"> GO </button> </div> <div class="column"> <button class="button is-success has-text-weight-bold ml5 is-pulled-right" onclick="{csvExport}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <table class="table is-striped is-hoverable is-bordered is-fullwidth"> <p><center><strong>Activity Type:{ActivityType} Event:{eventName}</strong></center></p> <thead> <tr> <th>Sl No</th> <th>Date</th> <th>Type</th> <th>Organised By</th> <th>Venue</th> <th>Participant</th> <th>Teacher Incharge</th> <th>Result</th> </tr> </thead> <tbody> <tr each="{a, i in reportData}"> <td>{i+1}</td> <td>{a.activity_date}</td> <td>{a.activity_type}</td> <td>{a.organised_by}</td> <td>{a.venue}</td> <td>{a.participant_name}</td> <td>{a.teacher_name}</td> <td>{a.result}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
    	self.loading = false;
      flatpickr(".date", {
	    allowInput: true,
        dateFormat: "d/m/Y",
  		})
      self.readEvent()
      self.update();
    })

    self.on("unmount", function(){
      activityReportStore.off('read_activity_event_wise_report_changed',ReadActivityEventWiseReportChanged)
      activityReportStore.off('read_event_changed',EventChanged)
    })

    self.readEvent = () => {
       activityReportStore.trigger('read_event')
    }

    self.getData = () => {
        self.loading = true
        activityReportStore.trigger('read_activity_event_wise_report',self.refs.activity_type.value,
          	self.refs.event_id.value)
    }

    self.csvExport = () => {
      	activityReportStore.trigger('csv_activity_event_wise_report',self.refs.activity_type.value,
        self.refs.event_id.value)
    }

    activityReportStore.on('read_event_changed',EventChanged)
    function EventChanged(events){
      console.log(events)
      self.events = events
      self.update()
    }

    activityReportStore.on('read_activity_event_wise_report_changed',ReadActivityEventWiseReportChanged)
    function ReadActivityEventWiseReportChanged(activity_event_wise_report){
      self.reportData=[];
      self.reportData = activity_event_wise_report
      if(self.reportData.length==0){
      	toastr.info("No Data Found")
      }
      self.ActivityType = self.refs.activity_type.value,
      self.eventName = $("#EventName option:selected").text();
      self.loading = false;
      self.update()
    }
});
riot.tag2('activity-event', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Activity Event Management</h2> <div class="level box no-print"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"> <label class="label">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="category_id"> <option each="{categories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Event</label> </div> <div class="column is-half"> <div class="control"> <input class=" input" id="addEventInput" ref="addEventInput" type="text"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold " onclick="{add}"> {title} </button> </div> </div> </div> <div class="level-right"> <div class="control"> <input class="input" ref="searchActivityEvent" onkeyup="{filterActivityEvent}" type="text" placeholder="Search By Event"> </div> <button class="button is-link has-text-weight-bold ml5 " onclick="{getData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-success has-text-weight-bold ml5" onclick="{downloadCSV}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold ml5" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Category</th> <th>Event</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in filteredActivityEvent}"> <td>{i+1}</td> <td>{ev.category_name}</td> <td>{ev.event_name}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden no-print" hide="{ev.confirmDelete}"> <span><a class="button is-small" onclick="{edit.bind(this, ev)}" title="Edit"> <i class="fa fa-edit" aria-hidden="true"></i> </a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"><i class="fa fa-trash" aria-hidden="true"></i></a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.loading = false;
      self.role = getCookie('role')
      self.update()
      self.readCategories()
      self.readEvents()
    })
    self.on("unmount", function(){
      activityeventStore.off('add_event_changed', AddEventsChanged)
      activityeventStore.off('read_event_changed', ReadEventsChanged)
      activityeventStore.off('read_categories_changed',CategoriesChanged)
      activityeventStore.off('edit_event_changed',EditEventsChanged)
      activityeventStore.off('delete_event_changed',DeleteEventsChanged)
    })

    self.readCategories = () => {
       activityeventStore.trigger('read_categories')
    }

    self.readEvents = () => {
       activityeventStore.trigger('read_events')
    }

    self.getData = () =>{
      self.loading = true
      activityeventStore.trigger('read_events')
    }

    self.csvExport = () => {
      activityeventStore.trigger('csv_export_activity_event')
    }

    self.add = () => {
      if(!self.refs.addEventInput.value){
        toastr.info("Please enter Event and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          activityeventStore.trigger('add_event', self.refs.addEventInput.value,
           self.refs.category_id.value)
        }else if(self.title=='Update'){
          self.loading = true
          activityeventStore.trigger('edit_event', self.refs.addEventInput.value,
            self.refs.category_id.value, self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.events.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.events.map(ev => {
        if(ev.event_id != e.item.ev.event_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      activityeventStore.trigger('delete_event', e.item.ev.event_id)
    }

    self.edit = (ev,e) => {
      console.log(ev)
      self.title='Update'
      document.getElementById("addEventInput").focus()
      self.refs.addEventInput.value = ev.event_name
      self.refs.category_id.value = ev.category_id
      self.edit_id = ev.event_id
    }

    self.filterActivityEvent = ()=>{
      self.filteredActivityEvent = self.events.filter(c => {
        return JSON.stringify(c).toLowerCase().indexOf(self.refs.searchActivityEvent.value.toLowerCase())>=0
      })
    }

    activityeventStore.on('add_event_changed',AddEventsChanged)
    function AddEventsChanged(events){
      console.log(events)
      self.title='Create'
      self.refs.addEventInput.value = ''
      self.loading = false
      self.events = events
      self.update()
      self.readEvents()
      self.readCategories()
    }

    activityeventStore.on('edit_event_changed',EditEventsChanged)
    function EditEventsChanged(events){
      console.log(events)
      self.title='Create'
      self.refs.addEventInput.value = ''
      self.loading = false
      self.events = events
      self.update()
      self.readEvents()
      self.readCategories()
    }

    activityeventStore.on('delete_event_changed',DeleteEventsChanged)
    function DeleteEventsChanged(events){
      console.log(events)
      self.title='Create'
      self.refs.addEventInput.value = ''
      self.loading = false
      self.events = events
      self.update()
      self.readEvents()
      self.readCategories()
    }

    activityeventStore.on('read_event_changed',ReadEventsChanged)
    function ReadEventsChanged(events){
      self.title='Create'
      self.refs.addEventInput.value = ''
      self.loading = false
      self.events = events
      self.filteredActivityEvent = events
      self.update()
    }

    activityeventStore.on('read_categories_changed',CategoriesChanged)
    function CategoriesChanged(categories){
      console.log(categories)
      self.categories = categories
      self.loading = false
      self.update()
    }

});
riot.tag2('activity-item', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Item Management Console</h2> <div class="level box no-print"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"> <label class="label">Item</label> </div> <div class="column is-full"> <input class="input" type="text" id="item_name" ref="addItemInput" onkeyup="{addEnter}"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold " onclick="{add}"> {title} </button> </div> </div> </div> <div class="level-right"> <div class="control"> <input class="input" ref="searchActivityItem" onkeyup="{filterActivityItem}" type="text" placeholder="Search By Item"> </div> <button class="button is-link has-text-weight-bold ml5 " onclick="{getData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-success has-text-weight-bold ml5" onclick="{downloadCSV}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold ml5" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Item</th> <th></th> </tr> </thead> <tbody> <tr each="{r, i in filteredActivityItem}"> <td>{i+1}</td> <td>{r.item_name}</td> <td class="has-text-right "> <div class="inline-flex rounded border border-grey overflow-hidden no-print" hide="{r.confirmDelete}"> <span><a class="button is-small" onclick="{edit.bind(this, r)}" title="Edit"> <i class="fa fa-edit" aria-hidden="true"></i> </a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"><i class="fa fa-trash" aria-hidden="true"></i></a></span> </div> <div class="table-buttons" if="{r.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.loading = false;
      self.role = getCookie('role')
      self.update()
      self.readItems()
    })
    self.on("unmount", function(){
      activityitemStore.off('items_changed', ItemsChanged)
    })

    self.readItems = () => {
      self.loading = true
      activityitemStore.trigger('read_items')
    }

    self.getData = () =>{
      self.loading = true
      activityitemStore.trigger('read_items')
    }

    self.csvExport = () => {
      activityitemStore.trigger('csv_export_activity_item')
    }

     self.add = () => {
      if(!self.refs.addItemInput.value){
        toastr.info("Please enter Item and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          activityitemStore.trigger('add_item', self.refs.addItemInput.value)
        }else if(self.title=='Update'){
          self.loading = true
          console.log('update')
          activityitemStore.trigger('edit_item', self.refs.addItemInput.value,
            self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.Items.map(r => {
          r.confirmDelete = false
          r.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.Items.map(r => {
        if(r.item_id != e.item.r.item_id){
          r.confirmDelete = false
        }else{
          r.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      activityitemStore.trigger('delete_item', e.item.r.item_id)
    }

    self.edit = (r,e) => {
      console.log(r)
      self.title='Update'
      document.getElementById("item_name").focus()
      self.refs.addItemInput.value = r.item_name
      self.edit_id = r.item_id
    }

    self.filterActivityItem = ()=>{
      self.filteredActivityItem = self.Items.filter(c => {
        return JSON.stringify(c).toLowerCase().indexOf(self.refs.searchActivityItem.value.toLowerCase())>=0
      })
    }

    activityitemStore.on('items_changed',ItemsChanged)
    function ItemsChanged(items){
      self.title='Create'
      self.refs.addItemInput.value = ''
      self.loading = false
      self.Items = items
      self.filteredActivityItem = items
      console.log(items)
      self.update()
    }

});
riot.tag2('activity-report', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_master == \'activity-date-wise-report\'}" href="#/activity-report/activity-date-wise-report"> <span>Date Wise Report</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'activity-session-wise-report\'}" href="#/activity-report/activity-session-wise-report"> <span>Session Wise Report</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'activity-event-wise-report\'}" href="#/activity-report/activity-event-wise-report"> <span>Event Wise Report</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'activity-student-event-report\'}" href="#/activity-report/activity-student-event-report"> <span>Student Event Report</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'activity-event-wise-graph-report\'}" href="#/activity-report/activity-event-wise-graph-report"> <span>Event Wise Graph</span> </a> </p> </div> <div id="activity-report-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_master')

    if(!opts.selected_master){
      self.selected_master = 'activity-date-wise-report'
    }else{
      self.selected_master = opts.selected_master
    }
});
riot.tag2('activity-session-wise-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Session Wise Activity Detail</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Type</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="activity_type"> <option value="Intra-School">Intra-School</option> <option value="Inter-School">Inter-School</option> <option value="Both">Both</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Session</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="session_id" id="SessionName"> <option each="{sessions}" riot-value="{session_id}">{session_name} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getData}"> GO </button> </div> <div class="column"> <button class="button is-success has-text-weight-bold ml5 is-pulled-right" onclick="{csvExport}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <table class="table is-striped is-hoverable is-bordered is-fullwidth"> <p><center><strong>Activity Type:{activityType} Session: {Session}</strong></center></p> <thead> <tr> <th>Sl No</th> <th>Date</th> <th>Event Name</th> <th>Organised By</th> <th>Venue</th> <th>Participant</th> <th>Teacher Incharge</th> <th>Result</th> </tr> </thead> <tbody> <tr each="{a, i in reportData}"> <td>{i+1}</td> <td>{a.activity_date}</td> <td>{a.event_name}</td> <td>{a.organised_by}</td> <td>{a.venue}</td> <td>{a.participant_name}</td> <td>{a.teacher_name}</td> <td>{a.result}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.loading = false;
      flatpickr(".date", {
	    allowInput: true,
        dateFormat: "d/m/Y",
  		})
      self.readSession()
      self.update();
    })

    self.on("unmount", function(){
      activityReportStore.off('read_activity_session_wise_report_changed',ReadActivitySessionWiseReportChanged)
      activityReportStore.off('read_session_changed',SessionChanged)
    })

    self.readSession = () => {
       activityReportStore.trigger('read_session')
    }

    self.getData = () => {
        self.loading = true
        activityReportStore.trigger('read_activity_session_wise_report',self.refs.activity_type.value,
        self.refs.session_id.value)
    }

    self.csvExport = () => {
      	activityReportStore.trigger('csv_activity_session_wise_report',self.refs.activity_type.value,
        self.refs.session_id.value)
    }

    activityReportStore.on('read_session_changed',SessionChanged)
    function SessionChanged(sessions){
      console.log(sessions)
      self.sessions = sessions
      self.update()
    }

    activityReportStore.on('read_activity_session_wise_report_changed',ReadActivitySessionWiseReportChanged)
    function ReadActivitySessionWiseReportChanged(activity_session_wise_report){
      self.reportData=[];
      self.reportData = activity_session_wise_report
      if(self.reportData.length==0){
      	toastr.info("No Data Found")
      }
      self.activityType = self.refs.activity_type.value,
      self.Session = $("#SessionName option:selected").text();
      self.loading = false;
      self.update()
    }
});
riot.tag2('activity-setting', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_master == \'activity-item\'}" href="#/activity-setting/activity-item"> <span>Item</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'activity-event\'}" href="#/activity-setting/activity-event"> <span>Event</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'activity-category\'}" href="#/activity-setting/activity-category"> <span>Category</span> </a> </p> </div> <div id="activity-setting-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_master')
    console.log(opts.selected_master)
    if(!opts.selected_master){
      self.selected_master = 'activity-item'
    }else{
      self.selected_master = opts.selected_master
    }
});



riot.tag2('activity-student-event-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Student Event Report</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="input date" ref="start_date" id="start_date" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="input date" ref="end_date" id="end_date" type="text" readonly="readonly"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getData}"> GO </button> </div> <div class="column"> <button class="button is-success has-text-weight-bold ml5 is-pulled-right" onclick="{csvExport}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <table class="table is-striped is-hoverable is-bordered is-fullwidth"> <p><center><strong>From:{st_date} To: {en_date}</strong></center></p> <thead> <tr> <th>Sl No</th> <th>Participant Name</th> <th>Enroll No</th> <th>Class</th> <th>Event</th> </tr> </thead> <tbody> <tr each="{a, i in reportData}"> <td>{i+1}</td> <td>{a.student_name}</td> <td>{a.enroll_number}</td> <td>{a.standard}</td> <td>{a.event_name}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.loading = false;
      flatpickr(".date", {
	    allowInput: true,
        dateFormat: "d/m/Y",
  		})
      self.update();
    })

    self.on("unmount", function(){
      activityReportStore.off('read_activity_date_wise_report_changed',ReadStudentEventReportChanged)
    })

    self.getData = () => {
      var startDate = document.getElementById("start_date").value;
      var endDate = document.getElementById("end_date").value;
    	if(!self.refs.start_date.value){
        toastr.info("Please enter From Date and try again")
      	}else if(!self.refs.end_date.value){
      	toastr.info("Please enter To Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
          toastr.info("Please enter To Date Grater Than From Date")
        }else{
    	    var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          self.loading = true
          activityReportStore.trigger('read_student_event_report', obj)
          console.log(obj)
        }
    }

    self.csvExport = () => {
        var startDate = document.getElementById("start_date").value;
        var endDate = document.getElementById("end_date").value;

        if(!self.refs.start_date.value){
        toastr.info("Please enter Start Date and try again")
      	}else if(!self.refs.end_date.value){
      	toastr.info("Please enter End Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
          toastr.info("Please enter To Date Grater Than From Date")
        }else{
    	    var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          activityReportStore.trigger('csv_student_event_report', obj)
        }
    }

    activityReportStore.on('read_student_event_report_changed',ReadStudentEventReportChanged)
    function ReadStudentEventReportChanged(student_event_report){
      self.reportData=[];
      self.reportData = student_event_report
      if(self.reportData.length==0){
      	toastr.info("No Data Found")
      }
      self.st_date = self.refs.start_date.value
      self.en_date = self.refs.end_date.value
      self.loading = false;
      self.update();
    }
});
riot.tag2('admin-report', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_admin_report == \'student-summary-report\'}" href="#/admin-report/student-summary-report"> <span>Student Summary</span> </a> </p> <p class="control"> <a class="button {is-active: selected_admin_report == \'student-strength-report\'}" href="#/admin-report/student-strength-report"> <span>Student Strength</span> </a> </p> <p class="control"> <a class="button {is-active: selected_admin_report == \'student-category-summary-report\'}" href="#/admin-report/student-category-summary-report"> <span>Category Summary</span> </a> </p> <p class="control"> <a class="button {is-active: selected_admin_report == \'student-category-strength-report\'}" href="#/admin-report/student-category-strength-report"> <span>Category Strength</span> </a> </p> <p class="control"> <a class="button {is-active: selected_admin_report == \'student-religion-strength-report\'}" href="#/admin-report/student-religion-strength-report"> <span>Religion Strength</span> </a> </p> <p class="control"> <a class="button {is-active: selected_admin_report == \'student-group-report\'}" href="#/admin-report/student-group-report"> <span>Group Report</span> </a> </p> <p class="control"> <a class="button {is-active: selected_admin_report == \'student-house-report\'}" href="#/admin-report/student-house-report"> <span>House Report</span> </a> </p> <p class="control"> <a class="button {is-active: selected_admin_report == \'student-class-teacher-report\'}" href="#/admin-report/student-class-teacher-report"> <span>Class Teacher</span> </a> </p> <p class="control"> <a class="button {is-active: selected_admin_report == \'student-blood-group-report\'}" href="#/admin-report/student-blood-group-report"> <span>Blood Group</span> </a> </p> <p class="control"> <a class="button {is-active: selected_admin_report == \'new-admission-report\'}" href="#/admin-report/new-admission-report/new-admission-category-report"> <span>New Admission</span> </a> </p> </div> <div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_admin_report == \'new-admission-report\'}" href="#/admin-report/new-admission-report/new-admission-category-report"> <span>New Admission</span> </a> </p> <p class="control"> <a class="button {is-active: selected_admin_report == \'udise-report\'}" href="#/admin-report/udise-report"> <span>UDISE</span> </a> </p> </div> <div id="admin-report-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_admin_report')
    console.log(opts.selected_admin_report)
    if(!opts.selected_admin_report){
      self.selected_admin_report = 'student-summary'
    }else{
      self.selected_admin_report = opts.selected_admin_report
    }
});



riot.tag2('advance-by-class', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" id="standard_id" onchange="{getAdvanceData}"> <option each="{standards}" riot-value="{standard_id}">{standard}</option> <option value="-1">All</option> </select> </div> </div> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{getAdvanceData}"> GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Class Wise Advance Fees Detail</p> <p class="has-text-centered">Session: {sessionName}</p> <p class="has-text-centered">Class:{selectedClass}</p> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <tbody> <tr each="{cd, i in classWiseAdvanceFees}"> <td>{cd.SlNo}</td> <td>{cd.Class}</td> <td class="has-text-right">{cd.Apr}</td> <td class="has-text-right">{cd.May}</td> <td class="has-text-right">{cd.Jun}</td> <td class="has-text-right">{cd.Jul}</td> <td class="has-text-right">{cd.Aug}</td> <td class="has-text-right">{cd.Sep}</td> <td class="has-text-right">{cd.Oct}</td> <td class="has-text-right">{cd.Nov}</td> <td class="has-text-right">{cd.Dec}</td> <td class="has-text-right">{cd.Jan}</td> <td class="has-text-right">{cd.FebMar}</td> <td class="has-text-right">{cd.Total}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      flatpickr(".date", {
    	allowInput: true,
    	altFormat: "Y-m-d",
  		})
      self.readStandard()
      self.update();
    })

    self.on("unmount", function(){
      applyPlanStore.off('read_standard_changed',StandardChanged)
      feesReportStore.off('read_advance_classwise_changed',ReadAdvanceClasswiseChanged)
    })

   self.readStandard = () => {
       applyPlanStore.trigger('read_standards')
    }

    applyPlanStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()

    }

    self.getAdvanceData = () => {
    	console.log("standard = "+self.refs.standard_id.value)
    	if(self.refs.standard_id.value){
    	var obj={}
    	  obj.standard_id = self.refs.standard_id.value
          self.loading = true
          feesReportStore.trigger('read_advance_classwise', obj)
      }else{
      	toastr.info("Please select a class")
      }
    }

    feesReportStore.on('read_advance_classwise_changed',ReadAdvanceClasswiseChanged)
    function ReadAdvanceClasswiseChanged(classWiseAdvanceFees, session_name){
      self.grand_total = 0
      self.classWiseAdvanceFees = []
      self.classWiseAdvanceFees = classWiseAdvanceFees
      self.sessionName = session_name

          self.selectedClass = $("#standard_id option:selected").text()
          self.loading = false

      self.update()
    }
});
riot.tag2('advance-fees', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="date input" id="start_date" ref="start_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="date input" id="end_date" ref="end_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{advanceFeesReport}"> GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Advance Fees Report</p> <p class="has-text-centered">Session: {sessionName}</p> <p class="has-text-centered">{fromSelectedDate} - {toSelectedDate}</p> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th class="slNo">#</th> <th>Enrol No.</th> <th>Student\'s Name</th> <th>Class</th> <th>Month</th> <th>Fee</th> <th>Scholarship</th> <th>Amount</th> </tr> </thead> <tbody> <tr each="{cd, i in advanceFees}"> <td>{i + 1}</td> <td>{cd.enroll_number}</td> <td>{cd.name}</td> <td>{cd.standard}</td> <td>{cd.fee_slip_name}</td> <td class="has-text-right amount">{cd.amount_due}</td> <td class="has-text-right amount">{cd.scholorship_amount}</td> <td class="has-text-right amount">{cd.total}</td> </tr> <tr> <th class="has-text-right" colspan="5">Grand Total</th> <th class="has-text-right amount">{total_amount}</th> <th class="has-text-right amount">{total_scholarship}</th> <th class="has-text-right amount">{grand_total}</th> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      flatpickr(".date", {
    	allowInput: true,
    	altFormat: "Y-m-d",
  		})
      self.update();
    })

    self.on("unmount", function(){
      feesReportStore.off('read_advanced_fees_changed',ReadAdvancedFeesChanged)
    })

    self.advanceFeesReport = () => {
    	var startDate = document.getElementById("start_date").value
    	var endDate = document.getElementById("end_date").value
    	if(!self.refs.start_date.value){
    		toastr.info("Pleae enter From Date and try again")
    	}else if(!self.refs.end_date.value){
    		toastr.info("Pleae enter End Date and try again")
    	}else if((Date.parse(startDate)> Date.parse(endDate))){
           toastr.info("From date can't be greater")
    	}else{
    	var obj={}
          obj['start_date']=self.refs.start_date.value
          obj['end_date']=self.refs.end_date.value

          self.loading = true
          feesReportStore.trigger('read_early_fees_payer', obj)
        }
    }

    feesReportStore.on('read_advanced_fees_changed',ReadAdvancedFeesChanged)
    function ReadAdvancedFeesChanged(advanceFees, session_name){
      self.grand_total = 0
      self.total_amount = 0
      self.total_scholarship = 0
      self.advanceFees = []
      self.advanceFees = advanceFees
       self.advanceFees.map(c => {

          self.grand_total +=Number(c.total)
          self.total_amount +=Number(c.amount_due)
          self.total_scholarship +=Number(c.scholorship_amount)
      })
        self.sessionName = session_name
       self.fromSelectedDate = self.refs.start_date.value
       self.toSelectedDate = self.refs.end_date.value
       self.loading = false
      self.update()
    }
});
riot.tag2('alumni-setting', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_master == \'alumni\'}" href="#/alumni-setting/alumni"> <span>Alumni</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'aprrove-alumni\'}" href="#/alumni-setting/aprrove-alumni"> <span>Approve Alumni</span> </a> </p> </div> <div id="alumni-setting-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_master')
    console.log(opts.selected_master)
    if(!opts.selected_master){
      self.selected_master = 'alumni'
    }else{
      self.selected_master = opts.selected_master
    }
});
riot.tag2('alumni', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{alumni_view ==\'show_alumni\'}"> <div class="level"> <div class="level-left"> <h2 class="title is-size-5" style="color: #ff3860;">Alumni Management Console </h2> </div> <div class="level-right"> <button class="button is-primary has-text-weight-bold ml5" onclick="{showAlumniField}" title="Setting"> <i class="fa fa-wrench" aria-hidden="true"></i> </button> <button class="button is-link has-text-weight-bold ml5" onclick="{getData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-success has-text-weight-bold ml5" onclick="{downloadCSV}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> </div> </div> <div style=" overflow-x: scroll;" class="table-border-hide"> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <thead> <tr> <th class="slno">SL</th> <th show="{view_name==\'show_name\'}">Name</th> <th show="{view_email==\'show_email\'}">Email</th> <th show="{view_address==\'show_address\'}">Address</th> <th show="{view_residence_city==\'show_residence_city\'}">City</th> <th show="{view_residence_state==\'show_residence_state\'}">State</th> <th show="{view_residence_country==\'show_residence_country\'}">Country</th> <th show="{view_residence_zip==\'show_residence_zip\'}">Zip</th> <th show="{view_batch_year==\'show_batch_year\'}">Batch Year</th> <th show="{view_mobile==\'show_mobile\'}">Mobile</th> <th show="{view_fax==\'show_fax\'}">Fax</th> <th show="{view_approved==\'show_approved\'}">Approved</th> <th show="{view_approval_date==\'show_approval_date\'}">Approval Date</th> <th show="{view_fees==\'show_fees\'}">Fees</th> <th show="{view_creation_date==\'show_creation_date\'}">Submission Date</th> <th class="has-text-right no-print" style="width:100px;"></th> </tr> </thead> <tbody> <tr each="{c, i in ApprovedAlumniData}"> <td>{i+1}</td> <td show="{view_name==\'show_name\'}">{c.name}</td> <td show="{view_email==\'show_email\'}">{c.email}</td> <td show="{view_address==\'show_address\'}">{c.address}</td> <td show="{view_residence_city==\'show_residence_city\'}">{c.residence_city}</td> <td show="{view_residence_state==\'show_residence_state\'}">{c.residence_state}</td> <td show="{view_residence_country==\'show_residence_country\'}">{c.residence_country}</td> <td show="{view_residence_zip==\'show_residence_zip\'}">{c.residence_zip}</td> <td show="{view_batch_year==\'show_batch_year\'}">{c.batch_year}</td> <td show="{view_mobile==\'show_mobile\'}">{c.mobile}</td> <td show="{view_fax==\'show_fax\'}">{c.fax}</td> <td show="{view_approved==\'show_approved\'}">{c.approved}</td> <td show="{view_approval_date==\'show_approval_date\'}">{c.approval_date}</td> <td show="{view_fees==\'show_fees\'}">{c.fees}</td> <td show="{view_creation_date==\'show_creation_date\'}">{c.creation_date}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span><a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"> <i class="fa fa-trash" aria-hidden="true"></i> </a></span> <span><a class="button is-small" onclick="{view_profile.bind(this, c.alumni_id)}" title="Profile"> <i class="fa fa-eye" aria-hidden="true"></i> </a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </div> </section> <div id="columnSetting" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Setting Configuaration</p> </header> <section class="modal-card-body"> <div each="{st, i in fieldList}" class="setting-detail"> <input class="checkbox" style="" type="checkbox" checked="{st.done}" id="{\'addStaffName\' + st.array_name}" onclick="{addCheckedColumn.bind(this,st)}">{st.field_name} </div> </section> <footer class="modal-card-foot"> <button class="button" id="item-modal-close" onclick="{closeCheckBoxModal}">Close</button> </footer> </div> </div> <section class=" is-fluid" show="{alumni_view ==\'alumni_profile\'}"> <div class="level no-print"> <div class="level-left"> </div> <div class="level-right"> <button class="button is-primary has-text-weight-bold " onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> <button class="button is-warning has-text-weight-bold ml5" onclick="{close_alumni_profile}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <div class="lebel"> <div class="level-left"> <p><b>Form No: {al.alumni_id} </b> </p> </div> </div> <table class="table is-fullwidth is-bordered"> <caption class="caption"> Alumni Profile</caption> <tr> <th colspan="8"><h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Personal Details</h3></th> </tr> <tr> <th>Name</th><td>{al.name}</td> <th>Batch Year</th><td>{al.batch_year}</td> <th>DOB</th><td>{al.dob}</td> <th>Enroll No</th><td>{al.enroll_no}</td> </tr> <tr> <th>Address</th> <td colspan="7">{al.address}</td> </tr> <tr> <th>Mobile</th><td>{al.mobile}</td> <th>Fax </th><td>{al.fax}</td> <th>Email</th><td>{al.email}</td> <th>Landline </th><td>{al.telephone}</td> </tr> <tr> <th>Name of spouse</th><td colspan="2">{al.spouse}</td> <th>Marriage Date</th><td colspan="4">{al.marriage_date}</td> </tr> <tr> <th colspan="8"><h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Relative who has studied in or who is currently studing at MCKV</h3></th> </tr> <tr> <th>Name</th><td>{al.relative_name}</td> <th>Relation </th><td>{al.relative_relation}</td> <th>Class & Batch</th><td colspan="3">{al.relative_class}</td> </tr> <tr> <th colspan="8"><h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Education Details</h3></th> </tr> <tr> <th>Exam</th> <th colspan="2">School/College</th> <th colspan="2">Board</th> <th>City </th> <th colspan="2">Division</th> </tr> <tr> <td>ICSE</td> <td colspan="2">{al.icse_school}</td> <td colspan="2">{al.icse_board}</td> <td>{al.icse_city}</td> <td colspan="2">{al.icse_division}</td> </tr> <tr> <td>ISC</td> <td colspan="2">{al.isc_school}</td> <td colspan="2">{al.isc_board}</td> <td>{al.isc_city}</td> <td colspan="2">{al.isc_division}</td> </tr> <tr> <td>Bachlor</td> <td colspan="2">{al.bachlor_school}</td> <td colspan="2">{al.bachlor_board}</td> <td>{al.bachlor_city}</td> <td colspan="2">{al.bachlor_division}</td> </tr> <tr> <td>Master</td> <td colspan="2">{al.master_school}</td> <td colspan="2">{al.master_board}</td> <td>{al.master_city}</td> <td colspan="2">{al.master_division}</td> </tr> <tr> <td>Other</td> <td colspan="2">{al.other_school}</td> <td colspan="2">{al.other_board}</td> <td>{al.other_city}</td> <td colspan="2">{al.other_division}</td> </tr> <tr> <th colspan="8"><h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Studying the following</h3></th> </tr> <tr> <th>Institution</th><td>{al.c_institute}</td> <th>Course </th><td>{al.c_course}</td> <th>Location</th><td colspan="3">{al.c_location}</td> </tr> <tr> <th>Year/ Semester</th><td>{al.c_year}</td> <th colspan="2">Specialization / Major </th><td colspan="4">{al.c_degree}</td> </tr> <tr> <th colspan="8"><h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Employment Details</h3></th> </tr> <tr> <th>Name of Company</th><td>{al.company_name}</td> <th>Nature of job / business </th><td>{al.nature_of_job}</td> <th>Designation</th><td colspan="3">{al.designation}</td> </tr> <tr> <th>Address</th><td colspan="7">{al.office_address}</td> </tr> <tr> <th colspan="8"><h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">MCKV friends who are still in touch</h3></th> </tr> <tr> <th>Name1</th><td>{al.f1_name1}</td> <th>Batch Year</th><td>{al.f1_batch_year}</td> <th>Stream</th><td>{al.f1_stream}</td> <th>Contact No</th><td>{al.f1_contactno}</td> </tr> <tr> <th>Name2</th><td>{al.f2_name2}</td> <th>Batch Year</th><td>{al.f2_batch_year}</td> <th>Stream</th><td>{al.f2_stream}</td> <th>Contact No</th><td>{al.f2_contactno}</td> </tr> <tr> <th>Name3</th><td>{al.f3_name3}</td> <th>Batch Year</th><td>{al.f3_batch_year}</td> <th>Stream</th><td>{al.f3_stream}</td> <th>Contact No</th><td>{al.f3_contactno}</td> </tr> <tr> <th colspan="8"><h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Intrested in becoming involved with any of the following</h3></th> </tr> <tr> <th colspan="7">Assisting the organization of alumni events in the school</th><td>{al.assisting_org_alumni}</td> </tr> <tr> <th colspan="7">Assisting current or future students with career choices</th><td>{al.assisting_student_career}</td> </tr> <tr> <th colspan="7">Servicing on the Alumni Association executive Committe</th><td>{al.assisting_executive_commitee}</td> </tr> <tr> <th colspan="8"><h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">News</h3></th> </tr> <tr> <td colspan="8">{al.news}</td> </tr> </table> </section>', '', '', function(opts) {
		var self = this
		self.st={}
		self.al={}
	    self.on("mount", function(){
	    	self.fieldList=[
		    	{field_name : "Name", array_name: "name"},
		    	{field_name : "Email", array_name: "email"},
		    	{field_name : "Address", array_name: "address"},
		    	{field_name : "City", array_name: "residence_city"},
			    {field_name : "State", array_name: "residence_state"},
			    {field_name : "Country", array_name: "residence_country"},
			    {field_name : "Zip", array_name: "residence_zip"},
			    {field_name : "Batch Year", array_name: "batch_year"},
			    {field_name : "Mobile", array_name: "mobile"},
			    {field_name : "Fax", array_name: "fax"},
			    {field_name : "Approved", array_name: "approved"},
			    {field_name : "Approval Date", array_name: "approval_date"},
			    {field_name : "Fees", array_name: "fees"},
			    {field_name : "Submission Date", array_name: "creation_date"}
    		]

	    	self.fieldList.map( q => {
		        if(q.array_name== "name"){
		          self.view_name="show_name"
		          q.done=true
		        }
		        if(q.array_name== "email"){
		          self.view_email="show_email"
		          q.done=true
		        }
		        if(q.array_name== "batch_year"){
		          self.view_batch_year ="show_batch_year"
		          q.done=true
		        }
		        if(q.array_name== "mobile"){
		          self.view_mobile= "show_mobile"
		          q.done=true
		        }
		        if(q.array_name== "fax"){
		          self.view_fax= "show_fax"
		          q.done=true
		        }
		        if(q.array_name== "approved"){
		          self.view_approved= "show_approved"
		          q.done=true
		        }
		        if(q.array_name== "approval_date"){
		          self.view_approval_date="show_approval_date"
		          q.done=true
		        }
		        if(q.array_name== "fees"){
		          self.view_fees="show_fees"
		          q.done=true
		        }
		        if(q.array_name== "creation_date"){
		          self.view_creation_date="show_creation_date"
		          q.done=true
		        }
      		})
	    	self.loading = false;
	    	flatpickr(".date", {
				allowInput: true,
	        	dateFormat: "d/m/Y",
	  		})
	  		self.alumni_view = 'show_alumni'
	  		self.title=''
	  		self.getData();
	    	self.update();
	    })

	    self.on("unmount", function(){
	      alumniStore.off('read_approved_alumni_changed',ReadApprovedAlumniChanged)
	      alumniStore.off('delete_alumni_changed',DeleteAlumniChanged)
	      alumniStore.off('read_alumni_profile_changed',AlumniProfileChanged)
	    })

	    self.showAlumniField = () =>{
       		$("#columnSetting").addClass("is-active")
    	}

    	self.closeCheckBoxModal=()=>{
    		$("#columnSetting").removeClass("is-active");
    	}

    	self.addCheckedColumn = (item, event) => {
		 	if(item!=''){
			 item.done=!event.item.st.done
		 	}
		 	self.fieldList.map( q => {
			    if(q.done==true && q.array_name== "name"){
			      self.view_name="show_name"
			    }
			    if(q.done==true && q.array_name== "email"){
			      self.view_email= "show_email"
			    }
			    if(q.done==true && q.array_name== "address"){
			      self.view_address="show_address"
			    }
			    if(q.done==true && q.array_name== "residence_city"){
			      self.view_residence_city ="show_residence_city"
			    }
			    if(q.done==true && q.array_name== "residence_state"){
			      self.view_residence_state= "show_residence_state"
			    }
			    if(q.done==true && q.array_name== "residence_country"){
			      self.view_residence_country= "show_residence_country"
			    }
			    if(q.done==true && q.array_name== "residence_zip"){
			      self.view_residence_zip= "show_residence_zip"
			    }
			    if(q.done==true && q.array_name== "batch_year"){
			      self.view_batch_year="show_batch_year"
			    }
			    if(q.done==true && q.array_name== "mobile"){
			      self.view_mobile="show_mobile"
			    }
			    if(q.done==true && q.array_name== "fax"){
			      self.view_fax="show_fax"
			    }
			    if(q.done==true && q.array_name== "approved"){
			      self.view_approved="show_approved"
			    }
			    if(q.done==true && q.array_name== "fees"){
			      self.view_fees="show_fees"
			    }
			    if(q.done==true && q.array_name== "creation_date"){
			      self.view_creation_date="show_creation_date"
			    }
			    if(q.done==true && q.array_name== "approval_date"){
			      self.view_approval_date="show_approval_date"
			    }

			    if(q.done==false && q.array_name== "name"){
			      self.view_name=""
			    }
			    if(q.done==false && q.array_name== "email"){
			      self.view_email= ""
			    }
			    if(q.done==false && q.array_name== "address"){
			      self.view_address =""
			    }
			    if(q.done==false && q.array_name== "residence_city"){
			      self.view_residence_city =""
			    }
			    if(q.done==false && q.array_name== "residence_state"){
			      self.view_residence_state =""
			    }
			    if(q.done==false && q.array_name== "residence_country"){
			      self.view_residence_country= ""
			    }
			    if(q.done==false && q.array_name== "residence_zip"){
			      self.view_residence_zip= ""
			    }
			    if(q.done==false && q.array_name== "batch_year"){
			      self.view_batch_year= ""
			    }
			    if(q.done==false && q.array_name== "mobile"){
			      self.view_mobile= ""
			    }
			    if(q.done==false && q.array_name== "fax"){
			      self.view_fax= ""
			    }
			    if(q.done==false && q.array_name== "approved"){
			      self.view_approved= ""
			    }
			    if(q.done==false && q.array_name== "fees"){
			      self.view_fees= ""
			    }
			    if(q.done==false && q.array_name== "creation_date"){
			      self.view_creation_date= ""
			    }
			    if(q.done==false && q.array_name== "approval_date"){
			      self.view_approval_date= ""
			    }
  			})
  		}

	    self.getData = () => {
          self.loading = true
          alumniStore.trigger('read_approved_alumni')
        }

    	self.cancelOperation = (c) => {
      		self.ApprovedAlumniData.map(a => {
          		a.confirmDelete = false
          		a.confirmEdit = false
      		})
    	}
	    self.confirmDelete = (c) => {
	      self.ApprovedAlumniData.map(a => {
	        if(a.alumni_id != c.item.c.alumni_id){
	          a.confirmDelete = false
	        }else{
	          a.confirmDelete = true
	        }
	      })
	    }

	    self.delete = (c) => {
	      self.loading = true
	      alumniStore.trigger('delete_alumni', c.item.c.alumni_id)
	    }

	    alumniStore.on('read_approved_alumni_changed',ReadApprovedAlumniChanged)
	    function ReadApprovedAlumniChanged(alumni){
	      self.ApprovedAlumniData=[];
	      self.ApprovedAlumniData = alumni
	      if(self.ApprovedAlumniData.length==0){
	      	toastr.info("No Data Found")
	      }
	      self.loading = false;
	      self.update();
	    }

	    self.view_profile = (c,a) => {
	    	self.alumni_id = c
	    	self.alumni_view = 'alumni_profile'
	    	alumniStore.trigger('read_alumni_profile', self.alumni_id)
   		}

   		self.close_alumni_profile = () => {
    		self.alumni_view = 'show_alumni'
    	}

    	alumniStore.on('delete_alumni_changed',DeleteAlumniChanged)
    	function DeleteAlumniChanged(){
      		self.getData()
      		self.loading = false
    	}

    	alumniStore.on('read_alumni_profile_changed',AlumniProfileChanged)
    	function AlumniProfileChanged(alumni_profile_details){
	    	self.al=alumni_profile_details[0]
	    	self.alumni_profile_details = alumni_profile_details

	      	self.update()
    	}

});
riot.tag2('applicant-detail', '<loading-bar if="{loading}"></loading-bar> <print-header></print-header> <section class=" is-fluid" show="{interviewed_candidate_view ==\'show_interviewed_candidate\'}"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Interviewee List</h2> <div class="level box no-print"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="input date" ref="start_date" id="start_date" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="input date" ref="end_date" id="end_date" type="text" readonly="readonly"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getData}"> GO </button> </div> </div> </div> <div class="level-right"> <div class="control"> <input class="input" ref="searchApplicantDetail" onkeyup="{filterApplicantDetail}" type="text" placeholder="Search By Enroll No or Name"> </div> <button class="button is-primary has-text-weight-bold ml5" onclick="{showStaffField}" title="Setting"> <i class="fa fa-wrench" aria-hidden="true"></i> </button> <button class="button is-link has-text-weight-bold ml5" onclick="{getData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-success has-text-weight-bold ml5" onclick="{csvExport}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <a class="button is-primary has-text-weight-bold ml5" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </a> </div> </div> <div style=" overflow-x: scroll;" class="table-border-hide"> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <thead> <tr> <th>Sl No</th> <th>Applicant No</th> <th show="{view_name==\'show_name\'}">Name</th> <th show="{view_post_applied==\'show_post_applied\'}">Post Applied</th> <th show="{view_subject_taught==\'show_subject_taught\'}">Subject Taught</th> <th show="{view_class_taught==\'show_class_taught\'}">Class Taught</th> <th show="{view_dob==\'show_dob\'}">DOB</th> <th show="{view_age==\'show_age\'}">Age</th> <th show="{view_sex==\'show_sex\'}">Sex</th> <th show="{view_father_name==\'show_father_name\'}">Father\'s Name</th> <th show="{view_husband_name==\'show_husband_name\'}">Husband\'s Name</th> <th show="{view_marital_status==\'show_marital_status\'}">Marital Status</th> <th show="{view_mobile==\'show_mobile\'}">Marital Status</th> <th show="{view_email==\'show_email\'}">Email </th> <th show="{view_phone_office==\'show_phone_office\'}">Phone Office </th> <th show="{view_phone_residence==\'show_phone_residence\'}">Phone Residence </th> <th show="{view_p_address==\'show_p_address\'}"> Permanent Address </th> <th show="{view_address==\'show_address\'}"> Correspondence Address </th> <th show="{view_bed_institution==\'show_bed_institution\'}">B.Ed Institution</th> <th show="{view_bed_college==\'show_bed_college\'}">B.Ed College</th> <th show="{view_bed_year==\'show_bed_year\'}">B.Ed Year</th> <th show="{view_bed_subject==\'show_bed_subject\'}">B.Ed Subject</th> <th show="{view_bed_marks==\'show_bed_marks\'}">B.Ed Marks</th> <th show="{view_bed_remarks==\'show_bed_remarks\'}">B.Ed Remarks</th> <th show="{view_ttc_institution==\'show_ttc_institution\'}">TTC Institution</th> <th show="{view_ttc_college==\'show_ttc_college\'}">TTC College</th> <th show="{view_ttc_year==\'show_ttc_year\'}">TTC Year</th> <th show="{view_ttc_subject==\'show_ttc_subject\'}">TTC Subject</th> <th show="{view_ttc_marks==\'show_ttc_marks\'}">TTC Marks</th> <th show="{view_ttc_remarks==\'show_ttc_remarks\'}">TTC Remarks</th> <th show="{view_pg_institution==\'show_pg_institution\'}">PG Institution</th> <th show="{view_pg_college==\'show_pg_college\'}">PG College</th> <th show="{view_pg_year==\'show_pg_year\'}">PG Year</th> <th show="{view_pg_subject==\'show_pg_subject\'}">PG Subject</th> <th show="{view_pg_marks==\'show_pg_marks\'}">PG Marks</th> <th show="{view_pg_remarks==\'show_pg_remarks\'}">PG Remarks</th> <th show="{view_xii_institution==\'show_xii_institution\'}">XII Institution</th> <th show="{view_xii_college==\'show_xii_college\'}">XII College</th> <th show="{view_xii_year==\'show_xii_year\'}">XII Year</th> <th show="{view_xii_subject==\'show_xii_subject\'}">XII Subject</th> <th show="{view_xii_marks==\'show_xii_marks\'}">XII Marks</th> <th show="{view_xii_remarks==\'show_xii_remarks\'}">XII Remarks</th> <th show="{view_x_institution==\'show_x_institution\'}">X Institution</th> <th show="{view_x_college==\'show_x_college\'}">X College</th> <th show="{view_x_year==\'show_x_year\'}">X Year</th> <th show="{view_x_subject==\'show_x_subject\'}">X Subject</th> <th show="{view_x_marks==\'show_x_marks\'}">X Marks</th> <th show="{view_x_remarks==\'show_x_remarks\'}">X Remarks</th> <th show="{view_g_institution==\'show_g_institution\'}">G Institution</th> <th show="{view_g_college==\'show_g_college\'}">G College</th> <th show="{view_g_year==\'show_g_year\'}">G Year</th> <th show="{view_g_subject==\'show_g_subject\'}">G Subject</th> <th show="{view_g_marks==\'show_g_marks\'}">G Marks</th> <th show="{view_g_remarks==\'show_g_remarks\'}">G Remarks</th> <th show="{view_degree1==\'show_degree1\'}">Degree 1</th> <th show="{view_university1==\'show_university1\'}">University 1</th> <th show="{view_marks1==\'show_marks1\'}">Marks 1</th> <th show="{view_year1==\'show_year1\'}">Year 1</th> <th show="{view_remarks1==\'show_remarks1\'}">Remarks 1</th> <th show="{view_degree2==\'show_degree2\'}">Degree 2</th> <th show="{view_university2==\'show_university2\'}">University 2</th> <th show="{view_marks2==\'show_marks2\'}">Marks 2</th> <th show="{view_year2==\'show_year2\'}">Year 2</th> <th show="{view_remarks2==\'show_remarks2\'}">Remarks 2</th> <th show="{view_degree3==\'show_degree3\'}">Degree 3</th> <th show="{view_university3==\'show_university3\'}">University 3</th> <th show="{view_marks3==\'show_marks3\'}">Marks 3</th> <th show="{view_year3==\'show_year3\'}">Year 3</th> <th show="{view_remarks3==\'show_remarks3\'}">Remarks 3</th> <th show="{view_school1==\'show_school1\'}">School 1</th> <th show="{view_designation1==\'show_designation1\'}">Designation 1</th> <th show="{view_class_taught1==\'show_class_taught1\'}">Class Taught 1</th> <th show="{view_subject_taught1==\'show_subject_taught1\'}">Subject Taught 1</th> <th show="{view_work_profile1==\'show_work_profile1\'}">Work Profile 1</th> <th show="{view_from_date1==\'show_from_date1\'}">From Date 1</th> <th show="{view_to_date1==\'show_to_date1\'}">To Date 1</th> <th show="{view_salary_drawn1==\'show_salary_drawn1\'}">Salary 1</th> <th show="{view_school2==\'show_school2\'}">School 2</th> <th show="{view_designation2==\'show_designation2\'}">Designation 2</th> <th show="{view_class_taught2==\'show_class_taught2\'}">Class Taught 2</th> <th show="{view_subject_taught2==\'show_subject_taught2\'}">Subject Taught 2</th> <th show="{view_work_profile2==\'show_work_profile2\'}">Work Profile 2</th> <th show="{view_from_date2==\'show_from_date2\'}">From Date 2</th> <th show="{view_to_date2==\'show_to_date2\'}">To Date 2</th> <th show="{view_salary_drawn2==\'show_salary_drawn2\'}">Salary 2</th> <th show="{view_school3==\'show_school3\'}">School 3</th> <th show="{view_designation3==\'show_designation3\'}">Designation 3</th> <th show="{view_class_taught3==\'show_class_taught3\'}">Class Taught 3</th> <th show="{view_subject_taught3==\'show_subject_taught3\'}">Subject Taught 3</th> <th show="{view_work_profile3==\'show_work_profile3\'}">Work Profile 3</th> <th show="{view_from_date3==\'show_from_date3\'}">From Date 3</th> <th show="{view_to_date3==\'show_to_date3\'}">To Date 3</th> <th show="{view_salary_drawn3==\'show_salary_drawn3\'}">Salary 3</th> <th show="{view_creation_date==\'show_creation_date\'}">Submission Date</th> <th show="{view_interview_call==\'show_interview_call\'}">Interview Call</th> <th class="has-text-right no-print" style="width:130px;"></th> </tr> </thead> <tbody> <tr each="{a, i in filteredApplicantDetail}"> <td>{i+1}</td> <td>{a.career_id}</td> <td show="{view_name==\'show_name\'}">{a.full_name}</td> <td show="{view_post_applied==\'show_post_applied\'}">{a.post_applied_for}</td> <td show="{view_subject_taught==\'show_subject_taught\'}">{a.subject_tobe_taught}</td> <td show="{view_class_taught==\'show_class_taught\'}">{a.class_tobe_taught}</td> <td show="{view_dob==\'show_dob\'}">{a.date_of_birth}</td> <td show="{view_age==\'show_age\'}">{a.age} years</td> <td show="{view_sex==\'show_sex\'}">{a.sex}</td> <td show="{view_father_name==\'show_father_name\'}">{a.father_name}</td> <td show="{view_husband_name==\'show_husband_name\'}">{a.husband_name}</td> <td show="{view_marital_status==\'show_marital_status\'}">{a.marital_status}</td> <td show="{view_mobile==\'show_mobile\'}">{a.mobile}</td> <td show="{view_email==\'show_email\'}">{a.email}</td> <td show="{view_phone_office==\'show_phone_office\'}">{a.phone_office}</td> <td show="{view_phone_residence==\'show_phone_residence\'}">{a.phone_residence}</td> <td show="{view_p_address==\'show_p_address\'}">{a.p_address}</td> <td show="{view_address==\'show_address\'}">{a.address}</td> <td show="{view_bed_institution==\'show_bed_institution\'}">{a.bed_institution}</td> <td show="{view_bed_college==\'show_bed_college\'}">{a.bed_college}</td> <td show="{view_bed_year==\'show_bed_year\'}">{a.bed_year}</td> <td show="{view_bed_subject==\'show_bed_subject\'}">{a.bed_subject}</td> <td show="{view_bed_marks==\'show_bed_marks\'}">{a.bed_marks}</td> <td show="{view_bed_remarks==\'show_bed_remarks\'}">{a.bed_remarks}</td> <td show="{view_ttc_institution==\'show_ttc_institution\'}">{a.ttc_institution}</td> <td show="{view_ttc_college==\'show_ttc_college\'}">{a.ttc_college}</td> <td show="{view_ttc_year==\'show_ttc_year\'}">{a.ttc_year}</td> <td show="{view_ttc_subject==\'show_ttc_subject\'}">{a.ttc_subject}</td> <td show="{view_ttc_marks==\'show_ttc_marks\'}">{a.ttc_marks}</td> <td show="{view_ttc_remarks==\'show_ttc_remarks\'}">{a.ttc_remarks}</td> <td show="{view_pg_institution==\'show_pg_institution\'}">{a.pg_institution}</td> <td show="{view_pg_college==\'show_pg_college\'}">{a.pg_college}</td> <td show="{view_pg_year==\'show_pg_year\'}">{a.pg_year}</td> <td show="{view_pg_subject==\'show_pg_subject\'}">{a.pg_subject}</td> <td show="{view_pg_marks==\'show_pg_marks\'}">{a.pg_marks}</td> <td show="{view_pg_remarks==\'show_pg_remarks\'}">{a.pg_remarks}</td> <td show="{view_xii_institution==\'show_xii_institution\'}">{a.xii_institution}</td> <td show="{view_xii_college==\'show_xii_college\'}">{a.xii_college}</td> <td show="{view_xii_year==\'show_xii_year\'}">{a.xii_year}</td> <td show="{view_xii_subject==\'show_xii_subject\'}">{a.xii_subject}</td> <td show="{view_xii_marks==\'show_xii_marks\'}">{a.xii_marks}</td> <td show="{view_xii_remarks==\'show_xii_remarks\'}">{a.xii_remarks}</td> <td show="{view_x_institution==\'show_x_institution\'}">{a.x_institution}</td> <td show="{view_x_college==\'show_x_college\'}">{a.x_college}</td> <td show="{view_x_year==\'show_x_year\'}">{a.x_year}</td> <td show="{view_x_subject==\'show_x_subject\'}">{a.x_subject}</td> <td show="{view_x_marks==\'show_x_marks\'}">{a.x_marks}</td> <td show="{view_x_remarks==\'show_x_remarks\'}">{a.x_remarks}</td> <td show="{view_g_institution==\'show_g_institution\'}">{a.g_institution}</td> <td show="{view_g_college==\'show_g_college\'}">{a.g_college}</td> <td show="{view_g_year==\'show_g_year\'}">{a.g_year}</td> <td show="{view_g_subject==\'show_g_subject\'}">{a.g_subject}</td> <td show="{view_g_marks==\'show_g_marks\'}">{a.g_marks}</td> <td show="{view_g_remarks==\'show_g_remarks\'}">{a.g_remarks}</td> <td show="{view_degree1==\'show_degree1\'}">{a.degree1}</td> <td show="{view_university1==\'show_university1\'}">{a.university1}</td> <td show="{view_marks1==\'show_marks1\'}">{a.marks1}</td> <td show="{view_year1==\'show_year1\'}">{a.year1}</td> <td show="{view_remarks1==\'show_remarks1\'}">{a.remarks1}</td> <td show="{view_degree2==\'show_degree2\'}">{a.degree2}</td> <td show="{view_university2==\'show_university2\'}">{a.university2}</td> <td show="{view_marks2==\'show_marks2\'}">{a.marks2}</td> <td show="{view_year2==\'show_year2\'}">{a.year2}</td> <td show="{view_remarks2==\'show_remarks2\'}">{a.remarks2}</td> <td show="{view_degree3==\'show_degree3\'}">{a.degree3}</td> <td show="{view_university3==\'show_university3\'}">{a.university3}</td> <td show="{view_marks3==\'show_marks3\'}">{a.marks3}</td> <td show="{view_year3==\'show_year3\'}">{a.year3}</td> <td show="{view_remarks3==\'show_remarks3\'}">{a.remarks3}</td> <td show="{view_school1==\'show_school1\'}">{a.school1}</td> <td show="{view_address1==\'show_address1\'}">{a.address1}</td> <td show="{view_designation1==\'show_designation1\'}">{a.designation1}</td> <td show="{view_class_taught1==\'show_class_taught1\'}">{a.class_taught1}</td> <td show="{view_subject_taught1==\'show_subject_taught1\'}">{a.subject_taught1}</td> <td show="{view_work_profile1==\'show_work_profile1\'}">{a.work_profile1}</td> <td show="{view_from_date1==\'show_from_date1\'}">{a.from_date1}</td> <td show="{view_to_date1==\'show_to_date1\'}">{a.to_date1}</td> <td show="{view_salary_drawn1==\'show_salary_drawn1\'}">{a.salary_drawn1}</td> <td show="{view_school2==\'show_school2\'}">{a.school2}</td> <td show="{view_address2==\'show_address2\'}">{a.address2}</td> <td show="{view_designation2==\'show_designation2\'}">{a.designation2}</td> <td show="{view_class_taught2==\'show_class_taught2\'}">{a.class_taught2}</td> <td show="{view_subject_taught2==\'show_subject_taught2\'}">{a.subject_taught2}</td> <td show="{view_work_profile2==\'show_work_profile2\'}">{a.work_profile2}</td> <td show="{view_from_date2==\'show_from_date2\'}">{a.from_date2}</td> <td show="{view_to_date2==\'show_to_date2\'}">{a.to_date2}</td> <td show="{view_salary_drawn2==\'show_salary_drawn2\'}">{a.salary_drawn2}</td> <td show="{view_school3==\'show_school3\'}">{a.school3}</td> <td show="{view_address3==\'show_address3\'}">{a.address3}</td> <td show="{view_designation3==\'show_designation3\'}">{a.designation3}</td> <td show="{view_class_taught3==\'show_class_taught3\'}">{a.class_taught3}</td> <td show="{view_subject_taught3==\'show_subject_taught3\'}">{a.subject_taught3}</td> <td show="{view_work_profile3==\'show_work_profile3\'}">{a.work_profile3}</td> <td show="{view_from_date3==\'show_from_date3\'}">{a.from_date3}</td> <td show="{view_to_date3==\'show_to_date3\'}">{a.to_date3}</td> <td show="{view_salary_drawn3==\'show_salary_drawn3\'}">{a.salary_drawn3}</td> <td show="{view_creation_date==\'show_creation_date\'}">{a.creation_date}</td> <td show="{view_interview_call==\'show_interview_call\'}">{a.interview_call}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{a.confirmDelete}"> <span show="{a.interview_call==⁗N⁗}"><a class="button is-small" onclick="{create_interview.bind(this, a.career_id)}" title="Call for interview"><i class="fa fa-users" aria-hidden="true"></i></a></span> <span><a class="button is-small" onclick="{view_profile.bind(this, a.career_id)}" title="Profile"> <i class="fa fa-eye" aria-hidden="true"></i></a></span> <span> <a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"> <i class="fa fa-trash" aria-hidden="true"></i> </a></span> </div> <div class="table-buttons" if="{a.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </div> </section> <div id="columnSetting" class="modal"> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Setting Configuaration</p> </header> <section class="modal-card-body"> <div each="{st, i in fieldList}" class="setting-detail"> <input class="checkbox" style="" type="checkbox" checked="{st.done}" id="{\'addStaffName\' + st.array_name}" onclick="{addCheckedColumn.bind(this,st)}">{st.field_name} </div> </section> <footer class="modal-card-foot"> <div class="control"> <input type="checkbox" id="checkAllCheckBox" onclick="{selectAllCheckBox}"><b>Check All</b> </div> <button class="button" id="item-modal-close" onclick="{closeCheckBoxModal}">Close</button> </footer> </div> </div> <div id="createInterviewModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Call for Interview</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="field"> <div class="control"> <label class="label">Interview Date</label> <input class="input date" ref="interview_date" type="text" readonly="readonly"> </div> </div> <div class="field"> <div class="control"> <label class="label" for="interview_time">Interview Time</label> <input class="input is-small" ref="interview_time" type="time"> </div> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-success" onclick="{CreateInterviewCall}">Submit</button> <button class="button is-danger" id="item-modal-close" onclick="{closecreateInterviewModal}">Cancel</button> </footer> </div> </div> <section class=" is-fluid" show="{interviewed_candidate_view ==\'applicant_profile\'}"> <div class="level no-print"> <div class="level-left"> </div> <div class="level-right"> <button class="button is-primary has-text-weight-bold " onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> <button class="button is-warning has-text-weight-bold ml5" onclick="{close_applicant_profile}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <center> <table class="table is-bordered career-profile-table"> <caption class="career-profile-caption">Applicant Profile</caption> </table> <h1 class="career-profile-h3 is-size-5">Personal Details</h1> <table class=" table is-bordered career-profile-table"> <tr> <th>Name</th> <td colspan="3" style="text-transform: capitalize;" class="profile-td">{st.first_name} {st.middle_name} {st.last_name}</td> <td style="width: 75px;" colspan="2" rowspan="6" class="profile-td"><div style="text-align: center;border: 1px solid #000;padding-top: 46px;margin-top:22px; height:150px;">Affix your recent passport size photograph<div> </td> </tr> <tr> <th class="profile-th">Father</th> <td colspan="3" class="profile-td">{st.f_first_name} {st.f_middle_name} {st.f_last_name} </td> <tr> <th class="profile-th">Husband Name</th> <td colspan="3" class="profile-td">{st.husband_first_name} {st.husband_middle_name} {st.husband_last_name} </td> </tr> <tr> <th class="profile-th">Sex</th> <td class="profile-td">{st.sex}</td> <th class="profile-th">Marital Status</th> <td class="profile-td">{st.marital_status}</td> </tr> <tr> <th class="profile-th">DOB</th> <td class="profile-td">{st.date_of_birth} </td> <th class="profile-th">Age</th> <td class="profile-td">{st.age} </td> </tr> <tr> <th class="profile-th">Post Applied</th> <td class="profile-td">{st.post_applied_for}</td> <th class="profile-th">Subject Taught</th> <td class="profile-td">{st.subject_tobe_taught}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Correspondence Address</h1> <table class="table is-bordered career-profile-table"> <tr> <th class="profile-th">Address Line 1</th> <td colspan="5" class="profile-td">{st.address_line1}</td> </tr> <tr> <th class="profile-th">Address Line 2</th> <td colspan="5" class="profile-td">{st.address_line2}</td> </tr> <tr> <th class="profile-th">City</th> <td class="profile-td">{st.city}</td> <th class="profile-th">Zip</th> <td class="profile-td">{st.zip}</td> <th class="profile-th">State</th> <td class="profile-td">{st.state}</td> </tr> <tr> <th class="profile-th">Country</th> <td colspan="5" class="profile-td">{st.country}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Permanent Address</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Address Line 1</th> <td colspan="5">{st.p_address_line1}</td> </tr> <tr> <th>Address Line 2</th> <td colspan="5">{st.p_address_line2}</td> </tr> <tr> <th>City</th> <td>{st.p_city}</td> <th>Zip</th> <td>{st.p_zip}</td> <th>State</th> <td>{st.p_state}</td> </tr> <tr> <th>Country</th> <td colspan="5">{st.p_country}</td> </tr> <tr> </table> <h1 class="career-profile-h3 is-size-5">Contact Information</h1> <table class="table is-bordered career-profile-table"> <tr> <th style="width:80px;">Mobile</th> <td style="width:100px;">{st.mobile}</td> <th style="width:80px;">Email</th> <td>{st.email}</td> <th style="width:80px;">Phone (O)</th> <td>{st.phone_office} </td> </tr> </tr> <th>phone (R)</th><td colspan="5">{st.phone_residence}</td> </tr> <tr> </table> <h1 class="career-profile-h3 is-size-5">Academic Qualification (B. Ed)</h1><br> <table class="table is-bordered career-profile-table"> <tr> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> <tr> <td>{st.bed_institution} </td> <td>{st.bed_college} </td> <td>{st.bed_year} </td> <td>{st.bed_subject} </td> <td>{st.bed_marks} </td> <td>{st.bed_remarks} </td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Montessori / T.T.C</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> <tr> <td>{st.ttc_institution}</td> <td>{st.ttc_college} </td> <td>{st.ttc_year} </td> <td>{st.ttc_subject} </td> <td>{st.ttc_marks} </td> <td>{st.ttc_remarks} </td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Post Graduation</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Degree</th> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> </tr> <td>{st.pg_degree}</td> <td>{st.pg_institution}</td> <td>{st.pg_college}</td> <td>{st.pg_year}</td> <td>{st.pg_subject}</td> <td>{st.pg_marks}</td> <td>{st.pg_remarks}</td> </tr> <tr> </table> <h1 class="career-profile-h3 is-size-5">Graduation</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Degree</th> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> <tr> <td>{st.g_degree}</td> <td>{st.g_institution}</td> <td>{st.g_college}</td> <td>{st.g_year}</td> <td>{st.g_subject}</td> <td>{st.g_marks}</td> <td>{st.g_remarks}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">XII</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Stream</th> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> </tr> <td></td> <td>{st.xii_institution}</td> <td>{st.xii_college}</td> <td>{st.xii_year}</td> <td>{st.xii_subject}</td> <td>{st.xii_marks}</td> <td>{st.xii_remarks}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">X</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> </tr> <td>{st.x_institution}</td> <td>{st.x_college}</td> <td>{st.x_year}</td> <td>{st.x_subject}</td> <td>{st.x_marks}</td> <td>{st.x_remarks}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Other Qualification</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Sl.</th> <th>Degree/ Certificates</th> <th>University/Board/Institution</th> <th>Marks (%)</th> <th>Year</th> <th>Remarks</th> </tr> <tr> <td>1</td> <td>{st.degree1}</td> <td>{st.university1}</td> <td>{st.marks1}</td> <td>{st.year1}</td> <td>{st.remarks1}</td> </tr> <tr> <td>2</td> <td>{st.degree2}</td> <td>{st.university2}</td> <td>{st.marks2}</td> <td>{st.year2}</td> <td>{st.remarks2}</td> </tr> <tr> <td>3</td> <td>{st.degree3}</td> <td>{st.university3}</td> <td>{st.marks3}</td> <td>{st.year3}</td> <td>{st.remarks3}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Work Experience</h1> <table class="table is-bordered career-profile-table"> <tr> <th class="profile-th">Sl.</th> <th class="profile-th">School/Institution</th> <th class="profile-th">Address</th> <th class="profile-th">Designation</th> <th class="profile-th">Class Taught</th> <th class="profile-th">Subject Taught</th> <th class="profile-th">Work Profile</th> <th class="profile-th">From</th> <th class="profile-th">To</th> <th class="profile-th">Salary</th> </tr> <tr> <td class="profile-td">1</td> <td class="profile-td">{st.school1}</td> <td class="profile-td">{st.address1} </td> <td class="profile-td">{st.designation1} </td> <td class="profile-td">{st.class_taught1} </td> <td class="profile-td">{st.subject_taught1} </td> <td class="profile-td">{st.work_profile1} </td> <td class="profile-td">{st.from_date1} </td> <td class="profile-td">{st.to_date1} </td> <td class="profile-td">{st.salary_drawn1} </td> </tr> <tr> <td class="profile-td">2</td> <td class="profile-td">{st.school2} </td> <td class="profile-td">{st.address2} </td> <td class="profile-td">{st.designation2} </td> <td class="profile-td">{st.class_taught2} </td> <td class="profile-td">{st.subject_taught2} </td> <td class="profile-td">{st.work_profile2} </td> <td class="profile-td">{st.from_date2} </td> <td class="profile-td">{st.to_date2} </td> <td class="profile-td">{st.salary_drawn2} </td> </tr> <tr> <td class="profile-td">3</td> <td class="profile-td">{st.school3} </td> <td class="profile-td">{st.address3} </td> <td class="profile-td">{st.designation3} </td> <td class="profile-td">{st.class_taught3} </td> <td class="profile-td">{st.subject_taught3} </td> <td class="profile-td">{st.work_profile3} </td> <td class="profile-td">{st.from_date3} </td> <td class="profile-td">{st.to_date3} </td> <td class="profile-td">{st.salary_drawn3} </td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Special Achivements</h1> <table class="table is-bordered career-profile-table"> <tr> <td colspan="6">{st.s_achievements}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">References (If any)</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Sl.</th> <th>Name</th> <th>Organisation</th> <th>Designation</th> <th>Phone</th> <th>Mobile</th> <th>Email</th> </tr> <tr> <td>1</td> <td>{st.r_name}</td> <td>{st.r_organisation}</td> <td>{st.r_designation}</td> <td>{st.r_phone}</td> <td>{st.r_mobile}</td> <td>{st.r_email}</td> </tr> <tr> <td>2</td> <td>{st.r1_name}</td> <td>{st.r1_organisation}</td> <td>{st.r1_designation}</td> <td>{st.r1_phone}</td> <td>{st.r1_mobile}</td> <td>{st.r1_email}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5" style="margin-top: 20px;">Declaration</h1> <p style="width:860px;width: 860px;text-align: justify;padding-top: 15px;"> I hereby declare that all statements made in this application are true, complete and correct to the best of my knowledge and belief. I understand that in the event of any information being found untrue or incorrect at any stage, my candidature is liable to be cancelled. </p> <p style="width:860px;width: 860px;text-align:right;padding-top:25px;"> Signature </p> <div class="page-break"></div> </center> </section>', '', '', function(opts) {
	var self = this
	self.st={}
    self.on("mount", function(){
      self.loading = false;

      self.fieldList=[
    	{field_name : "Name", array_name: "full_name"},
    	{field_name : "Post Applied", array_name: "post_applied_for"},
    	{field_name : "Subject Taught", array_name: "subject_tobe_taught"},
    	{field_name : "Class Taught", array_name: "class_tobe_taught"},
      {field_name : "DOB", array_name: "date_of_birth"},
      {field_name : "Age", array_name: "age"},
      {field_name : "Sex", array_name: "sex"},
      {field_name : "Father's Name", array_name: "father_name"},
      {field_name : "Husband's Name", array_name: "husband_name"},
      {field_name : "Marital Status", array_name: "marital_status"},
      {field_name : "Mobile", array_name: "mobile"},
      {field_name : "Email", array_name: "email"},
      {field_name : "Phone Office", array_name: "phone_office"},
      {field_name : "Phone Residence", array_name: "phone_residence"},
      {field_name : "Permanent Address", array_name: "p_address"},
      {field_name : "Correspondence Address", array_name: "address"},
      {field_name : "B.Ed Institution", array_name: "bed_institution"},
      {field_name : "B.Ed College", array_name: "bed_college"},
      {field_name : "B.Ed Year", array_name: "bed_year"},
      {field_name : "B.Ed Subject", array_name: "bed_subject"},
      {field_name : "B.Ed Marks", array_name: "bed_marks"},
      {field_name : "B.Ed Remarks", array_name: "bed_remarks"},
      {field_name : "TTC Institution", array_name: "ttc_institution"},
      {field_name : "TTC College", array_name: "ttc_college"},
      {field_name : "TTC Year", array_name: "ttc_year"},
      {field_name : "TTC Subject", array_name: "ttc_subject"},
      {field_name : "TTC Marks", array_name: "ttc_marks"},
      {field_name : "TTC Remarks", array_name: "ttc_remarks"},
      {field_name : "PG Institution", array_name: "pg_institution"},
      {field_name : "PG College", array_name: "pg_college"},
      {field_name : "PG Year", array_name: "pg_year"},
      {field_name : "PG Subject", array_name: "pg_subject"},
      {field_name : "PG Marks", array_name: "pg_marks"},
      {field_name : "PG Remarks", array_name: "pg_remarks"},
      {field_name : "XII Institution", array_name: "xii_institution"},
      {field_name : "XII College", array_name: "xii_college"},
      {field_name : "XII Year", array_name: "xii_year"},
      {field_name : "XII Subject", array_name: "xii_subject"},
      {field_name : "XII Marks", array_name: "xii_marks"},
      {field_name : "XII Remarks", array_name: "xii_remarks"},
      {field_name : "X Institution", array_name: "x_institution"},
      {field_name : "X College", array_name: "x_college"},
      {field_name : "X Year", array_name: "x_year"},
      {field_name : "X Subject", array_name: "x_subject"},
      {field_name : "X Marks", array_name: "x_marks"},
      {field_name : "X Remarks", array_name: "x_remarks"},
      {field_name : "G Institution", array_name: "g_institution"},
      {field_name : "G College", array_name: "g_college"},
      {field_name : "G Year", array_name: "g_year"},
      {field_name : "G Subject", array_name: "g_subject"},
      {field_name : "G Marks", array_name: "g_marks"},
      {field_name : "G Remarks", array_name: "g_remarks"},
      {field_name : "Degree 1", array_name: "degree1"},
      {field_name : "University 1", array_name: "university1"},
      {field_name : "Marks 1", array_name: "marks1"},
      {field_name : "Year 1", array_name: "year1"},
      {field_name : "Remarks 1", array_name: "remarks1"},
      {field_name : "Degree 2", array_name: "degree2"},
      {field_name : "University 2", array_name: "university2"},
      {field_name : "Marks 2", array_name: "marks2"},
      {field_name : "Year 2", array_name: "year2"},
      {field_name : "Remarks 2", array_name: "remarks2"},
      {field_name : "Degree 3", array_name: "degree3"},
      {field_name : "University 3", array_name: "university3"},
      {field_name : "Marks 3", array_name: "marks3"},
      {field_name : "Year 3", array_name: "year3"},
      {field_name : "Remarks 3", array_name: "remarks3"},
      {field_name : "School 1", array_name: "school1"},
      {field_name : "Address 1", array_name: "address1"},
      {field_name : "Designation 1", array_name: "designation1"},
      {field_name : "Class Taught 1", array_name: "class_taught1"},
      {field_name : "Subject Taught 1", array_name: "subject_taught1"},
      {field_name : "Work Profile 1", array_name: "work_profile1"},
      {field_name : "From Date 1", array_name: "from_date1"},
      {field_name : "To Date 1", array_name: "to_date1"},
      {field_name : "Salary 1", array_name: "salary_drawn1"},
      {field_name : "School 2", array_name: "school2"},
      {field_name : "Address 2", array_name: "address2"},
      {field_name : "Designation 2", array_name: "designation2"},
      {field_name : "Class Taught 2", array_name: "class_taught2"},
      {field_name : "Subject Taught 2", array_name: "subject_taught2"},
      {field_name : "Work Profile 2", array_name: "work_profile2"},
      {field_name : "From Date 2", array_name: "from_date2"},
      {field_name : "To Date 2", array_name: "to_date2"},
      {field_name : "Salary 2", array_name: "salary_drawn2"},
      {field_name : "School 3", array_name: "school3"},
      {field_name : "Address 3", array_name: "address3"},
      {field_name : "Designation 3", array_name: "designation3"},
      {field_name : "Class Taught 3", array_name: "class_taught3"},
      {field_name : "Subject Taught 3", array_name: "subject_taught3"},
      {field_name : "Work Profile 3", array_name: "work_profile3"},
      {field_name : "From Date 3", array_name: "from_date3"},
      {field_name : "To Date 3", array_name: "to_date3"},
      {field_name : "Salary 3", array_name: "salary_drawn3"},
      {field_name : "Submission Date", array_name: "creation_date"},
    	{field_name : "Interview Call", array_name: "interview_call"}

    ]

      self.fieldList.map( q => {
        if(q.array_name== "full_name"){
          self.view_name="show_name"
          q.done=true
        }
        if(q.array_name== "post_applied_for"){
          self.view_post_applied="show_post_applied"
          q.done=true
        }
        if(q.array_name== "interview_call"){
          self.view_interview_call="show_interview_call"
          q.done=true
        }
        if(q.array_name== "subject_tobe_taught"){
          self.view_subject_taught= "show_subject_taught"
          q.done=true
        }
        if(q.array_name== "class_tobe_taught"){
          self.view_class_taught ="show_class_taught"
          q.done=true
        }
        if(q.array_name== "date_of_birth"){
          self.view_dob= "show_dob"
          q.done=true
        }
        if(q.array_name== "age"){
          self.view_age= "show_age"
          q.done=true
        }
        if(q.array_name== "sex"){
          self.view_sex= "show_sex"
          q.done=true
        }
        if(q.array_name== "creation_date"){
          self.view_creation_date="show_creation_date"
          q.done=true
        }
      })
      flatpickr(".date", {
	    allowInput: true,
        dateFormat: "d/m/Y",
  		})
      self.role = getCookie('role')
      self.interviewed_candidate_view = 'show_interviewed_candidate'
      self.update();
    })

    self.on("unmount", function(){
      careerStore.off('read_applicant_detail_changed',ReadApplicantDetailChanged)
      careerStore.off('read_applicant_profile_changed',ReadApplicantProfileChanged)
      careerStore.off('create_interview_call_changed',CreateInterviewCallChanged)
      careerStore.off('delete_applicant_detail_changed',DeleteApplicantDetailChanged)
    })

    self.showStaffField = () =>{
       $("#columnSetting").addClass("is-active")

    }

    self.closeCheckBoxModal=()=>{
    	 $("#columnSetting").removeClass("is-active");
    }

    self.selectAllCheckBox = () => {
    	console.log("checkAlll")
      if($('#checkAllCheckBox').is(":checked")){
        self.fieldList.map(i=>{
        	console.log(i)
          i.done = true;
          $('addStaffName'+i.array_name).prop('checked', true);
        })
      }else{
        self.fieldList.map(i=>{
          i.done = false;
          $('addStaffName'+i.array_name).prop('checked', false);
        })
      }
      	var item=''
      	var event=''
       self.addCheckedColumn(item,event)
    }

    self.addCheckedColumn = (item, event) => {
console.log(item)
 	if(item!=''){
	 item.done=!event.item.st.done
 	}
self.fieldList.map( q => {
    console.log(q.field_name)

    if(q.done==true && q.array_name== "full_name"){
      self.view_name="show_name"
    }
    if(q.done==true && q.array_name== "post_applied_for"){
      self.view_post_applied= "show_post_applied"
    }
    if(q.done==true && q.array_name== "subject_tobe_taught"){
      self.view_subject_taught= "show_subject_taught"
    }
    if(q.done==true && q.array_name== "class_tobe_taught"){
      self.view_class_taught ="show_class_taught"
    }
    if(q.done==true && q.array_name== "date_of_birth"){
      self.view_dob= "show_dob"
    }
    if(q.done==true && q.array_name== "age"){
      self.view_age= "show_age"
    }
    if(q.done==true && q.array_name== "sex"){
      self.view_sex= "show_sex"
    }
    if(q.done==true && q.array_name== "father_name"){
      self.view_father_name="show_father_name"
    }
    if(q.done==true && q.array_name== "husband_name"){
      self.view_husband_name="show_husband_name"
    }
    if(q.done==true && q.array_name== "marital_status"){
      self.view_marital_status="show_marital_status"
    }
    if(q.done==true && q.array_name== "mobile"){
      self.view_mobile="show_mobile"
    }
    if(q.done==true && q.array_name== "email"){
      self.view_email="show_email"
    }
    if(q.done==true && q.array_name== "phone_office"){
      self.view_phone_office="show_phone_office"
    }
    if(q.done==true && q.array_name== "phone_residence"){
      self.view_phone_residence="show_phone_residence"
    }
    if(q.done==true && q.array_name== "p_address"){
      self.view_p_address="show_p_address"
    }
    if(q.done==true && q.array_name== "address"){
      self.view_address="show_address"
    }
    if(q.done==true && q.array_name== "bed_institution"){
      self.view_bed_institution="show_bed_institution"
    }
    if(q.done==true && q.array_name== "bed_college"){
      self.view_bed_college="show_bed_college"
    }
    if(q.done==true && q.array_name== "bed_year"){
      self.view_bed_year="show_bed_year"
    }
    if(q.done==true && q.array_name== "bed_subject"){
      self.view_bed_subject="show_bed_subject"
    }
    if(q.done==true && q.array_name== "bed_marks"){
      self.view_bed_marks="show_bed_marks"
    }
    if(q.done==true && q.array_name== "bed_remarks"){
      self.view_bed_remarks="show_bed_remarks"
    }
    if(q.done==true && q.array_name== "ttc_institution"){
      self.view_ttc_institution="show_ttc_institution"
    }
    if(q.done==true && q.array_name== "ttc_college"){
      self.view_ttc_college="show_ttc_college"
    }
    if(q.done==true && q.array_name== "ttc_year"){
      self.view_ttc_year="show_ttc_year"
    }
    if(q.done==true && q.array_name== "ttc_subject"){
      self.view_ttc_subject="show_ttc_subject"
    }
    if(q.done==true && q.array_name== "ttc_marks"){
      self.view_ttc_marks="show_ttc_marks"
    }
    if(q.done==true && q.array_name== "ttc_remarks"){
      self.view_ttc_remarks="show_ttc_remarks"
    }
    if(q.done==true && q.array_name== "pg_institution"){
      self.view_pg_institution="show_pg_institution"
    }
    if(q.done==true && q.array_name== "pg_college"){
      self.view_pg_college="show_pg_college"
    }
    if(q.done==true && q.array_name== "pg_year"){
      self.view_pg_year="show_pg_year"
    }
    if(q.done==true && q.array_name== "pg_subject"){
      self.view_pg_subject="show_pg_subject"
    }
    if(q.done==true && q.array_name== "pg_marks"){
      self.view_pg_marks="show_pg_marks"
    }
    if(q.done==true && q.array_name== "pg_remarks"){
      self.view_pg_remarks="show_pg_remarks"
    }
    if(q.done==true && q.array_name== "xii_institution"){
      self.view_xii_institution="show_xii_institution"
    }
    if(q.done==true && q.array_name== "xii_college"){
      self.view_xii_college="show_xii_college"
    }
    if(q.done==true && q.array_name== "xii_year"){
      self.view_xii_year="show_xii_year"
    }
    if(q.done==true && q.array_name== "xii_subject"){
      self.view_xii_subject="show_xii_subject"
    }
    if(q.done==true && q.array_name== "xii_marks"){
      self.view_xii_marks="show_xii_marks"
    }
    if(q.done==true && q.array_name== "xii_remarks"){
      self.view_xii_remarks="show_xii_remarks"
    }
    if(q.done==true && q.array_name== "x_institution"){
      self.view_x_institution="show_x_institution"
    }
    if(q.done==true && q.array_name== "x_college"){
      self.view_x_college="show_x_college"
    }
    if(q.done==true && q.array_name== "x_year"){
      self.view_x_year="show_x_year"
    }
    if(q.done==true && q.array_name== "x_subject"){
      self.view_x_subject="show_x_subject"
    }
    if(q.done==true && q.array_name== "x_marks"){
      self.view_x_marks="show_x_marks"
    }
    if(q.done==true && q.array_name== "x_remarks"){
      self.view_x_remarks="show_x_remarks"
    }
    if(q.done==true && q.array_name== "g_institution"){
      self.view_g_institution="show_g_institution"
    }
    if(q.done==true && q.array_name== "g_college"){
      self.view_g_college="show_g_college"
    }
    if(q.done==true && q.array_name== "g_year"){
      self.view_g_year="show_g_year"
    }
    if(q.done==true && q.array_name== "g_subject"){
      self.view_g_subject="show_g_subject"
    }
    if(q.done==true && q.array_name== "g_marks"){
      self.view_g_marks="show_g_marks"
    }
    if(q.done==true && q.array_name== "g_remarks"){
      self.view_g_remarks="show_g_remarks"
    }
    if(q.done==true && q.array_name== "degree1"){
      self.view_degree1="show_degree1"
    }
    if(q.done==true && q.array_name== "university1"){
      self.view_university1="show_university1"
    }
    if(q.done==true && q.array_name== "marks1"){
      self.view_marks1="show_marks1"
    }
    if(q.done==true && q.array_name== "year1"){
      self.view_year1="show_year1"
    }
    if(q.done==true && q.array_name== "remarks1"){
      self.view_remarks1="show_remarks1"
    }
    if(q.done==true && q.array_name== "degree2"){
      self.view_degree2="show_degree2"
    }
    if(q.done==true && q.array_name== "university2"){
      self.view_university2="show_university2"
    }
    if(q.done==true && q.array_name== "marks2"){
      self.view_marks2="show_marks2"
    }
    if(q.done==true && q.array_name== "year2"){
      self.view_year2="show_year2"
    }
    if(q.done==true && q.array_name== "remarks2"){
      self.view_remarks2="show_remarks2"
    }
    if(q.done==true && q.array_name== "degree3"){
      self.view_degree3="show_degree3"
    }
    if(q.done==true && q.array_name== "university3"){
      self.view_university3="show_university3"
    }
    if(q.done==true && q.array_name== "marks3"){
      self.view_marks3="show_marks3"
    }
    if(q.done==true && q.array_name== "year3"){
      self.view_year3="show_year3"
    }
    if(q.done==true && q.array_name== "remarks3"){
      self.view_remarks3="show_remarks3"
    }
    if(q.done==true && q.array_name== "school1"){
      self.view_school1="show_school1"
    }
    if(q.done==true && q.array_name== "address1"){
      self.view_address1="show_address1"
    }
    if(q.done==true && q.array_name== "designation1"){
      self.view_designation1="show_designation1"
    }
    if(q.done==true && q.array_name== "class_taught1"){
      self.view_class_taught1="show_class_taught1"
    }
    if(q.done==true && q.array_name== "subject_taught1"){
      self.view_subject_taught1="show_subject_taught1"
    }
    if(q.done==true && q.array_name== "work_profile1"){
      self.view_work_profile1="show_work_profile1"
    }
    if(q.done==true && q.array_name== "from_date1"){
      self.view_from_date1="show_from_date1"
    }
    if(q.done==true && q.array_name== "to_date1"){
      self.view_to_date1="show_to_date1"
    }
    if(q.done==true && q.array_name== "salary_drawn1"){
      self.view_salary_drawn1="show_salary_drawn1"
    }
    if(q.done==true && q.array_name== "school2"){
      self.view_school2="show_school2"
    }
    if(q.done==true && q.array_name== "address2"){
      self.view_address2="show_address2"
    }
    if(q.done==true && q.array_name== "designation2"){
      self.view_designation2="show_designation2"
    }
    if(q.done==true && q.array_name== "class_taught2"){
      self.view_class_taught2="show_class_taught2"
    }
    if(q.done==true && q.array_name== "subject_taught2"){
      self.view_subject_taught2="show_subject_taught2"
    }
    if(q.done==true && q.array_name== "work_profile2"){
      self.view_work_profile2="show_work_profile2"
    }
    if(q.done==true && q.array_name== "from_date2"){
      self.view_from_date2="show_from_date2"
    }
    if(q.done==true && q.array_name== "to_date2"){
      self.view_to_date2="show_to_date2"
    }
    if(q.done==true && q.array_name== "salary_drawn2"){
      self.view_salary_drawn2="show_salary_drawn2"
    }
    if(q.done==true && q.array_name== "school3"){
      self.view_school3="show_school3"
    }
    if(q.done==true && q.array_name== "address3"){
      self.view_address3="show_address3"
    }
    if(q.done==true && q.array_name== "designation3"){
      self.view_designation3="show_designation3"
    }
    if(q.done==true && q.array_name== "class_taught3"){
      self.view_class_taught3="show_class_taught3"
    }
    if(q.done==true && q.array_name== "subject_taught3"){
      self.view_subject_taught3="show_subject_taught3"
    }
    if(q.done==true && q.array_name== "work_profile3"){
      self.view_work_profile3="show_work_profile3"
    }
    if(q.done==true && q.array_name== "from_date3"){
      self.view_from_date3="show_from_date3"
    }
    if(q.done==true && q.array_name== "to_date3"){
      self.view_to_date3="show_to_date3"
    }
    if(q.done==true && q.array_name== "salary_drawn3"){
      self.view_salary_drawn3="show_salary_drawn3"
    }
    if(q.done==true && q.array_name== "creation_date"){
      self.view_creation_date="show_creation_date"
    }
    if(q.done==true && q.array_name== "interview_call"){
      self.view_interview_call="show_interview_call"
    }

    if(q.done==false && q.array_name== "full_name"){
      self.view_name=""
    }
    if(q.done==false && q.array_name== "post_applied_for"){
      self.view_post_applied= ""
    }
    if(q.done==false && q.array_name== "subject_tobe_taught"){
      self.view_subject_taught= ""
    }
    if(q.done==false && q.array_name== "class_tobe_taught"){
      self.view_class_taught =""
    }
    if(q.done==false && q.array_name== "date_of_birth"){
      self.view_dob= ""
    }
    if(q.done==false && q.array_name== "age"){
      self.view_age= ""
    }
    if(q.done==false && q.array_name== "sex"){
      self.view_sex= ""
    }
    if(q.done==false && q.array_name== "father_name"){
      self.view_father_name= ""
    }
    if(q.done==false && q.array_name== "husband_name"){
      self.view_husband_name= ""
    }
    if(q.done==false && q.array_name== "marital_status"){
      self.view_marital_status= ""
    }
    if(q.done==false && q.array_name== "mobile"){
      self.view_mobile= ""
    }
    if(q.done==false && q.array_name== "email"){
      self.view_email= ""
    }
    if(q.done==false && q.array_name== "phone_office"){
      self.view_phone_office= ""
    }
    if(q.done==false && q.array_name== "phone_residence"){
      self.view_phone_residence= ""
    }
    if(q.done==false && q.array_name== "p_address"){
      self.view_p_address= ""
    }
    if(q.done==false && q.array_name== "address"){
      self.view_address= ""
    }
    if(q.done==false && q.array_name== "bed_institution"){
      self.view_bed_institution= ""
    }
    if(q.done==false && q.array_name== "bed_college"){
      self.view_bed_college= ""
    }
    if(q.done==false && q.array_name== "bed_year"){
      self.view_bed_year= ""
    }
    if(q.done==false && q.array_name== "bed_subject"){
      self.view_bed_subject= ""
    }
    if(q.done==false && q.array_name== "bed_marks"){
      self.view_bed_marks= ""
    }
    if(q.done==false && q.array_name== "bed_remarks"){
      self.view_bed_remarks= ""
    }
    if(q.done==false && q.array_name== "ttc_institution"){
      self.view_ttc_institution= ""
    }
    if(q.done==false && q.array_name== "ttc_college"){
      self.view_ttc_college= ""
    }
    if(q.done==false && q.array_name== "ttc_year"){
      self.view_ttc_year= ""
    }
    if(q.done==false && q.array_name== "ttc_subject"){
      self.view_ttc_subject= ""
    }
    if(q.done==false && q.array_name== "ttc_marks"){
      self.view_ttc_marks= ""
    }
    if(q.done==false && q.array_name== "ttc_remarks"){
      self.view_ttc_remarks= ""
    }
    if(q.done==false && q.array_name== "pg_institution"){
      self.view_pg_institution= ""
    }
    if(q.done==false && q.array_name== "pg_college"){
      self.view_pg_college= ""
    }
    if(q.done==false && q.array_name== "pg_year"){
      self.view_pg_year= ""
    }
    if(q.done==false && q.array_name== "pg_subject"){
      self.view_pg_subject= ""
    }
    if(q.done==false && q.array_name== "pg_marks"){
      self.view_pg_marks= ""
    }
    if(q.done==false && q.array_name== "pg_remarks"){
      self.view_pg_remarks= ""
    }
    if(q.done==false && q.array_name== "xii_institution"){
      self.view_xii_institution= ""
    }
    if(q.done==false && q.array_name== "xii_college"){
      self.view_xii_college= ""
    }
    if(q.done==false && q.array_name== "xii_year"){
      self.view_xii_year= ""
    }
    if(q.done==false && q.array_name== "xii_subject"){
      self.view_xii_subject= ""
    }
    if(q.done==false && q.array_name== "xii_marks"){
      self.view_xii_marks= ""
    }
    if(q.done==false && q.array_name== "xii_remarks"){
      self.view_xii_remarks= ""
    }
    if(q.done==false && q.array_name== "x_institution"){
      self.view_x_institution= ""
    }
    if(q.done==false && q.array_name== "x_college"){
      self.view_x_college= ""
    }
    if(q.done==false && q.array_name== "x_year"){
      self.view_x_year= ""
    }
    if(q.done==false && q.array_name== "x_subject"){
      self.view_x_subject= ""
    }
    if(q.done==false && q.array_name== "x_marks"){
      self.view_x_marks= ""
    }
    if(q.done==false && q.array_name== "x_remarks"){
      self.view_x_remarks= ""
    }
    if(q.done==false && q.array_name== "g_institution"){
      self.view_g_institution= ""
    }
    if(q.done==false && q.array_name== "g_college"){
      self.view_g_college= ""
    }
    if(q.done==false && q.array_name== "g_year"){
      self.view_g_year= ""
    }
    if(q.done==false && q.array_name== "g_subject"){
      self.view_g_subject= ""
    }
    if(q.done==false && q.array_name== "g_marks"){
      self.view_g_marks= ""
    }
    if(q.done==false && q.array_name== "g_remarks"){
      self.view_g_remarks= ""
    }
    if(q.done==false && q.array_name== "degree1"){
      self.view_degree1= ""
    }
    if(q.done==false && q.array_name== "university1"){
      self.view_university1= ""
    }
    if(q.done==false && q.array_name== "marks1"){
      self.view_marks1= ""
    }
    if(q.done==false && q.array_name== "year1"){
      self.view_year1= ""
    }
    if(q.done==false && q.array_name== "remarks1"){
      self.view_remarks1= ""
    }
    if(q.done==false && q.array_name== "degree2"){
      self.view_degree2= ""
    }
    if(q.done==false && q.array_name== "university2"){
      self.view_university2= ""
    }
    if(q.done==false && q.array_name== "marks2"){
      self.view_marks2= ""
    }
    if(q.done==false && q.array_name== "year2"){
      self.view_year2= ""
    }
    if(q.done==false && q.array_name== "remarks2"){
      self.view_remarks2= ""
    }
    if(q.done==false && q.array_name== "degree3"){
      self.view_degree3= ""
    }
    if(q.done==false && q.array_name== "university3"){
      self.view_university3= ""
    }
    if(q.done==false && q.array_name== "marks3"){
      self.view_marks3= ""
    }
    if(q.done==false && q.array_name== "year3"){
      self.view_year3= ""
    }
    if(q.done==false && q.array_name== "remarks3"){
      self.view_remarks3= ""
    }
    if(q.done==false && q.array_name== "school1"){
      self.view_school1= ""
    }
    if(q.done==false && q.array_name== "address1"){
      self.view_address1= ""
    }
    if(q.done==false && q.array_name== "designation1"){
      self.view_designation1= ""
    }
    if(q.done==false && q.array_name== "class_taught1"){
      self.view_class_taught1= ""
    }
    if(q.done==false && q.array_name== "subject_taught1"){
      self.view_subject_taught1= ""
    }
    if(q.done==false && q.array_name== "work_profile1"){
      self.view_work_profile1= ""
    }
    if(q.done==false && q.array_name== "from_date1"){
      self.view_from_date1= ""
    }
    if(q.done==false && q.array_name== "to_date1"){
      self.view_to_date1= ""
    }
    if(q.done==false && q.array_name== "salary_drawn1"){
      self.view_salary_drawn1= ""
    }
    if(q.done==false && q.array_name== "school2"){
      self.view_school2= ""
    }
    if(q.done==false && q.array_name== "address2"){
      self.view_address2= ""
    }
    if(q.done==false && q.array_name== "designation2"){
      self.view_designation2= ""
    }
    if(q.done==false && q.array_name== "class_taught2"){
      self.view_class_taught2= ""
    }
    if(q.done==false && q.array_name== "subject_taught2"){
      self.view_subject_taught2= ""
    }
    if(q.done==false && q.array_name== "work_profile2"){
      self.view_work_profile2= ""
    }
    if(q.done==false && q.array_name== "from_date2"){
      self.view_from_date2= ""
    }
    if(q.done==false && q.array_name== "to_date2"){
      self.view_to_date2= ""
    }
    if(q.done==false && q.array_name== "salary_drawn2"){
      self.view_salary_drawn2= ""
    }
    if(q.done==false && q.array_name== "school3"){
      self.view_school3= ""
    }
    if(q.done==false && q.array_name== "address3"){
      self.view_address3= ""
    }
    if(q.done==false && q.array_name== "designation3"){
      self.view_designation3= ""
    }
    if(q.done==false && q.array_name== "class_taught3"){
      self.view_class_taught3= ""
    }
    if(q.done==false && q.array_name== "subject_taught3"){
      self.view_subject_taught3= ""
    }
    if(q.done==false && q.array_name== "work_profile3"){
      self.view_work_profile3= ""
    }
    if(q.done==false && q.array_name== "from_date3"){
      self.view_from_date3= ""
    }
    if(q.done==false && q.array_name== "to_date3"){
      self.view_to_date3= ""
    }
    if(q.done==false && q.array_name== "salary_drawn3"){
      self.view_salary_drawn3= ""
    }
    if(q.done==false && q.array_name== "creation_date"){
      self.view_creation_date= ""
    }
    if(q.done==false && q.array_name== "interview_call"){
      self.view_interview_call= ""
    }
  })
}

    self.getData = () => {
      var startDate = document.getElementById("start_date").value;
      var endDate = document.getElementById("end_date").value;
    	if(!self.refs.start_date.value){
        toastr.info("Please enter From Date and try again")
      	}else if(!self.refs.end_date.value){
      	toastr.info("Please enter To Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
          toastr.info("Please enter To Date Grater Than From Date")
        }else{
    	    var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          self.loading = true
          careerStore.trigger('read_applicant_detail', obj)
          console.log(obj)
        }
    }

    self.csvExport = () => {
        var startDate = document.getElementById("start_date").value;
        var endDate = document.getElementById("end_date").value;

        if(!self.refs.start_date.value){
        toastr.info("Please enter Start Date and try again")
        }else if(!self.refs.end_date.value){
        toastr.info("Please enter End Date and try again")
        }else if((Date.parse(startDate) >= Date.parse(endDate))){
          toastr.info("Please enter To Date Grater Than From Date")
        }else{
          var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          careerStore.trigger('csv_export_applicant_detail', obj)
        }
    }

    self.DownloadCV = (c,a) => {
      self.career_id = c
      careerStore.trigger('download_cv', self.career_id)
    }

    self.create_interview = (c,a) => {
      self.career_id = c
      console.log(self.career_id)
      $("#createInterviewModal").addClass("is-active");
    }

    self.closecreateInterviewModal = () => {
      $("#createInterviewModal").removeClass("is-active");
    }

    self.CreateInterviewCall = () =>{
    	var obj={}
    	var interview_detail={};
    	interview_detail['interview_date']=convertDate(self.refs.interview_date.value)
    	interview_detail['interview_time']=self.refs.interview_time.value
    	obj['interview_detail']=interview_detail;

    	careerStore.trigger('create_interview_call',obj,self.career_id)
    }

    self.view_profile = (c,a) => {
    	console.log("self.session_id")
    	console.log(self.career_id)
    	self.career_id = c
    	self.interviewed_candidate_view = 'applicant_profile'
    	careerStore.trigger('read_applicant_profile', self.career_id)
    }

    self.close_applicant_profile = () =>{
    	self.interviewed_candidate_view = 'show_interviewed_candidate'
    }

    self.cancelOperation = (e) => {
      self.ApplicantData.map(a => {
          a.confirmDelete = false
          a.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.ApplicantData.map(a => {
        if(a.career_id != e.item.a.career_id){
          a.confirmDelete = false
        }else{
          a.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      careerStore.trigger('delete_applicant_detail', e.item.a.career_id)
    }

    self.filterApplicantDetail = ()=>{
      self.filteredApplicantDetail = self.ApplicantData.filter(c => {

        return JSON.stringify(c).toLowerCase().indexOf(self.refs.searchApplicantDetail.value.toLowerCase())>=0
      })
    }

    careerStore.on('delete_applicant_detail_changed',DeleteApplicantDetailChanged)
    function DeleteApplicantDetailChanged(){
    	self.loading=false;
     	self.getData()
      	self.update();
    }

    careerStore.on('read_applicant_detail_changed',ReadApplicantDetailChanged)
    function ReadApplicantDetailChanged(applicant_details){
      self.ApplicantData=[];
      self.ApplicantData = applicant_details
      self.filteredApplicantDetail = applicant_details
      if(self.ApplicantData.length==0){
      	toastr.info("No Data Found")
      }
      self.loading = false;

      self.update();
    }

    careerStore.on('create_interview_call_changed',CreateInterviewCallChanged)
    function CreateInterviewCallChanged(){
      self.closecreateInterviewModal()
      self.getData()

    }

    careerStore.on('read_applicant_profile_changed',ReadApplicantProfileChanged)
    function ReadApplicantProfileChanged(applicant_profile_data){
      self.applicant_profile_data = applicant_profile_data
      self.st=applicant_profile_data[0]
      console.log(self.st.address_line1)
      self.loading = false;
      self.update();
    }
});
riot.tag2('apply-fee-plan', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{student_vew ==\'show_data\'}"> <div class="box"> <div class="columns"> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" onchange="{readStandardSection}"> <option></option> <option each="{standards}" riot-value="{standard_id}">{standard} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Section</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="section_id" onchange="{getStudentData}"> <option each="{filteredSections}" riot-value="{section_id}">{section} </option> </select> </div> </div> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{getStudentData}">GO </button> </div> </div> </div> </section> <div class="level"> <div class="level-left"> <div class="level-item"> <h2 class="title" style="color: #ff3860;">Apply Fee Plan</h2> </div> </div> </div> <div class="flex items-center mt-2 mb-6 no-print"> <div class="bg-green py-1 rounded w-10"></div> <div class="bg-grey h-px flex-auto"></div> </div> <div class="columns"> <div class="column is-full"> <div class="box max-w-md"> <div class="columns is-multiline"> <div class="column is-full"> <div class="column is-full"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="has-text-right"> <input type="checkbox" id="checkStudent" onclick="{selectAll}"> </th> <th>#</th> <th>Enrol No.</th> <th>Student\'s Name</th> <th>Plan</th> </tr> </thead> <tbody> <tr each="{r, i in students}"> <td class="has-text-right"> <input type="checkbox" class="check_box" checked="{r.done}" id="{\'studentId\' + r.student_id}" onclick="{selectStudents.bind(this,r)}"> </td> <td>{i+1}</td> <td>{r.enroll_number}</td> <td>{r.student_name}</td> <td>{r.fee_plan_name}</td> </tr> </tbody> </table> </div> <div class="columns"> <div class="column is-narrow"> <label class="label">Select Fee Plan</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="fee_plan_id"> <option each="{plans}" riot-value="{fee_plan_id}">{fee_plan_name}</option> </select> </div> </div> </div> </div> <div class="column is-full"> <button class="button is-danger" onclick="{add}">Apply Plan</button> <button class="button is-info" id="showModal" onclick="{removeModal}">Remove Plan</button> </div> </div> </div> </div> </div> </section> <div class="modal" id="deleteModel"> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Delete Confirmation</p> </header> <section class="modal-card-body"> <h4>Are you Sure?</h4> </section> <footer class="modal-card-foot"> <button class="button is-danger" onclick="{remove}">Delete</button> <button class="button " id="modal-close">Cancel</button> </footer> </div> </div>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.role = getCookie('role')
      self.student_vew = 'show_data'
      self.loading = false
      self.update()
      self.readSection()
      self.readStandard()
    })
    self.on("unmount", function(){
      applyPlanStore.off('read_apply_changed',ApplyPlanChanged)
      applyPlanStore.off('read_standard_changed',StandardChanged)
      applyPlanStore.off('read_section_changed',SectionChanged)
      applyPlanStore.off('read_plan_changed',ReadPlanChanged)
    })

     self.removeModal = () =>{
    	$("#showModal").click(function() {
  			$("#deleteModel").addClass("is-active");
		});

		$("#modal-close").click(function() {
		   $("#deleteModel").removeClass("is-active");
		   self.itemList()
		});
		activityStore.trigger('read_items')

    }

    self.add = () => {
       var tempStudents = [];
       var tempStudents = self.students.filter(c => {
          return c.done == true
        })

       var acceptedStudents = []
       tempStudents.map(s=>{
       	 if(s.fee_plan_id == null) acceptedStudents.push(s.student_id)
       })
       console.log("accepted students")
       console.log(acceptedStudents)
      if(!self.refs.fee_plan_id.value){
        toastr.info("Please select fee plan and try again")
      }else if(acceptedStudents.length==0){
          toastr.info("All the selected students have already been assigned to a plan. Please choose student/s who have not been assigned and try again.")
      }else{
      	console.log("here")
        var obj = {}
        obj['fee_plan_id'] = self.refs.fee_plan_id.value
        obj['students'] = acceptedStudents
        self.loading = true
          console.log(obj)
          applyPlanStore.trigger('apply_fee_plan', obj)
      }
    }

    self.remove = ()=> {
       var tempStudents = [];
       var tempStudents = self.students.filter(c => {
          return c.done == true
        })

       var removeStudent = []
       tempStudents.map(s=>{
       	 if(s.fee_plan_id != null) removeStudent.push(s)
       })
       console.log("removed students")
       console.log(removeStudent)

      if(removeStudent.length==0){
          toastr.info("Please assign a plan first then try to remove.")
      }else{
        var obj = {}
        obj['students'] = removeStudent
        self.loading = true
          console.log(obj)
          applyPlanStore.trigger('remove_fee_plan', obj)
      }
    }

   self.selectStudents = (item,event) => {
    	item.done=!event.item.r.done
    }

    self.selectAll = () => {
    	if($('#checkStudent').is(":checked")){
    		self.students.map(i=>{
	          i.done = true;
	          $('studentId'+i.student_id).prop('checked', true);

	        })
    	}else{
    		self.students.map(i=>{
	          i.done = false;
	          $('studentId'+i.student_id).prop('checked', false);

	        })
    	}
      console.log(self.students)
    }

    self.readStandard = () => {
       applyPlanStore.trigger('read_standards')
    }
    self.readSection = () => {
       applyPlanStore.trigger('read_sections')

    }

    self.readStandardSection = () => {

       console.log('filter')
       self.filteredSections = []
       self.filteredSections = self.sections.filter(s => {
       	return s.standard_id == self.refs.standard_id.value
       })

       self.readFeePlanByStandard()
    }

    self.readFeePlanByStandard =() =>{
    	console.log(self.refs.standard_id.value)
       applyPlanStore.trigger('read_plan_standard', self.refs.standard_id.value)
    }

    self.getStudentData =() =>{
    	self.loading = true
       applyPlanStore.trigger('read_students', self.refs.section_id.value)
    }

    applyPlanStore.on('read_apply_changed',ApplyPlanChanged)
    function ApplyPlanChanged(students){
      console.log(students)
      self.students = students
      self.loading = false
      self.update()
      console.log(self.students)
    }
    applyPlanStore.on('read_plan_changed',ReadPlanChanged)
    function ReadPlanChanged(plans){
      console.log(plans)
      self.plans = plans
      self.loading = false
      self.update()
      console.log(self.plans)
    }

    applyPlanStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.loading = false

      self.update()

      console.log(self.standards)
    }
    applyPlanStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections

      self.section_id = sections[0].section_id
      self.loading = false
      self.update()
      console.log(self.sections)
    }

});
riot.tag2('approve-staff-profile', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{staff_view ==\'show_staff\'}"> <h2 class="title has-text-centered" style="color: #ff3860;">Approve Staff</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Emp Type</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="r_emp_type_id"> <option riot-value="{-1}">All</option> <option each="{employeeTypes}" riot-value="{emp_type_id}">{emp_type} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getStaffData}">GO </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th>Photo</th> <th>Name</th> <th>Designation</th> <th>Mobile</th> <th>Email</th> <th>Office Phone</th> <th></th> </tr> </thead> <tbody> <tr each="{st, i in staffs}"> <td><input type="checkbox" class="id_check_box" id="{\'EmpId\' + st.emp_id}" onclick="{selectStaff.bind(this,st)}"> </td> <td>{st.photo}</td> <td>{st.first_name} {st.middle_name} {st.last_name}</td> <td>{st.designation}</td> <td>{st.mobile}</td> <td>{st.email}</td> <td>{st.phone_o}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{st.confirmDelete}"> <span><a class="button is-small is-rounded has-text-success" onclick="{edit.bind(this, st.emp_id)}">Approve Profile</a></span> <span> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{st.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section class=" is-fluid" show="{staff_view ==\'add_staff\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} Staff</h2> </div> <div class="level-right"></div> </div> <div class="box"> <div class="columns is-multiline"> <div class="column is-one-fifth"> <div id="pp_box" class="pp-box" onclick="{trigger_file_input.bind(this,\'staff_picture\')}"> <div class="icon has-text-danger" onclick="{remove_picture.bind(this, \'pp_box\',\'staff_picture\')}"><i class="fas fa-trash"></i> </div> </div> <input accept="image/*" class="is-hidden" id="staff_picture" name="staff_picture" onchange="{loadFile.bind(this, \'pp_box\')}" type="file"> </div> <div class="column "> <div class="columns "> <div class="column is-2"> <label class="label is-small" for="title">Title</label> </div> <div class="column is-10"> <input class="input is-small" id="title" ref="title" type="text"> </div> </div> <div class="columns "> <div class="column is-2"> <label class="label is-small" for="first_name">First Name</label> </div> <div class="column is-2"> <input class="input is-small" id="first_name" ref="first_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="middle_name">Middle Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="middle_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="last_name">Last Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="last_name" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="last_name">Short Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="short_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="gender">Gender</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select id="gender" ref="gender"> <option value="M">Male</option> <option value="F">Female</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="">Identification Marks</label> </div> <div class="column is-2"> <input class="input is-small" ref="id_mark" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="blood_group">Blood Group</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select id="blood_group" ref="blood_group"> <option value="A+">A+</option> <option value="A-">A-</option> <option value="AB+">AB+</option> <option value="AB-">AB-</option> <option value="B+">B+</option> <option value="B-">B-</option> <option value="O+">O+</option> <option value="O-">O-</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="dob">Place of Birth</label> </div> <div class="column is-2"> <input class="input is-small" ref="place_of_birth" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="dob">Nationality</label> </div> <div class="column is-2"> <input class="input is-small" ref="nationality" type="text"> </div> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="religion_id">Religion</label> </div> <div class="column is-2"> <div class="control"> <div class="select is-fullwidth is-small"> <select id="religion_id" ref="religion_id"> <option each="{religion}" riot-value="{religion_id}">{religion} </option> </select> </div> </div> </div> <div class="column is-2"> <label class="label is-small" for="">Language</label> </div> <div class="column is-2"> <input class="input is-small" ref="language" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="category_id">Cast Category</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="category_id"> <option each="{cast}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="dob">DOB</label> </div> <div class="column is-2"> <input class="input date is-small" ref="dob" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="residence_phone">Phone(R)</label> </div> <div class="column is-2"> <input class="input is-small" ref="residence_phone" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="Office_phone">Phone(O)</label> </div> <div class="column is-2"> <input class="input is-small" ref="office_phone" type="number"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="Employee ID">Employee ID</label> </div> <div class="column is-2"> <input class="input is-small" ref="employee_id" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="Moble">Mobile</label> </div> <div class="column is-2"> <input class="input is-small" ref="mobile" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="Office_phone">Email</label> </div> <div class="column is-2"> <input class="input is-small" ref="email" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Contact Information(Permanent Address)</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="add_l1">Address Line 1</label> </div> <div class="column is-2"> <input class="input is-small" ref="add_l1" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="add_l2">Address Line 2</label> </div> <div class="column is-2"> <input class="input is-small" ref="add_l2" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="city">City</label> </div> <div class="column is-2"> <input class="input is-small" ref="city" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="zip">Zip</label> </div> <div class="column is-2"> <input class="input is-small" ref="zip" maxlength="6" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="state">State</label> </div> <div class="column is-2"> <input class="input is-small" ref="state" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="country">Country</label> </div> <div class="column is-2"> <input class="input is-small" ref="country" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link"> Check if Correspondence Address is same as Permanent Address <input type="checkbox" id="correspondenceCheckbox" name="correspondenceCheckbox" onclick="{copyAddress.bind(this)}"> </h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="c_add_l1">Address Line 1</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_add_l1" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="c_add_l2">Address Line 2</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_add_l2" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="c_city">City</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_city" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="c_zip">Zip</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_zip" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="c_state">State</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_state" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="c_country">Country</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_country" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-small is-info has-text-weight-bold adjusted-top" onclick="{addFamilyInformation}"> Next >> </button> <button class="button is-small is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_family_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} Family</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="marital_status">Marital Status</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select id="marital_status" ref="marital_status"> <option value="S">Single</option> <option value="M">Married</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="f_occupation">Father Name</label> </div> <div class="column is-2 "> <input class="input is-small" id="father_name" ref="father_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Father Occupation</label> </div> <div class="column is-2"> <input class="input is-small" id="father_occupation" ref="father_occupation" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Spouse\'s Name</label> </div> <div class="column is-2"> <input class="input is-small" id="" ref="spouse" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Spouse\'s Occupation</label> </div> <div class="column is-2 "> <input class="input is-small" id="" ref="spouse_occupation" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f_organisation_name">Anniversary</label> </div> <div class="column is-2"> <input class="input date is-small" ref="anniversary" type="date"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Child1</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="child1_first_name">First Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="child1_first_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Last Name</label> </div> <div class="column is-2 "> <input class="input is-small" ref="child1_last_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="gender">Gender</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select id="sex" ref="child1_sex"> <option value="M">Male</option> <option value="F">Female</option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Dob</label> </div> <div class="column is-2"> <input class="input date is-small" ref="child1_dob" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">School</label> </div> <div class="column is-2 "> <input class="input is-small" ref="child1_school" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Child2</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="child2_first_name">First Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="child2_first_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Last Name</label> </div> <div class="column is-2 "> <input class="input is-small" ref="child2_last_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="gender">Gender</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select id="sex" ref="child2_sex"> <option value="M">Male</option> <option value="F">Female</option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Dob</label> </div> <div class="column is-2"> <input class="input date is-small" ref="child2_dob" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">School</label> </div> <div class="column is-2 "> <input class="input is-small" ref="child2_school" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Child3</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="child3_first_name">First Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="child3_first_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Last Name</label> </div> <div class="column is-2 "> <input class="input is-small" ref="child3_last_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="gender">Gender</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select id="sex" ref="child3_sex"> <option value="M">Male</option> <option value="F">Female</option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Dob</label> </div> <div class="column is-2"> <input class="input date is-small" ref="child3_dob" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">School</label> </div> <div class="column is-2 "> <input class="input is-small" ref="child3_school" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-small is-primary has-text-weight-bold adjusted-top" onclick="{closeFamilyInformation}"> Previous </button> <button class="button is-small is-info has-text-weight-bold adjusted-top" onclick="{addQualificationInformation}"> Next >> </button> <button class="button is-small is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_qualification_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} Qualification</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Academic Qualification</h3> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-8 has-text-link">X information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="x_subject">X Subject </label> </div> <div class="column is-2"> <input class="input is-small" ref="x_subject" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">X Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="x_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">X Board</label> </div> <div class="column is-2"> <input class="input is-small" ref="x_board" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">X YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="x_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">X Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="x_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">X Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="x_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-8 has-text-link">XII information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="xii_subject">XII Subject </label> </div> <div class="column is-2"> <input class="input is-small" ref="xii_subject" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">XII Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="xii_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">XII Board</label> </div> <div class="column is-2"> <input class="input is-small" ref="xii_board" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">XII YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="xii_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">XII Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="xii_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">XII Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="xii_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Professional Qualification</h3> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-8 has-text-link">UG information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="ug_course">UG Course </label> </div> <div class="column is-2"> <input class="input is-small" ref="ug_course" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">UG Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="ug_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">UG University</label> </div> <div class="column is-2"> <input class="input is-small" ref="ug_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">UG YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="ug_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">UG Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="ug_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">UG Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="ug_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-8 has-text-link">PG information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="pg_course">PG Course </label> </div> <div class="column is-2"> <input class="input is-small" ref="pg_course" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">PG Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="pg_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">PG University</label> </div> <div class="column is-2"> <input class="input is-small" ref="pg_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">PG YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="pg_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">PG Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="pg_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">PG Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="pg_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-small is-primary has-text-weight-bold adjusted-top" onclick="{closeQualificationInformation}"> Previous </button> <button class="button is-small is-info has-text-weight-bold adjusted-top" onclick="{addProfessionalCourseInformation}"> Next >> </button> <button class="button is-small is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_professional_course_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} New Employee</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">B.Ed. information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="bed_stream">B.Ed. stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="bed_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.Ed. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bed_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.Ed. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="bed_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">B.Ed. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="bed_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.Ed. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bed_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.Ed. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="bed_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">B.T. information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="bt_stream">B.T. Stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="bt_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.T. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bt_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.T. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="bt_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">B.T. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="bt_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.T. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bt_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.T. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="bt_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">B.P.Ed. information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="bped_stream">B.P.Ed. stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="bped_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.P.Ed. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bped_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.P.Ed. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="bped_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">B.P.Ed. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="bped_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.P.Ed. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bped_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.P.Ed. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="bped_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">D.P.Ed. information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="dped_stream">D.P.Ed. stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="dped_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">D.P.Ed. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="dped_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">D.P.Ed. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="dped_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">D.P.Ed. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="dped_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">D.P.Ed. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="dped_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">D.P.Ed. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="dped_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-small is-primary has-text-weight-bold adjusted-top" onclick="{closeProfessionalCourseInformation}"> Previous </button> <button class="button is-small is-info has-text-weight-bold adjusted-top" onclick="{addProfessionalMasterCourseInformation}"> Next >> </button> <button class="button is-small is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_professional_master_course_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} New Employee</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">M.P.Ed. information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="mped_stream">M.P.Ed. stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="mped_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.P.Ed. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="mped_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.P.Ed. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="mped_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">M.P.Ed. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="mped_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.P.Ed. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="mped_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.P.Ed. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="mped_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">M.Ed. information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="med_stream">M.Ed. Stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="med_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Ed. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="med_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Ed. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="med_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">M.Ed. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="med_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Ed. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="med_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Ed. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="med_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">M.Phil information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="mphil_stream">M.Phil stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="mphil_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Phil Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="mphil_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Phil University</label> </div> <div class="column is-2"> <input class="input is-small" ref="mphil_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">M.Phil YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="mphil_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Phil Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="mphil_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Phil Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="mphil_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Phd. information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="phd_stream">Phd. Stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="phd_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Phd. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="phd_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Phd. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="phd_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Phd. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="phd_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Phd. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="phd_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Phd. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="phd_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Other information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="other_stream">Other Stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="other_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Other Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="other_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Other University</label> </div> <div class="column is-2"> <input class="input is-small" ref="other_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Other YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="other_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Other Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="other_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Other Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="other_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-small is-primary has-text-weight-bold adjusted-top" onclick="{closeProfessionalMasterCourseInformation}"> Previous </button> <button class="button is-small is-info has-text-weight-bold adjusted-top" onclick="{addExtraActivityInformation}"> Next >> </button> <button class="button is-small is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_extra_activity_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} New Employee</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Other information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="details_scholarship">Scholarship Detail </label> </div> <div class="column is-2"> <input class="input is-small" ref="details_scholarship" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Awards/Honours Detail</label> </div> <div class="column is-2 "> <input class="input is-small" ref="details_honours" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Publication Detail</label> </div> <div class="column is-2"> <input class="input is-small" ref="details_publication" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Curricular Activities Detail</label> </div> <div class="column is-2"> <input class="input is-small" ref="details_curricular_activities" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Sports Detail</label> </div> <div class="column is-2 "> <input class="input is-small" ref="details_sport" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Work Experience</h3> </div> </div> <div each="{st, i in workExperienceArray}" style="margin-bottom:20px;margin-top:20px"> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="work_instituition">Instituition </label> </div> <div class="column is-2"> <input class="input is-small" ref="work_instituition" id="work_instituition{i}" riot-value="{st.institution}" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">DOJ</label> </div> <div class="column is-2 "> <input class="input date is-small" ref="work_doj" id="work_doj{i}" type="text" riot-value="{st.date_of_joining}"> </div> <div class="column is-2"> <label class="label is-small" for="">DOL</label> </div> <div class="column is-2"> <input class="input date is-small" ref="work_dol" id="work_dol{i}" type="text" riot-value="{st.date_of_leaving}"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Position</label> </div> <div class="column is-2"> <input class="input is-small" ref="work_position" id="work_position{i}" type="text" riot-value="{st.position}"> </div> <div class="column is-2"> <label class="label is-small" for="">Subjects</label> </div> <div class="column is-2 "> <input class="input is-small" ref="work_subject" id="work_subject{i}" type="text" riot-value="{st.subjects_taught}"> </div> <div class="column is-2"> <button class="button is-primary is-rounded ml5 is-small" onclick="{add_more_work_exp}"> <span class="icon"><span class="fas fa-plus"></span></span> </button> <button class="button is-info is-rounded ml5 is-small" onclick="{remove.bind(this, i)}"> <span class="icon"><span class="fas fa-minus"></span></span> </button> </div> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-small is-primary has-text-weight-bold adjusted-top" onclick="{closeExtraActivityInformation}"> Previous </button> <button class="button is-small is-danger has-text-weight-bold adjusted-top" onclick="{addPrevoiusJob}"> Next </button> <button class="button is-small is-info has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_previous_job_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} New Employee</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Particulars of Previous Job</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Organization Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="organization_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Address Line 1</label> </div> <div class="column is-2 "> <input class="input is-small" ref="add_l1_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Address Line 2</label> </div> <div class="column is-2"> <input class="input is-small" ref="add_l2_of_previous_job" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">City</label> </div> <div class="column is-2"> <input class="input is-small" ref="city_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Zip</label> </div> <div class="column is-2 "> <input class="input is-small" ref="zip_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">State</label> </div> <div class="column is-2"> <input class="input is-small" ref="state_of_previous_job" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Country</label> </div> <div class="column is-2"> <input class="input is-small" ref="country_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Designation</label> </div> <div class="column is-2 "> <input class="input is-small" ref="designation_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Date of Joining</label> </div> <div class="column is-2"> <input class="input date is-small" ref="doj_of_previous_job" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Salary</label> </div> <div class="column is-2"> <input class="input is-small" ref="salary_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Basic</label> </div> <div class="column is-2 "> <input class="input is-small" ref="basic_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Allowances</label> </div> <div class="column is-2"> <input class="input is-small" ref="allowances_of_previous_job" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Other Benefits</label> </div> <div class="column is-2"> <input class="input is-small" ref="other_benefits_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Bond Details</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bond_details_of_previous_job" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Work Profile</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Qualification</label> </div> <div class="column is-2"> <input class="input is-small" ref="qualification" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="doj">Date of Joining</label> </div> <div class="column is-2 "> <input class="input date is-small" ref="doj" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="subject_id">Specialization</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="subject_id"> <option each="{subjects}" riot-value="{subject_id}">{subject_name} </option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Employee Type</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="emp_type_id"> <option each="{employeeTypes}" riot-value="{emp_type_id}">{emp_type} </option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="">Designation</label> </div> <div class="column is-2 "> <div class="select is-fullwidth is-small"> <select ref="designation_id"> <option each="{designations}" riot-value="{designation_id}">{designation} </option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="">Department</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="department_id"> <option each="{departments}" riot-value="{department_id}">{department_name} </option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-small is-primary has-text-weight-bold adjusted-top" onclick="{closePreviousJob}"> << Previous </button> <button class="button is-small is-info has-text-weight-bold adjusted-top" onclick="{addInformation}"> Submit </button> <button class="button is-small is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <div id="statusModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Update Status</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role">Leaving Date</label> <div class="control"> <input class="input date" type="text" ref="leaving_date"> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Remarks</label> <div class="control"> <textarea class="input" type="text" ref="remark" rows="3"></textarea> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-danger is-small" onclick="{updateEmployeeStatus}">{title}</button> <button class="button is-small" id="item-modal-close" onclick="{closeStatusUpdateModal}">Cancel</button> </footer> </div> </div> <section class=" is-fluid" show="{staff_view ==\'staff_profile\'}"> <div class="level"> <div class="level-left"> <h2 class="title">Profile of {first_name} {middle_name} {last_name}</h2> </div> <div class="level-right"> <a class="button no-print" onclick="{close_staff_profile}">Back</a> </div> </div> <table class="table is-fullwidth is-bordered"> <tr> <td rowspan="4" colspan="2"> <img id="pp_box1" width="90" height="90"> </td> <td colspan="2" style="background-color:#efefef"><b>Login ID</b></td> <td colspan="3">{employee_id}</td> </tr> <tr> <th>Name</th> <td>{first_name} {middle_name} {last_name}</td> <th>Short Name</th> <td colspan="2">{st.short_name}</td> </tr> <tr> <th>Gender</th> <td>{gender} </td> <th>Blood Group</th> <td colspan="2">{blood_group}</td> </tr> <tr> <th>Category</th> <td colspan="2">{category_name}</td> <th>Date of Birth</th> <td>{dob}</td> </tr> <tr> <th>Marital Status</th> <td>{marital_status}</td> <th>Date of Marriage</th> <td>{dom}</td> <th colspan="2">Husband/Wife Name</th> <td>{spouse}</td> </tr> <tr> <th colspan="2">Permanent Address</th> <td colspan="5">{add_l1} , {add_l2}, {city} , {state}-{zip}, {country}</td> </tr> <tr> <th colspan="2">Correspondence Address</th> <td colspan="5">{c_add_l1} , {c_add_l2}, {c_city} , {c_state}-{c_zip}, {c_country}</td> </tr> <tr> <th colspan="2">Phone(O)</th> <td>{office_phoe}</td> <th colspan="2">Mobile</th> <td>{mobile}</td> </tr> <tr> <th colspan="2">Email</th> <td colspan="5">{email}</td> </tr> </table> <table class="table is-fullwidth is-bordered"> <tr> <th colspan="7">Work Profile</th> </tr> <tr> <th colspan="2">Phone(O)</th> <td>{office_phoe}</td> <th colspan="2">Mobile</th> <td>{mobile}</td> </tr> <tr> <th>Qulaification</th> <td colspan="2">{qualification}</td> <th colspan="2">Date of Joining</th> <td>{doj}</td> </tr> <tr> <th colspan="2">Specialization</th> <td>{specialization}</td> <th colspan="2">Employee Type</th> <td>{emp_type}</td> </tr> <tr> <th colspan="2">Designation</th> <td>{designation}</td> <th colspan="2">Department</th> <td>{department_name}</td> </tr> <tr> <th colspan="2">Level</th> <td>{level_name}</td> <th colspan="2">Employment Status</th> <td>{employment_status}</td> </tr> </table> <table class="table is-fullwidth is-bordered"> <tr> <th colspan="7"><b>Academic Qualification</b></th> </tr> <tr><th colspan="7">X Infrmation</th></tr> <tr> <th>Subject</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{x_subject}</td> <td>{x_institution}</td> <td>{x_board}</td> <td>{x_yop}</td> <td>{x_marks}</td> <td>{x_div}</td> </tr> <tr><th colspan="7">XII Infrmation</th></tr> <tr> <th>Subject</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{xii_subject}</td> <td>{xii_institution}</td> <td>{xii_board}</td> <td>{xii_yop}</td> <td>{xii_marks}</td> <td>{xii_div}</td> </tr> <tr><th colspan="7">UG Infrmation</th></tr> <tr> <th>Course</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{ug_course}</td> <td>{ug_institution}</td> <td>{ug_board}</td> <td>{ug_yop}</td> <td>{ug_marks}</td> <td>{ug_div}</td> </tr> <tr><th colspan="7">PG Infrmation</th></tr> <tr> <th>Course</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{pg_course}</td> <td>{pg_institution}</td> <td>{pg_board}</td> <td>{pg_yop}</td> <td>{pg_marks}</td> <td>{pg_div}</td> </tr> <tr><th colspan="7">B.Ed Infrmation</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{bed_stream}</td> <td>{bed_institution}</td> <td>{bed_board}</td> <td>{bed_yop}</td> <td>{bed_marks}</td> <td>{bed_div}</td> </tr> <tr><th colspan="7">B.T Infrmation</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{bt_stream}</td> <td>{bt_institution}</td> <td>{bt_board}</td> <td>{bt_yop}</td> <td>{bt_marks}</td> <td>{bt_div}</td> </tr> <tr><th colspan="7">B. P. Ed. Information</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{bped_stream}</td> <td>{bped_institution}</td> <td>{bped_board}</td> <td>{bped_yop}</td> <td>{bped_marks}</td> <td>{bped_div}</td> </tr> <tr><th colspan="7">D.P.Ed. Information</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{dped_stream}</td> <td>{dped_institution}</td> <td>{dped_board}</td> <td>{dped_yop}</td> <td>{dped_marks}</td> <td>{dped_div}</td> </tr> <tr><th colspan="7">M.P.Ed. Information</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{mped_stream}</td> <td>{mped_institution}</td> <td>{mped_board}</td> <td>{mped_yop}</td> <td>{mped_marks}</td> <td>{mped_div}</td> </tr> <tr><th colspan="7">M.Ed. Information</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{med_stream}</td> <td>{med_institution}</td> <td>{med_board}</td> <td>{med_yop}</td> <td>{med_marks}</td> <td>{med_div}</td> </tr> <tr><th colspan="7">M.Phil. Information</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{mphil_stream}</td> <td>{mphil_institution}</td> <td>{mphil_board}</td> <td>{mphil_yop}</td> <td>{mphil_marks}</td> <td>{mphil_div}</td> </tr> <tr><th colspan="7">Phd. Information</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{phd_stream}</td> <td>{phd_institution}</td> <td>{phd_board}</td> <td>{phd_yop}</td> <td>{phd_marks}</td> <td>{phd_div}</td> </tr> <tr><th colspan="7">Other Qualification</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{other_stream}</td> <td>{other_institution}</td> <td>{other_board}</td> <td>{other_yop}</td> <td>{other_marks}</td> <td>{other_div}</td> </tr> </table> <table class="table is-fullwidth is-bordered"> <tr> <th colspan="7">Extra Activities</th> </tr> <tr> <th colspan="2">Scholarship Details</th> <td colspan="2">{details_scholarship}</td> <th colspan="2">Awards/honours Details</th> <td>{details_honours}</td> </tr> <tr> <th colspan="2">Publication Details</th> <td>{details_publication}</td> <th colspan="3">Curricular Activities Details</th> <td>{details_curricular_activities}</td> </tr> <tr> <th colspan="3">Sports Detail</th> <td colspan="4">{details_sport}</td> </tr> </table> <table class="table is-fullwidth is-bordered"> <tr> <th colspan="7">Working Experience</th> </tr> <tr> <th>Institution</th> <th>DOJ</th> <th>DOL</th> <th>Position</th> <th>Subject Taught</th> </tr> <tr> <td>{work_institution}</td> <td>{doj}</td> <td>{dol}</td> <td>{position}</td> <td>{subject_taught}</td> </tr> </table> </section> <section class=" is-fluid" show="{staff_view ==\'show_staff_fast_edit\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Fast Edit</h2> </div> <div class="level-right"> <div> <button class="button is-warning is-rounded" onclick="{backToStaff}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="fast_edit_value" onchange="{showFastEdit}"> <option>Select Field</option> <option value="short_name">Short Name</option> <option value="gender">Gender</option> <option value="father_name">Father Name</option> <option value="blood_group">Blood Group</option> <option value="mobile">Mobile</option> <option value="phone_r">Phone Residence </option> <option value="phone_o">Phone Office</option> <option value="city">City</option> <option value="employee_id">Employee ID</option> </select> </div> </div> </div> </div> </div> <div class="level-right"><button class="button is-danger" onclick="{fastUpdateStaff}">Update</button></div> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th>EmpId</th> <th>Ttitle</th> <th>Name</th> <th show="{view_field==\'show_f_short_name\'}">short_name</th> <th show="{view_field==\'show_f_gender\'}">Gender</th> <th show="{view_field==\'show_f_father_name\'}">Father Name</th> <th show="{view_field==\'show_f_blood_group\'}">Blood Group</th> <th show="{view_field==\'show_f_mobile\'}">Mobile</th> <th show="{view_field==\'show_f_phone_r\'}">Phone Residence</th> <th show="{view_field==\'show_f_phone_o\'}">Phone Office </th> <th show="{view_field==\'show_f_picture\'}">Picture</th> <th show="{view_field==\'show_f_city\'}">City</th> <th show="{view_field==\'show_f_employee_id\'}">Employee Id</th> </tr> </thead> <tbody> <tr each="{st, i in staffs}"> <td>{i+1}</td> <td>{st.employee_id}</td> <td>{st.title}</td> <td>{st.first_name} {st.middle_name} {st.last_name}</td> <td show="{view_field==\'show_f_short_name\'}"> <input type="text" class="input is-small" id="{\'short_name\' + st.emp_id}" riot-value="{st.short_name}"></td> <td show="{view_field==\'show_f_gender\'}"> <select id="{\'gender\' + st.emp_id}" riot-value="{st.gender}"> <option value="M">Male</option> <option value="F">Female</option> </select> </td> <td show="{view_field==\'show_f_father_name\'}"> <input type="text" class="input is-small" id="{\'father_name\' + st.emp_id}" riot-value="{st.father_name}"></td> <td show="{view_field==\'show_f_blood_group\'}"> <select id="{\'blood_group\' + st.emp_id}" riot-value="{st.blood_group}"> <option value="A+">A+</option> <option value="A-">A-</option> <option value="AB+">AB+</option> <option value="AB-">AB-</option> <option value="B+">B+</option> <option value="B-">B-</option> <option value="O+">O+</option> <option value="O-">O-</option> </select> </td> <td show="{view_field==\'show_f_mobile\'}"> <input type="text" class="input is-small" id="{\'mobile\' + st.emp_id}" riot-value="{st.mobile}"> </td> <td show="{view_field==\'show_f_phone_r\'}"> <input type="text" class="input is-small" id="{\'phone_r\' + st.emp_id}" riot-value="{st.residence_phone}"></td> <td show="{view_field==\'show_f_phone_o\'}"> <input type="text" class="input is-small" id="{\'phone_o\' + st.emp_id}" riot-value="{st.office_phone}"></td> <td show="{view_field==\'show_f_city\'}"> <input type="text" class="input is-small" id="{\'city\' + st.emp_id}" riot-value="{st.city}"></td> <td show="{view_field==\'show_f_employee_id\'}"> <input type="text" class="input is-small" id="{\'employee_id\' + st.emp_id}" riot-value="{st.employee_id}"> </td> </tr> </tbody> </table> <div class="level-right"> <button class="button is-small is-danger" onclick="{fastUpdateStaff}">Update</button> <button class="button is-small" onclick="{backToStaff}">Cancel</button> </div> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
        self.title='Add'
    	self.staff_view = 'show_staff'
    	self.is_staff_picture=false
    	self.staff_picture=false
    	self.loading=false
    	self.role = getCookie('role')
    	self.readEmployeeTypes()
    	self.readDesignations()
    	self.readDepartment()
    	self.readLevel()
    	self.readReligion()
    	self.readReligion()
    	self.readCategory()
    	self.readSubject()
    	self.readEmploymentStatus()
    	self.staff_name = true

    	  self.workExperienceArray =[]
         let obj = {}
             obj.work_institution=''

        self.workExperienceArray.push(obj)
        self.update()

        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
      employmentStatusStore.off('employment_status_changed', EmploymentStatusChanged)
      subjectStore.off('read_subject_changed',ReadSubjectChanged)
      studentStore.off('read_cast_changed',CastChanged)
      studentStore.off('read_religion_changed',ReligionChanged)
      employeeTypeStore.off('employeeTypes_changed', EmployeeTypesChanged)
      designationStore.off('designations_changed', DesignationsChanged)
      levelStore.off('level_changed', LevelChanged)
      staffStore.off('department_changed', DepartmentChanged)
      staffStore.off('read_staff_changed',StaffChanged)
      staffStore.off('add_staff_changed',AddStaffChanged)
      staffStore.off('read_for_edit_staff_changed',ReadForEditStaffChanged)
      staffStore.off('upload_staff_image_changed',UploadStaffImage)
      staffStore.off('edit_staff_changed',EditStaffChanged)
      staffStore.off('update_staff_status_changed',UpdateStaffStatusChanged)
      staffStore.off('delete_staff_changed',DeleteStaffChanged)
      staffStore.off('allow_block_staff_changed',AllowBlockStaffChanged)
      staffStore.off('reset_staff_password_changed',ResetStaffPasswordChanged)
      staffStore.off('update_staff_fast_edit_changed',readStaffFastEditChanged)
    })

     self.add_more_work_exp=()=>{
	    let obj = {}
        obj.work_institution=''
        self.workExperienceArray.push(obj)
        self.update()
          let work_doj_id='#work_doj'+ (self.workExperienceArray.length-1).toString()
          let work_dol_id='#work_dol'+ (self.workExperienceArray.length-1).toString()

		 console.log(work_dol_id)
	  	 setTimeout(function(){

	        flatpickr(work_doj_id, {
		    	allowInput: true,
	        	dateFormat: "d/m/Y",
	  		})

	        flatpickr(work_dol_id, {
		    	allowInput: true,
	        	dateFormat: "d/m/Y",
		  	})

		}, 1000);
    }

    self.remove = (index,e) => {
      console.log(index)
       self.workExperienceArray.splice(index,1);
    }

     self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

    self.showFastEditModal = () =>{
       self.staff_view ='show_staff_fast_edit'
    }
     self.backToStaff = () =>{
       self.staff_view ='show_staff'
    }

     self.showFastEdit= () =>{
        if(self.refs.fast_edit_value.value=='gender'){
       	 self.view_field='show_f_gender'
        }
        if(self.refs.fast_edit_value.value=='short_name'){
       	 self.view_field='show_f_short_name'
        }
        if(self.refs.fast_edit_value.value=='father_name'){
       	 self.view_field='show_f_father_name'
        }
        if(self.refs.fast_edit_value.value=='blood_group'){
       	 self.view_field='show_f_blood_group'
        }
        if(self.refs.fast_edit_value.value=='city'){
       	 self.view_field='show_f_city'
        }
        if(self.refs.fast_edit_value.value=='employee_id'){
       	 self.view_field='show_f_employee_id'
        }
         if(self.refs.fast_edit_value.value=='mobile'){
       	 self.view_field='show_f_mobile'
        }
         if(self.refs.fast_edit_value.value=='phone_o'){
       	 self.view_field='show_f_phone_o'
        }
         if(self.refs.fast_edit_value.value=='phone_r'){
       	 self.view_field='show_f_phone_r'
        }
    }

    self.fastUpdateStaff=()=>{
    	var editValues = []
	    console.log(self.staffs)
	   	self.staffs.map( q => {
	   	var obj={}
	     	obj['emp_id'] = q.emp_id
		    if(self.refs.fast_edit_value.value=='gender'){
	       	  obj['value'] = $('#gender'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	        if(self.refs.fast_edit_value.value=='short_name'){
	       	 obj['value'] = $('#short_name'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	        if(self.refs.fast_edit_value.value=='father_name'){
	       	 obj['value'] = $('#father_name'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	        if(self.refs.fast_edit_value.value=='blood_group'){
	       	 obj['value'] = $('#blood_group'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	        if(self.refs.fast_edit_value.value=='city'){
	       	 obj['value'] = $('#city'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	        if(self.refs.fast_edit_value.value=='employee_id'){
	       	 obj['value'] = $('#employee_id'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	         if(self.refs.fast_edit_value.value=='mobile'){
	       	 obj['value'] = $('#mobile'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	         if(self.refs.fast_edit_value.value=='phone_o'){
	       	 obj['value'] = $('#phone_o'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	         if(self.refs.fast_edit_value.value=='phone_r'){
	       	 obj['value'] = $('#phone_r'+q.emp_id).val();
	   	      editValues.push(obj);
	        }

	   	})
	   	console.log(editValues)
	     staffStore.trigger('fast_edit_staff',editValues,self.refs.fast_edit_value.value)
    }

    self.closeFastEditModal=()=>{
    	 $("#columnSetting").removeClass("is-active");
    }

     self.showFastEditTable = () =>{
       $("#fastEditTable").addClass("is-active")

    }

    self.closeFastEditTable=()=>{
    	 $("#fastEditTable").removeClass("is-active");
    }

    self.close_staff_profile=()=>{
    	self.staff_view='show_staff'
    	self.title='Add';
    }
    self.updateEmployeeStatus=()=>{
    	self.leaving_date=convertDate(self.refs.leaving_date.value)
    	staffStore.trigger('update_staff_status',self.emp_id,self.leaving_date,self.refs.remark.value)
    }
    self.allowBlockStaff=()=>{
    	if(self.is_active=='Y'){
    		 var active='N'
    		staffStore.trigger('allow_block_staff',self.emp_id, active)
    		console.log(is_active)
    	}else{
    		var active='Y'
    		console.log(active)
    		staffStore.trigger('allow_block_staff',self.emp_id, active)
    	}
    }
     self.resetStaffPassword=()=>{

    	staffStore.trigger('reset_staff_password',self.emp_id)
    }
    self.readEmployeeTypes = () => {
       employeeTypeStore.trigger('read_employeeTypes')
    }
    self.readDesignations = () => {
       designationStore.trigger('read_designations')
    }
    self.readLevel = () => {
       levelStore.trigger('read_level')
    }

    self.readDepartment = () => {
       staffStore.trigger('read_department')
    }

    self.getStaffData = () =>{

    		self.loading=true
    		staffStore.trigger('read_temp_staff', self.refs.r_emp_type_id.value)

    }

    self.add_new_staff = () =>{
    	if(self.title=='Add' || self.title=='Approve'){
    		self.staff_view='add_staff'
    	}else{
    	  self.staff_view='staff_profile'
    	}
    	self.update()
    	document.getElementById("first_name").focus()
    }

    self.selectStaff = (item,event) => {
      item.done=!event.item.st.done
      console.log(item.done)
      if(event.item.st.done==true){
        self.emp_id=item.emp_id
        self.is_active=item.is_active
        console.log(self.emp_id)
        console.log(self.is_active)
       }
     }

    self.update_staff_status = () => {

        self.title = 'Add'
        $("#statusModal").addClass("is-active");
    }

    self.closeStatusUpdateModal = () => {
      $("#statusModal").removeClass("is-active");
       self.staffs.map(i=>{
          i.done = false;
          $('EmpId'+i.emp_id).prop('checked', false);
       })
    }

    self.close = () =>{
    	self.staff_view = 'show_staff'
    	self.clearForm();
    }

    self.cancelOperation = (e) => {
      self.staffs.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.staffs.map(ev => {
        if(ev.emp_id != e.item.st.emp_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      staffStore.trigger('delete_staff', e.item.st.emp_id)
    }

    self.addFamilyInformation = () =>{

      self.staff_view='add_family_information'
      self.update()
    }
    self.closeFamilyInformation = () =>{
    	self.staff_view = 'add_staff'
    	self.update()
    }
    self.addQualificationInformation = () =>{

    		self.staff_view='add_qualification_information'
    		self.update()

    }
    self.closeQualificationInformation = () =>{
    	self.staff_view = 'add_family_information'
    	self.update()
    }

    self.addProfessionalCourseInformation = () =>{

    		self.staff_view='add_professional_course_information'
    		self.update()

    }
    self.closeProfessionalCourseInformation = () =>{
    	self.staff_view = 'add_qualification_information'
    }
    self.addProfessionalMasterCourseInformation = () =>{

    		self.staff_view='add_professional_master_course_information'
    		self.update()

    }
    self.closeProfessionalMasterCourseInformation = () =>{
    	self.staff_view = 'add_professional_course_information'
    }

    self.addExtraActivityInformation = () =>{

    		self.staff_view='add_extra_activity_information'
    		self.update()

    }
    self.closeExtraActivityInformation = () =>{
    	self.staff_view = 'add_professional_master_course_information'
    }

    self.addPrevoiusJob = () =>{
    		self.staff_view='add_previous_job_information'
    		self.update()
    }
    self.closePreviousJob= () =>{
    	self.staff_view='add_extra_activity_information'
    	self.update()
    }
    self.readSubject = () => {
       subjectStore.trigger('read_subject')
    }
    self.readEmploymentStatus = () => {
       employmentStatusStore.trigger('read_employment_status')
    }

    subjectStore.on('read_subject_changed',ReadSubjectChanged)
    function ReadSubjectChanged(subjects){
      console.log(subjects)
      self.subjects = subjects
      self.update()
      console.log(self.subjects)
    }

     employmentStatusStore.on('employment_status_changed',EmploymentStatusChanged)
    function EmploymentStatusChanged(employmentStatus){
      console.log('employment_status_changed1')
      console.log(employmentStatus)
      self.loading = false
      self.employmentStatus = employmentStatus
      self.update()
    }

    self.copyAddress = (e) => {
    	let cbox = '#correspondenceCheckbox'
    	if($(cbox).prop('checked') == true){
    		console.log("true")
    		self.refs.c_add_l1.value=self.refs.add_l1.value
    		self.refs.c_add_l2.value=self.refs.add_l2.value
    		self.refs.c_city.value=self.refs.city.value
    		self.refs.c_zip.value=self.refs.zip.value
    		self.refs.c_state.value=self.refs.state.value
    		self.refs.c_country.value=self.refs.country.value
    		self.update()
    	}else{
    		console.log("false")
    		self.refs.c_add_l1.value=''
    		self.refs.c_add_l2.value=''
    		self.refs.c_city.value=''
    		self.refs.c_zip.value=''
    		self.refs.c_state.value=''
    		self.refs.c_country.value=''
    	}
    }

	self.remove_picture = (item1, item2, e) => {
		console.log('item1'+item1)
		console.log('item2'+item2)
		var pp_box = document.getElementById(item1);
		pp_box.style.backgroundImage = "";
		document.getElementById(item2).value = ""
		event.stopPropagation();
	}

	self.trigger_file_input = (item,e) => {
		document.getElementById(item).click();
	}

     self.loadFile = (item,event) => {
		var reader = new FileReader();
		reader.onload = function (e) {
			console.log(item)
			document.getElementById(item).style.backgroundImage = 'url(' + e.target.result + ')';
			console.log(e.target.result)
			self.is_staff_image=true
		};
		reader.readAsDataURL(event.target.files[0]);

		console.log(event.target.files[0])
		self.staff_picture = event.target.files[0]
	}

	self.uploadStaffImage = (staff_id) => {
		if(self.is_staff_image == true){
    		staffStore.trigger('upload_staff_image', self.staff_picture,staff_id)
		}
    }

    self.readCategory = () => {
       studentStore.trigger('read_cast')
    }

    self.readReligion = () => {
       studentStore.trigger('read_religion')
    }

    self.addInformation = () =>{
    	console.log("addInformation")
    	var obj={}

        var staff={};

        self.workExperienceArray.map((x, index) => {
          let work_institution_id='#work_instituition'+index
          let work_doj_id='#work_doj'+index
          let work_dol_id='#work_dol'+index
          let work_position_id='#work_position'+index
          let work_subject_id='#work_subject'+index

           x.institution = $(work_institution_id).val()
           x.date_of_joining = convertDate($(work_doj_id).val())
           x.date_of_leaving = convertDate($(work_dol_id).val())
           x.position = $(work_position_id).val()
           x.subjects_taught = $(work_subject_id).val()
        });

        var work_experience={}

        obj['workExperienceArray']=self.workExperienceArray

    	staff['title']=self.refs.title.value
    	staff['first_name']=self.refs.first_name.value
    	staff['middle_name']=self.refs.middle_name.value
    	staff['last_name']=self.refs.last_name.value

    	if(self.refs.short_name.value==''){
    		staff['short_name']=null
    	}else{
    	    staff['short_name']=self.refs.short_name.value
    	}

    	if(self.refs.marital_status.value==''){
    		staff['marital_status']=null
    	}else{
    	    staff['marital_status']=self.refs.marital_status.value
    	}
    	staff['father_name']=self.refs.father_name.value
    	staff['father_occupation']=self.refs.father_occupation.value
    	staff['spouse']=self.refs.spouse.value
    	staff['spouse_occupation']=self.refs.spouse_occupation.value
    	staff['anniversary']=convertDate(self.refs.anniversary.value)
    	staff['id_mark']=self.refs.id_mark.value

    	if(self.refs.blood_group.value==''){
    		staff['blood_group']=null
    	}else{
    	    staff['blood_group']=self.refs.blood_group.value
    	}

    	if(self.refs.religion_id.value==''){
    		staff['religion_id']=null
    	}else{
    	    staff['religion_id']=self.refs.religion_id.value
    	}

    	staff['language']=self.refs.language.value

    	if(self.refs.emp_type_id.value==''){
    		staff['emp_type_id']=null
    	}else{
    	    staff['emp_type_id']=self.refs.emp_type_id.value
    	}

    	if(self.refs.department_id.value==''){
    		staff['department_id']=null
    	}else{
    	    staff['department_id']=self.refs.department_id.value
    	}

    	if(self.refs.designation_id.value==''){
    		staff['designation_id']=null
    	}else{
    	    staff['designation_id']=self.refs.designation_id.value
    	}

        if(self.refs.subject_id.value==''){
    		staff['subject_id']=null
    	}else{
    	    staff['subject_id']=self.refs.subject_id.value
    	}

    	 if(self.refs.category_id.value==''){
    		staff['category_id']=null
    	}else{
    	    staff['category_id']=self.refs.category_id.value
    	}

    	staff['language']=self.refs.language.value

    	staff['qualification']=self.refs.qualification.value
    	staff['doj']=convertDate(self.refs.doj.value)
    	staff['place_of_birth']=self.refs.place_of_birth.value

    	staff['dob']=convertDate(self.refs.dob.value)

    	staff['add_l1']=self.refs.add_l1.value
    	staff['add_l2']=self.refs.add_l2.value
    	staff['city']=self.refs.city.value
    	staff['zip']=self.refs.zip.value
    	staff['state']=self.refs.state.value
    	staff['country']=self.refs.country.value
    	if($('#correspondenceCheckbox').prop('checked') == true){
    		staff['same_as_p_add'] = 1
    	}else{
    		staff['same_as_p_add'] = 0
    	}

    	staff['c_add_l1']=self.refs.c_add_l1.value
    	staff['c_add_l2']=self.refs.c_add_l2.value
    	staff['c_city']=self.refs.c_city.value
    	staff['c_zip']=self.refs.c_zip.value
    	staff['c_state']=self.refs.c_state.value
    	staff['c_country']=self.refs.c_country.value
    	staff['residence_phone']=self.refs.residence_phone.value
    	staff['office_phone']=self.refs.office_phone.value
    	staff['mobile']=self.refs.mobile.value
    	staff['email']=self.refs.email.value
    	staff['nationality']=self.refs.nationality.value

        obj['staff']=staff;
        var staff_login={}
    	staff_login['employee_id']=self.refs.employee_id.value
    	staff_login['password']=self.refs.dob.value
    	if(self.title=='Add'){
    		obj['staff_login'] = staff_login
    	}else if(self.title=='Approve'){
    		obj['staff_login']=""
    	}

        var family={};

        family['child1_first_name']=self.refs.child1_first_name.value
    	family['child1_last_name']=self.refs.child1_last_name.value
    	if(self.refs.child1_sex.value==''){
    		family['child1_sex']=null
    	}else{
    	    family['child1_sex']=self.refs.child1_sex.value
    	}
    	family['child1_dob']=convertDate(self.refs.child1_dob.value)
    	family['child1_school']=self.refs.child1_school.value
    	family['child2_first_name']=self.refs.child2_first_name.value
    	family['child2_last_name']=self.refs.child2_last_name.value
    	if(self.refs.child2_sex.value==''){
    		family['child2_sex']=null
    	}else{
    	    family['child2_sex']=self.refs.child2_sex.value
    	}

    	family['child2_dob']=convertDate(self.refs.child2_dob.value)
    	family['child2_school']=self.refs.child2_school.value
    	family['child3_first_name']=self.refs.child3_first_name.value
    	family['child3_last_name']=self.refs.child3_last_name.value
    	if(self.refs.child3_sex.value==''){
    		family['child3_sex']=null
    	}else{
    	    family['child3_sex']=self.refs.child3_sex.value
    	}

    	family['child3_dob']=convertDate(self.refs.child3_dob.value)
    	family['child3_school']=self.refs.child3_school.value

       obj['family']=family

    	var qualification={};
    	qualification['x_subject']=self.refs.x_subject.value
    	qualification['x_institution']=self.refs.x_institution.value
    	qualification['x_board']=self.refs.x_board.value
    	if(self.refs.x_yop.value==''){
    		qualification['x_yop']=null
    	}else{
    	    qualification['x_yop']=self.refs.x_yop.value
    	}
    	qualification['x_marks']=self.refs.x_marks.value
    	qualification['x_div']=self.refs.x_div.value
    	qualification['xii_subject']=self.refs.xii_subject.value
    	qualification['xii_institution']=self.refs.xii_institution.value
    	qualification['xii_board']=self.refs.xii_board.value

    	if(self.refs.xii_yop.value==''){
    		qualification['xii_yop']=null
    	}else{
    	    qualification['xii_yop']=self.refs.xii_yop.value
    	}

    	qualification['xii_marks']=self.refs.xii_marks.value
    	qualification['xii_div']=self.refs.xii_div.value
    	qualification['ug_course']=self.refs.ug_course.value
    	qualification['ug_institution']=self.refs.ug_institution.value
    	qualification['ug_university']=self.refs.ug_university.value

    	if(self.refs.ug_yop.value==''){
    		qualification['ug_yop']=null
    	}else{
    	    qualification['ug_yop']=self.refs.ug_yop.value
    	}

    	qualification['ug_marks']=self.refs.ug_marks.value
    	qualification['ug_div']=self.refs.ug_div.value
    	qualification['pg_course']=self.refs.pg_course.value
    	qualification['pg_institution']=self.refs.pg_institution.value
    	qualification['pg_university']=self.refs.pg_university.value

    	if(self.refs.pg_yop.value==''){
    		qualification['pg_yop']=null
    	}else{
    	    qualification['pg_yop']=self.refs.pg_yop.value
    	}

    	qualification['pg_marks']=self.refs.pg_marks.value
    	qualification['pg_div']=self.refs.pg_div.value
    	qualification['bed_stream']=self.refs.bed_stream.value
    	qualification['bed_institution']=self.refs.bed_institution.value
    	qualification['bed_university']=self.refs.bed_university.value

    	if(self.refs.bed_yop.value==''){
    		qualification['bed_yop']=null
    	}else{
    	    qualification['bed_yop']=self.refs.bed_yop.value
    	}

    	qualification['bed_marks']=self.refs.bed_marks.value
    	qualification['bed_div']=self.refs.bed_div.value

    	qualification['bt_stream']=self.refs.bt_stream.value
    	qualification['bt_institution']=self.refs.bt_institution.value
    	qualification['bt_university']=self.refs.bt_university.value

    	if(self.refs.bt_yop.value==''){
    		qualification['bt_yop']=null
    	}else{
    	    qualification['bt_yop']=self.refs.bt_yop.value
    	}

    	qualification['bt_marks']=self.refs.bt_marks.value
    	qualification['bt_div']=self.refs.bt_div.value

    	qualification['bped_stream']=self.refs.bped_stream.value
    	qualification['bped_institution']=self.refs.bped_institution.value
    	qualification['bped_university']=self.refs.bped_university.value

    	if(self.refs.bped_yop.value==''){
    		qualification['bped_yop']=null
    	}else{
    	    qualification['bped_yop']=self.refs.bped_yop.value
    	}

    	qualification['bped_marks']=self.refs.bped_marks.value
    	qualification['bped_div']=self.refs.bped_div.value

    	qualification['dped_stream']=self.refs.dped_stream.value
    	qualification['dped_institution']=self.refs.dped_institution.value
    	qualification['dped_university']=self.refs.dped_university.value

    	if(self.refs.dped_yop.value==''){
    		qualification['dped_yop']=null
    	}else{
    	    qualification['dped_yop']=self.refs.dped_yop.value
    	}

    	qualification['dped_marks']=self.refs.dped_marks.value
    	qualification['dped_div']=self.refs.dped_div.value

    	qualification['mped_stream']=self.refs.mped_stream.value
    	qualification['mped_institution']=self.refs.mped_institution.value
    	qualification['mped_university']=self.refs.mped_university.value

    	if(self.refs.mped_yop.value==''){
    		qualification['mped_yop']=null
    	}else{
    	    qualification['mped_yop']=self.refs.mped_yop.value
    	}

    	qualification['mped_marks']=self.refs.mped_marks.value
    	qualification['mped_div']=self.refs.mped_div.value

    	qualification['med_stream']=self.refs.med_stream.value
    	qualification['med_institution']=self.refs.med_institution.value
    	qualification['med_university']=self.refs.med_university.value

    	if(self.refs.med_yop.value==''){
    		qualification['med_yop']=null
    	}else{
    	    qualification['med_yop']=self.refs.med_yop.value
    	}

    	qualification['med_marks']=self.refs.med_marks.value
    	qualification['med_div']=self.refs.med_div.value

    	qualification['mphil_stream']=self.refs.mphil_stream.value
    	qualification['mphil_institution']=self.refs.mphil_institution.value
    	qualification['mphil_university']=self.refs.mphil_university.value

    	if(self.refs.mphil_yop.value==''){
    		qualification['mphil_yop']=null
    	}else{
    	    qualification['mphil_yop']=self.refs.mphil_yop.value
    	}

    	qualification['mphil_marks']=self.refs.mphil_marks.value
    	qualification['mphil_div']=self.refs.mphil_div.value

    	qualification['phd_stream']=self.refs.phd_stream.value
    	qualification['phd_institution']=self.refs.phd_institution.value
    	qualification['phd_university']=self.refs.phd_university.value

    	if(self.refs.phd_yop.value==''){
    		qualification['phd_yop']=null
    	}else{
    	    qualification['phd_yop']=self.refs.phd_yop.value
    	}

    	qualification['phd_marks']=self.refs.phd_marks.value
    	qualification['phd_div']=self.refs.phd_div.value

    	qualification['other_stream']=self.refs.other_stream.value
    	qualification['other_institution']=self.refs.other_institution.value
    	qualification['other_university']=self.refs.other_university.value

    	if(self.refs.other_yop.value==''){
    		qualification['other_yop']=null
    	}else{
    	    qualification['other_yop']=self.refs.other_yop.value
    	}

    	qualification['other_marks']=self.refs.other_marks.value
    	qualification['other_div']=self.refs.other_div.value

    	qualification['details_scholarship']=self.refs.details_scholarship.value

    	qualification['details_honours']=self.refs.details_honours.value
    	qualification['details_publication']=self.refs.details_publication.value
    	qualification['details_curricular_activities']=self.refs.details_curricular_activities.value
    	qualification['details_sport']=self.refs.details_sport.value

    	obj['qualification']=qualification

    	var previous_job={}

    	previous_job['organization_of_previous_job']=self.refs.organization_of_previous_job.value
    	previous_job['add_l1_of_previous_job']=self.refs.add_l1_of_previous_job.value
    	previous_job['add_l2_of_previous_job']=self.refs.add_l2_of_previous_job.value
    	previous_job['city_of_previous_job']=self.refs.city_of_previous_job.value
    	previous_job['zip_of_previous_job']=self.refs.zip_of_previous_job.value
    	previous_job['state_of_previous_job']=self.refs.state_of_previous_job.value
    	previous_job['country_of_previous_job']=self.refs.country_of_previous_job.value
    	previous_job['designation_of_previous_job']=self.refs.designation_of_previous_job.value
    	previous_job['doj_of_previous_job']=convertDate(self.refs.doj_of_previous_job.value)
    	previous_job['salary_of_previous_job']=self.refs.salary_of_previous_job.value
    	previous_job['basic_of_previous_job']=self.refs.basic_of_previous_job.value
    	previous_job['allowances_of_previous_job']=self.refs.allowances_of_previous_job.value
    	previous_job['other_benefits_of_previous_job']=self.refs.other_benefits_of_previous_job.value
    	previous_job['bond_details_of_previous_job']=self.refs.bond_details_of_previous_job.value

		obj['previous_job']=previous_job

		var work_experience={}

    	if(self.title=='Add'){
          staffStore.trigger('add_staff', obj)
        }else if(self.title=='Approve'){
        	self.editType='normalEdit'
          staffStore.trigger('edit_temp_staff', obj,self.emp_id)
        }
    }

    self.edit = (c,st) => {
      console.log(c)
      self.emp_id = c
      flatpickr(".date", {
	    allowInput: true,
        dateFormat: "d/m/Y",
  		})
      staffStore.trigger('read_for_edit_temp_staff',self.emp_id)
      document.getElementById('pp_box').style.backgroundImage = 'url(/images/empImages/'+c+'.jpg)';
      self.title='Approve'
      self.add_new_staff()

    }
    self.printProfile = (c,st) => {
      console.log(c)
      self.emp_id = c
      staffStore.trigger('read_for_edit_staff',self.emp_id)
      document.getElementById('pp_box1').src= '/images/empImages/'+c+'.jpg';
      self.title='printProfile'
      self.add_new_staff()
    }

    self.clearForm = () => {
        self.workExperienceArray=[{}]
    	self.refs.title.value=''
    	self.refs.first_name.value=''
    	self.refs.middle_name.value=''
    	self.refs.last_name.value=''

    	self.refs.short_name.value=''
    	self.refs.marital_status.value=''
    	self.refs.father_name.value=''
    	self.refs.father_occupation.value=''
    	self.refs.spouse.value=''
    	self.refs.spouse_occupation.value=''
    	self.refs.anniversary.value=''
    	self.refs.id_mark.value=''
    	self.refs.blood_group.value=''
    	self.refs.religion_id.value=''
    	self.refs.language.value=''
    	self.refs.emp_type_id.value=''
    	self.refs.department_id.value=''

    	self.refs.subject_id.value=''
    	self.refs.designation_id.value=''
    	self.refs.qualification.value=''
    	self.refs.qualification.value=''
    	self.refs.doj.value=''
    	self.refs.place_of_birth.value=''
    	self.refs.category_id.value=''
    	self.refs.dob.value=''
    	self.refs.blood_group.value=''
    	self.refs.add_l1.value=''
    	self.refs.add_l2.value=''
    	self.refs.city.value=''
    	self.refs.zip.value=''
    	self.refs.state.value=''
    	self.refs.country.value=''

    	self.refs.c_add_l1.value=''
    	self.refs.c_add_l2.value=''
    	self.refs.c_city.value=''
    	self.refs.c_zip.value=''
    	self.refs.c_state.value=''
    	self.refs.c_country.value=''
    	self.refs.residence_phone.value=''
    	self.refs.office_phone.value=''
    	self.refs.mobile.value=''
    	self.refs.email.value=''

    	self.refs.child1_first_name.value=''
    	self.refs.child1_last_name.value=''
    	self.refs.child1_sex.value=''
    	self.refs.child1_dob.value=''
    	self.refs.child1_school.value=''
    	self.refs.child2_first_name.value=''
    	self.refs.child2_last_name.value=''
    	self.refs.child2_sex.value=''
    	self.refs.child2_dob.value=''
    	self.refs.child2_school.value=''
    	self.refs.child3_first_name.value=''
    	self.refs.child3_last_name.value=''
    	self.refs.child3_sex.value=''
    	self.refs.child3_dob.value=''
    	self.refs.child3_school.value=''

    	self.refs.x_subject.value=''
    	self.refs.x_institution.value=''
    	self.refs.x_board.value=''
    	self.refs.x_yop.value=''
    	self.refs.x_marks.value=''
    	self.refs.x_div.value=''
    	self.refs.xii_subject.value=''
    	self.refs.xii_institution.value=''
    	self.refs.xii_board.value=''
    	self.refs.xii_yop.value=''
    	self.refs.xii_marks.value=''
    	self.refs.xii_div.value=''
    	self.refs.ug_course.value=''
    	self.refs.ug_institution.value=''
    	self.refs.ug_university.value=''
    	self.refs.ug_yop.value=''
    	self.refs.ug_marks.value=''
    	self.refs.ug_div.value=''
    	self.refs.pg_course.value=''
    	self.refs.pg_institution.value=''
    	self.refs.pg_university.value=''
    	self.refs.pg_yop.value=''
    	self.refs.pg_marks.value=''
    	self.refs.pg_div.value=''
    	self.refs.bed_stream.value=''
    	self.refs.bed_institution.value=''
    	self.refs.bed_university.value=''
    	self.refs.bed_yop.value=''
    	self.refs.bed_marks.value=''
    	self.refs.bed_div.value=''

    	self.refs.bt_stream.value=''
    	self.refs.bt_institution.value=''
    	self.refs.bt_university.value=''
    	self.refs.bt_yop.value=''
    	self.refs.bt_marks.value=''
    	self.refs.bt_div.value=''

    	self.refs.bped_stream.value=''
    	self.refs.bped_institution.value=''
    	self.refs.bped_university.value=''
    	self.refs.bped_yop.value=''
    	self.refs.bped_marks.value=''
    	self.refs.bped_div.value=''

    	self.refs.dped_stream.value=''
    	self.refs.dped_institution.value=''
    	self.refs.dped_university.value=''
    	self.refs.dped_yop.value=''
    	self.refs.dped_marks.value=''
    	self.refs.dped_div.value=''

    	self.refs.mped_stream.value=''
    	self.refs.mped_institution.value=''
    	self.refs.mped_university.value=''
    	self.refs.mped_yop.value=''
    	self.refs.mped_marks.value=''
    	self.refs.mped_div.value=''

    	self.refs.med_stream.value=''
    	self.refs.med_institution.value=''
    	self.refs.med_university.value=''
    	self.refs.med_yop.value=''
    	self.refs.med_marks.value=''
    	self.refs.med_div.value=''

    	self.refs.mphil_stream.value=''
    	self.refs.mphil_institution.value=''
    	self.refs.mphil_university.value=''
    	self.refs.mphil_yop.value=''
    	self.refs.mphil_marks.value=''
    	self.refs.mphil_div.value=''

    	self.refs.phd_stream.value=''
    	self.refs.phd_institution.value=''
    	self.refs.phd_university.value=''
    	self.refs.phd_yop.value=''
    	self.refs.phd_marks.value=''
    	self.refs.phd_div.value=''

    	self.refs.other_stream.value=''
    	self.refs.other_institution.value=''
    	self.refs.other_university.value=''
    	self.refs.other_yop.value=''
    	self.refs.other_marks.value=''
    	self.refs.other_div.value=''

    	self.refs.details_scholarship.value=''

    	self.refs.details_honours.value=''
    	self.refs.details_publication.value=''
    	self.refs.details_curricular_activities.value=''
    	self.refs.details_sport.value=''
    	pp_box.style.backgroundImage = "";
    }

    studentStore.on('read_cast_changed',CastChanged)
    function CastChanged(cast){
      console.log(cast)
      self.cast = cast
      self.update()
    }

    studentStore.on('read_religion_changed',ReligionChanged)
    function ReligionChanged(religion){
      console.log(religion)
      self.religion = religion
      self.update()
    }

    staffStore.on('read_staff_changed',StaffChanged)
    function StaffChanged(staffs){
      console.log(staffs)
      self.staffs = staffs
      self.loading=false
        self.staffs.map(i=>{
         if(i.emp_id==null){
              i.done = false;
               self.emp_id=i.emp_id
         }else{
          i.done = false;
          $('EmpId'+i.emp_id).prop('checked', false);
         }
       })
      self.update()
    }

    staffStore.on('add_staff_changed',AddStaffChanged)
    function AddStaffChanged(staffs,staff_id){
      console.log(staffs)
      self.staffs = staffs
      self.uploadStaffImage(staff_id)
      self.update()
    }

  staffStore.on('edit_staff_changed',EditStaffChanged)
    function EditStaffChanged(staffs){
      console.log(staffs)
      self.staffs = staffs
      console.log(self.emp_id)
      self.uploadStaffImage(self.emp_id)
      self.clearForm()
      self.update()
    }
    staffStore.on('update_staff_status_changed',UpdateStaffStatusChanged)
    function UpdateStaffStatusChanged(){
      self.refs.leaving_date.value=''
      self.refs.remark.value='';
      self.closeStatusUpdateModal()
      self.getStaffData();
      self.update()
    }

    staffStore.on('allow_block_staff_changed',AllowBlockStaffChanged)
    function AllowBlockStaffChanged(){
      self.closeStatusUpdateModal()
      self.getStaffData();
      self.update()
    }
    staffStore.on('delete_staff_changed',DeleteStaffChanged)
    function DeleteStaffChanged(){
      self.getStaffData();
      self.update()
    }
    staffStore.on('reset_staff_password_changed',ResetStaffPasswordChanged)
    function ResetStaffPasswordChanged(){

      self.update()
    }

    staffStore.on('update_staff_fast_edit_changed',readStaffFastEditChanged)
    function readStaffFastEditChanged(){

      self.update()
    }

    staffStore.on('read_for_edit_staff_changed',ReadForEditStaffChanged)
    function ReadForEditStaffChanged(staff_details,workExperienceArray){
     	self.staff_details=staff_details
     	self.workExperienceArray =[]
         let obj = {}
             obj.work_institution=''

        self.workExperienceArray.push(obj)
     	self.workExperienceArray=workExperienceArray
     	if(self.title=='Approve'){
     		console.log("inside approve")
         self.refs.title.value=staff_details[0].title
    	self.refs.first_name.value=staff_details[0].first_name
    	self.refs.middle_name.value=staff_details[0].middle_name
    	self.refs.last_name.value=staff_details[0].last_name
    	self.refs.gender.value=staff_details[0].gender
    	self.refs.employee_id.value=staff_details[0].employee_id
    	self.refs.short_name.value=staff_details[0].short_name
    	self.refs.marital_status.value=staff_details[0].marital_status
    	self.refs.father_name.value=staff_details[0].father_name
    	self.refs.father_occupation.value=staff_details[0].father_occupation
    	self.refs.spouse.value=staff_details[0].spouse
    	self.refs.spouse_occupation.value=staff_details[0].spouse_occupation
    	self.refs.anniversary.value=staff_details[0].anniversary
    	self.refs.id_mark.value=staff_details[0].id_mark
    	self.refs.blood_group.value=staff_details[0].blood_group
    	self.refs.religion_id.value=staff_details[0].religion_id
    	self.refs.language.value=staff_details[0].language
    	self.refs.emp_type_id.value=staff_details[0].emp_type_id
    	self.refs.department_id.value=staff_details[0].department_id

    	self.refs.subject_id.value=staff_details[0].subject_id
    	self.refs.designation_id.value=staff_details[0].designation_id
    	self.refs.qualification.value=staff_details[0].qualification
    	self.refs.doj.value=staff_details[0].doj
    	self.refs.category_id.value=staff_details[0].category_id

    	console.log(self.refs.category_id.value)
    	self.refs.place_of_birth.value=staff_details[0].place_of_birth
    	self.refs.dob.value=staff_details[0].dob

    	self.refs.add_l1.value=staff_details[0].add_l1
    	self.refs.add_l2.value=staff_details[0].add_l2
    	self.refs.city.value=staff_details[0].city
    	self.refs.zip.value=staff_details[0].zip
    	self.refs.state.value=staff_details[0].state
    	self.refs.country.value=staff_details[0].country
    	if(staff_details[0].same_as_p_add == 1){
			$('#correspondenceCheckbox').prop('checked', true)
		}else{
			$('#correspondenceCheckbox').prop('checked', false)
		}
    	self.refs.c_add_l1.value=staff_details[0].c_add_l1
    	self.refs.c_add_l2.value=staff_details[0].c_add_l2
    	self.refs.c_city.value=staff_details[0].c_city
    	self.refs.c_zip.value=staff_details[0].c_zip
    	self.refs.c_state.value=staff_details[0].c_state
    	self.refs.c_country.value=staff_details[0].c_country
    	self.refs.residence_phone.value=staff_details[0].residence_phone
    	self.refs.office_phone.value=staff_details[0].office_phone
    	self.refs.mobile.value=staff_details[0].mobile
    	self.refs.email.value=staff_details[0].email

    	self.refs.child1_first_name.value=staff_details[0].child1_first_name
    	self.refs.child1_last_name.value=staff_details[0].child1_last_name
    	self.refs.child1_sex.value=staff_details[0].child1_sex
    	self.refs.child1_dob.value=staff_details[0].child1_dob
    	self.refs.child1_school.value=staff_details[0].child1_school
    	self.refs.child2_first_name.value=staff_details[0].child2_first_name
    	self.refs.child2_last_name.value=staff_details[0].child2_last_name
    	self.refs.child2_sex.value=staff_details[0].child2_sex
    	self.refs.child2_dob.value=staff_details[0].child2_dob
    	self.refs.child2_school.value=staff_details[0].child2_school
    	self.refs.child3_first_name.value=staff_details[0].child3_first_name
    	self.refs.child3_last_name.value=staff_details[0].child3_last_name
    	self.refs.child3_sex.value=staff_details[0].child3_sex
    	self.refs.child3_dob.value=staff_details[0].child3_dob
    	self.refs.child3_school.value=staff_details[0].child3_school

    	self.refs.x_subject.value=staff_details[0].x_subject
    	self.refs.x_institution.value=staff_details[0].x_institution
    	self.refs.x_board.value=staff_details[0].x_board
    	self.refs.x_yop.value=staff_details[0].x_yop
    	self.refs.x_marks.value=staff_details[0].x_marks
    	self.refs.x_div.value=staff_details[0].x_div
    	self.refs.xii_subject.value=staff_details[0].xii_subject
    	self.refs.xii_institution.value=staff_details[0].xii_institution
    	self.refs.xii_board.value=staff_details[0].xii_board
    	self.refs.xii_yop.value=staff_details[0].xii_yop
    	self.refs.xii_marks.value=staff_details[0].xii_marks
    	self.refs.xii_div.value=staff_details[0].xii_div
    	self.refs.ug_course.value=staff_details[0].ug_course
    	self.refs.ug_institution.value=staff_details[0].ug_institution
    	self.refs.ug_university.value=staff_details[0].ug_university
    	self.refs.ug_yop.value=staff_details[0].ug_yop
    	self.refs.ug_marks.value=staff_details[0].ug_marks
    	self.refs.ug_div.value=staff_details[0].ug_div
    	self.refs.pg_course.value=staff_details[0].pg_course
    	self.refs.pg_institution.value=staff_details[0].pg_institution
    	self.refs.pg_university.value=staff_details[0].pg_university
    	self.refs.pg_yop.value=staff_details[0].pg_yop
    	self.refs.pg_marks.value=staff_details[0].pg_marks
    	self.refs.pg_div.value=staff_details[0].pg_div
    	self.refs.bed_stream.value=staff_details[0].bed_stream
    	self.refs.bed_institution.value=staff_details[0].bed_institution
    	self.refs.bed_university.value=staff_details[0].bed_university
    	self.refs.bed_yop.value=staff_details[0].bed_yop
    	self.refs.bed_marks.value=staff_details[0].bed_marks
    	self.refs.bed_div.value=staff_details[0].bed_div

    	self.refs.bt_stream.value=staff_details[0].bt_stream
    	self.refs.bt_institution.value=staff_details[0].bt_institution
    	self.refs.bt_university.value=staff_details[0].bt_university
    	self.refs.bt_yop.value=staff_details[0].bt_yop
    	self.refs.bt_marks.value=staff_details[0].bt_marks
    	self.refs.bt_div.value=staff_details[0].bt_div

    	self.refs.bped_stream.value=staff_details[0].bped_stream
    	self.refs.bped_institution.value=staff_details[0].bped_institution
    	self.refs.bped_university.value=staff_details[0].bped_university
    	self.refs.bped_yop.value=staff_details[0].bped_yop
    	self.refs.bped_marks.value=staff_details[0].bped_marks
    	self.refs.bped_div.value=staff_details[0].bped_div

    	self.refs.dped_stream.value=staff_details[0].dped_stream
    	self.refs.dped_institution.value=staff_details[0].dped_institution
    	self.refs.dped_university.value=staff_details[0].dped_university
    	self.refs.dped_yop.value=staff_details[0].dped_yop
    	self.refs.dped_marks.value=staff_details[0].dped_marks
    	self.refs.dped_div.value=staff_details[0].dped_div

    	self.refs.mped_stream.value=staff_details[0].mped_stream
    	self.refs.mped_institution.value=staff_details[0].mped_institution
    	self.refs.mped_university.value=staff_details[0].mped_university
    	self.refs.mped_yop.value=staff_details[0].mped_yop
    	self.refs.mped_marks.value=staff_details[0].mped_marks
    	self.refs.mped_div.value=staff_details[0].mped_div

    	self.refs.med_stream.value=staff_details[0].med_stream
    	self.refs.med_institution.value=staff_details[0].med_institution
    	self.refs.med_university.value=staff_details[0].med_university
    	self.refs.med_yop.value=staff_details[0].med_yop
    	self.refs.med_marks.value=staff_details[0].med_marks
    	self.refs.med_div.value=staff_details[0].med_div

    	self.refs.mphil_stream.value=staff_details[0].mphil_stream
    	self.refs.mphil_institution.value=staff_details[0].mphil_institution
    	self.refs.mphil_university.value=staff_details[0].mphil_university
    	self.refs.mphil_yop.value=staff_details[0].mphil_yop
    	self.refs.mphil_marks.value=staff_details[0].mphil_marks
    	self.refs.mphil_div.value=staff_details[0].mphil_div

    	self.refs.phd_stream.value=staff_details[0].phd_stream
    	self.refs.phd_institution.value=staff_details[0].phd_institution
    	self.refs.phd_university.value=staff_details[0].phd_university
    	self.refs.phd_yop.value=staff_details[0].phd_yop
    	self.refs.phd_marks.value=staff_details[0].phd_marks
    	self.refs.phd_div.value=staff_details[0].phd_div

    	self.refs.other_stream.value=staff_details[0].other_stream
    	self.refs.other_institution.value=staff_details[0].other_institution
    	self.refs.other_university.value=staff_details[0].other_university
    	self.refs.other_yop.value=staff_details[0].other_yop
    	self.refs.other_marks.value=staff_details[0].other_marks
    	self.refs.other_div.value=staff_details[0].other_div

    	self.refs.details_scholarship.value=staff_details[0].details_scholarship

    	self.refs.details_honours.value=staff_details[0].details_honours
    	self.refs.details_publication.value=staff_details[0].details_publication
    	self.refs.details_curricular_activities.value=staff_details[0].details_curricular_activities
    	self.refs.details_sport.value=staff_details[0].details_sport
    	self.update()
    	 flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
     }else{
     	console.log("inside else")
     	console.log(staff_details[0].first_name)

     	self.gender=staff_details[0].gender
     	self.title=staff_details[0].title
    	self.first_name=staff_details[0].first_name
    	self.middle_name=staff_details[0].middle_name
    	self.last_name=staff_details[0].last_name
    	self.employee_id=staff_details[0].employee_id
    	self.short_name=staff_details[0].short_name
    	self.marital_status=staff_details[0].marital_status
    	self.father_name=staff_details[0].father_name
    	self.father_occupation=staff_details[0].father_occupation
    	self.spouse=staff_details[0].spouse
    	self.spouse_occupation=staff_details[0].spouse_occupation
    	self.anniversary=staff_details[0].anniversary
    	self.id_mark=staff_details[0].id_mark
    	self.blood_group=staff_details[0].blood_group
    	self.religion_id=staff_details[0].religion_id
    	self.language=staff_details[0].language
    	self.emp_type_id=staff_details[0].emp_type_id
    	self.department_id=staff_details[0].department_id

    	self.subject_id=staff_details[0].subject_id
    	self.designation_id=staff_details[0].designation_id
    	self.qualification=staff_details[0].qualification
    	self.category_id=staff_details[0].category_id

    	self.place_of_birth=staff_details[0].place_of_birth
    	self.dob=staff_details[0].dob
    	self.blood_group=staff_details[0].blood_group
    	self.add_l1=staff_details[0].add_l1
    	self.add_l2=staff_details[0].add_l2
    	self.city=staff_details[0].city
    	self.zip=staff_details[0].zip
    	self.state=staff_details[0].state
    	self.country=staff_details[0].country
    	if(staff_details[0].same_as_p_add == 1){
			$('#correspondenceCheckbox').prop('checked', true)
		}else{
			$('#correspondenceCheckbox').prop('checked', false)
		}
    	self.c_add_l1=staff_details[0].c_add_l1
    	self.c_add_l2=staff_details[0].c_add_l2
    	self.c_city=staff_details[0].c_city
    	self.c_zip=staff_details[0].c_zip
    	self.c_state=staff_details[0].c_state
    	self.c_country=staff_details[0].c_country
    	self.residence_phone=staff_details[0].residence_phone
    	self.office_phone=staff_details[0].office_phone
    	self.mobile=staff_details[0].mobile
    	self.email=staff_details[0].email

    	self.child1_first_name=staff_details[0].child1_first_name
    	self.child1_last_name=staff_details[0].child1_last_name
    	self.child1_sex=staff_details[0].child1_sex
    	self.child1_dob=staff_details[0].child1_dob
    	self.child1_school=staff_details[0].child1_school
    	self.child2_first_name=staff_details[0].child2_first_name
    	self.child2_last_name=staff_details[0].child2_last_name
    	self.child2_sex=staff_details[0].child2_sex
    	self.child2_dob=staff_details[0].child2_dob
    	self.child2_school=staff_details[0].child2_school
    	self.child3_first_name=staff_details[0].child3_first_name
    	self.child3_last_name=staff_details[0].child3_last_name
    	self.child3_sex=staff_details[0].child3_sex
    	self.child3_dob=staff_details[0].child3_dob
    	self.child3_school=staff_details[0].child3_school

    	self.x_subject=staff_details[0].x_subject
    	self.x_institution=staff_details[0].x_institution
    	self.x_board=staff_details[0].x_board
    	self.x_yop=staff_details[0].x_yop
    	self.x_marks=staff_details[0].x_marks
    	self.x_div=staff_details[0].x_div
    	self.xii_subject=staff_details[0].xii_subject
    	self.xii_institution=staff_details[0].xii_institution
    	self.xii_board=staff_details[0].xii_board
    	self.xii_yop=staff_details[0].xii_yop
    	self.xii_marks=staff_details[0].xii_marks
    	self.xii_div=staff_details[0].xii_div
    	self.ug_course=staff_details[0].ug_course
    	self.ug_institution=staff_details[0].ug_institution
    	self.ug_university=staff_details[0].ug_university
    	self.ug_yop=staff_details[0].ug_yop
    	self.ug_marks=staff_details[0].ug_marks
    	self.ug_div=staff_details[0].ug_div
    	self.pg_course=staff_details[0].pg_course
    	self.pg_institution=staff_details[0].pg_institution
    	self.pg_university=staff_details[0].pg_university
    	self.pg_yop=staff_details[0].pg_yop
    	self.pg_marks=staff_details[0].pg_marks
    	self.pg_div=staff_details[0].pg_div
    	self.bed_stream=staff_details[0].bed_stream
    	self.bed_institution=staff_details[0].bed_institution
    	self.bed_university=staff_details[0].bed_university
    	self.bed_yop=staff_details[0].bed_yop
    	self.bed_marks=staff_details[0].bed_marks
    	self.bed_div=staff_details[0].bed_div

    	self.bt_stream=staff_details[0].bt_stream
    	self.bt_institution=staff_details[0].bt_institution
    	self.bt_university=staff_details[0].bt_university
    	self.bt_yop=staff_details[0].bt_yop
    	self.bt_marks=staff_details[0].bt_marks
    	self.bt_div=staff_details[0].bt_div

    	self.bped_stream=staff_details[0].bped_stream
    	self.bped_institution=staff_details[0].bped_institution
    	self.bped_university=staff_details[0].bped_university
    	self.bped_yop=staff_details[0].bped_yop
    	self.bped_marks=staff_details[0].bped_marks
    	self.bped_div=staff_details[0].bped_div

    	self.dped_stream=staff_details[0].dped_stream
    	self.dped_institution=staff_details[0].dped_institution
    	self.dped_university=staff_details[0].dped_university
    	self.dped_yop=staff_details[0].dped_yop
    	self.dped_marks=staff_details[0].dped_marks
    	self.dped_div=staff_details[0].dped_div

    	self.mped_stream=staff_details[0].mped_stream
    	self.mped_institution=staff_details[0].mped_institution
    	self.mped_university=staff_details[0].mped_university
    	self.mped_yop=staff_details[0].mped_yop
    	self.mped_marks=staff_details[0].mped_marks
    	self.mped_div=staff_details[0].mped_div

    	self.med_stream=staff_details[0].med_stream
    	self.med_institution=staff_details[0].med_institution
    	self.med_university=staff_details[0].med_university
    	self.med_yop=staff_details[0].med_yop
    	self.med_marks=staff_details[0].med_marks
    	self.med_div=staff_details[0].med_div

    	self.mphil_stream=staff_details[0].mphil_stream
    	self.mphil_institution=staff_details[0].mphil_institution
    	self.mphil_university=staff_details[0].mphil_university
    	self.mphil_yop=staff_details[0].mphil_yop
    	self.mphil_marks=staff_details[0].mphil_marks
    	self.mphil_div=staff_details[0].mphil_div

    	self.phd_stream=staff_details[0].phd_stream
    	self.phd_institution=staff_details[0].phd_institution
    	self.phd_university=staff_details[0].phd_university
    	self.phd_yop=staff_details[0].phd_yop
    	self.phd_marks=staff_details[0].phd_marks
    	self.phd_div=staff_details[0].phd_div

    	self.other_stream=staff_details[0].other_stream
    	self.other_institution=staff_details[0].other_institution
    	self.other_university=staff_details[0].other_university
    	self.other_yop=staff_details[0].other_yop
    	self.other_marks=staff_details[0].other_marks
    	self.other_div=staff_details[0].other_div

    	self.details_scholarship=staff_details[0].details_scholarship

    	self.details_honours=staff_details[0].details_honours
    	self.details_publication=staff_details[0].details_publication
    	self.details_curricular_activities=staff_details[0].details_curricular_activities
    	self.details_sport=staff_details[0].details_sport
    	self.update()
    		self.update()
    	 flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
     }

    }

    staffStore.on('upload_staff_image_changed',UploadStaffImage)
    function UploadStaffImage(image_name){
      console.log(image_name)
      self.staff_profile_picture = image_name
    }

    levelStore.on('level_changed',LevelChanged)
    function LevelChanged(levels){

      self.title='Add'
      self.loading = false
      self.levels = levels
      self.update()
    }
    designationStore.on('designations_changed',DesignationsChanged)
    function DesignationsChanged(designations){

      self.title='Add'
      self.loading = false
      self.designations = designations
      self.update()

    }
    employeeTypeStore.on('employeeTypes_changed',EmployeeTypesChanged)
    function EmployeeTypesChanged(employeeTypes){

      self.title='Add'
      self.loading = false
      self.employeeTypes = employeeTypes
      self.update()

    }
    staffStore.on('department_changed',DepartmentChanged)
    function DepartmentChanged(departments){

      self.title='Add'
      self.loading = false
      self.departments = departments
      self.update()

    }

});
riot.tag2('aprrove-alumni', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{alumni_view ==\'show_alumni\'}"> <div class="level"> <div class="level-left"> <h2 class="title is-size-5" style="color: #ff3860;">Alumni Management Console </h2> </div> <div class="level-right"> <button class="button is-primary has-text-weight-bold ml5" onclick="{showAlumniField}" title="Setting"> <i class="fa fa-wrench" aria-hidden="true"></i> </button> <button class="button is-link has-text-weight-bold ml5" onclick="{getData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-success has-text-weight-bold ml5" onclick="{downloadCSV}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> </div> </div> <div style=" overflow-x: scroll;" class="table-border-hide"> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <thead> <tr> <th class="slno">SL</th> <th show="{view_name==\'show_name\'}">Name</th> <th show="{view_enroll_no==\'show_enroll_no\'}">Enroll No</th> <th show="{view_email==\'show_email\'}">Email</th> <th show="{view_residence_city==\'show_residence_city\'}">City</th> <th show="{view_residence_state==\'show_residence_state\'}">State</th> <th show="{view_residence_country==\'show_residence_country\'}">Country</th> <th show="{view_residence_zip==\'show_residence_zip\'}">Zip</th> <th show="{view_batch_year==\'show_batch_year\'}">Batch Year</th> <th show="{view_mobile==\'show_mobile\'}">Mobile</th> <th show="{view_approved==\'show_approved\'}">Approved</th> <th show="{view_fees==\'show_fees\'}">Fees</th> <th show="{view_creation_date==\'show_creation_date\'}">Submission Date</th> <th show="{view_icse_school==\'show_icse_school\'}">Icse School</th> <th show="{view_icse_board==\'show_icse_board\'}">Icse Board</th> <th show="{view_icse_city==\'show_icse_city\'}">Icse City</th> <th show="{view_icse_division==\'show_icse_division\'}">Icse Division</th> <th show="{view_isc_school==\'show_isc_school\'}">Isc School</th> <th show="{view_isc_board==\'show_isc_board\'}">Isc Board</th> <th show="{view_isc_city==\'show_isc_city\'}">Isc City</th> <th show="{view_isc_division==\'show_isc_division\'}">Isc Division</th> <th show="{view_bachlor_school==\'show_bachlor_school\'}">Bachlor School</th> <th show="{view_bachlor_board==\'show_bachlor_board\'}">Bachlor Board</th> <th show="{view_bachlor_city==\'show_bachlor_city\'}">Bachlor City</th> <th show="{view_bachlor_division==\'show_bachlor_division\'}">Bachlor Division</th> <th show="{view_master_school==\'show_master_school\'}">Master School</th> <th show="{view_master_board==\'show_master_board\'}">Master Board</th> <th show="{view_master_city==\'show_master_city\'}">Master City</th> <th show="{view_master_division==\'show_master_division\'}">Master Division</th> <th show="{view_other_school==\'show_other_school\'}">Other School</th> <th show="{view_other_board==\'show_other_board\'}">Other Board</th> <th show="{view_other_city==\'show_other_city\'}">Other City</th> <th show="{view_other_division==\'show_other_division\'}">Other Division</th> <th show="{view_c_institute==\'show_c_institute\'}">Current Institute</th> <th show="{view_c_course==\'show_c_course\'}">Current Course</th> <th show="{view_c_year==\'show_c_year\'}">Current Year</th> <th show="{view_c_degree==\'show_c_degree\'}">Current Degree</th> <th show="{view_company_name==\'show_company_name\'}">Office Name</th> <th show="{view_nature_of_job==\'show_nature_of_job\'}">Nature of Job</th> <th show="{view_designation==\'show_designation\'}">Designation</th> <th show="{view_office_addl1==\'show_office_addl1\'}">Office Add Line1</th> <th show="{view_office_addl2==\'show_office_addl2\'}">Office Add Line2</th> <th show="{view_office_city==\'show_office_city\'}">Office City</th> <th show="{view_office_zip==\'show_office_zip\'}">Office Zip</th> <th show="{view_office_state==\'show_office_state\'}">Office State</th> <th show="{view_office_country==\'show_office_country\'}">Office Country</th> <th show="{view_office_mobile==\'show_office_mobile\'}">Office Mobile</th> <th show="{view_otelephone==\'show_otelephone\'}">Office Telephone</th> <th show="{view_office_email==\'show_office_email\'}">Office Email</th> <th class="has-text-right no-print" style="width:160px;"></th> </tr> </thead> <tbody> <tr each="{c, i in AlumniData}"> <td>{i+1}</td> <td show="{view_name==\'show_name\'}">{c.name}</td> <td show="{view_enroll_no==\'show_enroll_no\'}">{c.enroll_no}</td> <td show="{view_email==\'show_email\'}">{c.email}</td> <td show="{view_residence_city==\'show_residence_city\'}">{c.residence_city}</td> <td show="{view_residence_state==\'show_residence_state\'}">{c.residence_state}</td> <td show="{view_residence_country==\'show_residence_country\'}">{c.residence_country}</td> <td show="{view_residence_zip==\'show_residence_zip\'}">{c.residence_zip}</td> <td show="{view_batch_year==\'show_batch_year\'}">{c.batch_year}</td> <td show="{view_mobile==\'show_mobile\'}">{c.mobile}</td> <td show="{view_approved==\'show_approved\'}">{c.approved}</td> <td show="{view_fees==\'show_fees\'}">{c.fees}</td> <td show="{view_creation_date==\'show_creation_date\'}">{c.creation_date}</td> <td show="{view_icse_school==\'show_icse_school\'}">{c.icse_school}</td> <td show="{view_icse_board==\'show_icse_board\'}">{c.icse_board}</td> <td show="{view_icse_city==\'show_icse_city\'}">{c.icse_city}</td> <td show="{view_icse_division==\'show_icse_division\'}">{c.icse_division}</td> <td show="{view_isc_school==\'show_isc_school\'}">{c.isc_school}</td> <td show="{view_isc_board==\'show_isc_board\'}">{c.isc_board}</td> <td show="{view_isc_city==\'show_isc_city\'}">{c.isc_city}</td> <td show="{view_isc_division==\'show_isc_division\'}">{c.isc_division}</td> <td show="{view_bachlor_school==\'show_bachlor_school\'}">{c.bachlor_school}</td> <td show="{view_bachlor_board==\'show_bachlor_board\'}">{c.bachlor_board}</td> <td show="{view_bachlor_city==\'show_bachlor_city\'}">{c.bachlor_city}</td> <td show="{view_bachlor_division==\'show_bachlor_division\'}">{c.bachlor_division}</td> <td show="{view_master_school==\'show_master_school\'}">{c.master_school}</td> <td show="{view_master_board==\'show_master_board\'}">{c.master_board}</td> <td show="{view_master_city==\'show_master_city\'}">{c.master_city}</td> <td show="{view_master_division==\'show_master_division\'}">{c.master_division}</td> <td show="{view_other_school==\'show_other_school\'}">{c.other_school}</td> <td show="{view_other_board==\'show_other_board\'}">{c.other_board}</td> <td show="{view_other_city==\'show_other_city\'}">{c.other_city}</td> <td show="{view_other_division==\'show_other_division\'}">{c.other_division}</td> <td show="{view_c_institute==\'show_c_institute\'}">{c.c_institute}</td> <td show="{view_c_course==\'show_c_course\'}">{c.c_course}</td> <td show="{view_c_year==\'show_c_year\'}">{c.c_year}</td> <td show="{view_c_degree==\'show_c_degree\'}">{c.c_degree}</td> <td show="{view_company_name==\'show_company_name\'}">{c.company_name}</td> <td show="{view_nature_of_job==\'show_nature_of_job\'}">{c.nature_of_job}</td> <td show="{view_designation==\'show_designation\'}">{c.designation}</td> <td show="{view_office_addl1==\'show_office_addl1\'}">{c.office_addl1}</td> <td show="{view_office_addl2==\'show_office_addl2\'}">{c.office_addl2}</td> <td show="{view_office_city==\'show_office_city\'}">{c.office_city}</td> <td show="{view_office_zip==\'show_office_zip\'}">{c.office_zip}</td> <td show="{view_office_state==\'show_office_state\'}">{c.office_state}</td> <td show="{view_office_country==\'show_office_country\'}">{c.office_country}</td> <td show="{view_office_mobile==\'show_office_mobile\'}">{c.office_mobile}</td> <td show="{view_otelephone==\'show_otelephone\'}">{c.otelephone}</td> <td show="{view_office_email==\'show_office_email\'}">{c.office_email}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span><a class="button is-small" onclick="{approve_alumni.bind(this,c.alumni_id)}" title="Approve"> <i class="fa fa-check" aria-hidden="true"></i> </a></span> <span><a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"> <i class="fa fa-trash" aria-hidden="true"></i> </a></span> <span><a class="button is-small" onclick="{update_alumni.bind(this,c.alumni_id)}" title="Update"> <i class="fa fa-edit" aria-hidden="true"></i> </a></span> <span><a class="button is-small" onclick="{view_profile.bind(this, c.alumni_id)}" title="Profile"> <i class="fa fa-eye" aria-hidden="true"></i> </a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </div> </section> <div id="columnSetting" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Setting Configuaration</p> </header> <section class="modal-card-body"> <div each="{st, i in fieldList}" class="setting-detail"> <input class="checkbox" style="" type="checkbox" checked="{st.done}" id="{\'addStaffName\' + st.array_name}" onclick="{addCheckedColumn.bind(this,st)}">{st.field_name} </div> </section> <footer class="modal-card-foot"> <button class="button" id="item-modal-close" onclick="{closeCheckBoxModal}">Close</button> </footer> </div> </div> <div id="createAproveAlumniModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Approve Alumni</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="field"> <div class="control"> <label class="label">Date of Approval</label> <input class="input date" ref="approval_date" type="text" readonly="readonly"> </div> </div> <div class="field"> <div class="control"> <label class="label" for="interview_time">Fees</label> <input class="input" ref="fees" type="number"> </div> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-success" onclick="{approveAlumni}">Submit</button> <button class="button is-danger" id="item-modal-close" onclick="{closeapproveAlumniwModal}">Cancel</button> </footer> </div> </div> <section class=" is-fluid" show="{alumni_view ==\'edit_alumni_first_page\'}"> <h2 class="title is-size-5 has-text-centered" style="color: #ff3860;"> {title} Alumni</h2> <div class="box"> <div class="columns mt20"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Personal Details</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="submission_date">Submission Date</label> </div> <div class="column is-2"> <input class="input date is-small" ref="submission_date" type="text" readonly="readonly"> </div> <div class="column is-2"> <label class="label is-small" for="first_name">Name</label> </div> <div class="column is-2"> <input class="input is-small" id="first_name" ref="first_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="middle_name">Middle Name</label> </div> <div class="column is-2 "> <input class="input is-small" id="middle_name" ref="middle_name" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="last_name">Last Name</label> </div> <div class="column is-2"> <input class="input is-small" id="last_name" ref="last_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="batch_year">Batch-Year</label> </div> <div class="column is-2 "> <input class="input is-small" id="batch_year" ref="batch_year" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="date_of_birth">Date of Birth</label> </div> <div class="column is-2"> <input class="input date is-small" ref="date_of_birth" type="text" readonly="readonly"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="enroll_no">Enroll Number</label> </div> <div class="column is-2"> <input class="input is-small" id="enroll_no" ref="enroll_no" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="residence_addl1">Address Line 1</label> </div> <div class="column is-2 "> <input class="input is-small" id="residence_addl1" ref="residence_addl1" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="residence_addl2">Address Line 2</label> </div> <div class="column is-2"> <input class="input is-small" id="residence_addl2" ref="residence_addl2" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="residence_city">City / District</label> </div> <div class="column is-2"> <input class="input is-small" id="residence_city" ref="residence_city" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="residence_zip">Zip Code</label> </div> <div class="column is-2 "> <input class="input is-small" id="residence_zip" ref="residence_zip" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="residence_state">State</label> </div> <div class="column is-2"> <input class="input is-small" id="residence_state" ref="residence_state" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="residence_country">Country</label> </div> <div class="column is-2"> <input class="input is-small" id="residence_country" ref="residence_country" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="mobile">Mobile</label> </div> <div class="column is-2 "> <input class="input is-small" id="mobile" ref="mobile" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="fax">Fax</label> </div> <div class="column is-2"> <input class="input is-small" id="fax" ref="fax" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="email">Email</label> </div> <div class="column is-2"> <input class="input is-small" id="email" ref="email" type="email"> </div> <div class="column is-2"> <label class="label is-small" for="telephone">LandLine</label> </div> <div class="column is-2 "> <input class="input is-small" id="telephone" ref="telephone" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="spouse">Name of Spouse</label> </div> <div class="column is-2"> <input class="input is-small" id="spouse" ref="spouse" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="marriage_date">Marriage Date</label> </div> <div class="column is-2"> <input class="input date is-small" ref="marriage_date" type="text" readonly="readonly"> </div> </div> <div class="columns mt35"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Do You have any other relative who has studied in or who is currently studing at MCKV ?</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="relative_name">Name</label> </div> <div class="column is-2"> <input class="input is-small" id="relative_name" ref="relative_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="relative_relation">Relation</label> </div> <div class="column is-2 "> <input class="input is-small" id="relative_relation" ref="relative_relation" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="relative_class">Class and Batch</label> </div> <div class="column is-2"> <input class="input is-small" id="relative_class" ref="relative_class" type="text"> </div> </div> <div class="columns mt35"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Education Details</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column"> <table class="table is-fullwidth is-bordered is-hoverable is-narrow "> <thead> <tr> <th style="border:none">Exam</th> <th style="border:none">School/College</th> <th style="border:none">Board</th> <th style="border:none">City</th> <th style="border:none">Division</th> </tr> </thead> <tbody> <tr> <td style="border:none">ICSE</td> <td style="border:none"><input class="input is-small" ref="icse_school" type="text"></td> <td style="border:none"><input class="input is-small" ref="icse_board" type="text"></td> <td style="border:none"><input class="input is-small" ref="icse_city" type="text"></td> <td style="border:none"><input class="input is-small" ref="icse_division" type="text"></td> </tr> <tr> <td style="border:none">ISC</td> <td style="border:none"><input class="input is-small" ref="isc_school" type="text"></td> <td style="border:none"><input class="input is-small" ref="isc_board" type="text"></td> <td style="border:none"><input class="input is-small" ref="isc_city" type="text"></td> <td style="border:none"><input class="input is-small" ref="isc_division" type="text"></td> </tr> <tr> <td style="border:none">Bachelor</td> <td style="border:none"><input class="input is-small" ref="bachlor_school" type="text"></td> <td style="border:none"><input class="input is-small" ref="bachlor_board" type="text"></td> <td style="border:none"><input class="input is-small" ref="bachlor_city" type="text"></td> <td style="border:none"><input class="input is-small" ref="bachlor_division" type="text"></td> </tr> <tr> <td style="border:none">Master</td> <td style="border:none"><input class="input is-small" ref="master_school" type="text"></td> <td style="border:none"><input class="input is-small" ref="master_board" type="text"></td> <td style="border:none"><input class="input is-small" ref="master_city" type="text"></td> <td style="border:none"><input class="input is-small" ref="master_division" type="text"></td> </tr> <tr> <td style="border:none">Other</td> <td style="border:none"><input class="input is-small" ref="other_school" type="text"></td> <td style="border:none"><input class="input is-small" ref="other_board" type="text"></td> <td style="border:none"><input class="input is-small" ref="other_city" type="text"></td> <td style="border:none"><input class="input is-small" ref="other_division" type="text"></td> </tr> </tbody> </table> </div> </div> <div class="columns mt60"> <div class="column is-full"> <button class="button is-info has-text-weight-bold adjusted-top" onclick="{addNextInformation}">Next >> </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{close}">Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{alumni_view ==\'edit_alumni_second_page\'}"> <h2 class="title is-size-5 has-text-centered" style="color: #ff3860;"> {title} Alumni</h2> <div class="box"> <div class="columns mt20"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">If you are studying (fill in the following details)</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="c_institute">Current Institution</label> </div> <div class="column is-2"> <input class="input is-small" id="c_institute" ref="c_institute" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="c_course">Current Course</label> </div> <div class="column is-2"> <input class="input is-small" id="c_course" ref="c_course" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="c_location">Current Location</label> </div> <div class="column is-2 "> <input class="input is-small" id="c_location" ref="c_location" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="c_year">Current Year/Sem</label> </div> <div class="column is-2"> <input class="input is-small" id="c_year" ref="c_year" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="c_degree">Specialization</label> </div> <div class="column is-2"> <input class="input is-small" id="c_degree" ref="c_degree" type="text"> </div> </div> <div class="columns mt20"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Employment Details</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="company_name">Company</label> </div> <div class="column is-2"> <input class="input is-small" id="company_name" ref="company_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="nature_of_job">job/business</label> </div> <div class="column is-2"> <input class="input is-small" id="nature_of_job" ref="nature_of_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="designation">Designation</label> </div> <div class="column is-2 "> <input class="input is-small" id="designation" ref="designation" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="office_addl1">Address Line 1 </label> </div> <div class="column is-2"> <input class="input is-small" id="office_addl1" ref="office_addl1" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="office_addl2">Address Line 2</label> </div> <div class="column is-2"> <input class="input is-small" id="office_addl2" ref="office_addl2" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="office_city">City/ District</label> </div> <div class="column is-2 "> <input class="input is-small" id="office_city" ref="office_city" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="office_zip">Zip Code </label> </div> <div class="column is-2"> <input class="input is-small" id="office_zip" ref="office_zip" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="office_state">State</label> </div> <div class="column is-2"> <input class="input is-small" id="office_state" ref="office_state" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="office_country">Country</label> </div> <div class="column is-2 "> <input class="input is-small" id="office_country" ref="office_country" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="office_mobile">Mobile </label> </div> <div class="column is-2"> <input class="input is-small" id="office_mobile" ref="office_mobile" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="office_fax">Fax</label> </div> <div class="column is-2"> <input class="input is-small" id="office_fax" ref="office_fax" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="office_email">Email</label> </div> <div class="column is-2 "> <input class="input is-small" id="office_email" ref="office_email" type="email"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="otelephone">LandLine </label> </div> <div class="column is-2"> <input class="input is-small" id="otelephone" ref="otelephone" type="text"> </div> </div> <div class="columns mt20"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Please provide us with name of at least 3 MCKV friends who you are still in touch</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="f1_name1">(FRIEND 1)Name1</label> </div> <div class="column is-2"> <input class="input is-small" id="f1_name1" ref="f1_name1" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f1_batch_year">Batch-year</label> </div> <div class="column is-2"> <input class="input is-small" id="f1_batch_year" ref="f1_batch_year" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f1_stream">Stream</label> </div> <div class="column is-2 "> <input class="input is-small" id="f1_stream" ref="f1_stream" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="f1_contactno">Contact No</label> </div> <div class="column is-2 "> <input class="input is-small" id="f1_contactno" ref="f1_contactno" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f2_name2">(FRIEND 2)Name2</label> </div> <div class="column is-2"> <input class="input is-small" id="f2_name2" ref="f2_name2" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f2_batch_year">Batch-year</label> </div> <div class="column is-2 "> <input class="input is-small" id="f2_batch_year" ref="f2_batch_year" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="f2_stream">Stream</label> </div> <div class="column is-2 "> <input class="input is-small" id="f2_stream" ref="f2_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f2_contactno">Contact No</label> </div> <div class="column is-2"> <input class="input is-small" id="f2_contactno" ref="f2_contactno" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f3_name3">(FRIEND 3)Name3</label> </div> <div class="column is-2 "> <input class="input is-small" id="f3_name3" ref="f3_name3" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="f3_batch_year">Batch-year</label> </div> <div class="column is-2 "> <input class="input is-small" id="f3_batch_year" ref="f3_batch_year" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f3_stream">Stream</label> </div> <div class="column is-2"> <input class="input is-small" id="f3_stream" ref="f3_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f3_contactno">Contact No</label> </div> <div class="column is-2 "> <input class="input is-small" id="f3_contactno" ref="f3_contactno" type="text"> </div> </div> <div class="columns mt20"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Are you intrested in becoming involved with any of the following ?</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column"> <input type="checkbox" id="assisting_org_alumni" ref="assisting_org_alumni"> <b>Assiisting the organization of alimni events in the school</b> </div> <div class="column "> <input type="checkbox" id="assisting_student_career" ref="assisting_student_career"> <b>Assiisting current or future students with career choices</b> </div> <div class="column "> <input type="checkbox" id="assisting_executive_commitee" ref="assisting_executive_commitee"> <b> Servicing on the Alumni Association executive Committe</b> </div> </div> <div class="columns mt20"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Your News</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-4"> <textarea class="textarea is-small" ref="news" rows="3"></textarea> </div> </div> <div class="columns mt60"> <div class="column is-full"> <button class="button is-primary has-text-weight-bold adjusted-top" onclick="{closeSecondPage}"> << Previous </button> <button class="button is-info has-text-weight-bold adjusted-top" onclick="{UpdateAlumniInformation}">Submit </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{close}">Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{alumni_view ==\'alumni_profile\'}"> <div class="level no-print"> <div class="level-left"> </div> <div class="level-right"> <button class="button is-primary has-text-weight-bold " onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> <button class="button is-warning has-text-weight-bold ml5" onclick="{close_alumni_profile}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <div class="lebel"> <div class="level-left"> <p><b>Form No: {al.alumni_id} </b> </p> </div> </div> <table class="table is-fullwidth is-bordered"> <caption class="caption"> Alumni Profile</caption> <tr> <th colspan="8"><h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Personal Details</h3></th> </tr> <tr> <th>Name</th><td>{al.name}</td> <th>Batch Year</th><td>{al.batch_year}</td> <th>DOB</th><td>{al.dob}</td> <th>Enroll No</th><td>{al.enroll_no}</td> </tr> <tr> <th>Address</th> <td colspan="7">{al.address}</td> </tr> <tr> <th>Mobile</th><td>{al.mobile}</td> <th>Fax </th><td>{al.fax}</td> <th>Email</th><td>{al.email}</td> <th>Landline </th><td>{al.telephone}</td> </tr> <tr> <th>Name of spouse</th><td colspan="2">{al.spouse}</td> <th>Marriage Date</th><td colspan="4">{al.marriage_date}</td> </tr> <tr> <th colspan="8"><h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Relative who has studied in or who is currently studing at MCKV</h3></th> </tr> <tr> <th>Name</th><td>{al.relative_name}</td> <th>Relation </th><td>{al.relative_relation}</td> <th>Class & Batch</th><td colspan="3">{al.relative_class}</td> </tr> <tr> <th colspan="8"><h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Education Details</h3></th> </tr> <tr> <th>Exam</th> <th colspan="2">School/College</th> <th colspan="2">Board</th> <th>City </th> <th colspan="2">Division</th> </tr> <tr> <td>ICSE</td> <td colspan="2">{al.icse_school}</td> <td colspan="2">{al.icse_board}</td> <td>{al.icse_city}</td> <td colspan="2">{al.icse_division}</td> </tr> <tr> <td>ISC</td> <td colspan="2">{al.isc_school}</td> <td colspan="2">{al.isc_board}</td> <td>{al.isc_city}</td> <td colspan="2">{al.isc_division}</td> </tr> <tr> <td>Bachlor</td> <td colspan="2">{al.bachlor_school}</td> <td colspan="2">{al.bachlor_board}</td> <td>{al.bachlor_city}</td> <td colspan="2">{al.bachlor_division}</td> </tr> <tr> <td>Master</td> <td colspan="2">{al.master_school}</td> <td colspan="2">{al.master_board}</td> <td>{al.master_city}</td> <td colspan="2">{al.master_division}</td> </tr> <tr> <td>Other</td> <td colspan="2">{al.other_school}</td> <td colspan="2">{al.other_board}</td> <td>{al.other_city}</td> <td colspan="2">{al.other_division}</td> </tr> <tr> <th colspan="8"><h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Studying the following</h3></th> </tr> <tr> <th>Institution</th><td>{al.c_institute}</td> <th>Course </th><td>{al.c_course}</td> <th>Location</th><td colspan="3">{al.c_location}</td> </tr> <tr> <th>Year/ Semester</th><td>{al.c_year}</td> <th colspan="2">Specialization / Major </th><td colspan="4">{al.c_degree}</td> </tr> <tr> <th colspan="8"><h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Employment Details</h3></th> </tr> <tr> <th>Name of Company</th><td>{al.company_name}</td> <th>Nature of job / business </th><td>{al.nature_of_job}</td> <th>Designation</th><td colspan="3">{al.designation}</td> </tr> <tr> <th>Address</th><td colspan="7">{al.office_address}</td> </tr> <tr> <th colspan="8"><h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">MCKV friends who are still in touch</h3></th> </tr> <tr> <th>Name1</th><td>{al.f1_name1}</td> <th>Batch Year</th><td>{al.f1_batch_year}</td> <th>Stream</th><td>{al.f1_stream}</td> <th>Contact No</th><td>{al.f1_contactno}</td> </tr> <tr> <th>Name2</th><td>{al.f2_name2}</td> <th>Batch Year</th><td>{al.f2_batch_year}</td> <th>Stream</th><td>{al.f2_stream}</td> <th>Contact No</th><td>{al.f2_contactno}</td> </tr> <tr> <th>Name3</th><td>{al.f3_name3}</td> <th>Batch Year</th><td>{al.f3_batch_year}</td> <th>Stream</th><td>{al.f3_stream}</td> <th>Contact No</th><td>{al.f3_contactno}</td> </tr> <tr> <th colspan="8"><h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Intrested in becoming involved with any of the following</h3></th> </tr> <tr> <th colspan="7">Assisting the organization of alumni events in the school</th><td>{al.assisting_org_alumni}</td> </tr> <tr> <th colspan="7">Assisting current or future students with career choices</th><td>{al.assisting_student_career}</td> </tr> <tr> <th colspan="7">Servicing on the Alumni Association executive Committe</th><td>{al.assisting_executive_commitee}</td> </tr> <tr> <th colspan="8"><h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">News</h3></th> </tr> <tr> <td colspan="8">{al.news}</td> </tr> </table> </section>', '', '', function(opts) {
		var self = this
		self.st={}
		self.al={}
	    self.on("mount", function(){
	    	self.fieldList=[
		    	{field_name : "Name", array_name: "name"},
		    	{field_name : "Enroll No", array_name: "enroll_no"},
		    	{field_name : "Email", array_name: "email"},
		    	{field_name : "City", array_name: "residence_city"},
			    {field_name : "State", array_name: "residence_state"},
			    {field_name : "Country", array_name: "residence_country"},
			    {field_name : "Zip", array_name: "residence_zip"},
			    {field_name : "Batch Year", array_name: "batch_year"},
			    {field_name : "Mobile", array_name: "mobile"},
			    {field_name : "Approved", array_name: "approved"},
			    {field_name : "Fees", array_name: "fees"},
			    {field_name : "Submission Date", array_name: "creation_date"},
			    {field_name : "Icse School", array_name: "icse_school"},
			    {field_name : "Icse Board", array_name: "icse_board"},
			    {field_name : "Icse City", array_name: "icse_city"},
			    {field_name : "Icse Division", array_name: "icse_division"},
			    {field_name : "Isc School", array_name: "isc_school"},
			    {field_name : "Isc Board", array_name: "isc_board"},
			    {field_name : "Isc City", array_name: "isc_city"},
			    {field_name : "Isc Division", array_name: "isc_division"},
			    {field_name : "Bachlor School", array_name: "bachlor_school"},
			    {field_name : "Bachlor Board", array_name: "bachlor_board"},
			    {field_name : "Bachlor City", array_name: "bachlor_city"},
			    {field_name : "Bachlor Division", array_name: "bachlor_division"},
			    {field_name : "Master School", array_name: "master_school"},
			    {field_name : "Master Board", array_name: "master_board"},
			    {field_name : "Master City", array_name: "master_city"},
			    {field_name : "Master Division", array_name: "master_division"},
			    {field_name : "Other School", array_name: "other_school"},
			    {field_name : "Other Board", array_name: "other_board"},
			    {field_name : "Other City", array_name: "other_city"},
			    {field_name : "Other Division", array_name: "other_division"},
			    {field_name : "Current Institute", array_name: "c_institute"},
			    {field_name : "Current Course", array_name: "c_course"},
			    {field_name : "Current Year", array_name: "c_year"},
			    {field_name : "Current Degree", array_name: "c_degree"},
			    {field_name : "Office Name", array_name: "company_name"},
			    {field_name : "Nature of Job", array_name: "nature_of_job"},
			    {field_name : "Designation", array_name: "designation"},
			    {field_name : "Office Add Line1", array_name: "office_addl1"},
			    {field_name : "Office Add Line2", array_name: "office_addl2"},
			    {field_name : "Office City", array_name: "office_city"},
			    {field_name : "Office Zip", array_name: "office_zip"},
			    {field_name : "Office State", array_name: "office_state"},
			    {field_name : "Office Country", array_name: "office_country"},
			    {field_name : "Office Mobile", array_name: "office_mobile"},
			    {field_name : "Office Telephone", array_name: "otelephone"},
			    {field_name : "Office Email", array_name: "office_email"}
    		]

	    	self.fieldList.map( q => {
		        if(q.array_name== "name"){
		          self.view_name="show_name"
		          q.done=true
		        }
		        if(q.array_name== "enroll_no"){
		          self.view_enroll_no="show_enroll_no"
		          q.done=true
		        }
		        if(q.array_name== "email"){
		          self.view_email="show_email"
		          q.done=true
		        }
		        if(q.array_name== "batch_year"){
		          self.view_batch_year ="show_batch_year"
		          q.done=true
		        }
		        if(q.array_name== "mobile"){
		          self.view_mobile= "show_mobile"
		          q.done=true
		        }
		        if(q.array_name== "approved"){
		          self.view_approved= "show_approved"
		          q.done=true
		        }
      		})
	    	self.loading = false;
	    	flatpickr(".date", {
				allowInput: true,
	        	dateFormat: "d/m/Y",
	  		})
	  		self.alumni_view = 'show_alumni'
	  		self.title=''
	  		self.getData();
	    	self.update();
	    })

	    self.on("unmount", function(){
	      alumniStore.off('read_alumni_changed',ReadAlumniChanged)
	      alumniStore.off('approved_alumni_changed',ApprovedAlumniChanged)
	      alumniStore.off('edit_alumni_changed',EditAlumniChanged)
	      alumniStore.off('delete_alumni_changed',DeleteAlumniChanged)
	      alumniStore.off('read_alumni_profile_changed',AlumniProfileChanged)
	    })

	    self.showAlumniField = () =>{
       		$("#columnSetting").addClass("is-active")
    	}

    	self.closeCheckBoxModal=()=>{
    		$("#columnSetting").removeClass("is-active");
    	}

    	self.addCheckedColumn = (item, event) => {
		 	if(item!=''){
			 item.done=!event.item.st.done
		 	}
		 	self.fieldList.map( q => {
			    if(q.done==true && q.array_name== "name"){
			      self.view_name="show_name"
			    }
			    if(q.done==true && q.array_name== "enroll_no"){
			      self.view_enroll_no= "show_enroll_no"
			    }
			    if(q.done==true && q.array_name== "email"){
			      self.view_email= "show_email"
			    }
			    if(q.done==true && q.array_name== "residence_city"){
			      self.view_residence_city ="show_residence_city"
			    }
			    if(q.done==true && q.array_name== "residence_state"){
			      self.view_residence_state= "show_residence_state"
			    }
			    if(q.done==true && q.array_name== "residence_country"){
			      self.view_residence_country= "show_residence_country"
			    }
			    if(q.done==true && q.array_name== "residence_zip"){
			      self.view_residence_zip= "show_residence_zip"
			    }
			    if(q.done==true && q.array_name== "batch_year"){
			      self.view_batch_year="show_batch_year"
			    }
			    if(q.done==true && q.array_name== "mobile"){
			      self.view_mobile="show_mobile"
			    }
			    if(q.done==true && q.array_name== "approved"){
			      self.view_approved="show_approved"
			    }
			    if(q.done==true && q.array_name== "fees"){
			      self.view_fees="show_fees"
			    }
			    if(q.done==true && q.array_name== "creation_date"){
			      self.view_creation_date="show_creation_date"
			    }
			    if(q.done==true && q.array_name== "icse_school"){
			      self.view_icse_school="show_icse_school"
			    }
			    if(q.done==true && q.array_name== "icse_board"){
			      self.view_icse_board="show_icse_board"
			    }
			    if(q.done==true && q.array_name== "icse_city"){
			      self.view_icse_city="show_icse_city"
			    }
			    if(q.done==true && q.array_name== "icse_division"){
			      self.view_icse_division="show_icse_division"
			    }
			    if(q.done==true && q.array_name== "isc_school"){
			      self.view_isc_school="show_isc_school"
			    }
			    if(q.done==true && q.array_name== "isc_board"){
			      self.view_isc_board="show_isc_board"
			    }
			    if(q.done==true && q.array_name== "isc_city"){
			      self.view_isc_city="show_isc_city"
			    }
			    if(q.done==true && q.array_name== "isc_division"){
			      self.view_isc_division="show_isc_division"
			    }
			    if(q.done==true && q.array_name== "bachlor_school"){
			      self.view_bachlor_school="show_bachlor_school"
			    }
			    if(q.done==true && q.array_name== "bachlor_board"){
			      self.view_bachlor_board="show_bachlor_board"
			    }
			    if(q.done==true && q.array_name== "bachlor_city"){
			      self.view_bachlor_city="show_bachlor_city"
			    }
			    if(q.done==true && q.array_name== "bachlor_division"){
			      self.view_bachlor_division="show_bachlor_division"
			    }
			    if(q.done==true && q.array_name== "master_school"){
			      self.view_master_school="show_master_school"
			    }
			    if(q.done==true && q.array_name== "master_board"){
			      self.view_master_board="show_master_board"
			    }
			    if(q.done==true && q.array_name== "master_city"){
			      self.view_master_city="show_master_city"
			    }
			    if(q.done==true && q.array_name== "master_division"){
			      self.view_master_division="show_master_division"
			    }
			    if(q.done==true && q.array_name== "other_school"){
			      self.view_other_school="show_other_school"
			    }
			    if(q.done==true && q.array_name== "other_board"){
			      self.view_other_board="show_other_board"
			    }
			    if(q.done==true && q.array_name== "other_city"){
			      self.view_other_city="show_other_city"
			    }
			    if(q.done==true && q.array_name== "other_division"){
			      self.view_other_division="show_other_division"
			    }
			    if(q.done==true && q.array_name== "c_institute"){
			      self.view_c_institute="show_c_institute"
			    }
			    if(q.done==true && q.array_name== "c_course"){
			      self.view_c_course="show_c_course"
			    }
			    if(q.done==true && q.array_name== "c_year"){
			      self.view_c_year="show_c_year"
			    }
			    if(q.done==true && q.array_name== "c_degree"){
			      self.view_c_degree="show_c_degree"
			    }
			    if(q.done==true && q.array_name== "company_name"){
			      self.view_company_name="show_company_name"
			    }
			    if(q.done==true && q.array_name== "nature_of_job"){
			      self.view_nature_of_job="show_nature_of_job"
			    }
			    if(q.done==true && q.array_name== "designation"){
			      self.view_designation="show_designation"
			    }
			    if(q.done==true && q.array_name== "office_addl1"){
			      self.view_office_addl1="show_office_addl1"
			    }
			    if(q.done==true && q.array_name== "office_addl2"){
			      self.view_office_addl2="show_office_addl2"
			    }
			    if(q.done==true && q.array_name== "office_city"){
			      self.view_office_city="show_office_city"
			    }
			    if(q.done==true && q.array_name== "office_zip"){
			      self.view_office_zip="show_office_zip"
			    }
			    if(q.done==true && q.array_name== "office_state"){
			      self.view_office_state="show_office_state"
			    }
			    if(q.done==true && q.array_name== "office_country"){
			      self.view_office_country="show_office_country"
			    }
			    if(q.done==true && q.array_name== "office_mobile"){
			      self.view_office_mobile="show_office_mobile"
			    }
			    if(q.done==true && q.array_name== "otelephone"){
			      self.view_otelephone="show_otelephone"
			    }
			    if(q.done==true && q.array_name== "office_email"){
			      self.view_office_email="show_office_email"
			    }

			    if(q.done==false && q.array_name== "name"){
			      self.view_name=""
			    }
			    if(q.done==false && q.array_name== "enroll_no"){
			      self.view_enroll_no= ""
			    }
			    if(q.done==false && q.array_name== "email"){
			      self.view_email= ""
			    }
			    if(q.done==false && q.array_name== "residence_city"){
			      self.view_residence_city =""
			    }
			    if(q.done==false && q.array_name== "date_of_birth"){
			      self.view_residence_state= ""
			    }
			    if(q.done==false && q.array_name== "residence_country"){
			      self.view_residence_country= ""
			    }
			    if(q.done==false && q.array_name== "residence_zip"){
			      self.view_residence_zip= ""
			    }
			    if(q.done==false && q.array_name== "batch_year"){
			      self.view_batch_year= ""
			    }
			    if(q.done==false && q.array_name== "mobile"){
			      self.view_mobile= ""
			    }
			    if(q.done==false && q.array_name== "approved"){
			      self.view_approved= ""
			    }
			    if(q.done==false && q.array_name== "mobile"){
			      self.view_mobile= ""
			    }
			    if(q.done==false && q.array_name== "fees"){
			      self.view_fees= ""
			    }
			    if(q.done==false && q.array_name== "creation_date"){
			      self.view_creation_date= ""
			    }
			    if(q.done==false && q.array_name== "icse_school"){
			      self.view_icse_school= ""
			    }
			    if(q.done==false && q.array_name== "icse_board"){
			      self.view_icse_board= ""
			    }
			    if(q.done==false && q.array_name== "icse_city"){
			      self.view_icse_city= ""
			    }
			    if(q.done==false && q.array_name== "icse_division"){
			      self.view_icse_division= ""
			    }
			    if(q.done==false && q.array_name== "isc_school"){
			      self.view_isc_school= ""
			    }
			    if(q.done==false && q.array_name== "isc_board"){
			      self.view_isc_board= ""
			    }
			    if(q.done==false && q.array_name== "isc_city"){
			      self.view_isc_city= ""
			    }
			    if(q.done==false && q.array_name== "isc_division"){
			      self.view_isc_division= ""
			    }
			    if(q.done==false && q.array_name== "bachlor_school"){
			      self.view_bachlor_school= ""
			    }
			    if(q.done==false && q.array_name== "bachlor_board"){
			      self.view_bachlor_board= ""
			    }
			    if(q.done==false && q.array_name== "bachlor_city"){
			      self.view_bachlor_city= ""
			    }
			    if(q.done==false && q.array_name== "bachlor_division"){
			      self.view_bachlor_division= ""
			    }
			    if(q.done==false && q.array_name== "master_school"){
			      self.view_master_school= ""
			    }
			    if(q.done==false && q.array_name== "master_board"){
			      self.view_master_board= ""
			    }
			    if(q.done==false && q.array_name== "master_city"){
			      self.view_master_city= ""
			    }
			    if(q.done==false && q.array_name== "master_division"){
			      self.view_master_division= ""
			    }
			    if(q.done==false && q.array_name== "other_school"){
			      self.view_other_school= ""
			    }
			    if(q.done==false && q.array_name== "other_board"){
			      self.view_other_board= ""
			    }
			    if(q.done==false && q.array_name== "other_city"){
			      self.view_other_city= ""
			    }
			    if(q.done==false && q.array_name== "other_division"){
			      self.view_other_division= ""
			    }
			    if(q.done==false && q.array_name== "c_institute"){
			      self.view_c_institute= ""
			    }
			    if(q.done==false && q.array_name== "c_course"){
			      self.view_c_course= ""
			    }
			    if(q.done==false && q.array_name== "c_year"){
			      self.view_c_year= ""
			    }
			    if(q.done==false && q.array_name== "c_degree"){
			      self.view_c_degree= ""
			    }
			    if(q.done==false && q.array_name== "company_name"){
			      self.view_company_name= ""
			    }
			    if(q.done==false && q.array_name== "nature_of_job"){
			      self.view_nature_of_job= ""
			    }
			    if(q.done==false && q.array_name== "designation"){
			      self.view_designation= ""
			    }
			    if(q.done==false && q.array_name== "office_addl1"){
			      self.view_office_addl1= ""
			    }
			    if(q.done==false && q.array_name== "office_addl2"){
			      self.view_office_addl2= ""
			    }
			    if(q.done==false && q.array_name== "office_city"){
			      self.view_office_city= ""
			    }
			    if(q.done==false && q.array_name== "office_zip"){
			      self.view_office_zip= ""
			    }
			    if(q.done==false && q.array_name== "office_state"){
			      self.view_office_state= ""
			    }
			    if(q.done==false && q.array_name== "office_country"){
			      self.view_office_country= ""
			    }
			    if(q.done==false && q.array_name== "office_mobile"){
			      self.view_office_mobile= ""
			    }
			    if(q.done==false && q.array_name== "otelephone"){
			      self.view_otelephone= ""
			    }
			    if(q.done==false && q.array_name== "office_email"){
			      self.view_office_email= ""
			    }

  			})
  		}

	    self.getData = () => {
          self.loading = true
          alumniStore.trigger('read_alumni')
        }

        self.approve_alumni = (c,a) => {
      		self.alumni_id = c
      		console.log(self.alumni_id)
      		$("#createAproveAlumniModal").addClass("is-active");
    	}

    	self.closeapproveAlumniwModal = () => {
      		$("#createAproveAlumniModal").removeClass("is-active");
    	}

    	self.approveAlumni = () =>{
	    	self.approval_date=convertDate(self.refs.approval_date.value)
	    	self.fees=self.refs.fees.value
    		alumniStore.trigger('approved_alumni',self.approval_date,self.fees,self.alumni_id)
    	}

    	self.addNextInformation = () =>{
    		self.alumni_view = 'edit_alumni_second_page'
    	}

    	self.closeSecondPage = () =>{
    		self.alumni_view = 'edit_alumni_first_page'
    	}

    	self.update_alumni = (c,a) =>{
    		console.log(c)
      		self.alumni_id = c
      		self.title='Update'
    		self.alumni_view = 'edit_alumni_first_page'
    		alumniStore.trigger('read_for_edit_alumni',self.alumni_id)
    	}

    	self.UpdateAlumniInformation = () =>{

    		var obj={}

        	var alumni_personal_details={};

	    	alumni_personal_details['creation_date']=convertDate(self.refs.submission_date.value)
	    	alumni_personal_details['first_name']=self.refs.first_name.value
	    	alumni_personal_details['middle_name']=self.refs.middle_name.value
	    	alumni_personal_details['last_name']=self.refs.last_name.value
	    	alumni_personal_details['batch_year']=self.refs.batch_year.value
	    	alumni_personal_details['dob']=convertDate(self.refs.date_of_birth.value)
	    	alumni_personal_details['enroll_no']=self.refs.enroll_no.value
	    	alumni_personal_details['residence_addl1']=self.refs.residence_addl1.value
	    	alumni_personal_details['residence_addl2']=self.refs.residence_addl2.value
	    	alumni_personal_details['residence_city']=self.refs.residence_city.value
	    	alumni_personal_details['residence_zip']=self.refs.residence_zip.value
	    	alumni_personal_details['residence_state']=self.refs.residence_state.value
	    	alumni_personal_details['residence_country']=self.refs.residence_country.value
	    	alumni_personal_details['mobile']=self.refs.mobile.value
	    	alumni_personal_details['telephone']=self.refs.telephone.value
	    	alumni_personal_details['fax']=self.refs.fax.value
	    	alumni_personal_details['email']=self.refs.email.value
	    	alumni_personal_details['spouse']=self.refs.spouse.value
	    	alumni_personal_details['news']=self.refs.news.value
	    	alumni_personal_details['marriage_date']=convertDate(self.refs.marriage_date.value)
	    	if($('#assisting_org_alumni').prop('checked') == true){
	    		alumni_personal_details['assisting_org_alumni'] = "Y"
	    	}else{
	    		alumni_personal_details['assisting_org_alumni'] = "N"
	    	}
	    	if($('#assisting_student_career').prop('checked') == true){
	    		alumni_personal_details['assisting_student_career'] = "Y"
	    	}else{
	    		alumni_personal_details['assisting_student_career'] = "N"
	    	}
	    	if($('#assisting_executive_commitee').prop('checked') == true){
	    		alumni_personal_details['assisting_executive_commitee'] = "Y"
	    	}else{
	    		alumni_personal_details['assisting_executive_commitee'] = "N"
	    	}

	        obj['alumni_personal_details']=alumni_personal_details;

	        var alumni_educational_details={};

	    	alumni_educational_details['icse_school']=self.refs.icse_school.value
	    	alumni_educational_details['icse_board']=self.refs.icse_board.value
	    	alumni_educational_details['icse_city']=self.refs.icse_city.value
	    	alumni_educational_details['icse_division']=self.refs.icse_division.value
	    	alumni_educational_details['isc_school']=self.refs.isc_school.value
	    	alumni_educational_details['isc_board']=self.refs.isc_board.value
	    	alumni_educational_details['isc_city']=self.refs.isc_city.value
	    	alumni_educational_details['isc_division']=self.refs.isc_division.value
	    	alumni_educational_details['bachlor_school']=self.refs.bachlor_school.value
	    	alumni_educational_details['bachlor_board']=self.refs.bachlor_board.value
	    	alumni_educational_details['bachlor_city']=self.refs.bachlor_city.value
	    	alumni_educational_details['bachlor_division']=self.refs.bachlor_division.value
	    	alumni_educational_details['master_school']=self.refs.master_school.value
	    	alumni_educational_details['master_board']=self.refs.master_board.value
	    	alumni_educational_details['master_city']=self.refs.master_city.value
	    	alumni_educational_details['master_division']=self.refs.master_division.value
	    	alumni_educational_details['other_school']=self.refs.other_school.value
	    	alumni_educational_details['other_board']=self.refs.other_board.value
	    	alumni_educational_details['other_city']=self.refs.other_city.value
	    	alumni_educational_details['other_division']=self.refs.other_division.value
	    	alumni_educational_details['c_institute']=self.refs.c_institute.value
	    	alumni_educational_details['c_course']=self.refs.c_course.value
	    	alumni_educational_details['c_location']=self.refs.c_location.value
	    	alumni_educational_details['c_year']=self.refs.c_year.value
	    	alumni_educational_details['c_degree']=self.refs.c_degree.value

	    	obj['alumni_educational_details'] = alumni_educational_details

	        var alumni_employment_details={};

	    	alumni_employment_details['company_name']=self.refs.company_name.value
	    	alumni_employment_details['nature_of_job']=self.refs.nature_of_job.value
	    	alumni_employment_details['designation']=self.refs.designation.value
	    	alumni_employment_details['office_addl1']=self.refs.office_addl1.value
	    	alumni_employment_details['office_addl2']=self.refs.office_addl2.value
	    	alumni_employment_details['office_city']=self.refs.office_city.value
	    	alumni_employment_details['office_zip']=self.refs.office_zip.value
	    	alumni_employment_details['office_state']=self.refs.office_state.value
	    	alumni_employment_details['office_country']=self.refs.office_country.value
	    	alumni_employment_details['mobile']=self.refs.office_mobile.value
	    	alumni_employment_details['otelephone']=self.refs.otelephone.value
	    	alumni_employment_details['fax']=self.refs.office_fax.value
	    	alumni_employment_details['email']=self.refs.office_email.value

	    	obj['alumni_employment_details'] = alumni_employment_details

	        var alumni_relative_details={};

	    	alumni_relative_details['relative_name']=self.refs.relative_name.value
	    	alumni_relative_details['relative_relation']=self.refs.relative_relation.value
	    	alumni_relative_details['relative_class']=self.refs.relative_class.value

	    	obj['alumni_relative_details']=alumni_relative_details

	    	var alumni_friend_details ={};

	    	alumni_friend_details['f1_name1']=self.refs.f1_name1.value
	    	alumni_friend_details['f1_batch_year']=self.refs.f1_batch_year.value
	    	alumni_friend_details['f1_stream']=self.refs.f1_stream.value
	    	alumni_friend_details['f1_contactno']=self.refs.f1_contactno.value
	    	alumni_friend_details['f2_name2']=self.refs.f2_name2.value
	    	alumni_friend_details['f2_batch_year']=self.refs.f2_batch_year.value
	    	alumni_friend_details['f2_stream']=self.refs.f2_stream.value
	    	alumni_friend_details['f2_contactno']=self.refs.f2_contactno.value
	    	alumni_friend_details['f3_name3']=self.refs.f3_name3.value
	    	alumni_friend_details['f3_batch_year']=self.refs.f3_batch_year.value
	    	alumni_friend_details['f3_stream']=self.refs.f3_stream.value
	    	alumni_friend_details['f3_contactno']=self.refs.f3_contactno.value

	    	obj['alumni_friend_details']=alumni_friend_details

			if(self.title=='Update'){
				self.loading = true
	        	alumniStore.trigger('edit_alumni', obj,self.alumni_id)
	          	self.alumni_view = 'show_alumni'
	        }
    	}

    	self.close = () =>{
    		self.alumni_view = 'show_alumni'
    	}

    	self.cancelOperation = (c) => {
      		self.AlumniData.map(a => {
          		a.confirmDelete = false
          		a.confirmEdit = false
      		})
    	}
	    self.confirmDelete = (c) => {
	      self.AlumniData.map(a => {
	        if(a.alumni_id != c.item.c.alumni_id){
	          a.confirmDelete = false
	        }else{
	          a.confirmDelete = true
	        }
	      })
	    }

	    self.delete = (c) => {
	      self.loading = true
	      alumniStore.trigger('delete_alumni', c.item.c.alumni_id)
	    }

	    alumniStore.on('read_alumni_changed',ReadAlumniChanged)
	    function ReadAlumniChanged(alumni){
	      self.AlumniData=[];
	      self.AlumniData = alumni
	      if(self.AlumniData.length==0){
	      	toastr.info("No Data Found")
	      }
	      self.loading = false;
	      self.update();
	    }

	    self.view_profile = (c,a) => {
	    	self.alumni_id = c
	    	self.alumni_view = 'alumni_profile'
	    	alumniStore.trigger('read_alumni_profile', self.alumni_id)
   		}

   		self.close_alumni_profile = () => {
    		self.alumni_view = 'show_alumni'
    	}

	    alumniStore.on('approved_alumni_changed',ApprovedAlumniChanged)
    	function ApprovedAlumniChanged(){
      		self.closeapproveAlumniwModal()
      		self.getData()
      	}

      	alumniStore.on('read_for_edit_alumni_changed',ReadForEditAlumniChanged)
    	function ReadForEditAlumniChanged(alumni_details){
    		self.alumni_details=[]
      		self.alumni_details = alumni_details
      		self.refs.submission_date.value = alumni_details[0].creation_date
      		self.refs.first_name.value = alumni_details[0].first_name
      		self.refs.middle_name.value = alumni_details[0].middle_name
      		self.refs.last_name.value = alumni_details[0].last_name
    		self.refs.batch_year.value = alumni_details[0].batch_year
			self.refs.date_of_birth.value = alumni_details[0].dob
			self.refs.enroll_no.value = alumni_details[0].enroll_no
			self.refs.residence_addl1.value = alumni_details[0].residence_addl1
			self.refs.residence_addl2.value = alumni_details[0].residence_addl2
			self.refs.residence_city.value = alumni_details[0].residence_city
			self.refs.residence_zip.value = alumni_details[0].residence_zip
			self.refs.residence_state.value = alumni_details[0].residence_state
			self.refs.residence_country.value = alumni_details[0].residence_country
			self.refs.mobile.value = alumni_details[0].mobile
			self.refs.fax.value = alumni_details[0].fax
			self.refs.email.value = alumni_details[0].email
			self.refs.telephone.value = alumni_details[0].telephone
			self.refs.spouse.value=alumni_details[0].spouse
    		self.refs.marriage_date.value=alumni_details[0].marriage_date
    		self.refs.relative_name.value=alumni_details[0].relative_name
    		self.refs.relative_relation.value=alumni_details[0].relative_relation
    		self.refs.relative_class.value=alumni_details[0].relative_class
    		self.refs.icse_school.value=alumni_details[0].icse_school
			self.refs.icse_board.value = alumni_details[0].icse_board
			self.refs.icse_city.value = alumni_details[0].icse_city
			self.refs.icse_division.value = alumni_details[0].icse_division
			self.refs.isc_school.value = alumni_details[0].isc_school
			self.refs.isc_board.value = alumni_details[0].isc_board
			self.refs.isc_city.value = alumni_details[0].isc_city
			self.refs.isc_division.value = alumni_details[0].isc_division
			self.refs.bachlor_school.value = alumni_details[0].bachlor_school
			self.refs.bachlor_board.value = alumni_details[0].bachlor_board
			self.refs.bachlor_city.value = alumni_details[0].bachlor_city
			self.refs.bachlor_division.value = alumni_details[0].bachlor_division
			self.refs.master_school.value = alumni_details[0].master_school
			self.refs.master_board.value = alumni_details[0].master_board
			self.refs.master_city.value = alumni_details[0].master_city
			self.refs.master_division.value = alumni_details[0].master_division
			self.refs.other_school.value = alumni_details[0].other_school
			self.refs.other_board.value = alumni_details[0].other_board
			self.refs.other_city.value = alumni_details[0].other_city
			self.refs.other_division.value = alumni_details[0].other_division
			self.refs.c_institute.value = alumni_details[0].c_institute
			self.refs.c_course.value = alumni_details[0].c_course
			self.refs.c_location.value = alumni_details[0].c_location
			self.refs.c_year.value = alumni_details[0].c_year
			self.refs.c_degree.value = alumni_details[0].c_degree
			self.refs.company_name.value = alumni_details[0].company_name
			self.refs.nature_of_job.value = alumni_details[0].nature_of_job
			self.refs.designation.value = alumni_details[0].designation
			self.refs.office_addl1.value = alumni_details[0].office_addl1
			self.refs.office_addl2.value = alumni_details[0].office_addl2
			self.refs.office_city.value = alumni_details[0].office_city
			self.refs.office_zip.value = alumni_details[0].office_zip
			self.refs.office_state.value = alumni_details[0].office_state
			self.refs.office_country.value = alumni_details[0].office_country
			self.refs.office_mobile.value = alumni_details[0].office_mobile
			self.refs.office_fax.value = alumni_details[0].office_fax
			self.refs.office_email.value=alumni_details[0].office_email
			self.refs.otelephone.value=alumni_details[0].otelephone
			self.refs.f1_name1.value=alumni_details[0].f1_name1
			self.refs.f1_batch_year.value=alumni_details[0].f1_batch_year
			self.refs.f1_stream.value=alumni_details[0].f1_stream
			self.refs.f1_contactno.value=alumni_details[0].f1_contactno
			self.refs.f2_name2.value = alumni_details[0].f2_name2
			self.refs.f2_batch_year.value = alumni_details[0].f2_batch_year
			self.refs.f2_stream.value = alumni_details[0].f2_stream
			self.refs.f2_contactno.value = alumni_details[0].f2_contactno
			self.refs.f3_name3.value = alumni_details[0].f3_name3
			self.refs.f3_batch_year.value = alumni_details[0].f3_batch_year
			self.refs.f3_stream.value = alumni_details[0].f3_stream
			self.refs.f3_contactno.value = alumni_details[0].f3_contactno
			if(alumni_details[0].assisting_org_alumni == "Y"){
				$('#assisting_org_alumni').prop('checked', true)
			}
			else{
				$('#assisting_org_alumni').prop('checked', false)
			}
			if(alumni_details[0].assisting_student_career == "Y"){
				$('#assisting_student_career').prop('checked', true)
			}
			else{
				$('#assisting_student_career').prop('checked', false)
			}
			if(alumni_details[0].assisting_executive_commitee == "Y"){
				$('#assisting_executive_commitee').prop('checked', true)
			}
			else{
				$('#assisting_executive_commitee').prop('checked', false)
			}
			self.refs.news.value = alumni_details[0].news
			self.alumni_id = alumni_details[0].alumni_id
			self.edit_alumni_id = alumni_details[0].alumni_id
			self.update()

    	}

    	alumniStore.on('edit_alumni_changed',EditAlumniChanged)
    	function EditAlumniChanged(){
      		self.getData()
      		self.loading = false
    	}

    	alumniStore.on('delete_alumni_changed',DeleteAlumniChanged)
    	function DeleteAlumniChanged(){
      		self.getData()
      		self.loading = false
    	}

    	alumniStore.on('read_alumni_profile_changed',AlumniProfileChanged)
    	function AlumniProfileChanged(alumni_profile_details){
	    	self.al=alumni_profile_details[0]
	    	self.alumni_profile = alumni_profile
	      	self.update()
    	}

});
riot.tag2('area', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Area Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Area</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addAreaInput" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readArea}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>#</th> <th>Area</th> <th></th> </tr> </thead> <tbody> <tr each="{d, i in areas}"> <td>{i + 1}</td> <td>{d.area}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{d.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, d)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{d.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readArea()
    })

     self.on("unmount", function(){
      areaStore.off('area_changed', AreaChanged)
    })

    self.readArea = () => {
      self.loading=true
       areaStore.trigger('read_area')
    }

     self.add = () => {
      if(!self.refs.addAreaInput.value){
        toastr.info("Please enter area and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          areaStore.trigger('add_area', self.refs.addAreaInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          areaStore.trigger('edit_area', self.refs.addAreaInput.value,
            self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.areas.map(d => {
          d.confirmDelete = false
          d.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.areas.map(d => {
        if(d.area != e.item.d.area){
          d.confirmDelete = false
        }else{
          d.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      areaStore.trigger('delete_area', e.item.d.area)
    }

    self.edit = (d,e) => {
      console.log(d)
      self.title='Update'
      self.refs.addAreaInput.value = d.area
      self.edit_id = d.area
    }

    areaStore.on('area_changed',AreaChanged)
    function AreaChanged(areas){
      console.log('area_changed1')
      console.log(areas)
      self.title='Create'
      self.refs.addAreaInput.value = ''
      self.loading = false
      self.areas = areas
      self.update()
    }

});
riot.tag2('attendance-entry', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{atendance_view ==\'show_atendance\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Attendance</h2> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" onchange="{getReadSection}"> <option>Select Standard</option> <option each="{standards}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="section_id"> <option>Select Section</option> <option each="{readfilteredSections}" riot-value="{section_id}">{section} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="start_date" placeholder="" tabindex="0" type="text"> </div> </div> <div class="column is-narrow"> <div class="control"> <button class="button is-danger has-text-weight-bold" onclick="{readAttendanceData}">Go</button> <button class="button has-text-weight-bold" onclick="{showHolidayList}">Holiday List</button> </div> </div> </div> </div> <div style="height:400px; overflow-x: scroll; overflow-y:scroll ;border:solid #000 3px;margin-bottom:10px"> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th>Enroll Number</th> <th>Name</th> <th style="text-align:center;" if="{role!=\'ADMIN\'}"> <input type="checkbox" id="checkStudentName" onclick="{selectAll}"> </th> <th if="{role==\'ADMIN\'}" style="text-align:center;">Attendance</th> </tr> </thead> <tbody> <tr each="{st, i in attendanceData}"> <td>{i+1}</td> <td>{st.enroll_number}</td> <td>{st.name}</td> <td style="width:2%; text-align:center;" if="{role!=\'ADMIN\'}"><input type="checkbox" checked="{st.done}" id="{\'addStudentName\' + st.student_id}" onclick="{selectStudent.bind(this,st)}"></td> <td if="{role==\'ADMIN\'}" style="text-align:center">{st.attendance_value}</td> </tr> </tbody> </table> </div> <button if="{role!=\'ADMIN\'}" class="button is-pulled-right" onclick="{addAttendance}">Submit</button> <span class="is-pulled-right" style="font-size:16px;margin-right:15px;margin-top:10px"> <span>P: <b>{present}</b> </span> <span>Ab: <b>{absent}</b></span> </span> <button if="{role==\'ADMIN\'}" class="button is-danger" onclick="{deleteAttendance}">Delete</button> </section> <section show="{atendance_view ==\'show_holiday_list\'}"> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th>Event</th> <th> Date From</th> <th> Date To</th> <th> Holiday</th> </tr> </thead> <tbody> <tr each="{st, i in holidayLists}"> <td>{i+1}</td> <td>{st.event_name}</td> <td>{st.start_date} </td> <td>{st.end_date} </td> <td>{st.holiday} </td> </tr> </tbody> </table> <button class="button is-danger" onclick="{hideHolidayList}">Cancel</button> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
      self.atendance_view='show_atendance'
    	self.role = getCookie('role')
    	self.readStandard()
    	self.readSection()
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "Y-m-d",
  		})
    })

    self.on("unmount", function(){
       attendanceStore.off('read_attendance_data_changed',ReadAttendanceDataChanged)
       attendanceStore.off('read_holiday_list_changed',ReadHolidayListChanged)
       attendanceStore.off('add_attendance_data_changed',AddAttendanceDataChanged)
       attendanceStore.off('delete_attendance_data_changed',DeleteAttendanceDataChanged)
       standardStore.off('standard_changed',StandardChanged)
       studentStore.off('read_section_changed',SectionChanged)
    })

    self.hideHolidayList=()=>{
       self.atendance_view='show_atendance'
    }

    self.deleteAttendance=()=>{
        attendanceStore.trigger('delete_attendance', self.attendanceData,self.refs.start_date.value)
    }

    self.readStandard = () => {
       standardStore.trigger('read_standard')
    }
    self.showHolidayList = () => {
        self.loading=true
        self.atendance_view ='show_holiday_list'
        attendanceStore.trigger('read_holiday_list')
    }

      self.countPresentAbsent=()=>{
        console.log("inside present absent")
           var total_present=0
           var total_absent=0
           self.present=0
           self.absent=0
        self.attendanceData.map(i=>{
            if(i.done==false){
               total_absent++
               self.absent=total_absent

            }else{

               total_present++
               self.present=total_present
               console.log(self.present)
            }
        })
      }

    self.addAttendance=()=>{
    	let studentData=[]
        self.attendanceData.map( q => {
        	let a={}
	        if(q.done==true){
	        	a.attendance='1'
	        	a.student_id=q.student_id
	            studentData.push(a)
	          }else{
	          	a.attendance='0'
	        	a.student_id=q.student_id
	            studentData.push(a)
	          }
        })
        console.log(studentData)
        attendanceStore.trigger('add_attendance_data', studentData,self.refs.start_date.value)
    }

    self.readSection = () => {
       studentStore.trigger('read_section')
    }

    self.getReadSection = () => {
    	self.readfilteredSections = []
    	self.readfilteredSections = self.sections.filter(s => {
    		return s.standard_id == self.refs.standard_id.value
    	})
    }

    self.readAttendanceData = () => {
      self.loading=true
      var start_date=self.refs.start_date.value
      var date1 = new Date(start_date)
      var date2 = new Date()

         var timeDiff = (date2.getTime() - date1.getTime());

         var diffDays =Math.ceil(timeDiff / (1000 * 3600 * 24));

         var day = date1.getDay();

        if(day==0){
          toastr.info("No Attendance on Sunday")
          return
         }else if(diffDays>0){
            console.log(diffDays)
         }else{
           toastr.info("No attendance in Advance date")
            return
         }

       attendanceStore.trigger('read_attendance_data', self.refs.standard_id.value,self.refs.section_id.value,self.refs.start_date.value)
    }

    self.selectAll = () => {
      self.studentArray = []
      if($('#checkStudentName').is(":checked")){
        self.attendanceData.map(i=>{
            i.done = true;
            $('addStudentName'+i.student_id).prop('checked', true);
            self.studentArray.push(i.student_id);
            console.log(self.studentArray)
          })
      }else{
        self.attendanceData.map(i=>{
            i.done = false;
            $('addStudentName'+i.student_id).prop('checked', false);
        })
     }

    }
    self.selectStudent = (item,event) => {
      item.done=!event.item.st.done
      self.studentArray=[]
      self.studentArray.push(item.student_id)
      console.log(self.studentArray)
       self.countPresentAbsent()
    }

    standardStore.on('standard_changed',StandardChanged)
      function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()
    }

    studentStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections
      self.update()
      self.getReadSection()
    }

    attendanceStore.on('read_holiday_list_changed',ReadHolidayListChanged)
    function ReadHolidayListChanged(holidayLists){
      console.log(holidayLists)
      self.holidayLists = holidayLists
       self.loading=false
      self.update()
    }

    attendanceStore.on('delete_attendance_data_changed',DeleteAttendanceDataChanged)
    function DeleteAttendanceDataChanged(){
       self.attendanceData=[]
       self.loading=false
       self.update()
    }

    attendanceStore.on('read_attendance_data_changed',ReadAttendanceDataChanged)
    function ReadAttendanceDataChanged(attendanceData){

      self.title='Create'
      self.loading = false
      if(attendanceData!='No Data Found'){
          self.attendanceData = attendanceData
           var total_present=0
           var total_absent=0
           self.present=0
           self.absent=0
          self.attendanceData.map(i=>{
          if(i.attendance==0){
            i.done = false;
            i.attendance_value='Ab'
             total_absent++
             self.absent=total_absent
            console.log(self.absent)
            $('addStudentName' + i.student_id ).prop('checked', false);
          }else{
            i.done = true;
            $('addStudentName' + i.student_id ).prop('checked', true);
             i.attendance_value='P'
             total_present++
             self.present=total_present
             console.log(self.present)
          }
          })
       }
      self.update()

    }

    attendanceStore.on('add_attendance_data_changed',AddAttendanceDataChanged)
    function AddAttendanceDataChanged(){
      self.loading = false

      self.update()
    }

});
riot.tag2('bank-account-setting', '<section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Bank Account Management</h2> <div class="flex items-center mt-2 mb-6 no-print"> <div class="bg-green py-1 rounded w-10"> <div class="bg-grey h-px flex-auto"></div> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"> <label class="label">Bank A/C No.</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addBankAccountInput" type="text"> </div> </div> <div class="column is-narrow"> <label class="label">Bank Name</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addBankNameInput" type="text"> </div> </div> <div class="column is-narrow"> <label class="label">Branch</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addBranchInput" type="text"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Bank A/C No.</th> <th>Bank Name</th> <th>Branch</th> <th></th> </tr> </thead> <tbody> <tr each="{s, i in banks}"> <td>{i+1}</td> <td>{s.bank_account_no}</td> <td>{s.bank_name}</td> <td>{s.branch}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{s.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, s)}">Edit</a></span> <span> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{s.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" title="Delete" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" title="Cancel" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readBank()
    })
    self.on("unmount", function(){
      bankStore.off('read_bank_changed', ReadBankChanged)
      bankStore.off('add_bank_changed',AddBankChanged)
      bankStore.on('bank_edit_changed',EditBankChanged)
      bankStore.off('delete_event_changed',DeleteBankChanged)
    })

    self.readBank = () => {
       bankStore.trigger('read_bank')
    }

     self.add = () => {
      if(!self.refs.addBankAccountInput.value){
        toastr.info("Please enter Event and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          bankStore.trigger('add', self.refs.addBankAccountInput.value,
           self.refs.addBankNameInput.value , self.refs.addBranchInput.value)
           self.readBank()
        }else if(self.title=='Update'){
          console.log('update')
          bankStore.trigger('bank_edit',self.refs.addBankAccountInput.value,
          self.refs.addBankNameInput.value ,
          self.refs.addBranchInput.value, self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.banks.map(s => {
          s.confirmDelete = false
          s.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.banks.map(s => {
        if(s.bank_account_no != e.item.s.bank_account_no){
          s.confirmDelete = false
        }else{
          s.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      bankStore.trigger('delete', e.item.s.bank_account_no)
    }

    self.edit = (s,e) => {
      console.log(s)
      self.title='Update'

      self.refs.addBankAccountInput.value = s.bank_account_no
      self.refs.addBankNameInput.value = s.bank_name
      self.refs.addBranchInput.value = s.branch
      self.edit_id = s.bank_account_no
    }

    bankStore.on('read_bank_changed',ReadBankChanged)
    function ReadBankChanged(banks){
      console.log(banks)

      self.banks = banks
      self.update()
      console.log(self.banks)
    }

    bankStore.on('add_bank_changed',AddBankChanged)
    function AddBankChanged(banks){
      console.log(banks)
      self.title='Create'
      self.loading = false
      self.banks = banks
      self.update()
      console.log(self.banks)
    }

    bankStore.on('bank_edit_changed',EditBankChanged)
    function EditBankChanged(banks){
      console.log(banks)
      self.title='Create'
      self.loading = false
      self.banks = banks
      self.refs.addBankAccountInput.value = ''
      self.refs.addBankNameInput.value = ''
      self.refs.addBranchInput.value = ''
      self.update()
      console.log(self.banks)
    }
    bankStore.on('delete_event_changed',DeleteBankChanged)
    function DeleteBankChanged(banks){
      console.log(banks)
      self.title='Create'
      self.banks = banks
      self.update()
    }

});
riot.tag2('bank-wise', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Bank</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="bank_id" id="bank_id"> <option value="-1">All</option> <option each="{banks}" riot-value="{bank_id}">{bank} </option> <option value="-3">School</option> <option value="-2">Online</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Mode</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="mode"> <option value="All">All</option> <option each="{modes}" riot-value="{mode}">{mode} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="date input form-control input" id="start_date" ref="start_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="date input form-control input" id="end_date" ref="end_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getBankWiseFees}"> GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Fees in Bank Summary</p> <p class="has-text-centered">Session: {sessionName}</p> <p class="has-text-centered">Bank:{selectedBank} Mode:{selectedMode} {fromSelectedDate} - {toSelectedDate}</p> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th class="slno">#</th> <th>Recpt Dt</th> <th>Recpt No</th> <th>Enro No</th> <th>Student\'s Name</th> <th>Class</th> <th>Month</th> <th>Fees</th> <th>Fine</th> <th>Schl</th> <th>Total</th> </tr> </thead> <tbody> <tr each="{cd, i in bankWiseFees}"> <td>{i + 1}</td> <td>{cd.receipt_date}</td> <td class="amount">{cd.receipt_id}</td> <td class="amount">{cd.enroll_number}</td> <td>{cd.student_name}</td> <td class="amount">{cd.class}</td> <td class="amount">{cd.fee_slip_name}</td> <td class="has-text-right amount">{cd.fees}</td> <td class="has-text-right amount">{cd.fine}</td> <td class="has-text-right amount">{cd.scholarship}</td> <td class="has-text-right amount">{cd.total}</td> </tr> <tr> <th class="has-text-right" colspan="7">Grand Total</th> <th class="has-text-right amount">{totalFees}</th> <th class="has-text-right amount">{totalFine}</th> <th class="has-text-right amount">{totalScholarship}</th> <th class="has-text-right amount">{grandTotal}</th> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.role = getCookie('role')
      flatpickr(".date", {
        allowInput: true,
        dateFormat: "d/m/Y",
      })
      self.update()
      self.readBanks()
      self.readMode()
    })
    self.on("unmount", function(){
      feesReportStore.off('read_bank_changed',BankChanged)
      feesReportStore.off('read_mode_changed',ModeChanged)
      feesReportStore.off('read_bank_wise_changed',BankWiseChanged)
    })
    self.getBankWiseFees = () => {
      var startDate = document.getElementById("start_date").value
      var endDate = document.getElementById("end_date").value
      if(!self.refs.start_date.value){
        toastr.info("Pleae enter From Date and try again")
      }else if(!self.refs.end_date.value){
        toastr.info("Pleae enter End Date and try again")
      }else if((Date.parse(startDate)> Date.parse(endDate))){
           toastr.info("From date can't be greater")
      }else{
    	var obj={}
  	    obj.bank_id = self.refs.bank_id.value
  	    obj.mode = self.refs.mode.value
        obj['start_date']=convertDate(self.refs.start_date.value)
        obj['end_date']=convertDate(self.refs.end_date.value)
        self.loading = true
        feesReportStore.trigger('read_bank_wise_fees', obj)
        }

    }

    self.readMode = () => {
       feesReportStore.trigger('read_mode')
    }
    self.readBanks = () => {
       feesReportStore.trigger('read_banks')

    }
    feesReportStore.on('read_bank_changed',BankChanged)
    function BankChanged(banks){
      console.log(banks)
      self.banks = banks
      self.update()

      console.log(self.banks)
    }
    feesReportStore.on('read_mode_changed',ModeChanged)
    function ModeChanged(modes){
    	console.log("MOdes")
      console.log(modes)
      self.modes = modes
      self.update()
    }
    feesReportStore.on('read_bank_wise_changed',BankWiseChanged)
    function BankWiseChanged(bankWiseFees, session_name){
    	console.log("bankWiseFees")
      console.log(bankWiseFees)
        self.bankWiseFees = bankWiseFees
        self.totalFees = 0
        self.totalFine = 0
        self.totalScholarship = 0
        self.grandTotal = 0

        self.bankWiseFees.map(c => {
        self.totalFees +=Number(c.fees)
        self.totalFine +=Number(c.fine)
        self.totalScholarship +=Number(c.scholarship)
        self.grandTotal +=Number(c.total)
      })

      self.sessionName = session_name
      self.selectedBank = $("#bank_id option:selected").text()
      self.selectedMode = self.refs.mode.value
      self.fromSelectedDate = self.refs.start_date.value
      self.toSelectedDate = self.refs.end_date.value
      self.loading = false
      self.update()
    }

});
riot.tag2('bill', '<div class="field has-addons"> <p class="control"> <a class="button {is-active: selected_master == \'fee-head\'}" href="#/fee-bill/fee-head"> <span>Fee Head</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'fee-slip\'}" href="#/fee-bill/fee-slip"> <span>Fee Slip</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'fee-plan\'}" href="#/fee-bill/fee-plan"> <span>Fee Plan</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'apply-fee-plan\'}" href="#/fee-bill/apply-fee-plan"> <span>Apply Fee Plan </span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'copy-fee-plan\'}" href="#/fee-bill/copy-fee-plan"> <span>Copy Fee plan</span> </a> </p> </div> <div id="bill-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_master')
    console.log(opts.selected_master)
    if(!opts.selected_master){
      self.selected_master = 'fee-head'
    }else{
      self.selected_master = opts.selected_master
    }
});
riot.tag2('birthday', '<section class=" is-fluid"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Birth Day</h2> </div> </div> <div class="box" style="font-size:13px "> <div class="columns"> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="type_id"> <option value="All">All</option> <option value="Student">Student</option> <option value="Staff">Staff</option> </select> </div> </div> </div> <div class="column is-narrow"> <div class="control"> <button class="button" onclick="{toDayBirthDay}">Today</button> </div> </div> <div class="column is-narrow"> <div class="control"> <button class="button" onclick="{tomorrowBirthDay}">Tomorrow</button> </div> </div> <div class="column is-narrow"> <div class="control"> <button class="button" onclick="{thisMonthBirthDay}">Month</button> </div> </div> <div class="column is-narrow"> <label class="label">Start Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="start_date" placeholder="" tabindex="0" type="text"> </div> </div> <div class="column is-narrow"> <label class="label">End Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="end_date" placeholder="" tabindex="0" type="text"> </div> </div> <div class="column is-narrow"> <div class="control"> <button class="button is-danger has-text-weight-bold" onclick="{dateRangeBirthDay}">Go</button> <input type="checkbox" id="checkTable" checked="{e.done}" onclick="{viewTable}" style="margin-top: 12px;"> Table </div> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-narrow" show="{report_view ==\'show_table\'}"> <thead> <tr> <th>#</th> <th>Enroll/ID</th> <th>Name</th> <th>Class/Designation</th> <th>Section/Department</th> <th>DOB</th> <th>Age</th> <th>Type</th> </tr> </thead> <tbody> <tr each="{st, i in birthDayData}"> <td>{i+1}</td> <td>{st.enroll_id}</td> <td>{st.name} </td> <td>{st.group}</td> <td>{st.category}</td> <td>{st.dob}</td> <td>{st.age}</td> <td>{st.type}</td> </tr> </tbody> </table> <div class="columns is-multiline"> <div class="column is-narrow " each="{st, i in birthDayData}" show="{report_view ==\'show_card\'}"> <div class="control"> <div class="card" style="height: 250px;"> <div class="card-image"> <figure class="image is-4by3"> <div style="padding:2px;" show="{st.type==\'Student\'}"><img riot-src="images/{session_id}/studentImages/{st.id}.jpg"></div> <div style="padding:2px;" show="{st.type==\'Teacher\'}"><img riot-src="images/empImages/{st.id}.jpg"></div> </figure> </div> <div class="content"> <p style="padding:10px;" class="has-text-weight-bold">{st.name} <br> {st.group} {st.category}</p> </div> </div> </div> </div> </div> </div> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.report_view = 'show_card'
    	self.role = getCookie('role')

        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "Y-m-d",
  		})
    })

    self.on("unmount", function(){
      birthDayStore.off('read_birth_day_changed',ReadBirthDayChanged)

    })
    self.viewTable = () => {
    	if($('#checkTable').is(":checked")){
	        self.report_view = 'show_table'
    	}else{
	        self.report_view = 'show_card'
    	}
    }
    self.toDayBirthDay = () => {
       self.dayType='toDay'
       self.s_date=''
       self.e_date=''
       self.readBirthDay()
    }
    self.tomorrowBirthDay = () => {
       self.dayType='Tomorrow'
       self.s_date=''
       self.e_date=''
       self.readBirthDay()
    }
    self.thisMonthBirthDay = () => {
       self.dayType='Month'
       self.s_date=''
       self.e_date=''
       self.readBirthDay()
    }

    self.dateRangeBirthDay = () => {
    	self.s_date=self.refs.start_date.value
    	self.e_date=self.refs.end_date.value
    	self.dayType='DateRange'
        self.readBirthDay()
    }

    self.readBirthDay = () => {
       birthDayStore.trigger('read_birth_day', self.dayType, self.s_date,self.e_date,self.refs.type_id.value)
    }

    birthDayStore.on('read_birth_day_changed',ReadBirthDayChanged)
    function ReadBirthDayChanged(birthDayData,session_id){

      self.title='Create'
      self.loading = false
      self.birthDayData = birthDayData
      self.session_id = session_id
      self.update()

    }

});
riot.tag2('browse-staff', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered printOnly_t" style="color: #ff3860;">Employee Details</h2> <div class="level"> <div class="level-left no-print"> <h2 class="title has-text-centered" style="color: #ff3860;">Employee Browser</h2> </div> </div> <div class="box no-print"> <div class="columns"> <div class="column "> <div class="control"> <div class="select"> <select ref="emp_type_id" onchange="{ReadBrowseStaff}"> <option riot-value="{-1}">All</option> <option each="{employeeTypes}" riot-value="{emp_type_id}">{emp_type} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-primary has-text-weight-bold is-pulled-right is-small" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right is-small" onclick="{ReadBrowseStaff}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-small has-text-weight-bold is-pulled-right" onclick="{showStaffField}">Setting </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th show="{view_title=\'show_title\'}">title</th> <th show="{view_first_name==\'show_first_name\'}">first_name</th> <th show="{view_middle_name==\'show_middle_name\'}">middle_name</th> <th show="{view_last_name==\'show_last_name\'}">last_name</th> <th show="{view_employee_id==\'show_employee_id\'}">employee_id</th> <th show="{view_short_name==\'show_short_name\'}">short_name</th> <th show="{view_marital_status==\'show_marital_status\'}">marital_status</th> <th show="{view_father_name==\'show_father_name\'}">father_name</th> <th show="{view_spouse==\'show_spouse\'}">spouse</th> <th show="{view_blood_group==\'show_blood_group\'}">blood_group</th> <th show="{view_religion_id==\'show_religion_id\'}">religion_id</th> <th show="{view_language==\'show_language\'}">language</th> <th show="{view_emp_type_id==\'show_emp_type_id\'}">emp_type_id</th> <th show="{view_department_id==\'show_department_id\'}">department_id</th> <th show="{view_employment_status_id==\'show_employment_status_id\'}">employment_status_id</th> <th show="{view_subject_id==\'show_subject_id\'}">subject_id</th> <th show="{view_designation_id==\'show_designation_id\'}">designation_id</th> <th show="{view_qualification==\'show_qualification\'}">qualification</th> <th show="{view_doj==\'show_doj\'}">doj</th> <th show="{view_dob==\'show_dob\'}">dob</th> <th show="{view_add_l1==\'show_add_l1\'}">add_l1</th> <th show="{view_city==\'show_city\'}">city</th> <th show="{view_zip==\'show_zip\'}">zip</th> <th show="{view_state==\'show_state\'}">state</th> <th show="{view_country==\'show_country\'}">country</th> <th show="{view_residence_phone==\'show_residence_phone\'}">residence_phone</th> <th show="{view_office_phone==\'show_office_phone\'}">office_phone</th> <th show="{view_mobile==\'show_mobile\'}">mobile</th> <th show="{view_email==\'show_email\'}">email</th> <th show="{view_nationality==\'show_nationality\'}">nationality</th> <th show="{view_x_subject==\'show_x_subject\'}">x_subject</th> <th show="{view_x_institution==\'show_x_institution\'}">x_institution</th> <th show="{view_x_board==\'show_x_board\'}">x_board</th> <th show="{view_x_yop==\'show_x_yop\'}">x_yop</th> <th show="{view_x_marks==\'show_x_marks\'}">x_marks</th> <th show="{view_x_div==\'show_x_div\'}">x_div</th> <th show="{view_xii_subject==\'show_xii_subject\'}">xii_subject</th> <th show="{view_xii_institution==\'show_xii_institution\'}">xii_institution</th> <th show="{view_xii_board==\'show_xii_board\'}">xii_board</th> <th show="{view_xii_yop==\'show_xii_yop\'}">xii_yop</th> <th show="{view_xii_marks==\'show_xii_marks\'}">xii_marks</th> <th show="{view_xii_div==\'show_xii_div\'}">xii_div</th> <th show="{view_ug_course==\'show_ug_course\'}">ug_course</th> <th show="{view_ug_institution==\'show_ug_institution\'}">ug_institution</th> <th show="{view_ug_university==\'show_ug_university\'}">ug_university</th> <th show="{view_ug_yop==\'show_ug_yop\'}">ug_yop</th> <th show="{view_ug_marks==\'show_ug_marks\'}">ug_marks</th> <th show="{view_ug_div==\'show_ug_div\'}">ug_div</th> <th show="{view_pg_course==\'show_pg_course\'}">pg_course</th> <th show="{view_pg_institution==\'show_pg_institution\'}">pg_institution</th> <th show="{view_pg_university==\'show_pg_university\'}">pg_university</th> <th show="{view_pg_yop==\'show_pg_yop\'}">pg_yop</th> <th show="{view_pg_marks==\'show_pg_marks\'}">pg_marks</th> <th show="{view_pg_div==\'show_pg_div\'}">pg_div</th> <th show="{view_bed_stream==\'show_bed_stream\'}">bed_stream</th> <th show="{view_bed_institution==\'show_bed_institution\'}">bed_institution</th> <th show="{view_bed_university==\'show_bed_university\'}">bed_university</th> <th show="{view_bed_yop==\'show_bed_yop\'}">bed_yop</th> <th show="{view_bed_marks==\'show_bed_marks\'}">bed_marks</th> <th show="{view_bed_div==\'show_bed_div\'}">bed_div</th> <th show="{view_bt_stream==\'show_bt_stream\'}">bt_stream</th> <th show="{view_bt_institution==\'show_bt_institution\'}">bt_institution</th> <th show="{view_bt_university==\'show_bt_university\'}">bt_university</th> <th show="{view_bt_yop==\'show_bt_yop\'}">bt_yop</th> <th show="{view_bt_marks==\'show_bt_marks\'}">bt_marks</th> <th show="{view_bt_div==\'show_bt_div\'}">bt_div</th> <th show="{view_bped_stream==\'show_bped_stream\'}">bped_stream</th> <th show="{view_bped_institution==\'show_bped_institution\'}">bped_institution</th> <th show="{view_bped_university==\'show_bped_university\'}">bped_university</th> <th show="{view_bped_yop==\'show_bped_yop\'}">bped_yop</th> <th show="{view_bped_marks==\'show_bped_marks\'}">bped_marks</th> <th show="{view_bped_div==\'show_bped_div\'}">bped_div</th> <th show="{view_dped_stream==\'show_dped_stream\'}">dped_stream</th> <th show="{view_dped_institution==\'show_dped_institution\'}">dped_institution</th> <th show="{view_dped_university==\'show_dped_university\'}">dped_university</th> <th show="{view_dped_yop==\'show_dped_yop\'}">dped_yop</th> <th show="{view_dped_marks==\'show_dped_marks\'}">dped_marks</th> <th show="{view_dped_div==\'show_dped_div\'}">dped_div</th> <th show="{view_mped_stream==\'show_mped_stream\'}">mped_stream</th> <th show="{view_mped_institution==\'show_mped_institution\'}">mped_institution</th> <th show="{view_mped_university==\'show_mped_university\'}">mped_university</th> <th show="{view_mped_yop==\'show_mped_yop\'}">mped_yop</th> <th show="{view_mped_marks==\'show_mped_marks\'}">mped_marks</th> <th show="{view_mped_div==\'show_mped_div\'}">mped_div</th> <th show="{view_med_stream==\'show_med_stream\'}">med_stream</th> <th show="{view_med_institution==\'show_med_institution\'}">med_institution</th> <th show="{view_med_university==\'show_med_university\'}">med_university</th> <th show="{view_med_yop==\'show_med_yop\'}">med_yop</th> <th show="{view_med_marks==\'show_med_marks\'}">med_marks</th> <th show="{view_med_div==\'show_med_div\'}">med_div</th> <th show="{view_mphil_stream==\'show_mphil_stream\'}">mphil_stream</th> <th show="{view_mphil_institution==\'show_mphil_institution\'}">mphil_institution</th> <th show="{view_mphil_university==\'show_mphil_university\'}">mphil_university</th> <th show="{view_mphil_yop==\'show_mphil_yop\'}">mphil_yop</th> <th show="{view_mphil_marks==\'show_mphil_marks\'}">mphil_marks</th> <th show="{view_mphil_div==\'show_mphil_div\'}">mphil_div</th> <th show="{view_phd_stream==\'show_phd_stream\'}">phd_stream</th> <th show="{view_phd_institution==\'show_phd_institution\'}">phd_institution</th> <th show="{view_phd_university==\'show_phd_university\'}">phd_university</th> <th show="{view_phd_yop==\'show_phd_yop\'}">phd_yop</th> <th show="{view_phd_marks==\'show_phd_marks\'}">phd_marks</th> <th show="{view_phd_div==\'show_phd_div\'}">phd_div</th> <th show="{view_other_stream==\'show_other_stream\'}">other_stream</th> <th show="{view_other_institution==\'show_other_institution\'}">other_institution</th> <th show="{view_other_university==\'show_other_university\'}">other_university</th> <th show="{view_other_yop==\'show_other_yop\'}">other_yop</th> <th show="{view_other_marks==\'show_other_marks\'}">other_marks</th> <th show="{view_other_div==\'show_other_div\'}">other_div</th> <th show="{view_details_scholarship==\'show_details_scholarship\'}">details_scholarship</th> <th show="{view_details_honours==\'show_details_honours\'}">details_honours</th> <th show="{view_details_publication==\'show_details_publication\'}">details_publication</th> <th show="{view_details_curricular_activities==\'show_details_curricular_activities\'}"> details_curricular_activities </th> <th show="{view_details_sport==\'show_details_sport\'}">details_sport</th> </tr> </thead> <tbody> <tr each="{st, i in browseStaffs}"> <td>{i+1}</td> <td show="{view_title==\'show_title\'}">{st.title}</td> <td show="{view_first_name==\'show_first_name\'}">{st.first_name}</td> <td show="{view_middle_name==\'show_middle_name\'}">{st.middle_name}</td> <td show="{view_last_name==\'show_last_name\'}">{st.last_name}</td> <td show="{view_employee_id==\'show_employee_id\'}">{st.employee_id}</td> <td show="{view_short_name==\'show_short_name\'}">{st.short_name}</td> <td show="{view_marital_status==\'show_marital_status\'}">{st.marital_status}</td> <td show="{view_father_name==\'show_father_name\'}">{st.father_name}</td> <td show="{view_spouse==\'show_spouse\'}">{st.spouse}</td> <td show="{view_blood_group==\'show_blood_group\'}">{st.blood_group}</td> <td show="{view_religion_id==\'show_religion_id\'}">{st.religion_id}</td> <td show="{view_language==\'show_language\'}">{st.language}</td> <td show="{view_emp_type_id==\'show_emp_type_id\'}">{st.emp_type_id}</td> <td show="{view_department_id==\'show_department_id\'}">{st.department_id}</td> <td show="{view_employment_status_id==\'show_employment_status_id\'}">{st.employment_status_id}</td> <td show="{view_subject_id==\'show_subject_id\'}">{st.subject_id}</td> <td show="{view_designation_id==\'show_designation_id\'}">{st.designation_id}</td> <td show="{view_qualification==\'show_qualification\'}">{st.qualification}</td> <td show="{view_doj==\'show_doj\'}">{st.doj}</td> <td show="{view_dob==\'show_dob\'}">{st.dob}</td> <td show="{view_add_l1==\'show_add_l1\'}">{st.add_l1}</td> <td show="{view_city==\'show_city\'}">{st.city}</td> <td show="{view_zip==\'show_zip\'}">{st.zip}</td> <td show="{view_state==\'show_state\'}">{st.state}</td> <td show="{view_country==\'show_country\'}">{st.country}</td> <td show="{view_residence_phone==\'show_residence_phone\'}">{st.residence_phone}</td> <td show="{view_office_phone==\'show_office_phone\'}">{st.office_phone}</td> <td show="{view_mobile==\'show_mobile\'}">{st.mobile}</td> <td show="{view_email==\'show_email\'}">{st.email}</td> <td show="{view_nationality==\'show_nationality\'}">{st.nationality}</td> <td show="{view_x_subject==\'show_x_subject\'}">x_subject}</td> <td show="{view_x_institution==\'show_x_institution\'}">{st.x_institution}</td> <td show="{view_x_board==\'show_x_board\'}">{st.x_board}</td> <td show="{view_x_yop==\'show_x_yop\'}">{st.x_yop}</td> <td show="{view_x_marks==\'show_x_marks\'}">{st.x_marks}</td> <td show="{view_x_div==\'show_x_div\'}">{st.x_div}</td> <td show="{view_xii_subject==\'show_xii_subject\'}">{st.xii_subject}</td> <td show="{view_xii_institution==\'show_xii_institution\'}">{st.xii_institution}</td> <td show="{view_xii_board==\'show_xii_board\'}">{st.xii_board}</td> <td show="{view_xii_yop==\'show_xii_yop\'}">{st.xii_yop}</td> <td show="{view_xii_marks==\'show_xii_marks\'}">{st.xii_marks}</td> <td show="{view_xii_div==\'show_xii_div\'}">{st.xii_div}</td> <td show="{view_ug_course==\'show_ug_course\'}">{st.ug_course}</td> <td show="{view_ug_institution==\'show_ug_institution\'}">{st.ug_institution}</td> <td show="{view_ug_university==\'show_ug_university\'}">{st.ug_university}</td> <td show="{view_ug_yop==\'show_ug_yop\'}">{st.ug_yop}</td> <td show="{view_ug_marks==\'show_ug_marks\'}">{st.ug_marks}</td> <td show="{view_ug_div==\'show_ug_div\'}">{st.ug_div}</td> <td show="{view_pg_course==\'show_pg_course\'}">{st.pg_course}</td> <td show="{view_pg_institution==\'show_pg_institution\'}">{st.pg_institution}</td> <td show="{view_pg_university==\'show_pg_university\'}">{st.pg_university}</td> <td show="{view_pg_yop==\'show_pg_yop\'}">{st.pg_yop}</td> <td show="{view_pg_marks==\'show_pg_marks\'}">{st.pg_marks}</td> <td show="{view_pg_div==\'show_pg_div\'}">{st.pg_div}</td> <td show="{view_bed_stream==\'show_bed_stream\'}">{st.bed_stream}</td> <td show="{view_bed_institution==\'show_bed_institution\'}">{st.bed_institution}</td> <td show="{view_bed_university==\'show_bed_university\'}">{st.bed_university}</td> <td show="{view_bed_yop==\'show_bed_yop\'}">{st.bed_yop}</td> <td show="{view_bed_marks==\'show_bed_marks\'}">{st.bed_marks}</td> <td show="{view_bed_div==\'show_bed_div\'}">{st.bed_div}</td> <td show="{view_bt_stream==\'show_bt_stream\'}">{st.bt_stream}</td> <td show="{view_bt_institution==\'show_bt_institution\'}">{st.bt_institution}</td> <td show="{view_bt_university==\'show_bt_university\'}">{st.bt_university}</td> <td show="{view_bt_yop==\'show_bt_yop\'}">{st.bt_yop}</td> <td show="{view_bt_marks==\'show_bt_marks\'}">{st.bt_marks}</td> <td show="{view_bt_div==\'show_bt_div\'}">{st.bt_div}</td> <td show="{view_bped_stream==\'show_bped_stream\'}">{st.bped_stream}</td> <td show="{view_bped_institution==\'show_bped_institution\'}">{st.bped_institution}</td> <td show="{view_bped_university==\'show_bped_university\'}">{st.bped_university}</td> <td show="{view_bped_yop==\'show_bped_yop\'}">{st.bped_yop}</td> <td show="{view_bped_marks==\'show_bped_marks\'}">{st.bped_marks}</td> <td show="{view_bped_div==\'show_bped_div\'}">{st.bped_div}</td> <td show="{view_dped_stream==\'show_dped_stream\'}">{st.dped_stream}</td> <td show="{view_dped_institution==\'show_dped_institution\'}">{st.dped_institution}</td> <td show="{view_dped_university==\'show_dped_university\'}">{st.dped_university}</td> <td show="{view_dped_yop==\'show_dped_yop\'}">{st.dped_yop}</td> <td show="{view_dped_marks==\'show_dped_marks\'}">{st.dped_marks}</td> <td show="{view_dped_div==\'show_dped_div\'}">{st.dped_div}</td> <td show="{view_mped_stream==\'show_mped_stream\'}">{st.mped_stream}</td> <td show="{view_mped_institution==\'show_mped_institution\'}">{st.mped_institution}</td> <td show="{view_mped_university==\'show_mped_university\'}">{st.mped_university}</td> <td show="{view_mped_yop==\'show_mped_yop\'}">{st.mped_yop}</td> <td show="{view_mped_marks==\'show_mped_marks\'}">{st.mped_marks}</td> <td show="{view_mped_div==\'show_mped_div\'}">{st.mped_div}</td> <td show="{view_med_stream==\'show_med_stream\'}">{st.med_stream}</td> <td show="{view_med_institution==\'show_med_institution\'}">{st.med_institution}</td> <td show="{view_med_university==\'show_med_university\'}">{st.med_university}</td> <td show="{view_med_yop==\'show_med_yop\'}">{st.med_yop}</td> <td show="{view_med_marks==\'show_med_marks\'}">{st.med_marks}</td> <td show="{view_med_div==\'show_med_div\'}">{st.med_div}</td> <td show="{view_mphil_stream==\'show_mphil_stream\'}">{st.mphil_stream}</td> <td show="{view_mphil_institution==\'show_mphil_institution\'}">{st.mphil_institution}</td> <td show="{view_mphil_university==\'show_mphil_university\'}">{st.mphil_university}</td> <td show="{view_mphil_yop==\'show_mphil_yop\'}">{st.mphil_yop}</td> <td show="{view_mphil_marks==\'show_mphil_marks\'}">{st.mphil_marks}</td> <td show="{view_mphil_div==\'show_mphil_div\'}">{st.mphil_div}</td> <td show="{view_phd_stream==\'show_phd_stream\'}">{st.phd_stream}</td> <td show="{view_phd_institution==\'show_phd_institution\'}">{st.phd_institution}</td> <td show="{view_phd_university==\'show_phd_university\'}">{st.phd_university}</td> <td show="{view_phd_yop==\'show_phd_yop\'}">{st.phd_yop}</td> <td show="{view_phd_marks==\'show_phd_marks\'}">{st.phd_marks}</td> <td show="{view_phd_div==\'show_phd_div\'}">{st.phd_div}</td> <td show="{view_other_stream==\'show_other_stream\'}">{st.other_stream}</td> <td show="{view_other_institution==\'show_other_institution\'}">{st.other_institution}</td> <td show="{view_other_university==\'show_other_university\'}">{st.other_university}</td> <td show="{view_other_yop==\'show_other_yop\'}">{st.other_yop}</td> <td show="{view_other_marks==\'show_other_marks\'}">{st.other_marks}</td> <td show="{view_other_div==\'show_other_div\'}">{st.other_div}</td> <td show="{view_details_scholarship==\'show_details_scholarship\'}">{st.details_scholarship}</td> <td show="{view_details_honours==\'show_details_honours\'}">{st.details_honours}</td> <td show="{view_details_publication==\'show_details_publication\'}">{st.details_publication}</td> <td show="{view_details_curricular_activities==\'show_details_curricular_activities\'}"> {st.details_curricular_activities} </td> <td show="{view_details_sport==\'show_details_sport\'}">{st.details_sport}</td> </tr> </tbody> </table> </section> <section> <div id="columnSetting" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Setting Configuaration</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role"></label> <div class="control" each="{st, i in fieldList}"> <input class="checkbox" type="checkbox" checked="{st.done}" id="{\'addStaffName\' + st.array_name}" onclick="{addCheckedColumn.bind(this,st)}">{st.field_name} </div> </div> </div> </div> </section> <footer class="modal-card-foot"> <div class="control"> <input type="checkbox" id="checkAllCheckBox" onclick="{selectAllCheckBox}"> All </div> <button class="button" id="item-modal-close" onclick="{closeCheckBoxModal}">Close</button> </footer> </div> </div> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    self.title='Add'
    self.fieldList=[
        {field_name : "title", array_name: "title"},
    	{field_name : "first_name", array_name: "first_name"},
    	{field_name : "middle_name", array_name: "middle_name"},
    	{field_name : "last_name", array_name: "last_name"},
    	{field_name : "employee_id", array_name: "employee_id"},
    	{field_name : "short_name", array_name: "short_name"},
    	{field_name : "marital_status", array_name: "marital_status"},
    	{field_name : "father_name", array_name: "father_name"},
    	{field_name : "spouse", array_name: "spouse"},
    	{field_name : "blood_group", array_name: "blood_group"},
    	{field_name : "religion_id", array_name: "religion_id"},
    	{field_name : "language", array_name: "language"},
    	{field_name : "emp_type_id", array_name: "emp_type_id"},
    	{field_name : "department_id", array_name: "department_id"},
    	{field_name : "employment_status_id", array_name: "employment_status_id"},
    	{field_name : "subject_id", array_name: "subject_id"},
    	{field_name : "designation_id", array_name: "designation_id"},
    	{field_name : "qualification", array_name: "qualification"},
    	{field_name : "doj" , array_name : "doj"},
    	{field_name : "dob" , array_name: "dob"},
    	{field_name : "add_l1", array_name: "add_l1"},
    	{field_name : "city", array_name: "city"},
    	{field_name : "zip", array_name: "zip"},
    	{field_name : "state", array_name: "state"},
    	{field_name : "country", array_name: "country"},
    	{field_name : "residence_phone", array_name: "residence_phone"},
    	{field_name : "office_phone", array_name: "office_phone"},
    	{field_name : "mobile", array_name: "mobile"},
    	{field_name : "email", array_name: "email"},
    	{field_name : "nationality", array_name: "nationality"},
    	{field_name : 'x_subject' , array_name : "x_subject"},
    	{field_name : 'x_institution' , array_name : "x_institution"},
    	{field_name : 'x_board' , array_name : "x_board"},
    	{field_name : 'x_yop' , array_name : "x_yop"},
    	{field_name : 'x_marks' , array_name : "x_marks"},
    	{field_name : 'x_div' , array_name : "x_div"},
    	{field_name : 'xii_subject' , array_name : "xii_subject"},
    	{field_name : 'xii_institution' , array_name : "xii_institution"},
    	{field_name : 'xii_board' , array_name : "xii_board"},
    	{field_name : 'xii_yop' , array_name : "xii_yop"},
    	{field_name : 'xii_marks' , array_name : "xii_marks"},
    	{field_name : 'xii_div' , array_name : "xii_div"},
    	{field_name : 'ug_course' , array_name : "ug_course"},
    	{field_name : 'ug_institution' , array_name : "ug_institution"},
    	{field_name : 'ug_university' , array_name : "ug_university"},
    	{field_name : 'ug_yop' , array_name : "ug_yop"},
    	{field_name : 'ug_marks' , array_name : "ug_marks"},
    	{field_name : 'ug_div' , array_name : "ug_div"},
    	{field_name : 'pg_course' , array_name : "pg_course"},
    	{field_name : 'pg_institution' , array_name : "pg_institution"},
    	{field_name : 'pg_university' , array_name : "pg_university"},
    	{field_name : 'pg_yop' , array_name : "pg_yop"},
    	{field_name : 'pg_marks' , array_name : "pg_marks"},
    	{field_name : 'pg_div' , array_name : "pg_div"},
    	{field_name : 'bed_stream' , array_name : "bed_stream"},
    	{field_name : 'bed_institution' , array_name : "bed_institution"},
    	{field_name : 'bed_university' , array_name : "bed_university"},
    	{field_name : 'bed_yop' , array_name : "bed_yop"},
    	{field_name : 'bed_marks' , array_name : "bed_marks"},
    	{field_name : 'bed_div' , array_name : "bed_div"},
    	{field_name : 'bt_stream' , array_name : "bt_stream"},
    	{field_name : 'bt_institution' , array_name : "bt_institution"},
    	{field_name : 'bt_university' , array_name : "bt_university"},
    	{field_name : 'bt_yop' , array_name : "bt_yop"},
    	{field_name : 'bt_marks' , array_name : "bt_marks"},
    	{field_name : 'bt_div' , array_name : "bt_div"},
    	{field_name : 'bped_stream' , array_name : "bped_stream"},
    	{field_name : 'bped_institution' , array_name : "bped_institution"},
    	{field_name : 'bped_university' , array_name : "bped_university"},
    	{field_name : 'bped_yop' , array_name : "bped_yop"},
    	{field_name : 'bped_marks' , array_name : "bped_marks"},
    	{field_name : 'bped_div' , array_name : "bped_div"},
    	{field_name : 'dped_stream' , array_name : "dped_stream"},
    	{field_name : 'dped_institution' , array_name : "dped_institution"},
    	{field_name : 'dped_university' , array_name : "dped_university"},
    	{field_name : 'dped_yop' , array_name : "dped_yop"},
    	{field_name : 'dped_marks' , array_name : "dped_marks"},
    	{field_name : 'dped_div' , array_name : "dped_div"},
    	{field_name : 'mped_stream' , array_name : "mped_stream"},
    	{field_name : 'mped_institution' , array_name : "mped_institution"},
    	{field_name : 'mped_university' , array_name : "mped_university"},
    	{field_name : 'mped_yop' , array_name : "mped_yop"},
    	{field_name : 'mped_marks' , array_name : "mped_marks"},
    	{field_name : 'mped_div' , array_name : "mped_div"},
    	{field_name : 'med_stream' , array_name : "med_stream"},
    	{field_name : 'med_institution' , array_name : "med_institution"},
    	{field_name : 'med_university' , array_name : "med_university"},
    	{field_name : 'med_yop' , array_name : "med_yop"},
    	{field_name : 'med_marks' , array_name : "med_marks"},
    	{field_name : 'med_div' , array_name : "med_div"},
    	{field_name : 'mphil_stream' , array_name : "mphil_stream"},
    	{field_name : 'mphil_institution' , array_name : "mphil_institution"},
    	{field_name : 'mphil_university' , array_name : "mphil_university"},
    	{field_name : 'mphil_yop' , array_name : "mphil_yop"},
    	{field_name : 'mphil_marks' , array_name : "mphil_marks"},
    	{field_name : 'mphil_div' , array_name : "mphil_div"},
    	{field_name : 'phd_stream' , array_name : "phd_stream"},
    	{field_name : 'phd_institution' , array_name : "phd_institution"},
    	{field_name : 'phd_university' , array_name : "phd_university"},
    	{field_name : 'phd_yop' , array_name : "phd_yop"},
    	{field_name : 'phd_marks' , array_name : "phd_marks"},
    	{field_name : 'phd_div' , array_name : "phd_div"},
    	{field_name : 'other_stream' , array_name : "other_stream"},
    	{field_name : 'other_institution' , array_name : "other_institution"},
    	{field_name : 'other_university' , array_name : "other_university"},
    	{field_name : 'other_yop' , array_name : "other_yop"},
    	{field_name : 'other_marks' , array_name : "other_marks"},
    	{field_name : 'other_div' , array_name : "other_div"},
    	{field_name : 'details_scholarship' , array_name : "details_scholarship"},
    	{field_name : 'details_honours' , array_name : "details_honours"},
    	{field_name : 'details_publication' , array_name : "details_publication"},
    	{field_name : 'details_curricular_activities' , array_name : "details_curricular_activities"},
    	{field_name : 'details_sport' , array_name : "details_sport"}
    ]

       self.fieldList.map( q => {

            if(q.array_name== "first_name"){
                    self.view_first_name="show_irst_name"
                     q.done=true
                }
            if(q.array_name== "middle_name"){
                    self.view_middle_name= "show_middle_name"
                     q.done=true
                }
            if(q.array_name== "last_name"){
                    self.view_last_name= "show_last_name"
                    q.done=true
                }
            if(q.array_name== "employee_id"){
                self.view_employee_id ="show_employee_id"
                q.done=true
            }

             if(q.array_name== "office_phone"){
                self.view_office_phone ="show_office_phone"
                q.done=true
            }
             if(q.array_name== "mobile"){
                self.view_mobile ="show_mobile"
                q.done=true
            }
             if(q.array_name== "email"){
                self.view_email ="show_email"
                q.done=true
            }

       })

    	self.role = getCookie('role')
    	self.readEmployeeTypes()
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
      staffStore.off('read_browse_staff_changed',ReadBrowseStaffChanged)
      employeeTypeStore.off('employeeTypes_changed',EmployeeTypesChanged)
    })
    self.showStaffField = () =>{
       $("#columnSetting").addClass("is-active")

    }

    self.closeCheckBoxModal=()=>{
    	 $("#columnSetting").removeClass("is-active");
    }
    self.selectAllCheckBox = () => {
    	console.log("checkAlll")
      if($('#checkAllCheckBox').is(":checked")){
        self.fieldList.map(i=>{
        	console.log(i)
          i.done = true;
          $('addStaffName'+i.array_name).prop('checked', true);
        })
      }else{
        self.fieldList.map(i=>{
          i.done = false;
          $('addStaffName'+i.array_name).prop('checked', false);
        })
      }
      	var item=''
      	var event=''
       self.addCheckedColumn(item,event)
    }

self.addCheckedColumn = (item, event) => {
console.log(item)
 	if(item!=''){
	 item.done=!event.item.st.done
 	}
self.fieldList.map( q => {
    console.log(q.field_name)
if(q.done==true && q.array_name== "title"){
        self.view_title= "show_title"
    }
if(q.done==true && q.array_name== "first_name"){
        self.view_first_name="show_irst_name"
    }
if(q.done==true && q.array_name== "middle_name"){
        self.view_middle_name= "show_middle_name"
    }
if(q.done==true && q.array_name== "last_name"){
        self.view_last_name= "show_last_name"
    }
if(q.done==true && q.array_name== "employee_id"){
        self.view_employee_id ="show_employee_id"
    }
if(q.done==true && q.array_name== "short_name"){
        self.view_short_name= "show_short_name"
    }
if(q.done==true && q.array_name== "marital_status"){
        self.view_marital_status= "show_marital_status"
    }
if(q.done==true && q.array_name== "father_name"){
    self.view_father_name= "show_father_name"

    }
if(q.done==true && q.array_name== "spouse"){
    self.view_spouse= "show_spouse"

    }
if(q.done==true && q.array_name== "blood_group"){
    self.view_blood_group= "show_blood_group"

    }
if(q.done==true && q.array_name== "religion_id"){
    self.view_religion_id= "show_religion_id"

    }
if(q.done==true && q.array_name== "language"){
    self.view_language= "show_language"

    }
if(q.done==true && q.array_name== "emp_type_id"){
    self.view_emp_type_id= "show_emp_type_id"

    }
if(q.done==true && q.array_name== "department_id"){
    self.view_department_id= "show_department_id"

    }
if(q.done==true && q.array_name== "employment_status_id"){
    self.view_employment_status_id= "show_employment_status_id"

    }
if(q.done==true && q.array_name== "subject_id"){
    self.view_subject_id= "show_subject_id"

    }
if(q.done==true && q.array_name== "designation_id"){
    self.view_designation_id= "show_designation_id"

    }
if(q.done==true && q.array_name== "qualification"){
    self.view_qualification= "show_qualification"

    }
if(q.done==true && q.array_name=="doj"){
    self.view_doj="show_doj"

    }
if(q.done==true && q.array_name=="dob"){
    self.view_dob="show_dob"

    }
if(q.done==true && q.array_name== "add_l1"){
    self.view_add_l1= "show_add_l1"

    }
if(q.done==true && q.array_name== "city"){
    self.view_city= "show_city"

    }
if(q.done==true && q.array_name== "zip"){
    self.view_zip= "show_zip"

    }
if(q.done==true && q.array_name== "state"){
    self.view_state= "show_state"

    }
if(q.done==true && q.array_name== "country"){
    self.view_country= "show_country"

    }
if(q.done==true && q.array_name== "residence_phone"){
    self.view_residence_phone= "show_residence_phone"

    }
if(q.done==true && q.array_name== "office_phone"){
    self.view_office_phone= "show_office_phone"

    }
if(q.done==true && q.array_name== "mobile"){
    self.view_mobile= "show_mobile"

    }
if(q.done==true && q.array_name== "email"){
    self.view_email= "show_email"

    }
if(q.done==true && q.array_name== "nationality"){
    self.view_nationality= "show_nationality"

    }
	if (q.done==true && q.array_name == "x_subject"){
        self.view_x_subject= "show_x_subject"

    }
	if (q.done==true && q.array_name == "x_institution"){
        self.view_x_institution= "show_x_institution"

    }
	if (q.done==true && q.array_name == "x_board"){
        self.view_x_board= "show_x_board"

    }
	if (q.done==true && q.array_name == "x_yop"){
        self.view_x_yop= "show_x_yop"

    }
	if (q.done==true && q.array_name == "x_marks"){
        self.view_x_marks= "show_x_marks"

    }
	if (q.done==true && q.array_name == "x_div"){
        self.view_x_div= "show_x_div"

    }
	if (q.done==true && q.array_name == "xii_subject"){
        self.view_xii_subject= "show_xii_subject"

    }
	if (q.done==true && q.array_name == "xii_institution"){
        self.view_xii_institution= "show_xii_institution"

    }
	if (q.done==true && q.array_name == "xii_board"){
        self.view_xii_board= "show_xii_board"

    }
	if (q.done==true && q.array_name == "xii_yop"){
        self.view_xii_yop= "show_xii_yop"

    }
	if (q.done==true && q.array_name == "xii_marks"){
        self.view_xii_marks= "show_xii_marks"

    }
	if (q.done==true && q.array_name == "xii_div"){
        self.view_xii_div= "show_xii_div"

    }
	if (q.done==true && q.array_name == "ug_course"){
        self.view_ug_course= "show_ug_course"

    }
	if (q.done==true && q.array_name == "ug_institution"){
        self.view_ug_institution= "show_ug_institution"

    }
	if (q.done==true && q.array_name == "ug_university"){
        self.view_ug_university= "show_ug_university"

    }
	if (q.done==true && q.array_name == "ug_yop"){
        self.view_ug_yop= "show_ug_yop"

    }
	if (q.done==true && q.array_name == "ug_marks"){
        self.view_ug_marks= "show_ug_marks"

    }
	if (q.done==true && q.array_name == "ug_div"){
        self.view_ug_div= "show_ug_div"

    }
	if (q.done==true && q.array_name == "pg_course"){
        self.view_pg_course= "show_pg_course"

    }
	if (q.done==true && q.array_name == "pg_institution"){
        self.view_pg_institution= "show_pg_institution"

    }
	if (q.done==true && q.array_name == "pg_university"){
        self.view_pg_university= "show_pg_university"

    }
	if (q.done==true && q.array_name == "pg_yop"){
        self.view_pg_yop= "show_pg_yop"

    }
	if (q.done==true && q.array_name == "pg_marks"){
        self.view_pg_marks= "show_pg_marks"

    }
	if (q.done==true && q.array_name == "pg_div"){
        self.view_pg_div= "show_pg_div"

    }
	if (q.done==true && q.array_name == "bed_stream"){
        self.view_bed_stream= "show_bed_stream"

    }
	if (q.done==true && q.array_name == "bed_institution"){
        self.view_bed_institution= "show_bed_institution"

    }
	if (q.done==true && q.array_name == "bed_university"){
        self.view_bed_university= "show_bed_university"

    }
	if (q.done==true && q.array_name == "bed_yop"){
        self.view_bed_yop= "show_bed_yop"

    }
	if (q.done==true && q.array_name == "bed_marks"){
        self.view_bed_marks= "show_bed_marks"

    }
	if (q.done==true && q.array_name == "bed_div"){
        self.view_bed_div= "show_bed_div"

    }
	if (q.done==true && q.array_name == "bt_stream"){
        self.view_bt_stream= "show_bt_stream"

    }
	if (q.done==true && q.array_name == "bt_institution"){
        self.view_bt_institution= "show_bt_institution"

    }
	if (q.done==true && q.array_name == "bt_university"){
        self.view_bt_university= "show_bt_university"

    }
	if (q.done==true && q.array_name == "bt_yop"){
        self.view_bt_yop= "show_bt_yop"

    }
	if (q.done==true && q.array_name == "bt_marks"){
        self.view_bt_marks= "show_bt_marks"

    }
	if (q.done==true && q.array_name == "bt_div"){
        self.view_bt_div= "show_bt_div"

    }
	if (q.done==true && q.array_name == "bped_stream"){
        self.view_bped_stream= "show_bped_stream"

    }
	if (q.done==true && q.array_name == "bped_institution"){
        self.view_bped_institution= "show_bped_institution"

    }
	if (q.done==true && q.array_name == "bped_university"){
        self.view_bped_university= "show_bped_university"

    }
	if (q.done==true && q.array_name == "bped_yop"){
        self.view_bped_yop= "show_bped_yop"

    }
	if (q.done==true && q.array_name == "bped_marks"){
        self.view_bped_marks= "show_bped_marks"

    }
	if (q.done==true && q.array_name == "bped_div"){
        self.view_bped_div= "show_bped_div"

    }
	if (q.done==true && q.array_name == "dped_stream"){
        self.view_dped_stream= "show_dped_stream"

    }
	if (q.done==true && q.array_name == "dped_institution"){
        self.view_dped_institution= "show_dped_institution"

    }
	if (q.done==true && q.array_name == "dped_university"){
        self.view_dped_university= "show_dped_university"

    }
	if (q.done==true && q.array_name == "dped_yop"){
        self.view_dped_yop= "show_dped_yop"

    }
	if (q.done==true && q.array_name == "dped_marks"){
        self.view_dped_marks= "show_dped_marks"

    }
	if (q.done==true && q.array_name == "dped_div"){
        self.view_dped_div= "show_dped_div"

    }
	if (q.done==true && q.array_name == "mped_stream"){
        self.view_mped_stream= "show_mped_stream"

    }
	if (q.done==true && q.array_name == "mped_institution"){
        self.view_mped_institution= "show_mped_institution"

    }
	if (q.done==true && q.array_name == "mped_university"){
        self.view_mped_university= "show_mped_university"

    }
	if (q.done==true && q.array_name == "mped_yop"){
        self.view_mped_yop= "show_mped_yop"

    }
	if (q.done==true && q.array_name == "mped_marks"){
        self.view_mped_marks= "show_mped_marks"

    }
	if (q.done==true && q.array_name == "mped_div"){
        self.view_mped_div= "show_mped_div"

    }
	if (q.done==true && q.array_name == "med_stream"){
        self.view_med_stream= "show_med_stream"

    }
	if (q.done==true && q.array_name == "med_institution"){
        self.view_med_institution= "show_med_institution"

    }
	if (q.done==true && q.array_name == "med_university"){
        self.view_med_university= "show_med_university"

    }
	if (q.done==true && q.array_name == "med_yop"){
        self.view_med_yop= "show_med_yop"

    }
	if (q.done==true && q.array_name == "med_marks"){
        self.view_med_marks= "show_med_marks"

    }
	if (q.done==true && q.array_name == "med_div"){
        self.view_med_div= "show_med_div"

    }
	if (q.done==true && q.array_name == "mphil_stream"){
        self.view_mphil_stream= "show_mphil_stream"

    }
	if (q.done==true && q.array_name == "mphil_institution"){
        self.view_mphil_institution= "show_mphil_institution"

    }
	if (q.done==true && q.array_name == "mphil_university"){
        self.view_mphil_university= "show_mphil_university"

    }
	if (q.done==true && q.array_name == "mphil_yop"){
        self.view_mphil_yop= "show_mphil_yop"

    }
	if (q.done==true && q.array_name == "mphil_marks"){
        self.view_mphil_marks= "show_mphil_marks"

    }
	if (q.done==true && q.array_name == "mphil_div"){
        self.view_mphil_div= "show_mphil_div"

    }
	if (q.done==true && q.array_name == "phd_stream"){
        self.view_phd_stream= "show_phd_stream"

    }
	if (q.done==true && q.array_name == "phd_institution"){
        self.view_phd_institution= "show_phd_institution"

    }
	if (q.done==true && q.array_name == "phd_university"){
        self.view_phd_university= "show_phd_university"

    }
	if (q.done==true && q.array_name == "phd_yop"){
        self.view_phd_yop= "show_phd_yop"

    }
	if (q.done==true && q.array_name == "phd_marks"){
        self.view_phd_marks= "show_phd_marks"

    }
	if (q.done==true && q.array_name == "phd_div"){
        self.view_phd_div= "show_phd_div"

    }
	if (q.done==true && q.array_name == "other_stream"){
        self.view_other_stream= "show_other_stream"

    }
	if (q.done==true && q.array_name == "other_institution"){
        self.view_other_institution= "show_other_institution"

    }
	if (q.done==true && q.array_name == "other_university"){
        self.view_other_university= "show_other_university"

    }
	if (q.done==true && q.array_name == "other_yop"){
        self.view_other_yop= "show_other_yop"

    }
	if (q.done==true && q.array_name == "other_marks"){
        self.view_other_marks= "show_other_marks"

    }
	if (q.done==true && q.array_name == "other_div"){
        self.view_other_div= "show_other_div"

    }
	if (q.done==true && q.array_name == "details_scholarship"){
        self.view_details_scholarship= "show_details_scholarship"

    }
	if (q.done==true && q.array_name == "details_honours"){
        self.view_details_honours= "show_details_honours"

    }
	if (q.done==true && q.array_name == "details_publication"){
        self.view_details_publication= "show_details_publication"

    }
	if (q.done==true && q.array_name == "details_curricular_activities"){
        self.view_details_curricular_activities= "show_details_curricular_activities"

    }
	if (q.done==true && q.array_name == "details_sport"){
        self.view_details_sport= "show_details_sport"

    }

if(q.done==false && q.array_name== "title"){
        self.view_title= ""
}
if(q.done==false && q.array_name== "first_name"){
        self.view_first_name=""

    }
if(q.done==false && q.array_name== "middle_name"){
        self.view_middle_name= ""

    }
if(q.done==false && q.array_name== "last_name"){
        self.view_ast_name= ""

    }
if(q.done==false && q.array_name== "employee_id"){
        self.view_employee_id =""

    }
if(q.done==false && q.array_name== "short_name"){
        self.view_short_name= ""

    }
if(q.done==false && q.array_name== "marital_status"){
        self.view_marital_status= ""

    }
if(q.done==false && q.array_name== "father_name"){
    self.view_father_name= ""
    }
if(q.done==false && q.array_name== "spouse"){
    self.view_spouse= ""
    }
if(q.done==false && q.array_name== "blood_group"){
    self.view_blood_group= ""
    }
if(q.done==false && q.array_name== "religion_id"){
    self.view_religion_id= ""
    }
if(q.done==false && q.array_name== "language"){
    self.view_language= ""
    }
if(q.done==false && q.array_name== "emp_type_id"){
    self.view_emp_type_id= ""
    }
if(q.done==false && q.array_name== "department_id"){
    self.view_department_id= ""
    }
if(q.done==false && q.array_name== "employment_status_id"){
    self.view_employment_status_id= ""
    }
if(q.done==false && q.array_name== "subject_id"){
    self.view_subject_id= ""
    }
if(q.done==false && q.array_name== "designation_id"){
    self.view_designation_id= ""
    }
if(q.done==false && q.array_name== "qualification"){
    self.view_qualification= ""
    }
if(q.done==false && q.array_name=="doj"){
    self.view_doj=""
    }
if(q.done==false && q.array_name=="dob"){
    self.view_dob=""
    }
if(q.done==false && q.array_name== "add_l1"){
    self.view_add_l1= ""
    }
if(q.done==false && q.array_name== "city"){
    self.view_city= ""
    }
if(q.done==false && q.array_name== "zip"){
    self.view_zip= ""
    }
if(q.done==false && q.array_name== "state"){
    self.view_state= ""
    }
if(q.done==false && q.array_name== "country"){
    self.view_country= ""
    }
if(q.done==false && q.array_name== "residence_phone"){
    self.view_residence_phone= ""
    }
if(q.done==false && q.array_name== "office_phone"){
    self.view_office_phone= ""
    }
if(q.done==false && q.array_name== "mobile"){
    self.view_mobile= ""
    }
if(q.done==false && q.array_name== "email"){
    self.view_email= ""
    }
if(q.done==false && q.array_name== "nationality"){
    self.view_nationality= ""
    }
	if (q.done==false && q.array_name == "x_subject"){
        self.view_x_subject= ""

    }
	if (q.done==false && q.array_name == "x_institution"){
        self.view_x_institution= ""

    }
	if (q.done==false && q.array_name == "x_board"){
        self.view_x_board= ""

    }
	if (q.done==false && q.array_name == "x_yop"){
        self.view_x_yop= ""

    }
	if (q.done==false && q.array_name == "x_marks"){
        self.view_x_marks= ""

    }
	if (q.done==false && q.array_name == "x_div"){
        self.view_x_div= ""

    }
	if (q.done==false && q.array_name == "xii_subject"){
        self.view_xii_subject= ""

    }
	if (q.done==false && q.array_name == "xii_institution"){
        self.view_xii_institution= ""

    }
	if (q.done==false && q.array_name == "xii_board"){
        self.view_xii_board= ""

    }
	if (q.done==false && q.array_name == "xii_yop"){
        self.view_xii_yop= ""

    }
	if (q.done==false && q.array_name == "xii_marks"){
        self.view_xii_marks= ""

    }
	if (q.done==false && q.array_name == "xii_div"){
        self.view_xii_div= ""

    }
	if (q.done==false && q.array_name == "ug_course"){
        self.view_ug_course= ""

    }
	if (q.done==false && q.array_name == "ug_institution"){
        self.view_ug_institution= ""

    }
	if (q.done==false && q.array_name == "ug_university"){
        self.view_ug_university= ""

    }
	if (q.done==false && q.array_name == "ug_yop"){
        self.view_ug_yop= ""

    }
	if (q.done==false && q.array_name == "ug_marks"){
        self.view_ug_marks= ""

    }
	if (q.done==false && q.array_name == "ug_div"){
        self.view_ug_div= ""

    }
	if (q.done==false && q.array_name == "pg_course"){
        self.view_pg_course= ""

    }
	if (q.done==false && q.array_name == "pg_institution"){
        self.view_pg_institution= ""

    }
	if (q.done==false && q.array_name == "pg_university"){
        self.view_pg_university= ""

    }
	if (q.done==false && q.array_name == "pg_yop"){
        self.view_pg_yop= ""

    }
	if (q.done==false && q.array_name == "pg_marks"){
        self.view_pg_marks= ""

    }
	if (q.done==false && q.array_name == "pg_div"){
        self.view_pg_div= ""

    }
	if (q.done==false && q.array_name == "bed_stream"){
        self.view_bed_stream= ""

    }
	if (q.done==false && q.array_name == "bed_institution"){
        self.view_bed_institution= ""

    }
	if (q.done==false && q.array_name == "bed_university"){
        self.view_bed_university= ""

    }
	if (q.done==false && q.array_name == "bed_yop"){
        self.view_bed_yop= ""

    }
	if (q.done==false && q.array_name == "bed_marks"){
        self.view_bed_marks= ""

    }
	if (q.done==false && q.array_name == "bed_div"){
        self.view_bed_div= ""

    }
	if (q.done==false && q.array_name == "bt_stream"){
        self.view_bt_stream= ""

    }
	if (q.done==false && q.array_name == "bt_institution"){
        self.view_bt_institution= ""

    }
	if (q.done==false && q.array_name == "bt_university"){
        self.view_bt_university= ""

    }
	if (q.done==false && q.array_name == "bt_yop"){
        self.view_bt_yop= ""

    }
	if (q.done==false && q.array_name == "bt_marks"){
        self.view_bt_marks= ""

    }
	if (q.done==false && q.array_name == "bt_div"){
        self.view_bt_div= ""

    }
	if (q.done==false && q.array_name == "bped_stream"){
        self.view_bped_stream= ""

    }
	if (q.done==false && q.array_name == "bped_institution"){
        self.view_bped_institution= ""

    }
	if (q.done==false && q.array_name == "bped_university"){
        self.view_bped_university= ""

    }
	if (q.done==false && q.array_name == "bped_yop"){
        self.view_bped_yop= ""

    }
	if (q.done==false && q.array_name == "bped_marks"){
        self.view_bped_marks= ""

    }
	if (q.done==false && q.array_name == "bped_div"){
        self.view_bped_div= ""

    }
	if (q.done==false && q.array_name == "dped_stream"){
        self.view_dped_stream= ""

    }
	if (q.done==false && q.array_name == "dped_institution"){
        self.view_dped_institution= ""

    }
	if (q.done==false && q.array_name == "dped_university"){
        self.view_dped_university= ""

    }
	if (q.done==false && q.array_name == "dped_yop"){
        self.view_dped_yop= ""

    }
	if (q.done==false && q.array_name == "dped_marks"){
        self.view_dped_marks= ""

    }
	if (q.done==false && q.array_name == "dped_div"){
        self.view_dped_div= ""

    }
	if (q.done==false && q.array_name == "mped_stream"){
        self.view_mped_stream= ""

    }
	if (q.done==false && q.array_name == "mped_institution"){
        self.view_mped_institution= ""

    }
	if (q.done==false && q.array_name == "mped_university"){
        self.view_mped_university= ""

    }
	if (q.done==false && q.array_name == "mped_yop"){
        self.view_mped_yop= ""

    }
	if (q.done==false && q.array_name == "mped_marks"){
        self.view_mped_marks= ""

    }
	if (q.done==false && q.array_name == "mped_div"){
        self.view_mped_div= ""

    }
	if (q.done==false && q.array_name == "med_stream"){
        self.view_med_stream= ""

    }
	if (q.done==false && q.array_name == "med_institution"){
        self.view_med_institution= ""

    }
	if (q.done==false && q.array_name == "med_university"){
        self.view_med_university= ""

    }
	if (q.done==false && q.array_name == "med_yop"){
        self.view_med_yop= ""

    }
	if (q.done==false && q.array_name == "med_marks"){
        self.view_med_marks= ""

    }
	if (q.done==false && q.array_name == "med_div"){
        self.view_med_div= ""

    }
	if (q.done==false && q.array_name == "mphil_stream"){
        self.view_mphil_stream= ""

    }
	if (q.done==false && q.array_name == "mphil_institution"){
        self.view_mphil_institution= ""

    }
	if (q.done==false && q.array_name == "mphil_university"){
        self.view_mphil_university= ""

    }
	if (q.done==false && q.array_name == "mphil_yop"){
        self.view_mphil_yop= ""

    }
	if (q.done==false && q.array_name == "mphil_marks"){
        self.view_mphil_marks= ""

    }
	if (q.done==false && q.array_name == "mphil_div"){
        self.view_mphil_div= ""

    }
	if (q.done==false && q.array_name == "phd_stream"){
        self.view_phd_stream= ""

    }
	if (q.done==false && q.array_name == "phd_institution"){
        self.view_phd_institution= ""

    }
	if (q.done==false && q.array_name == "phd_university"){
        self.view_phd_university= ""

    }
	if (q.done==false && q.array_name == "phd_yop"){
        self.view_phd_yop= ""

    }
	if (q.done==false && q.array_name == "phd_marks"){
        self.view_phd_marks= ""

    }
	if (q.done==false && q.array_name == "phd_div"){
        self.view_phd_div= ""

    }
	if (q.done==false && q.array_name == "other_stream"){
        self.view_other_stream= ""

    }
	if (q.done==false && q.array_name == "other_institution"){
        self.view_other_institution= ""

    }
	if (q.done==false && q.array_name == "other_university"){
        self.view_other_university= ""

    }
	if (q.done==false && q.array_name == "other_yop"){
        self.view_other_yop= ""

    }
	if (q.done==false && q.array_name == "other_marks"){
        self.view_other_marks= ""

    }
	if (q.done==false && q.array_name == "other_div"){
        self.view_other_div= ""

    }
	if (q.done==false && q.array_name == "details_scholarship"){
        self.view_details_scholarship= ""

    }
	if (q.done==false && q.array_name == "details_honours"){
        self.view_details_honours= ""

    }
	if (q.done==false && q.array_name == "details_publication"){
        self.view_details_publication= ""

    }
	if (q.done==false && q.array_name == "details_curricular_activities"){
        self.view_details_curricular_activities= ""

    }
	if (q.done==false && q.array_name == "details_sport"){
        self.view_details_sport= ""

    }
  })
}

    self.ReadBrowseStaff = () =>{
        self.loading=true
       staffStore.trigger('read_browse_staff', self.refs.emp_type_id.value)
    }
    self.readEmployeeTypes = () => {
       employeeTypeStore.trigger('read_employeeTypes')
    }

    employeeTypeStore.on('employeeTypes_changed',EmployeeTypesChanged)
    function EmployeeTypesChanged(employeeTypes){

      self.title='Create'
      self.loading = false
      self.employeeTypes = employeeTypes
      self.update()
      self.ReadBrowseStaff()
    }
    staffStore.on('read_browse_staff_changed',ReadBrowseStaffChanged)
    function ReadBrowseStaffChanged(browseStaffs){

      self.title='Create'
      self.loading = false
      self.browseStaffs = browseStaffs
      self.update()

    }

});
riot.tag2('calender', '<section class="is-fluid"> <h2 class="title" style="color: #ff3860;">Areas</h2> <div class="flex items-center mt-2 mb-6 no-print"> <div class="bg-green py-1 rounded w-10"> <div class="bg-grey h-px flex-auto"></div> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"> <label class="label">Area</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addAreaInput" type="text"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>#</th> <th>Area</th> <th></th> </tr> </thead> <tbody> <tr each="{d, i in areas}"> <td>{i + 1}</td> <td>{d.area}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{d.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, d)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{d.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()

    })

});
riot.tag2('career-interview', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{career_interview_view ==\'show_career_interview\'}"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Applicant Called for Interview</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="input date" ref="start_date" id="start_date" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="input date" ref="end_date" id="end_date" type="text" readonly="readonly"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getData}"> GO </button> </div> <div class="column"> <button class="button is-success has-text-weight-bold ml5 is-pulled-right" onclick="{csvExport}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-link has-text-weight-bold is-pulled-right" onclick="{getData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-striped is-hoverable is-bordered is-fullwidth"> <thead> <tr> <th>Sl No</th> <th>Applicant No</th> <th>Name</th> <th>Post Applied</th> <th>Subject Taught</th> <th>Class Taught</th> <th>DOB</th> <th>Sex</th> <th>Marital Status</th> <th>Interview Date</th> <th>Interview Time</th> <th style="width: 130px;"></th> </tr> </thead> <tbody> <tr each="{a, i in CareerInterviewData}"> <td>{i+1}</td> <td>{a.career_id}</td> <td>{a.full_name}</td> <td>{a.post_applied_for}</td> <td>{a.subject_tobe_taught}</td> <td>{a.class_tobe_taught}</td> <td>{a.date_of_birth}</td> <td>{a.sex}</td> <td>{a.marital_status}</td> <td>{a.interview_date}</td> <td>{a.interview_time}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{a.confirmDelete}"> <span><a class="button is-small" onclick="{interviw_feedback.bind(this, a.interview_id)}" title="Interview Feedback"> <i class="fa fa-comments" aria-hidden="true"></i></a></span> <span><a class="button is-small" onclick="{view_profile.bind(this, a.career_id)}" title="Profile"><i class="fa fa-eye" aria-hidden="true"></i></a></span> <span> <a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"><i class="fa fa-trash" aria-hidden="true"></i></a></span> </div> <div class="table-buttons" if="{a.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <div id="interviwfeedbackModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Interview Feedback</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="control"> <label class="label" for="attendance">Attendance</label> <div class="select is-fullwidth"> <select ref="attendance"> <option value="Present">Present</option> <option value="Absent">Absent</option> </select> </div> </div> <div class="control"> <label class="label" for="result">Result</label> <div class="select is-fullwidth"> <select ref="result"> <option value="Accept">Accept</option> <option value="Hold">Hold</option> <option value="Reject">Reject</option> </select> </div> </div> <div class="field"> <div class="control"> <label class="label" for="panel">Panel</label> <input class="input" type="text" ref="panel"> </div> </div> <div class="control"> <label class="label" for="feedback">Feedback</label> <textarea class="textarea" ref="feedback" rows="3"></textarea> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-success" onclick="{UpdateInterview}">Submit</button> <button class="button is-danger" id="item-modal-close" onclick="{closeinterviwfeedbackModal}">Cancel</button> </footer> </div> </div> <print-header></print-header> <section class=" is-fluid" show="{career_interview_view ==\'applicant_profile\'}"> <div class="level no-print"> <div class="level-left"> </div> <div class="level-right"> <button class="button is-primary has-text-weight-bold " onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> <button class="button is-warning has-text-weight-bold ml5" onclick="{close_applicant_profile}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <center> <table class="table is-bordered career-profile-table"> <caption class="career-profile-caption">Applicant Profile</caption> </table> <h1 class="career-profile-h3 is-size-5">Personal Details</h1> <table class=" table is-bordered career-profile-table"> <tr> <th>Name</th> <td colspan="3" style="text-transform: capitalize;" class="profile-td">{st.first_name} {st.middle_name} {st.last_name}</td> <td style="width: 75px;" colspan="2" rowspan="6" class="profile-td"><div style="text-align: center;border: 1px solid #000;padding-top: 46px;margin-top:22px; height:150px;">Affix your recent passport size photograph<div> </td> </tr> <tr> <th class="profile-th">Father</th> <td colspan="3" class="profile-td">{st.f_first_name} {st.f_middle_name} {st.f_last_name} </td> <tr> <th class="profile-th">Husband Name</th> <td colspan="3" class="profile-td">{st.husband_first_name} {st.husband_middle_name} {st.husband_last_name} </td> </tr> <tr> <th class="profile-th">Sex</th> <td class="profile-td">{st.sex}</td> <th class="profile-th">Marital Status</th> <td class="profile-td">{st.marital_status}</td> </tr> <tr> <th class="profile-th">DOB</th> <td class="profile-td">{st.date_of_birth} </td> <th class="profile-th">Age</th> <td class="profile-td">{st.age} </td> </tr> <tr> <th class="profile-th">Post Applied</th> <td class="profile-td">{st.post_applied_for}</td> <th class="profile-th">Subject Taught</th> <td class="profile-td">{st.subject_tobe_taught}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Correspondence Address</h1> <table class="table is-bordered career-profile-table"> <tr> <th class="profile-th">Address Line 1</th> <td colspan="5" class="profile-td">{st.address_line1}</td> </tr> <tr> <th class="profile-th">Address Line 2</th> <td colspan="5" class="profile-td">{st.address_line2}</td> </tr> <tr> <th class="profile-th">City</th> <td class="profile-td">{st.city}</td> <th class="profile-th">Zip</th> <td class="profile-td">{st.zip}</td> <th class="profile-th">State</th> <td class="profile-td">{st.state}</td> </tr> <tr> <th class="profile-th">Country</th> <td colspan="5" class="profile-td">{st.country}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Permanent Address</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Address Line 1</th> <td colspan="5">{st.p_address_line1}</td> </tr> <tr> <th>Address Line 2</th> <td colspan="5">{st.p_address_line2}</td> </tr> <tr> <th>City</th> <td>{st.p_city}</td> <th>Zip</th> <td>{st.p_zip}</td> <th>State</th> <td>{st.p_state}</td> </tr> <tr> <th>Country</th> <td colspan="5">{st.p_country}</td> </tr> <tr> </table> <h1 class="career-profile-h3 is-size-5">Contact Information</h1> <table class="table is-bordered career-profile-table"> <tr> <th style="width:80px;">Mobile</th> <td style="width:100px;">{st.mobile}</td> <th style="width:80px;">Email</th> <td>{st.email}</td> <th style="width:80px;">Phone (O)</th> <td>{st.phone_office} </td> </tr> </tr> <th>phone (R)</th><td colspan="5">{st.phone_residence}</td> </tr> <tr> </table> <h1 class="career-profile-h3 is-size-5">Academic Qualification (B. Ed)</h1><br> <table class="table is-bordered career-profile-table"> <tr> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> <tr> <td>{st.bed_institution} </td> <td>{st.bed_college} </td> <td>{st.bed_year} </td> <td>{st.bed_subject} </td> <td>{st.bed_marks} </td> <td>{st.bed_remarks} </td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Montessori / T.T.C</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> <tr> <td>{st.ttc_institution}</td> <td>{st.ttc_college} </td> <td>{st.ttc_year} </td> <td>{st.ttc_subject} </td> <td>{st.ttc_marks} </td> <td>{st.ttc_remarks} </td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Post Graduation</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Degree</th> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> </tr> <td>{st.pg_degree}</td> <td>{st.pg_institution}</td> <td>{st.pg_college}</td> <td>{st.pg_year}</td> <td>{st.pg_subject}</td> <td>{st.pg_marks}</td> <td>{st.pg_remarks}</td> </tr> <tr> </table> <h1 class="career-profile-h3 is-size-5">Graduation</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Degree</th> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> <tr> <td>{st.g_degree}</td> <td>{st.g_institution}</td> <td>{st.g_college}</td> <td>{st.g_year}</td> <td>{st.g_subject}</td> <td>{st.g_marks}</td> <td>{st.g_remarks}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">XII</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Stream</th> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> </tr> <td></td> <td>{st.xii_institution}</td> <td>{st.xii_college}</td> <td>{st.xii_year}</td> <td>{st.xii_subject}</td> <td>{st.xii_marks}</td> <td>{st.xii_remarks}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">X</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> </tr> <td>{st.x_institution}</td> <td>{st.x_college}</td> <td>{st.x_year}</td> <td>{st.x_subject}</td> <td>{st.x_marks}</td> <td>{st.x_remarks}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Other Qualification</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Sl.</th> <th>Degree/ Certificates</th> <th>University/Board/Institution</th> <th>Marks (%)</th> <th>Year</th> <th>Remarks</th> </tr> <tr> <td>1</td> <td>{st.degree1}</td> <td>{st.university1}</td> <td>{st.marks1}</td> <td>{st.year1}</td> <td>{st.remarks1}</td> </tr> <tr> <td>2</td> <td>{st.degree2}</td> <td>{st.university2}</td> <td>{st.marks2}</td> <td>{st.year2}</td> <td>{st.remarks2}</td> </tr> <tr> <td>3</td> <td>{st.degree3}</td> <td>{st.university3}</td> <td>{st.marks3}</td> <td>{st.year3}</td> <td>{st.remarks3}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Work Experience</h1> <table class="table is-bordered career-profile-table"> <tr> <th class="profile-th">Sl.</th> <th class="profile-th">School/Institution</th> <th class="profile-th">Address</th> <th class="profile-th">Designation</th> <th class="profile-th">Class Taught</th> <th class="profile-th">Subject Taught</th> <th class="profile-th">Work Profile</th> <th class="profile-th">From</th> <th class="profile-th">To</th> <th class="profile-th">Salary</th> </tr> <tr> <td class="profile-td">1</td> <td class="profile-td">{st.school1}</td> <td class="profile-td">{st.address1} </td> <td class="profile-td">{st.designation1} </td> <td class="profile-td">{st.class_taught1} </td> <td class="profile-td">{st.subject_taught1} </td> <td class="profile-td">{st.work_profile1} </td> <td class="profile-td">{st.from_date1} </td> <td class="profile-td">{st.to_date1} </td> <td class="profile-td">{st.salary_drawn1} </td> </tr> <tr> <td class="profile-td">2</td> <td class="profile-td">{st.school2} </td> <td class="profile-td">{st.address2} </td> <td class="profile-td">{st.designation2} </td> <td class="profile-td">{st.class_taught2} </td> <td class="profile-td">{st.subject_taught2} </td> <td class="profile-td">{st.work_profile2} </td> <td class="profile-td">{st.from_date2} </td> <td class="profile-td">{st.to_date2} </td> <td class="profile-td">{st.salary_drawn2} </td> </tr> <tr> <td class="profile-td">3</td> <td class="profile-td">{st.school3} </td> <td class="profile-td">{st.address3} </td> <td class="profile-td">{st.designation3} </td> <td class="profile-td">{st.class_taught3} </td> <td class="profile-td">{st.subject_taught3} </td> <td class="profile-td">{st.work_profile3} </td> <td class="profile-td">{st.from_date3} </td> <td class="profile-td">{st.to_date3} </td> <td class="profile-td">{st.salary_drawn3} </td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Special Achivements</h1> <table class="table is-bordered career-profile-table"> <tr> <td colspan="6">{st.s_achievements}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">References (If any)</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Sl.</th> <th>Name</th> <th>Organisation</th> <th>Designation</th> <th>Phone</th> <th>Mobile</th> <th>Email</th> </tr> <tr> <td>1</td> <td>{st.r_name}</td> <td>{st.r_organisation}</td> <td>{st.r_designation}</td> <td>{st.r_phone}</td> <td>{st.r_mobile}</td> <td>{st.r_email}</td> </tr> <tr> <td>2</td> <td>{st.r1_name}</td> <td>{st.r1_organisation}</td> <td>{st.r1_designation}</td> <td>{st.r1_phone}</td> <td>{st.r1_mobile}</td> <td>{st.r1_email}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5" style="margin-top: 20px;">Declaration</h1> <p style="width:860px;width: 860px;text-align: justify;padding-top: 15px;"> I hereby declare that all statements made in this application are true, complete and correct to the best of my knowledge and belief. I understand that in the event of any information being found untrue or incorrect at any stage, my candidature is liable to be cancelled. </p> <p style="width:860px;width: 860px;text-align:right;padding-top:25px;"> Signature </p> <div class="page-break"></div> </center> </section>', '', '', function(opts) {
	var self = this
	self.st={}
    self.on("mount", function(){
      self.loading = false;
      flatpickr(".date", {
	    allowInput: true,
        dateFormat: "d/m/Y",
  		})
      self.career_interview_view = 'show_career_interview'
      self.update();
    })

    self.on("unmount", function(){
      careerStore.off('read_career_interview_changed',ReadCareerInterviewChanged)
      careerStore.off('update_interview_changed',UpdateInterviewChanged)
      careerStore.off('read_applicant_profile_changed',ReadApplicantProfileChanged)
      careerStore.off('delete_candidate_changed',DeleteCandidateChanged)
    })

    self.getData = () => {
      var startDate = document.getElementById("start_date").value;
      var endDate = document.getElementById("end_date").value;
    	if(!self.refs.start_date.value){
        toastr.info("Please enter From Date and try again")
      	}else if(!self.refs.end_date.value){
      	toastr.info("Please enter To Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
          toastr.info("Please enter To Date Grater Than From Date")
        }else{
    	    var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          self.loading = true
          careerStore.trigger('read_career_interview', obj)
          console.log(obj)
        }
    }

    self.csvExport = () => {
        var startDate = document.getElementById("start_date").value;
        var endDate = document.getElementById("end_date").value;

        if(!self.refs.start_date.value){
        toastr.info("Please enter Start Date and try again")
      	}else if(!self.refs.end_date.value){
      	toastr.info("Please enter End Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
          toastr.info("Please enter To Date Grater Than From Date")
        }else{
    	    var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          careerStore.trigger('csv_export_career_interview', obj)
        }
    }

    self.interviw_feedback = (c,a) => {
      self.interview_id = c
      console.log(self.interview_id)
      $("#interviwfeedbackModal").addClass("is-active");
      self.refs.attendance.value = "Present"
      self.refs.result.value = "Accept"
      self.refs.panel.value = ""
      self.refs.feedback.value = ""
    }

    self.closeinterviwfeedbackModal = () => {
      $("#interviwfeedbackModal").removeClass("is-active");
    }

    self.UpdateInterview = () =>{
    	var obj={}
    	var applicant={};
    	applicant['attendance']=self.refs.attendance.value
    	applicant['result']=self.refs.result.value
    	applicant['panel']=self.refs.panel.value
    	applicant['feedback']=self.refs.feedback.value

    	obj['applicant']=applicant;
    	careerStore.trigger('update_interview', obj,self.interview_id)
    }

    self.view_profile = (c,a) => {
    	console.log("self.session_id")
    	console.log(self.career_id)
    	self.career_id = c
    	self.career_interview_view = 'applicant_profile'
    	careerStore.trigger('read_applicant_profile', self.career_id)
    }

    self.close_applicant_profile = () =>{
    	self.career_interview_view = 'show_career_interview'
    }

    self.cancelOperation = (e) => {
      self.CareerInterviewData.map(a => {
          a.confirmDelete = false
          a.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.CareerInterviewData.map(a => {
        if(a.interview_id != e.item.a.interview_id){
          a.confirmDelete = false
        }else{
          a.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      careerStore.trigger('delete_candidate', e.item.a.interview_id)
    }

    careerStore.on('read_career_interview_changed',ReadCareerInterviewChanged)
    function ReadCareerInterviewChanged(career_interview){
      self.CareerInterviewData=[];
      self.CareerInterviewData = career_interview
      if(self.CareerInterviewData.length==0){
      	toastr.info("No Data Found")
      }
      self.loading = false;
      self.update();
    }

    careerStore.on('update_interview_changed',UpdateInterviewChanged)
    function UpdateInterviewChanged(){
      self.closeinterviwfeedbackModal()
      self.getData()
      self.update();
    }

    careerStore.on('delete_candidate_changed',DeleteCandidateChanged)
    function DeleteCandidateChanged(){
    	self.loading=false;
     	self.getData()
      self.update();
    }

    careerStore.on('read_applicant_profile_changed',ReadApplicantProfileChanged)
    function ReadApplicantProfileChanged(applicant_profile_data){
      self.applicant_profile_data = applicant_profile_data
      self.st=applicant_profile_data[0]
      console.log(self.st.address_line1)
      self.loading = false;
      self.update();
    }
});
riot.tag2('career-report', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{career_view ==\'show_interviewed_candidate\'}"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Interviewee List</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="input date" ref="start_date" id="start_date" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="input date" ref="end_date" id="end_date" type="text" readonly="readonly"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getData}"> GO </button> </div> <div class="column"> <button class="button is-success has-text-weight-bold ml5 is-pulled-right" onclick="{csvExport}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-link has-text-weight-bold is-pulled-right" onclick="{getData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <thead> <tr> <th>Sl No</th> <th>Applicant No</th> <th>Name</th> <th>Post Applied</th> <th>Subject Taught</th> <th>Attendance</th> <th>Result</th> <th>Panel</th> <th>Feedback</th> <th>Class Taught</th> <th>DOB</th> <th>Sex</th> <th>Marital Status</th> <th>Interview Date</th> <th></th> </tr> </thead> <tbody> <tr each="{a, i in CareerFeedbackReport}"> <td>{i+1}</td> <td>{a.career_id}</td> <td>{a.full_name}</td> <td>{a.post_applied_for}</td> <td>{a.subject_tobe_taught}</td> <td>{a.attendance}</td> <td>{a.result}</td> <td>{a.panel}</td> <td>{a.feedback}</td> <td>{a.class_tobe_taught}</td> <td>{a.date_of_birth}</td> <td>{a.sex}</td> <td>{a.marital_status}</td> <td>{a.interview_date}</td> <td class="has-text-right no-print"> <span><a class="button is-small" onclick="{view_profile.bind(this, a.career_id)}" title="Profile"><i class="fa fa-eye" aria-hidden="true"></i></a></span> </td> </tr> </tbody> </table> </section> <print-header></print-header> <section class=" is-fluid" show="{career_view ==\'applicant_profile\'}"> <div class="level no-print"> <div class="level-left"> </div> <div class="level-right"> <button class="button is-primary has-text-weight-bold " onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> <button class="button is-warning has-text-weight-bold ml5" onclick="{close_applicant_profile}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <center> <table class="table is-bordered career-profile-table"> <caption class="career-profile-caption">Applicant Profile</caption> </table> <h1 class="career-profile-h3 is-size-5">Personal Details</h1> <table class=" table is-bordered career-profile-table"> <tr> <th>Name</th> <td colspan="3" style="text-transform: capitalize;" class="profile-td">{st.first_name} {st.middle_name} {st.last_name}</td> <td style="width: 75px;" colspan="2" rowspan="6" class="profile-td"><div style="text-align: center;border: 1px solid #000;padding-top: 46px;margin-top:22px; height:150px;">Affix your recent passport size photograph<div> </td> </tr> <tr> <th class="profile-th">Father</th> <td colspan="3" class="profile-td">{st.f_first_name} {st.f_middle_name} {st.f_last_name} </td> <tr> <th class="profile-th">Husband Name</th> <td colspan="3" class="profile-td">{st.husband_first_name} {st.husband_middle_name} {st.husband_last_name} </td> </tr> <tr> <th class="profile-th">Sex</th> <td class="profile-td">{st.sex}</td> <th class="profile-th">Marital Status</th> <td class="profile-td">{st.marital_status}</td> </tr> <tr> <th class="profile-th">DOB</th> <td class="profile-td">{st.date_of_birth} </td> <th class="profile-th">Age</th> <td class="profile-td">{st.age} </td> </tr> <tr> <th class="profile-th">Post Applied</th> <td class="profile-td">{st.post_applied_for}</td> <th class="profile-th">Subject Taught</th> <td class="profile-td">{st.subject_tobe_taught}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Correspondence Address</h1> <table class="table is-bordered career-profile-table"> <tr> <th class="profile-th">Address Line 1</th> <td colspan="5" class="profile-td">{st.address_line1}</td> </tr> <tr> <th class="profile-th">Address Line 2</th> <td colspan="5" class="profile-td">{st.address_line2}</td> </tr> <tr> <th class="profile-th">City</th> <td class="profile-td">{st.city}</td> <th class="profile-th">Zip</th> <td class="profile-td">{st.zip}</td> <th class="profile-th">State</th> <td class="profile-td">{st.state}</td> </tr> <tr> <th class="profile-th">Country</th> <td colspan="5" class="profile-td">{st.country}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Permanent Address</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Address Line 1</th> <td colspan="5">{st.p_address_line1}</td> </tr> <tr> <th>Address Line 2</th> <td colspan="5">{st.p_address_line2}</td> </tr> <tr> <th>City</th> <td>{st.p_city}</td> <th>Zip</th> <td>{st.p_zip}</td> <th>State</th> <td>{st.p_state}</td> </tr> <tr> <th>Country</th> <td colspan="5">{st.p_country}</td> </tr> <tr> </table> <h1 class="career-profile-h3 is-size-5">Contact Information</h1> <table class="table is-bordered career-profile-table"> <tr> <th style="width:80px;">Mobile</th> <td style="width:100px;">{st.mobile}</td> <th style="width:80px;">Email</th> <td>{st.email}</td> <th style="width:80px;">Phone (O)</th> <td>{st.phone_office} </td> </tr> </tr> <th>phone (R)</th><td colspan="5">{st.phone_residence}</td> </tr> <tr> </table> <h1 class="career-profile-h3 is-size-5">Academic Qualification (B. Ed)</h1><br> <table class="table is-bordered career-profile-table"> <tr> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> <tr> <td>{st.bed_institution} </td> <td>{st.bed_college} </td> <td>{st.bed_year} </td> <td>{st.bed_subject} </td> <td>{st.bed_marks} </td> <td>{st.bed_remarks} </td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Montessori / T.T.C</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> <tr> <td>{st.ttc_institution}</td> <td>{st.ttc_college} </td> <td>{st.ttc_year} </td> <td>{st.ttc_subject} </td> <td>{st.ttc_marks} </td> <td>{st.ttc_remarks} </td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Post Graduation</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Degree</th> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> </tr> <td>{st.pg_degree}</td> <td>{st.pg_institution}</td> <td>{st.pg_college}</td> <td>{st.pg_year}</td> <td>{st.pg_subject}</td> <td>{st.pg_marks}</td> <td>{st.pg_remarks}</td> </tr> <tr> </table> <h1 class="career-profile-h3 is-size-5">Graduation</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Degree</th> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> <tr> <td>{st.g_degree}</td> <td>{st.g_institution}</td> <td>{st.g_college}</td> <td>{st.g_year}</td> <td>{st.g_subject}</td> <td>{st.g_marks}</td> <td>{st.g_remarks}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">XII</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Stream</th> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> </tr> <td></td> <td>{st.xii_institution}</td> <td>{st.xii_college}</td> <td>{st.xii_year}</td> <td>{st.xii_subject}</td> <td>{st.xii_marks}</td> <td>{st.xii_remarks}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">X</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> </tr> <td>{st.x_institution}</td> <td>{st.x_college}</td> <td>{st.x_year}</td> <td>{st.x_subject}</td> <td>{st.x_marks}</td> <td>{st.x_remarks}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Other Qualification</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Sl.</th> <th>Degree/ Certificates</th> <th>University/Board/Institution</th> <th>Marks (%)</th> <th>Year</th> <th>Remarks</th> </tr> <tr> <td>1</td> <td>{st.degree1}</td> <td>{st.university1}</td> <td>{st.marks1}</td> <td>{st.year1}</td> <td>{st.remarks1}</td> </tr> <tr> <td>2</td> <td>{st.degree2}</td> <td>{st.university2}</td> <td>{st.marks2}</td> <td>{st.year2}</td> <td>{st.remarks2}</td> </tr> <tr> <td>3</td> <td>{st.degree3}</td> <td>{st.university3}</td> <td>{st.marks3}</td> <td>{st.year3}</td> <td>{st.remarks3}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Work Experience</h1> <table class="table is-bordered career-profile-table"> <tr> <th class="profile-th">Sl.</th> <th class="profile-th">School/Institution</th> <th class="profile-th">Address</th> <th class="profile-th">Designation</th> <th class="profile-th">Class Taught</th> <th class="profile-th">Subject Taught</th> <th class="profile-th">Work Profile</th> <th class="profile-th">From</th> <th class="profile-th">To</th> <th class="profile-th">Salary</th> </tr> <tr> <td class="profile-td">1</td> <td class="profile-td">{st.school1}</td> <td class="profile-td">{st.address1} </td> <td class="profile-td">{st.designation1} </td> <td class="profile-td">{st.class_taught1} </td> <td class="profile-td">{st.subject_taught1} </td> <td class="profile-td">{st.work_profile1} </td> <td class="profile-td">{st.from_date1} </td> <td class="profile-td">{st.to_date1} </td> <td class="profile-td">{st.salary_drawn1} </td> </tr> <tr> <td class="profile-td">2</td> <td class="profile-td">{st.school2} </td> <td class="profile-td">{st.address2} </td> <td class="profile-td">{st.designation2} </td> <td class="profile-td">{st.class_taught2} </td> <td class="profile-td">{st.subject_taught2} </td> <td class="profile-td">{st.work_profile2} </td> <td class="profile-td">{st.from_date2} </td> <td class="profile-td">{st.to_date2} </td> <td class="profile-td">{st.salary_drawn2} </td> </tr> <tr> <td class="profile-td">3</td> <td class="profile-td">{st.school3} </td> <td class="profile-td">{st.address3} </td> <td class="profile-td">{st.designation3} </td> <td class="profile-td">{st.class_taught3} </td> <td class="profile-td">{st.subject_taught3} </td> <td class="profile-td">{st.work_profile3} </td> <td class="profile-td">{st.from_date3} </td> <td class="profile-td">{st.to_date3} </td> <td class="profile-td">{st.salary_drawn3} </td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Special Achivements</h1> <table class="table is-bordered career-profile-table"> <tr> <td colspan="6">{st.s_achievements}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">References (If any)</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Sl.</th> <th>Name</th> <th>Organisation</th> <th>Designation</th> <th>Phone</th> <th>Mobile</th> <th>Email</th> </tr> <tr> <td>1</td> <td>{st.r_name}</td> <td>{st.r_organisation}</td> <td>{st.r_designation}</td> <td>{st.r_phone}</td> <td>{st.r_mobile}</td> <td>{st.r_email}</td> </tr> <tr> <td>2</td> <td>{st.r1_name}</td> <td>{st.r1_organisation}</td> <td>{st.r1_designation}</td> <td>{st.r1_phone}</td> <td>{st.r1_mobile}</td> <td>{st.r1_email}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5" style="margin-top: 20px;">Declaration</h1> <p style="width:860px;width: 860px;text-align: justify;padding-top: 15px;"> I hereby declare that all statements made in this application are true, complete and correct to the best of my knowledge and belief. I understand that in the event of any information being found untrue or incorrect at any stage, my candidature is liable to be cancelled. </p> <p style="width:860px;width: 860px;text-align:right;padding-top:25px;"> Signature </p> <div class="page-break"></div> </center> </section>', '', '', function(opts) {
	var self = this
	self.st={}
    self.on("mount", function(){
      self.loading = false;
      flatpickr(".date", {
	    allowInput: true,
        dateFormat: "d/m/Y",
  		})
      self.career_view = 'show_interviewed_candidate'
      self.update();
    })

    self.on("unmount", function(){
      careerStore.off('read_career_feedback_report_changed',ReadCareerFeedbackReportChanged)
      careerStore.off('read_applicant_profile_changed',ReadApplicantProfileChanged)
    })

    self.getData = () => {
      var startDate = document.getElementById("start_date").value;
      var endDate = document.getElementById("end_date").value;
    	if(!self.refs.start_date.value){
        toastr.info("Please enter From Date and try again")
      	}else if(!self.refs.end_date.value){
      	toastr.info("Please enter To Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
          toastr.info("Please enter To Date Grater Than From Date")
        }else{
    	    var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          self.loading = true
          careerStore.trigger('read_career_feedback_report', obj)

          console.log(obj)
        }
    }

    self.csvExport = () => {
        var startDate = document.getElementById("start_date").value;
        var endDate = document.getElementById("end_date").value;

        if(!self.refs.start_date.value){
        toastr.info("Please enter Start Date and try again")
      	}else if(!self.refs.end_date.value){
      	toastr.info("Please enter End Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
          toastr.info("Please enter To Date Grater Than From Date")
        }else{
    	    var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          careerStore.trigger('csv_export_career_feedback_report', obj)
        }
    }

    self.view_profile = (c,a) => {
    	console.log("self.session_id")
    	console.log(self.career_id)
    	self.career_id = c
    	self.career_view = 'applicant_profile'
    	careerStore.trigger('read_applicant_profile', self.career_id)
    }

    self.close_applicant_profile = () =>{
    	self.career_view = 'show_interviewed_candidate'
    }

    careerStore.on('read_career_feedback_report_changed',ReadCareerFeedbackReportChanged)
    function ReadCareerFeedbackReportChanged(career_feedback_report_data){
      self.CareerFeedbackReport=[];
      self.CareerFeedbackReport = career_feedback_report_data
      if(self.CareerFeedbackReport.length==0){
      	toastr.info("No Data Found")
      }
      self.loading = false;
      self.update();
    }

    careerStore.on('read_applicant_profile_changed',ReadApplicantProfileChanged)
    function ReadApplicantProfileChanged(applicant_profile_data){
      self.applicant_profile_data = applicant_profile_data
      self.st=applicant_profile_data[0]
      console.log(self.st.address_line1)
      self.loading = false;
      self.update();
    }
});
riot.tag2('career-setting', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_master == \'applicant-detail\'}" href="#/career-setting/applicant-detail"> <span>Applicant Detail</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'career-interview\'}" href="#/career-setting/career-interview"> <span>Career Interview</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'interviewed-candidate\'}" href="#/career-setting/interviewed-candidate"> <span>Interviewed Candidate</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'career-report\'}" href="#/career-setting/career-report"> <span>Career Reports</span> </a> </p> </div> <div id="career-setting-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_master')
    console.log(opts.selected_master)
    if(!opts.selected_master){
      self.selected_master = 'applicant-detail'
    }else{
      self.selected_master = opts.selected_master
    }
});
riot.tag2('category', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Category Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Category</label> </div> <div class="column is-narrow"> <input class="input form-control input" id="addCategoryInput" ref="addCategoryInput" tabindex="0" type="text" onkeyup="{addEnter}"> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readCategories}" style="margin-right:2px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Category</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in categoryDataItems}"> <td>{i+1}</td> <td>{c.category_name}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, c)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readCategories()
    })
    self.on("unmount", function(){
      categoryStore.off('categories_changed', CategoriesChanged)
    })

    self.readCategories = () => {
      self.loading=true
       categoryStore.trigger('read_categories')
    }

     self.add = () => {
      if(!self.refs.addCategoryInput.value){
        toastr.info("Please enter Category and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          categoryStore.trigger('add_category', self.refs.addCategoryInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          categoryStore.trigger('edit_category', self.refs.addCategoryInput.value,
            self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.categories.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.categories.map(c => {
        if(c.category_id != e.item.c.category_id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      categoryStore.trigger('delete_category', e.item.c.category_id)
    }

    self.edit = (c,e) => {
      console.log(c)
      self.title='Update'
      self.refs.addCategoryInput.value = c.category_name
      self.edit_id = c.category_id
    }

    categoryStore.on('categories_changed',CategoriesChanged)
    function CategoriesChanged(categories){
      console.log(categories)
      self.title='Create'
      self.refs.addCategoryInput.value = ''
      self.loading = false
      self.categories = categories
      self.categoryDataItems = []
      self.categoryDataItems = categories
      self.update()
      console.log(self.categories)
    }

});
riot.tag2('certificate', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_cartificaee == \'issue-certificate\'}" href="#/certificate/issue-certificate"> <span>Issue Certificate</span> </a> </p> <p class="control"> <a class="button {is-active: selected_certificate == \'manage-certificate\'}" href="#/certificate/manage-certificate"> <span>Manage Certificate</span> </a> </p> <p class="control"> <a class="button {is-active: selected_certificate == \'issued-certificate\'}" href="#/certificate/issued-certificate"> <span>Issued Certificate</span> </a> </p> </div> <div id="certificate-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_certificate')
    console.log(opts.selected_certificate)
    if(!opts.selected_certificate){
      self.selected_certificate = 'issue-certificate'
    }else{
      self.selected_certificate = opts.selected_certificate
    }
});



riot.tag2('city', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">City Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">City</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addCityInput" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column is-narrow"> <label class="label">Code</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addCodeInput" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readCity}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>#</th> <th>city</th> <th>Code</th> <th></th> </tr> </thead> <tbody> <tr each="{d, i in cities}"> <td>{i + 1}</td> <td>{d.city}</td> <td>{d.code}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{d.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, d)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{d.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.loading=false
      self.update()
      self.readCity()
    })

     self.on("unmount", function(){
      cityStore.off('city_changed', CityChanged)
    })

    self.readCity = () => {
      self.loading=true
       cityStore.trigger('read_city')
    }

     self.add = () => {
      if(!self.refs.addCityInput.value){
        toastr.info("Please enter city and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          cityStore.trigger('add_city', self.refs.addCityInput.value,self.refs.addCodeInput.value,)
        }else if(self.title=='Update'){
          console.log('update')
          cityStore.trigger('edit_city', self.refs.addCityInput.value,self.refs.addCodeInput.value,
            self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.levels.map(d => {
          d.confirmDelete = false
          d.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.cities.map(d => {
        if(d.city != e.item.d.city){
          d.confirmDelete = false
        }else{
          d.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      cityStore.trigger('delete_city', e.item.d.city)
    }

    self.edit = (d,e) => {
      console.log(d)
      self.title='Update'
      self.refs.addCityInput.value = d.city
      self.refs.addCodeInput.value = d.code
      self.edit_id = d.city
    }

    cityStore.on('city_changed',CityChanged)
    function CityChanged(cities){
      console.log('city_changed1')
      console.log(cities)
      self.title='Create'
      self.refs.addCityInput.value = ''
      self.refs.addCodeInput.value = ''
      self.loading = false
      self.cities = cities
      self.update()
    }

});
riot.tag2('class-holiday', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid" show="{class_holiday_view ==\'show_holiday\'}"> <div class="level no-print"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Class Holiday</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{add_class_holiday}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> <button class="button is-info is-rounded is-pulled-right" onclick="{readClassHoliday}" style="margin-right:5px;margin-left:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th>#</th> <th>Event</th> <th>Class</th> <th>Date From</th> <th>Date To</th> <th>Holiday</th> <th>Description</th> <th>Action</th> </tr> </thead> <tbody> <tr each="{st, i in classHolidays}"> <td>{i+1}</td> <td>{st.event_name}</td> <td>{st.class}</td> <td>{st.s_date}</td> <td>{st.e_date}</td> <td>{st.holiday}</td> <td>{st.description}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{st.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, st)}">Edit</a></span> <span> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{st.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section class="is-fluid" show="{class_holiday_view ==\'add_class_holiday\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} Class Holiday</h2> </div> <div class="level-right"> <button class="button" onclick="{close_class_holiday}">Back</button> </div> </div> <div class="box"> <div class="columns is-variable is-1 is-multiline"> <div class="column is-one-third"> <label class="label">Event Name</label> <input type="text" ref="event_name" type="text" class="input"> </div> <div class="column is-one-third"> <label class="label" for="class">Class</label> <div class="control"> <div class="select is-fullwidth"> <select ref="section_id"> <option each="{standards}" riot-value="{section_id}">{class} </option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label">Date From</label> <input class="input date flatpickr-input form-control input" ref="start_date" placeholder="" tabindex="0" type="text"> </div> <div class="column is-one-third"> <label class="label">Date To</label> <input class="input date flatpickr-input form-control input" ref="end_date" placeholder="" tabindex="0" type="text"> </div> <div class="column is-one-third"> <label class="label">Description</label> <textarea class="input" ref="description" rows="2" type="text"></textarea> </div> <div class="column is-one-third"> <label class="label">Holiday</label> <input type="checkbox" id="holiday_check_box"> </div> <div class="column is-full"> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{add}">{title}</button> </div> </div> </div> </section>', '', '', function(opts) {
   var self = this
     self.on("mount", function(){
       self.title='Create'
       self.role = getCookie('role')
       self.update()

       self.readStandard()
        self.readClassHoliday()
       self.class_holiday_view='show_holiday'
       flatpickr(".date", {
         allowInput: true,
         altFormat: "d/m/Y",
         dateFormat: "Y-m-d",
       })
     })
     self.on("unmount", function(){
       classholidayStore.off('add_class_holiday_changed', AddClassHolidayChanged)
       classholidayStore.off('read_class_holiday_changed', ReadClassHolidayChanged)

       classholidayStore.off('read_standard_changed',standardChanged)
       classholidayStore.off('edit_class_holiday_changed',EditClassHolidayChanged)
       classholidayStore.off('delete_class_holiday_changed',DeleteClassHolidayChanged)
     })

     self.readNewEvent = () => {
        classholidayStore.trigger('read_new_event')
     }
      self.readStandard = () => {
        classholidayStore.trigger('read_standard')
     }

     self.add_class_holiday = () => {
        self.class_holiday_view='add_class_holiday'

     }
    self.close_class_holiday = () => {
        self.class_holiday_view='show_holiday'

        self.readClassHoliday()
    }

     self.readClassHoliday = () => {
      self.loading=true
        classholidayStore.trigger('read_class_holiday')
     }

      self.add = () => {
      	if($('#holiday_check_box').is(":checked")){
      		self.holiday='Y';
      	}else{
      		self.holiday='N';
      	}
       if(!self.refs.event_name.value){
         toastr.info("Please enter Event and try again")
       }else{
         self.loading = true
         if(self.title=='Create'){
           console.log('create')
           classholidayStore.trigger('add_class_holiday', self.refs.event_name.value,
            self.refs.section_id.value,self.refs.start_date.value,self.refs.end_date.value,self.refs.description.value,self.holiday)
         }else if(self.title=='Update'){
           console.log('update')
           classholidayStore.trigger('edit_class_hliday',  self.refs.event_name.value,
            self.refs.section_id.value,self.refs.start_date.value,self.refs.end_date.value,self.refs.description.value,self.holiday,self.edit_id)
         }
       }
     }

     self.addEnter = (e) => {
       if(e.which == 13){
         self.add()
       }
     }

      self.editEnter = (e) => {
       if(e.which == 13){
         self.edit(e)
       }
     }

    self.cancelOperation = (e) => {
       self.classHolidays.map(ev => {
           ev.confirmDelete = false
           ev.confirmEdit = false
       })
     }

     self.confirmDelete = (e) => {
     	console.log(e.item.st.event_id)
     	console.log("+++++++++++++")
       self.classHolidays.map(ev => {
       	console.log(ev.event_id)
         if(ev.event_id != e.item.st.event_id){
           ev.confirmDelete = false
         }else{
           ev.confirmDelete = true
         }
       })
     }

     self.delete = (e) => {
       self.loading = true
       classholidayStore.trigger('delete_class_holiday', e.item.st.event_id)
     }

     self.edit = (ev,e) => {
       console.log(ev)
       self.title='Update'
        flatpickr(".date", {
         allowInput: true,
         altFormat: "d/m/Y",
         dateFormat: "Y-m-d",
       })

       self.class_holiday_view='add_class_holiday'
       self.refs.event_name.value = ev.event_name
       self.refs.start_date.value = ev.start_date
       console.log(self.refs.start_date.value)
       self.refs.end_date.value = ev.end_date
       self.refs.description.value = ev.description
       self.refs.section_id.value = ev.section_id
       console.log(ev.holiday);
       if(ev.holiday=='Y'){
       	 $('#holiday_check_box').prop('checked',true)
       }else{
       	 $('#holiday_check_box').prop('checked',false)
       }
       self.edit_id = ev.event_id
     }

     classholidayStore.on('add_class_holiday_changed',AddClassHolidayChanged)
     function AddClassHolidayChanged(classHolidays){
       console.log(classHolidays)
       self.title='Create'
       self.refs.start_date.value =''
       self.refs.end_date.value =''
       self.refs.description.value =''

       self.refs.section_id.value =''
       self.loading = false
       self.classHolidays = classHolidays
       self.update()
       self.readClassHoliday()
       console.log(self.classHolidays)
     }

     classholidayStore.on('edit_class_holiday_changed',EditClassHolidayChanged)
     function EditClassHolidayChanged(classHolidays){
       console.log(classHolidays)
       self.title='Create'
       self.refs.start_date.value =''
       self.refs.end_date.value =''
       self.refs.description.value =''

       self.refs.section_id.value =''
       self.loading = false
       self.classHolidays = classHolidays
       self.update()
       self.readClassHoliday()

     }

     classholidayStore.on('delete_class_holiday_changed',DeleteClassHolidayChanged)
     function DeleteClassHolidayChanged(classHolidays){
       console.log(classHolidays)
       self.title='Create'
       self.refs.start_date.value =''
       self.refs.end_date.value =''
       self.refs.description.value =''
       self.refs.event_name.value =''
       self.refs.section_id.value =''
       self.loading = false
       self.classHolidays = classHolidays
       self.update()
       self.readClassHoliday()
       console.log(self.classHolidays)
     }

     classholidayStore.on('read_class_holiday_changed',ReadClassHolidayChanged)
     function ReadClassHolidayChanged(classHolidays){
       console.log(classHolidays)
       self.title='Create'
       self.refs.start_date.value =''
       self.refs.end_date.value =''
       self.refs.description.value =''
       self.refs.event_name.value =''
       self.refs.section_id.value =''
       self.loading = false
       self.classHolidays = classHolidays
       self.update()
       console.log(self.classHolidays)
     }

     classholidayStore.on('read_standard_changed',standardChanged)
     function standardChanged(standards){
       console.log(standards)
       self.standards = standards
       self.update()
       console.log(self.standards)
     }

});
riot.tag2('class-teacher-master', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Class Teacher Standard Map</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" onchange="{getReadSection}" onkeyup="{addEnter}"> <option>Choose Standard</option> <option each="{standards}" riot-value="{standard_id}">{standard} </option> </select> </div> </div> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="section_id" onkeyup="{addEnter}"> <option>Choose Section</option> <option each="{readfilteredSections}" riot-value="{section_id}" onkeyup="{addEnter}">{section} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Room No</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="room_no" type="text" style="width:100px" onkeyup="{addEnter}"> </div> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="class_teacher" onkeyup="{addEnter}"> <option>Class Teacher</option> <option each="{employees}" riot-value="{emp_id}">{teacher_name} </option> </select> </div> </div> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="asst_class_teacher" onkeyup="{addEnter}"> <option>Asst. Class Teacher</option> <option each="{employees}" riot-value="{emp_id}">{teacher_name} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary is-small has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-small is-rounded is-pulled-right" onclick="{readClassTeacher}" style="margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Standard</th> <th>Section</th> <th>Room</th> <th>Class Teacher</th> <th>Assistant Teacher</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in classTeachers}"> <td>{i+1}</td> <td>{ev.standard}</td> <td>{ev.section}</td> <td>{ev.room}</td> <td>{ev.class_teacher}</td> <td>{ev.assistant_teacher}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ev.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, ev)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.loading=false
      self.readStandard()
      self.readSection()
      self.readTeachingStaff()
      self.readClassTeacher()
      self.update()
    })
    self.on("unmount", function(){
      studentStore.off('read_standard_changed',StandardChanged)
      studentStore.off('read_section_changed',SectionChanged)
      classTeacherStore.off('read_teaching_staff_changed',ReadTeachingStaffChanged)
      classTeacherStore.off('read_class_teacher_changed', ReadClassTeacherChanged)
      classTeacherStore.off('add_class_teacher_changed', AddClassTeacherChanged)
      classTeacherStore.off('edit_class_teacher_changed',EditClassTeacherChanged)
      classTeacherStore.off('delete_class_teacher_changed',DeleteClassTeacherChanged)
    })

    self.readStandard = () => {
      self.loading=true
       studentStore.trigger('read_standard')
    }

    self.readSection = () => {
      self.loading=true
       studentStore.trigger('read_section')
    }

     self.getReadSection = () => {
      self.readfilteredSections = []
      self.readfilteredSections = self.sections.filter(s => {
        return s.standard_id == self.refs.standard_id.value
      })
    }

    self.readTeachingStaff = () => {
      self.loading=true
       classTeacherStore.trigger('read_teaching_staff')
    }

    self.readClassTeacher = () => {
      self.loading=true
       classTeacherStore.trigger('read_class_teacher')
    }

     self.add = () => {
      if(!self.refs.standard_id.value){
        toastr.info("Please enter class and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          classTeacherStore.trigger('add_class_teacher',self.refs.standard_id.value,self.refs.section_id.value, self.refs.class_teacher.value,self.refs.asst_class_teacher.value, self.refs.room_no.value)

        }else if(self.title=='Update'){
          console.log('update')
          classTeacherStore.trigger('edit_class_teacher', self.refs.standard_id.value, self.refs.section_id.value, self.refs.class_teacher.value,self.refs.asst_class_teacher.value, self.refs.room_no.value, self.edit_id)

        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

    self.cancelOperation = (e) =>{
      self.classTeachers.map(ev =>{
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.classTeachers.map(ev => {
        if(ev.ts_id != e.item.ev.ts_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      classTeacherStore.trigger('delete_class_teacher', e.item.ev.ts_id)
    }

    self.edit = (ev,e) => {
      console.log(ev)
      self.title='Update'
      self.refs.standard_id.value=ev.standard_id
      self.getReadSection()
      self.update()
      self.refs.section_id.value=ev.section_id
      self.refs.class_teacher.value=ev.c_id
      self.refs.asst_class_teacher.value=ev.a_id
      self.refs.room_no.value=ev.room
      self.edit_id = ev.ts_id
    }

    studentStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.loading = false
      self.standards = standards
      self.update()
    }

    studentStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.loading = false
      self.sections = sections
      self.update()
      self.getReadSection()
    }

    classTeacherStore.on('add_class_teacher_changed',AddClassTeacherChanged)
    function AddClassTeacherChanged(classTeachers){
      console.log(classTeachers)
      self.title='Create'
      self.refs.standard_id.value=''
      self.refs.section_id.value=''
      self.refs.class_teacher.value=''
      self.refs.asst_class_teacher.value=''
      self.refs.room_no.value=''
      self.loading = false
      self.classTeachers = classTeachers
      self.readClassTeacher()
      self.update()
    }

    classTeacherStore.on('edit_class_teacher_changed',EditClassTeacherChanged)
    function EditClassTeacherChanged(classTeachers){
      console.log(classTeachers)
      self.title='Create'
      self.refs.standard_id.value=''
      self.refs.section_id.value=''
      self.refs.class_teacher.value=''
      self.refs.asst_class_teacher.value=''
      self.refs.room_no.value=''

      self.loading = false
      self.classTeachers = classTeachers
      self.readClassTeacher()
      self.update()
    }

    classTeacherStore.on('delete_class_teacher_changed',DeleteClassTeacherChanged)
    function DeleteClassTeacherChanged(classTeachers){
      console.log(classTeachers)
      self.title='Create'
      self.loading = false
      self.classTeachers = classTeachers
      self.update()
    }

    classTeacherStore.on('read_teaching_staff_changed',ReadTeachingStaffChanged)
    function ReadTeachingStaffChanged(employees){
      self.title='Create'
      self.employees = employees
      self.loading = false
      self.update()
    }

    classTeacherStore.on('read_class_teacher_changed',ReadClassTeacherChanged)
    function ReadClassTeacherChanged(classTeachers){
      console.log(classTeachers)
      self.classTeachers = classTeachers
      self.loading = false
      self.update()
      console.log(self.classTeachers)
    }

});
riot.tag2('class-teacher', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Class Teacher Standard Map</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" id="teacherModal" onclick="{addTeacher}"> <span class="icon"> <span class="fas fa-plus"></span> </span> <span>ADD</span> </button> </div> </div> <div id="showItemModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Add New Teacher</p> </header> <section class="modal-card-body"> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column "> <div class="control"> <div class="select"> <select ref="standardIdInput" onchange="{readSection}"> <option>Select Standard</option> <option each="{standard}" riot-value="{standard_id}">{standard} </option> </select> </div> </div> </div> <div class="column"> <label class="label">Section</label> </div> <div class="column"> <div class="control"> <div class="select"> <select ref="sectionIdInput"> <option each="{section}" riot-value="{section_id}">{section} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Room No.</label> </div> <div class="column"> <div class="control"> <input class="input" type="text" ref="addRoomNoInput" onkeyup="{addEnter}"> </div> </div> <div class="column is-narrow"> <label class="label">Class Teacher</label> </div> <div class="column "> <div class="control"> <div class="select"> <select ref="sectionIdInput"> <option each="{section}" riot-value="{section_id}">{section} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Assistant Class Teacher</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="sectionIdInput"> <option each="{section}" riot-value="{section_id}">{section} </option> </select> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-success" id="" onclick="{add}">Add</button> <button class="button is-danger" id="teacher-modal-close">Cancel</button> </footer> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Category</th> <th>Event</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in eventDataItems}"> <td>{i+1}</td> <td>{ev.category_name}</td> <td>{ev.event_name}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ev.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, ev)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readStandard()
    })
    self.on("unmount", function(){
      classTeacherStore.off('read_standard_changed',StandardChanged)
      classTeacherStore.off('read_section_by_standardchanged',SectionChanged)
    })

    self.readStandard = () => {
       classTeacherStore.trigger('read_standard')
    }

    self.readSection = () =>{
    	classTeacherStore.trigger('read_section_by_standard', self.refs.standardIdInput.value)
    	console.log(self.refs.standardIdInput.value)

    }

    self.addTeacher = () =>{
    	$("#teacherModal").click(function() {
  			$("#showItemModal").addClass("is-active");
		});

		$("#teacher-modal-close").click(function() {
		   $("#showItemModal").removeClass("is-active");
		   self.itemList()

		});
    }

     self.add = () => {
      if(!self.refs.addEventInput.value){
        toastr.info("Please enter Event and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          classTeacherStore.trigger('add_event', self.refs.addEventInput.value,
           self.refs.category_id.value)
        }else if(self.title=='Update'){
          console.log('update')
          classTeacherStore.trigger('edit_event', self.refs.addEventInput.value,
            self.refs.category_id.value, self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.events.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.events.map(ev => {
        if(ev.event_id != e.item.ev.event_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      classTeacherStore.trigger('delete_event', e.item.ev.event_id)
    }

    self.edit = (ev,e) => {
      console.log(ev)
      self.title='Update'
      self.refs.addEventInput.value = ev.events
      self.refs.category_id.value = ev.category_id
      self.edit_id = ev.event_id
    }

    classTeacherStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standard){
      console.log(standard)
      self.standard = standard
      self.update()
      console.log(self.standard)
    }
    classTeacherStore.on('read_section_by_standardchanged',SectionChanged)
    function SectionChanged(section){
      console.log(section)
      self.section = section
      self.update()
      console.log(self.section)
    }

});
riot.tag2('club', '<print-header></print-header> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Club Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Club</label> </div> <div class="column is-narrow"> <div class="control"> <div class="control"> <input class=" input" ref="addClubInput" type="text" onkeyup="{addEnter}"> </div> </div> </div> <div class="column is-narrow"> <label class="label">Captain</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addCaptainInput" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column is-narrow"> <label class="label">Detail</label> </div> <div class="column is-narrow"> <div class="control"> <textarea class=" input" ref="addDetailInput" type="text" onkeyup="{addEnter}"></textarea> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readClub}" style="margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Club Name</th> <th>Captain</th> <th>Detail</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in clubs}"> <td>{i+1}</td> <td>{ev.club_name}</td> <td>{ev.captain}</td> <td>{ev.club_detail}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ev.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, ev)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readClub()
    })
    self.on("unmount", function(){
      clubStore.off('add_club_changed', AddClubChanged)
      clubStore.off('read_club_changed', ReadClubChanged)
      clubStore.off('edit_club_changed',EditClubChanged)
      clubStore.off('delete_club_changed',DeleteClubChanged)
    })

    self.readClub = () => {
      self.loading=true
       clubStore.trigger('read_club')
    }

     self.add = () => {
      if(!self.refs.addClubInput.value){
        toastr.info("Please enter Club and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          clubStore.trigger('add_club', self.refs.addClubInput.value,
           self.refs.addCaptainInput.value,self.refs.addDetailInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          clubStore.trigger('edit_club', self.refs.addClubInput.value,
            self.refs.addCaptainInput.value, self.refs.addDetailInput.value,self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.clubs.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.clubs.map(ev => {
        if(ev.club_id != e.item.ev.club_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      clubStore.trigger('delete_club', e.item.ev.club_id)
    }

    self.edit = (ev,e) => {
      console.log(ev)
      self.title='Update'
      self.refs.addClubInput.value = ev.club_name
      self.refs.addCaptainInput.value = ev.captain
      self.refs.addDetailInput.value = ev.club_detail
      self.edit_id = ev.club_id
    }

    clubStore.on('add_club_changed',AddClubChanged)
    function AddClubChanged(clubs){
      console.log(clubs)
      self.title='Create'
      self.refs.addClubInput.value = ''
      self.refs.addCaptainInput.value = ''
      self.refs.addDetailInput.value = ''
      self.loading = false
      self.clubs = clubs
      self.update()
      self.readClub()
      console.log(self.clubs)
    }

    clubStore.on('edit_club_changed',EditClubChanged)
    function EditClubChanged(clubs){
      console.log(clubs)
      self.title='Create'
      self.refs.addClubInput.value =''
      self.refs.addCaptainInput.value =''
      self.refs.addDetailInput.value =''
      self.loading = false
      self.clubs = clubs
      self.update()
      self.readClub()

    }

    clubStore.on('delete_club_changed',DeleteClubChanged)
    function DeleteClubChanged(clubs){
      console.log(clubs)
      self.title='Create'
      self.refs.addClubInput.value =""
      self.refs.addCaptainInput.value =""
      self.refs.addDetailInput.value =""
      self.loading = false
      self.clubs = clubs
      self.update()
      self.readClub()
      console.log(self.clubs)
    }

    clubStore.on('read_club_changed',ReadClubChanged)
    function ReadClubChanged(clubs){
      console.log(clubs)
      self.title='Create'
      self.refs.addClubInput.value =""
      self.refs.addCaptainInput.value =""
      self.refs.addDetailInput.value =""
      self.loading = false
      self.clubs = clubs
      self.update()
      console.log(self.clubs)
    }

});
riot.tag2('consolidate-tabulation-sheet', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="level no-print"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Consolidate Tabulation Sheet</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded ml5" onclick="{readReport}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"><label class="label">Standard</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="standardSelect" onchange="{changeSection}" id="standard_id"> <option value="">Select Standard</option> <option each="{classes}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="sectionSelect" onchange="{readClassSubject}" id="section_id"> <option value="">Select Section</option> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Exam Type</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="examTypeSelect" onchange="{readMarksLimit}" id="exam_type_id"> <option value="">Select Exam Type</option> <option each="{examTypes}" riot-value="{exam_type_id}">{exam_type}</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readReport}">GO </button> </div> </div> </div> <h1 class="has-text-centered is-size-4">Consolidated Tabulation Sheet of Class {class}<br> Exam : {exam} </h1> <h1 class="is-size-4">Class Teacher : {class_teacher}</h1> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>Roll No</th> <th>Enroll No</th> <th>Student Name</th> <th each="{c, i in headers}">{c}</th> <th>Percentage</th> <th>Total</th> </tr> </thead> <tbody> <tr each="{c, i in reports}"> <td>{c.roll_number}</td> <td>{c.enroll_number}</td> <td>{c.student_name}</td> <td each="{m, j in c.orderedSubjects}">{m}</td> <td>{c.total}</td> <td>{c.percentage}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.class = ''
    self.exam = ''
    self.class_teacher = ''
    self.on("mount", function(){
      self.loading = false;
      self.update()
      self.readClass()
      self.readSection()
    })
    self.on("unmount", function(){
      marksReportStore.off('read_classes_changed',ClassesChanged)
      marksReportStore.off('read_section_changed',SectionChanged)
      marksReportStore.off('exam_types_changed',ExamTypesChanged)

      marksReportStore.off('read_consolidate_tabulation_sheet_changed',ReportChanged)
    })

    self.readClass = () => {
       self.loading = true;
       marksReportStore.trigger('read_classes')
    }

    self.readSection = () => {
       self.loading = true;
       marksReportStore.trigger('read_section')
    }

    self.changeSection = () => {
       if(self.refs.standardSelect.value==''){
        toastr.info("Please select standard and try again")
       }else{
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.standardSelect.value
        })
       }

       marksReportStore.trigger('read_exam_types',self.refs.standardSelect.value)
    }

    self.readReport = () => {
      let error = '';

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(self.refs.examTypeSelect.value==''){
        error = error + "Please select exam type, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading=true
        marksReportStore.trigger('read_consolidate_tabulation_sheet',self.refs.examTypeSelect.value, self.refs.sectionSelect.value)
      }

    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

    marksReportStore.on('read_classes_changed',ClassesChanged)
    function ClassesChanged(classes){
      self.loading = false
      self.classes = []
      self.classes = classes
      self.update()
      console.log(self.classes)
    }

    marksReportStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      self.loading = false
      self.sections = []
      self.sections = sections
      self.update()
    }

    marksReportStore.on('exam_types_changed',ExamTypesChanged)
    function ExamTypesChanged(examTypes){
      self.loading = false
      self.examTypes = []
      self.examTypes = examTypes
      self.update()
    }

    marksReportStore.on('read_consolidate_tabulation_sheet_changed',ReportChanged)
    function ReportChanged(headers,reports,class_teacher){
      self.loading = false
      self.headers = {}
      self.headers = headers

      self.reports = []
      self.reports = reports

      self.class = $("#standard_id option:selected").text()+ ' ' + $("#section_id option:selected").text();
      self.exam = $("#exam_type_id option:selected").text()
      self.class_teacher = class_teacher
      self.update()
    }

});
riot.tag2('copy-fee-plan', '<h4>copy fee plan</h4>', '', '', function(opts) {
});
riot.tag2('country', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Country Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Country</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addCountryInput" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column is-narrow"> <label class="label">Code</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addCodeInput" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readCountry}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>#</th> <th>Country</th> <th>Code</th> <th></th> </tr> </thead> <tbody> <tr each="{d, i in countries}"> <td>{i + 1}</td> <td>{d.country}</td> <td>{d.code}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{d.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, d)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{d.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.loading=false
      self.update()
      self.readCountry()
    })

     self.on("unmount", function(){
      countryStore.off('country_changed', CountryChanged)
    })

    self.readCountry = () => {
      self.loading=true
       countryStore.trigger('read_country')
    }

     self.add = () => {
      if(!self.refs.addCountryInput.value){
        toastr.info("Please enter Country and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          self.loading=true
          countryStore.trigger('add_country', self.refs.addCountryInput.value,self.refs.addCodeInput.value,)
        }else if(self.title=='Update'){
          console.log('update')
          self.loading=true
          countryStore.trigger('edit_country', self.refs.addCountryInput.value,self.refs.addCodeInput.value,
            self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.levels.map(d => {
          d.confirmDelete = false
          d.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.countries.map(d => {
        if(d.country != e.item.d.country){
          d.confirmDelete = false
        }else{
          d.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      countryStore.trigger('delete_country', e.item.d.country)
    }

    self.edit = (d,e) => {
      console.log(d)
      self.title='Update'
      self.refs.addCountryInput.value = d.country
      self.refs.addCodeInput.value = d.code
      self.edit_id = d.country
    }

    countryStore.on('country_changed',CountryChanged)
    function CountryChanged(countries){
      console.log('country_changed1')
      console.log(countries)
      self.title='Create'
      self.refs.addCountryInput.value = ''
      self.refs.addCodeInput.value = ''
      self.loading = false
      self.countries = countries
      self.update()
    }

});
riot.tag2('courses', '<section class="container is-fluid"> <h2 class="title" style="color: #ff3860;">Courses</h2> <div class="flex items-center mt-2 mb-6 no-print"> <div class="bg-green py-1 rounded w-10"> <div class="bg-grey h-px flex-auto"></div> </div> </div> <div class="box"> <div class="columns"> <div class="column is-one-quarter"> <label class="label" for="course">Course</label> <input type="text" ref="addCourseInput" class="input"> </div> <div class="column is-half"> <label class="label" for="course_full_name">Full name</label> <input class="input" type="text" ref="addCourseFullNameInput"> </div> <div class="column is-narrow"> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{add}">{title} </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>Course</th> <th>Full Name</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in courseDataItems}"> <td>{c.course}</td> <td>{c.course_full_name}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, c)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      console.log(self.role)
      console.log(typeof(self.role))
      self.update()
      self.readCourses()
    })

    self.on("unmount", function(){
      courseStore.off('courses_changed', CoursesChanged)
    })

    self.readCourses = () => {
       courseStore.trigger('read_courses')
    }

     self.add = () => {
      if(!self.refs.addCourseInput.value){
        toastr.info("Please enter Course and try again")
      }else  if(!self.refs.addCourseFullNameInput.value){
        toastr.info("Please enter Full Name and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          courseStore.trigger('add_course', self.refs.addCourseInput.value, self.refs.addCourseFullNameInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          courseStore.trigger('edit_course', self.refs.addCourseInput.value, self.refs.addCourseFullNameInput.value, self.edit_id)
        }
      }
    }

    self.cancelOperation = (e) => {
      self.courses.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.courses.map(c => {
        if(c.id != e.item.c.id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      courseStore.trigger('delete_course', e.item.c.id)
    }

    self.edit = (c,e) => {
      console.log(c)
      self.title='Update'
      self.refs.addCourseInput.value = c.course
      self.refs.addCourseFullNameInput.value = c.course_full_name
      self.edit_id = c.id
    }

    courseStore.on('courses_changed',CoursesChanged)
    function CoursesChanged(courses){
      console.log(courses)
      self.title='Create'
      self.refs.addCourseInput.value = ''
      self.refs.addCourseFullNameInput.value = ''
      self.loading = false
      self.courses = courses
      self.courseDataItems = []
      self.courseDataItems = courses
      self.update()
    }

});
riot.tag2('daily-attendance', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Daily Attendance Summary</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="start_date" placeholder="" tabindex="0" type="text"> </div> </div> <div class="column"> <div class="control"> <button class="button is-danger has-text-weight-bold" onclick="{readDailyAttendanceData}">Go</button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i></span> </button> </div> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th>Teacher</th> <th>Standard</th> <th>Section</th> <th>Present</th> <th>Absent</th> <th>Time</th> </th> </tr> </thead> <tbody> <tr each="{st, i in dailyAttendanceData}"> <td>{i+1}</td> <td>{st.teacher_name}</td> <td>{st.standard} </td> <td>{st.section} </td> <td>{st.pr} </td> <td>{st.ab} </td> <td>{st.time} </td> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.role = getCookie('role')
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "Y-m-d",
  		})
    })

    self.on("unmount", function(){
       attendanceStore.off('read_daily_attendance_data_changed',ReadDailyAttendanceDataChanged)
    })

    self.readDailyAttendanceData = () => {
    	 self.loading = true
       attendanceStore.trigger('read_daily_attendance_data',self.refs.start_date.value)
    }

    attendanceStore.on('read_daily_attendance_data_changed',ReadDailyAttendanceDataChanged)
    function ReadDailyAttendanceDataChanged(dailyAttendanceData){

      self.title='Create'
      self.loading = false
      self.dailyAttendanceData = dailyAttendanceData
      self.update()
    }

});
riot.tag2('daily-collection', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="flex items-center mt-2 mb-6 no-print"> <div class="bg-green py-1 rounded w-10"> <div class="bg-grey h-px flex-auto"></div> </div> </div> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="date input form-control input" id="start_date" ref="start_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="date input form-control input" id="end_date" ref="end_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{getDailyFees}"> GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Fees Transaction Report</p> <p class="has-text-centered">Session: {sessionName}</p> <p class="has-text-centered">{fromSelectedDate} - {toSelectedDate}</p> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <tbody> <tr each="{cd, i in dailyData}"> <td><raw content="{cd.slNo}"></raw></td> <td><raw content="{cd.receipt_date}"></raw></td> <td><raw content="{cd.receipt_id}"></raw></td> <td><raw content="{cd.enroll_number}"></raw></td> <td><raw content="{cd.name}"></raw></td> <td><raw content="{cd.fee_slip_name}"></raw></td> <td><raw content="{cd.class}"></raw></td> <td><raw content="{cd.bank_name}"></raw></td> <td><raw content="{cd.item_no}"></raw></td> <td><raw content="{cd.mode}"></raw></td> <td class="has-text-right amount"> <raw content="{cd.amount_due}"></raw></td> <td class="has-text-right amount"> <raw content="{cd.fine}"></raw></td> <td class="has-text-right amount"> <raw content="{cd.scholorship_amount}"></raw></td> <td class="has-text-right amount"> <raw content="{cd.total}"></raw></td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
	self.fromSelectedDate = ''
	self.toSelectedDate = ''
    self.on("mount", function(){
      flatpickr(".date", {
        allowInput: true,
        dateFormat: "d/m/Y",
      })
      self.update();
    })

    self.on("unmount", function(){
      feesReportStore.off('read_daily_fees_changed',ReadDailyFeesChanged)
    })

    self.getDailyFees = () => {
    	var startDate = document.getElementById("start_date").value
    	var endDate = document.getElementById("end_date").value
    	if(!self.refs.start_date.value){
    		toastr.info("Pleae enter From Date and try again")
    	}else if(!self.refs.end_date.value){
    		toastr.info("Pleae enter End Date and try again")
    	}else if((Date.parse(startDate)> Date.parse(endDate))){
           toastr.info("From date can't be greater")
    	}else{
    	var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          self.loading = true
          feesReportStore.trigger('read_daily_fees', obj)
         }
    }

    feesReportStore.on('read_daily_fees_changed',ReadDailyFeesChanged)
    function ReadDailyFeesChanged(dailyData, session_name){
      self.totalFees = 0
      self.totalFine = 0
      self.totalScholarship = 0
      self.totalGrandTotal = 0

      self.loading = false
      self.dailyData = []
      self.dailyData = dailyData
      self.sessionName = session_name
   	  self.fromSelectedDate = self.refs.start_date.value
      self.toSelectedDate = self.refs.end_date.value

      self.update()
    }
});
riot.tag2('daily-register', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="date input form-control input" id="start_date" ref="start_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="date input form-control input" id="end_date" ref="end_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{getFeesRegisterData}"> GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Daily Fees Register</p> <p class="has-text-centered">Session: {sessionName}</p> <p class="has-text-centered">{fromSelectedDate} - {toSelectedDate}</p> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <tbody> <tr each="{cd, i in registerData}"> <td>{cd.slNo}</td> <td>{cd.receipt_date}</td> <td>{cd.receipt_id}</td> <td>{cd.enroll_number}</td> <td>{cd.name}</td> <td>{cd.fee_slip_name}</td> <td>{cd.class}</td> <td>{cd.bank_name}</td> <td>{cd.item_no}</td> <td>{cd.mode}</td> <td class="has-text-right amount">{cd.amount_due}</td> <td class="has-text-right amount">{cd.fine}</td> <td class="has-text-right amount">{cd.scholorship_amount}</td> <td class="has-text-right amount">{cd.total}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      flatpickr(".date", {
        allowInput: true,
        dateFormat: "d/m/Y",
      })
      self.update();
    })

    self.on("unmount", function(){
      feesReportStore.off('read_fees_register_changed',ReadFeesRegisterChanged)
    })

    self.getFeesRegisterData = () => {
    	var startDate = document.getElementById("start_date").value
    	var endDate = document.getElementById("end_date").value
    	if(!self.refs.start_date.value){
    		toastr.info("Pleae enter From Date and try again")
    	}else if(!self.refs.end_date.value){
    		toastr.info("Pleae enter End Date and try again")
    	}else if((Date.parse(startDate)> Date.parse(endDate))){
           toastr.info("From date can't be greater")
    	}else{
    	var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          self.loading = true
          feesReportStore.trigger('read_fees_register', obj)
          console.log(obj)
      }
    }

    feesReportStore.on('read_fees_register_changed',ReadFeesRegisterChanged)
    function ReadFeesRegisterChanged(registerData, session_name){
      self.totalFees = 0
      self.totalFine = 0
      self.totalScholarship = 0
      self.totalGrandTotal = 0
      console.log(registerData)
      self.registerData = []
      self.registerData = registerData

      self.sessionName = session_name
   	  self.fromSelectedDate = self.refs.start_date.value
      self.toSelectedDate = self.refs.end_date.value

      self.loading = false
      console.log("registerData")
      self.update()
    }
});
riot.tag2('date-wise', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="date input is-small" id="start_date" ref="start_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="date input is-small" id="end_date" ref="end_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getDateWiseFees}"> GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Date Wise Fees Received</p> <p class="has-text-centered">Session: {sessionName}</p> <p class="has-text-centered">{fromSelectedDate} - {toSelectedDate}</p> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th class="slno">#</th> <th>Receipt Date</th> <th>Fees</th> <th>Fine</th> <th>Scholarship</th> <th>Total</th> </tr> </thead> <tbody> <tr each="{cd, i in dateWiseData}"> <td>{i + 1}</td> <td>{cd.receipt_date}</td> <td class="has-text-right amount">{cd.fees}</td> <td class="has-text-right amount">{cd.fine}</td> <td class="has-text-right amount">{cd.scholarship}</td> <td class="has-text-right amount">{cd.total}</td> </tr> <tr> <th class="has-text-right" colspan=" 2">Total</th> <th class="has-text-right amount">{totalFees}</th> <th class="has-text-right amount">{totalFine}</th> <th class="has-text-right amount">{totalScholarship}</th> <th class="has-text-right amount">{totalGrandTotal}</th> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      flatpickr(".date", {
        allowInput: true,
        dateFormat: "d/m/Y",
      })
      self.update();
    })

    self.on("unmount", function(){
      feesReportStore.off('read_date_fees_changed',ReadDateFeesChanged)
    })

    self.getDateWiseFees = () => {
    	var startDate = document.getElementById("start_date").value
    	var endDate = document.getElementById("end_date").value
    	if(!self.refs.start_date.value){
    		toastr.info("Pleae enter From Date and try again")
    	}else if(!self.refs.end_date.value){
    		toastr.info("Pleae enter End Date and try again")
    	}else if((Date.parse(startDate)> Date.parse(endDate))){
           toastr.info("From date can't be greater")
    	}else{
    	var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          self.loading = true
          feesReportStore.trigger('read_date_wise_fees', obj)
       }
    }

    feesReportStore.on('read_date_fees_changed',ReadDateFeesChanged)
    function ReadDateFeesChanged(dateWiseData, session_name){
      self.totalFees = 0
      self.totalFine = 0
      self.totalScholarship = 0
      self.totalGrandTotal = 0
      console.log(dateWiseData)
      self.dateWiseData = []
      self.dateWiseData = dateWiseData
       self.dateWiseData.map(c => {
          self.totalFees +=Number(c.fees)
          self.totalFine +=Number(c.fine)
          self.totalScholarship +=Number(c.scholarship)
          self.totalGrandTotal +=Number(c.total)
      })
      self.sessionName = session_name
   	  self.fromSelectedDate = self.refs.start_date.value
      self.toSelectedDate = self.refs.end_date.value
      self.loading = false
      self.update()
    }
});
riot.tag2('department', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Department Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Department</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="department_name" type="text"> </div> </div> <div class="column is-narrow"> <label class="label">HOD</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="emp_name"> <option each="{employees}" riot-value="{name}">{name} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readDepartment}" style="margin-right:2px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>#</th> <th>Department</th> <th>HOD</th> <th></th> </tr> </thead> <tbody> <tr each="{d, i in departments}"> <td>{i + 1}</td> <td>{d.department_name}</td> <td>{d.hod}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{d.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, d)}">Edit</a></span> <span> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{d.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.readHod()
      self.readDepartment()
      self.update()
    })

     self.on("unmount", function(){
      departmentStore.off('departments_changed', DepartmentChanged)
      departmentStore.off('read_hod_changed', ReadHodChanged)
    })

    self.readDepartment = () => {
      self.loading=true
       departmentStore.trigger('read_department')
    }
    self.readHod = () => {
       departmentStore.trigger('read_hod')
    }

     self.add = () => {
      if(!self.refs.department_name.value){
        toastr.info("Please enter Department and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          departmentStore.trigger('add_department', self.refs.department_name.value, self.refs.emp_name.value)
        }else if(self.title=='Update'){
          console.log('update')
          departmentStore.trigger('edit_department', self.refs.department_name.value,self.refs.emp_name.value,self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.departments.map(d => {
          d.confirmDelete = false
          d.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.departments.map(d => {
        if(d.department_id != e.item.d.department_id){
          d.confirmDelete = false
        }else{
          d.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      departmentStore.trigger('delete_department', e.item.d.department_id)
    }

    self.edit = (d,e) => {
      console.log(d)
      self.title='Update'
      self.refs.department_name.value = d.department_name
      self.refs.emp_name.value = d.hod
      self.edit_id = d.department_id
    }

    departmentStore.on('read_hod_changed',ReadHodChanged)
    function ReadHodChanged(employees){
      self.title='Create'
      self.loading = false
      self.employees = employees
      self.update()
    }

    departmentStore.on('departments_changed',DepartmentChanged)
    function DepartmentChanged(departments){
      self.title='Create'
      self.departments = departments
      self.refs.department_name.value = ''
      self.refs.emp_name.value = ''
      self.loading = false
      self.update()
    }

});
riot.tag2('designations', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Designation Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Designation</label> </div> <div class="column is-narrow"> <input class="input form-control input" id="addDesignationInput" ref="addDesignationInput" tabindex="0" type="text" onkeyup="{addEnter}"> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readDesignations}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i></span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>#</th> <th>Designation</th> <th></th> </tr> </thead> <tbody> <tr each="{d, i in designations}"> <td>{i + 1}</td> <td>{d.designation}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{d.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, d)}">Edit</a></span> <span> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{d.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.loading = false;
      self.update()
      self.readDesignations()
    })

     self.on("unmount", function(){
      designationStore.off('designations_changed', DesignationsChanged)
    })

    self.readDesignations = () => {
        self.loading = true;
       designationStore.trigger('read_designations')
    }

     self.add = () => {
      if(!self.refs.addDesignationInput.value){
        toastr.info("Please enter Designation and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          designationStore.trigger('add_designation', self.refs.addDesignationInput.value)
          self.readDesignations()
        }else if(self.title=='Update'){
          console.log('update')
          designationStore.trigger('edit_designation', self.refs.addDesignationInput.value,self.edit_id)
         self.readDesignations()
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.designations.map(d => {
          d.confirmDelete = false
          d.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.designations.map(d => {
        console.log("hhjjsd")
        console.log(e.item.d.designation_id)
        if(d.designation_id != e.item.d.designation_id){
          d.confirmDelete = false
        }else{
          d.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      designationStore.trigger('delete_designation', e.item.d.designation_id)
    }

    self.edit = (d,e) => {
      console.log(d)
      self.title='Update'
      self.refs.addDesignationInput.value = d.designation
      self.edit_id = d.designation_id
    }

    designationStore.on('designations_changed',DesignationsChanged)
    function DesignationsChanged(designations){
      console.log('designations_changed1')
      console.log(designations)
      self.title='Create'
      self.refs.addDesignationInput.value = ''
      self.loading = false
      self.designations = designations
      self.designations = []
      self.designations = designations
      self.update()
      console.log(self.designations)
      console.log('self.designations')
    }

});
riot.tag2('discipline-case-wise-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered is-size-6" style="color: #ff3860;">Student Category wise Discipline Report <br>Grand Total:{grand_total}</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="input date " ref="start_date" id="start_date" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="input date " ref="end_date" id="end_date" type="text" readonly="readonly"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getData}"> GO </button> <input type="checkbox" id="checkTable" checked="{e.done}" onclick="{viewTable}" style="margin-top: 12px;"> Table </div> <div class="column"> <button class="button is-success has-text-weight-bold ml5 is-pulled-right" onclick="{csvExport}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <center> <div id="piechart" style="width: 900px; height: 500px;" show="{report_view ==\'show_graph\'}"></div> </center> <div class="printOnly"> <div class="columns is-centered"> <table class="table is-striped is-hoverable is-bordered" style="margin-top:50px; width: 50%;"> <thead> <tr> <th>Category</th> <th class="has-text-right">Total</th> </tr> </thead> <tbody> <tr each="{cd, i in case_wise_reports}"> <td>{cd.category_name}</td> <td class="has-text-right">{cd.total}</td> </tr> <tr> <td class="has-text-right">Total</td> <td class="has-text-right">{grand_total}</td> </tr> </tbody> </table> </div> </div> <div class="columns is-centered no-print"> <table class="table is-striped is-hoverable is-bordered" style="width: 50%;" show="{report_view ==\'show_table\'}"> <thead> <tr> <th>Category</th> <th class="has-text-right">Total</th> </tr> </thead> <tbody> <tr each="{cd, i in case_wise_reports}"> <td>{cd.category_name}</td> <td class="has-text-right">{cd.total}</td> </tr> <tr> <td class="has-text-right">Total</td> <td class="has-text-right">{grand_total}</td> </tr> </tbody> </table> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.loading = false;
      flatpickr(".date", {
	    allowInput: true,
        dateFormat: "d/m/Y",
  		})
      self.update();
    })

    self.on("unmount", function(){
      disciplineReportStore.off('read_case_wise_report_changed',ReadCaseChanged)
    })

    self.viewTable = () => {
    	if($('#checkTable').is(":checked")){
	        self.report_view = 'show_table'
    	}else{
	        self.report_view = 'show_graph'
    	}
    }
    self.getData = () => {
    	var startDate = document.getElementById("start_date").value;
    	var endDate = document.getElementById("end_date").value;

    	if(!self.refs.start_date.value){
        	toastr.info("Please enter From Date and try again")
      	}else if(!self.refs.end_date.value){
      		toastr.info("Please enter To Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
       		toastr.info("Please enter To Date Grater Than From Date")
      	}else{
    	var obj={}

          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          self.loading = true
          disciplineReportStore.trigger('read_case_wise_report', obj)
          self.report_view = 'show_graph'
          console.log(obj)
        }
    }

    self.csvExport = () => {
    	var startDate = document.getElementById("start_date").value;
    	var endDate = document.getElementById("end_date").value;

    	if(!self.refs.start_date.value){
        	toastr.info("Please enter From Date and try again")
      	}else if(!self.refs.end_date.value){
      		toastr.info("Please enter To Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
       		toastr.info("Please enter To Date Grater Than From Date")
      	}else{
    	var obj={}

          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          disciplineReportStore.trigger('csv_export_read_case_wise_report', obj)
          console.log(obj)
        }
    }

    disciplineReportStore.on('read_case_wise_report_changed',ReadCaseChanged)
    function ReadCaseChanged(case_wise_reports,grand_total){
      self.case_wise_reports = case_wise_reports
      if(self.case_wise_reports.length==0){
      	toastr.info("No Data Found")
      }
      self.grand_total = grand_total
      self.loading = false

      var chart_percentage = []
      chart_percentage.push(['Task', 'Hours per Day'])
       for (var i = self.case_wise_reports.length - 1; i >= 0; i--) {
		   chart_percentage.push([self.case_wise_reports[i].category_name,self.case_wise_reports[i].total])
		}

      google.charts.load("current", {packages:["corechart"]});
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {

        var data = google.visualization.arrayToDataTable(chart_percentage);

        var options = {
          is3D: true,
          legend:{position: 'labeled',
                  textStyle: {bold: true} },
          pieSliceText: 'value'
        };

        var chart = new google.visualization.PieChart(document.getElementById('piechart'));
        chart.draw(data, options);
      }
      self.update()
      console.log(self.case_wise_reports)
    }
});
riot.tag2('discipline-case', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Discipline Case Management Console</h2> <div class="level box no-print"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"> <label class="label">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="category_id"> <option each="{categories}" riot-value="{category_id}">{category_name}</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Case</label> </div> <div class="column is-half"> <div class="control"> <input class="input" id="addDisciplineCaseInput" ref="addDisciplineCaseInput" type="text"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold " onclick="{add}"> {title} </button> </div> </div> </div> <div class="level-right"> <div class="control"> <input class="input" ref="searchDisciplineCase" onkeyup="{filterDisciplineCase}" type="text" placeholder="Search By Case"> </div> <button class="button is-link has-text-weight-bold ml5 " onclick="{getData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-success has-text-weight-bold ml5" onclick="{downloadCSV}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold ml5" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Category</th> <th>Case</th> <th></th> </tr> </thead> <tbody> <tr each="{ca, i in filteredDisciplineCase}"> <td>{i+1}</td> <td>{ca.category_name}</td> <td>{ca.case_name}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ca.confirmDelete}"> <span><a class="button is-small" onclick="{edit.bind(this, ca)}" title="Edit"> <i class="fa fa-edit" aria-hidden="true"></i></a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"> <i class="fa fa-trash" aria-hidden="true"></i></a></span></a></span> </div> <div class="table-buttons" if="{ca.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.loading = false;
      self.update()
      self.readCategories()
      self.readCase()
    })
    self.on("unmount", function(){
      disciplinecaseStore.off('read_discipline_categories_changed',CategoriesChanged)
      disciplinecaseStore.off('add_discipline_case_changed', AddCaseChanged)
      disciplinecaseStore.off('read_discipline_case_changed', ReadCaseChanged)
      disciplinecaseStore.off('edit_discipline_case_changed',EditCaseChanged)
      disciplinecaseStore.off('delete_discipline_case_changed',DeleteCaseChanged)
    })

    self.readCategories = () => {
       disciplinecaseStore.trigger('read_discipline_category')
    }

    self.readCase = () => {
       disciplinecaseStore.trigger('read_discipline_case')
    }
    self.getData = () =>{
      self.loading = true
      disciplinecaseStore.trigger('read_discipline_case')
    }

    self.csvExport = () => {
      disciplinecaseStore.trigger('csv_export_discipline_case')
    }

     self.add = () => {
      if(!self.refs.addDisciplineCaseInput.value){
        toastr.info("Please enter Case and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){

          disciplinecaseStore.trigger('add_discipline_case', self.refs.addDisciplineCaseInput.value,
           self.refs.category_id.value)

        }else if(self.title=='Update'){

          disciplinecaseStore.trigger('edit_discipline_case', self.refs.addDisciplineCaseInput.value,
            self.refs.category_id.value, self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.discipline_case.map(ca => {
          ca.confirmDelete = false
          ca.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.discipline_case.map(ca => {
        if(ca.case_id != e.item.ca.case_id){
          ca.confirmDelete = false
        }else{
          ca.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      disciplinecaseStore.trigger('delete_discipline_case', e.item.ca.case_id)
    }

    self.edit = (ca,e) => {
      console.log(ca)
      self.title='Update'
      document.getElementById("addDisciplineCaseInput").focus()
      self.refs.addDisciplineCaseInput.value = ca.case_name
      self.refs.category_id.value = ca.category_id
      self.edit_id = ca.case_id
    }

    self.filterDisciplineCase = ()=>{
      self.filteredDisciplineCase = self.discipline_case.filter(c => {
        return JSON.stringify(c).toLowerCase().indexOf(self.refs.searchDisciplineCase.value.toLowerCase())>=0
      })
    }

    disciplinecaseStore.on('add_discipline_case_changed',AddCaseChanged)
    function AddCaseChanged(discipline_case){
      console.log(discipline_case)
      self.title='Create'
      self.refs.addDisciplineCaseInput.value = ''
      self.discipline_case = discipline_case
      self.loading = false
      self.update()
      self.readCase()
      self.readCategories()
    }

    disciplinecaseStore.on('edit_discipline_case_changed',EditCaseChanged)
    function EditCaseChanged(discipline_case){
      console.log(discipline_case)
      self.title='Create'
      self.refs.addDisciplineCaseInput.value = ''
      self.discipline_case = discipline_case
      self.loading = false
      self.update()
      self.readCase()
      self.readCategories()
    }

    disciplinecaseStore.on('delete_discipline_case_changed',DeleteCaseChanged)
    function DeleteCaseChanged(discipline_case){
      console.log(discipline_case)
      self.title='Create'
      self.loading = false
      self.discipline_case = discipline_case
      self.update()
      self.readCase()
      self.readCategories()
    }

    disciplinecaseStore.on('read_discipline_case_changed',ReadCaseChanged)
    function ReadCaseChanged(discipline_case){
      console.log(discipline_case)
      self.title='Create'
      self.refs.addDisciplineCaseInput.value = ''
      self.loading = false
      self.discipline_case = discipline_case
      self.filteredDisciplineCase = discipline_case
      self.update()
    }

    disciplinecaseStore.on('read_discipline_categories_changed',CategoriesChanged)
    function CategoriesChanged(categories){
      console.log(categories)
      self.categories = categories
      self.loading = false
      self.update()
      console.log(self.categories)
    }

});
riot.tag2('discipline-category', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Discipline Category Management</h2> <div class="level box no-print"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"> <label class="label">Category</label> </div> <div class="column is-full"> <input class="input" type="text" ref="addDisciplineCategoryInput" id="addDisciplineCategoryInput" onkeyup="{addEnter}"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold " onclick="{add}"> {title} </button> </div> </div> </div> <div class="level-right"> <div class="control"> <input class="input" ref="searchDisciplineCategory" onkeyup="{filterDisciplineCategory}" type="text" placeholder="Search By Category"> </div> <button class="button is-link has-text-weight-bold ml5 " onclick="{getData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-success has-text-weight-bold ml5" onclick="{downloadCSV}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold ml5" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> <table class="is-hoverable table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Category</th> <th></th> </tr> </thead> <tbody> <tr each="{dc, i in filteredDisciplineCategory}"> <td>{i+1}</td> <td>{dc.category_name}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{dc.confirmDelete}"> <span><a class="button is-small" onclick="{edit.bind(this, dc)}" title="Edit"> <i class="fa fa-edit" aria-hidden="true"></i></a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"> <i class="fa fa-trash" aria-hidden="true"></i></a></span></a></span> </div> <div class="table-buttons" if="{dc.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.loading = false;
      self.role = getCookie('role')
      self.update()
      self.readCategories()
    })
    self.on("unmount", function(){
      disciplinecategoryStore.off('discipline_category_changed',DisciplineCategoryChanged)
    })

    self.readCategories = () => {
       disciplinecategoryStore.trigger('read_discipline_category')
    }

    self.getData = () =>{
      self.loading = true
      disciplinecategoryStore.trigger('read_discipline_category')
    }

    self.csvExport = () => {
      disciplinecategoryStore.trigger('csv_export_discipline_category')
    }

     self.add = () => {
      if(!self.refs.addDisciplineCategoryInput.value){
        toastr.info("Please enter Category and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          disciplinecategoryStore.trigger('add_discipline_category', self.refs.addDisciplineCategoryInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          disciplinecategoryStore.trigger('edit_discipline_category', self.refs.addDisciplineCategoryInput.value,self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.discipline_categories.map(dc => {
          dc.confirmDelete = false
          dc.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.discipline_categories.map(dc => {
        if(dc.category_id != e.item.dc.category_id){
          dc.confirmDelete = false
        }else{
          dc.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      disciplinecategoryStore.trigger('delete_discipline_category', e.item.dc.category_id)
    }

    self.edit = (dc,e) => {
      console.log(dc)
      self.title='Update'
      document.getElementById("addDisciplineCategoryInput").focus()
      self.refs.addDisciplineCategoryInput.value = dc.category_name
      self.edit_id = dc.category_id
    }

    self.filterDisciplineCategory = ()=>{
      self.filteredDisciplineCategory = self.discipline_categories.filter(c => {
        return JSON.stringify(c).toLowerCase().indexOf(self.refs.searchDisciplineCategory.value.toLowerCase())>=0
      })
    }

    disciplinecategoryStore.on('discipline_category_changed',DisciplineCategoryChanged)
    function DisciplineCategoryChanged(discipline_categories){
      self.title='Create'
      self.refs.addDisciplineCategoryInput.value = ''
      self.loading = false
      self.discipline_categories = discipline_categories
      self.filteredDisciplineCategory = discipline_categories
      self.update()
    }

});
riot.tag2('discipline-class-wise-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered is-size-6" style="color: #ff3860;">Class Wise discipline Report <br>Grand Total:{grand_total} <br>{standard_name} {section_name}</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" onchange="{getSection}" id="Standard"> <option each="{standards}" riot-value="{standard_id}">{standard} </option> <option value="-1">ALL</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Section</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="section_id" id="Section"> <option each="{filteredSections}" riot-value="{section_id}">{section} </option> <option value="-1">ALL</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Session</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="session_id"> <option each="{sessions}" riot-value="{session_id}">{session_name} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getData}"> GO </button> <input type="checkbox" id="checkTable" checked="{e.done}" onclick="{viewTable}" style="margin-top: 12px;"> Table </div> <div class="column"> <button class="button is-success has-text-weight-bold ml5 is-pulled-right" onclick="{csvExport}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <center> <div id="chart_div" show="{report_view ==\'show_graph\'}" style="width: 900px; height: 500px;"></div> </center> <div class="printOnly"> <div class="columns is-centered"> <table class="table is-striped is-hoverable is-bordered" style="margin-top:50px; width:50%;"> <thead> <tr> <th>Category</th> <th class="has-text-right">Total</th> </tr> </thead> <tbody> <tr each="{cd, i in class_wise_case_report}"> <td>{cd.category_name}</td> <td class="has-text-right">{cd.total}</td> </tr> <tr> <td class="has-text-right">Total</td> <td class="has-text-right">{grand_total}</td> </tr> </tbody> </table> </div> </div> <div class="columns is-centered no-print"> <table class="table is-striped is-hoverable is-bordered" style="width:50%;" show="{report_view ==\'show_table\'}"> <thead> <tr> <th>Case</th> <th class="has-text-right">Total</th> </tr> </thead> <tbody> <tr each="{cd, i in class_wise_case_report}"> <td>{cd.category_name}</td> <td class="has-text-right">{cd.total}</td> </tr> <tr> <td class="has-text-right">Total</td> <td class="has-text-right">{grand_total}</td> </tr> </tbody> </table> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      flatpickr(".date", {

    	allowInput: true,
    	altFormat: "d/m/Y",
    	dateFormat: "Y-m-d",
  		})
      self.readStandard()
      self.readSection()
      self.readSession()
      self.update();
    })

    self.on("unmount", function(){
      disciplineReportStore.on('read_class_wise_report_changed',ReadClassWiseReportChanged)
      disciplineReportStore.off('read_standard_changed',StandardChanged)
      disciplineReportStore.off('read_section_changed',SectionChanged)
      disciplineReportStore.off('read_session_changed',SessionChanged)
    })

    self.readStandard = () => {
       disciplineReportStore.trigger('read_standard')
    }

    self.readSection = () => {
       disciplineReportStore.trigger('read_section')
    }

    self.readSession = () => {
       disciplineReportStore.trigger('read_session')
    }

    self.getSection = () => {
    	self.filteredSections = []
    	self.filteredSections = self.sections.filter(s => {
    		return s.standard_id == self.refs.standard_id.value
    	})
    }

    self.viewTable = () => {
    	if($('#checkTable').is(":checked")){
	        self.report_view = 'show_table'
    	}else{
	        self.report_view = 'show_graph'
    	}
    }
    self.getData = () => {
        self.loading = true
        disciplineReportStore.trigger('read_class_wise_report', self.refs.standard_id.value,
          	self.refs.section_id.value,self.refs.session_id.value)
          	self.report_view = 'show_graph'
    }

    self.csvExport = () => {

        disciplineReportStore.trigger('csv_export_read_class_wise_report', self.refs.standard_id.value,
          	self.refs.section_id.value,self.refs.session_id.value)

        }

    disciplineReportStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()
    }

    disciplineReportStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections
      self.update()
    }

    disciplineReportStore.on('read_session_changed',SessionChanged)
    function SessionChanged(sessions){
      console.log(sessions)
      self.sessions = sessions
      self.update()
    }

    disciplineReportStore.on('read_class_wise_report_changed',ReadClassWiseReportChanged)
    function ReadClassWiseReportChanged(class_wise_case_report,grand_total){
      self.class_wise_case_report = class_wise_case_report
      self.loading = false
      self.grand_total = grand_total
	  self.standard_name = $("#Standard option:selected").text();
	  self.section_name = $("#Section option:selected").text();

      	if(self.class_wise_case_report.length==0){
	      	toastr.info("No Data Found")
	    }
      	var chartColors = ['#e3342f','#F6993F','#F2D024','#1F9D55','#2779BD','#9561E2','#B8C2CC','#e3342f','#F6993F','#F2D024','#1F9D55','#2779BD','#9561E2','#B8C2CC','#e3342f','#F6993F','#F2D024','#1F9D55','#2779BD','#9561E2','#B8C2CC'];

	     var chart_percentage = []
	     chart_percentage.push(['Head', 'Value', { role: 'style' }])

       	 for (var i = self.class_wise_case_report.length - 1; i >= 0; i--) {
       		var p = 0
       		p = Number(((self.class_wise_case_report[i].total*100)/self.grand_total).toFixed(2))

       		console.log(p);
		   chart_percentage.push([self.class_wise_case_report[i].category_name,p,chartColors[i]])
		 }
      	 google.charts.load("current", {packages:['corechart']});
    	 google.charts.setOnLoadCallback(drawChart);
    		function drawChart() {
      			var data = google.visualization.arrayToDataTable(chart_percentage);
      			var view = new google.visualization.DataView(data);
      			view.setColumns([0, 1,
                       	{ calc: "stringify",
                          sourceColumn: 1,
                          type: "string",
                          role: "annotation" },2
                ]);
      			var options = {
        				width: 600,
        				height: 400,

        				legend: { position: "none" },
        				vAxis: {
			             minValue: 0,
			             maxValue: 100,
			             format: '#\'%\''
			            }
      			};
      			var chart = new google.visualization.ColumnChart(document.getElementById("chart_div"));
      			chart.draw(view, options);
  			}

      		self.update()

      		console.log(self.class_wise_case_report)
    }
});
riot.tag2('discipline-date-wise-case-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered is-size-6" style="color: #ff3860;">Student Wise Discipline Case Report</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="category_id"> <option value="-1">ALL</option> <option each="{categories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="input date " ref="start_date" id="start_date" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="input date " ref="end_date" id="end_date" type="text" readonly="readonly"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getData}"> GO </button> </div> <div class="column"> <button class="button is-success has-text-weight-bold ml5 is-pulled-right" onclick="{csvExport}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <table class="table is-striped is-hoverable is-bordered is-fullwidth"> <p><center><strong>Session:{session_name}</strong></center></p> <p><center><strong>From:{st_date} To: {en_date}</strong></center></p> <thead> <tr> <th>Sl No</th> <th>Name</th> <th>Enroll No</th> <th>Class</th> <th>Case</th> <th>Date</th> <th>Diagnosis</th> <th>Remarks</th> </tr> </thead> <tbody> <tr each="{cd, i in date_wise_case_report}"> <td>{i+1}</td> <td>{cd.student_name}</td> <td>{cd.enroll_number}</td> <td>{cd.standard}</td> <td>{cd.case_name}</td> <td>{cd.consult_date}</td> <td>{cd.diagnosis}</td> <td>{cd.remarks}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.loading = false;
      flatpickr(".date", {
	    allowInput: true,
        dateFormat: "d/m/Y",
  		})
      self.readCategories()
      self.update();
    })

    self.on("unmount", function(){
      disciplineReportStore.off('read_date_wise_case_report_changed',ReadDateWiseCaseReportChanged)
      disciplinedetailStore.off('read_discipline_categories_changed',CategoriesChanged)
    })

    self.readCategories = () => {
       disciplinedetailStore.trigger('read_discipline_categories')
    }

    self.getData = () => {
    	var startDate = document.getElementById("start_date").value;
    	var endDate = document.getElementById("end_date").value;

    	if(!self.refs.start_date.value){
        	toastr.info("Please enter From Date and try again")
      	}else if(!self.refs.end_date.value){
      		toastr.info("Please enter To Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
       		toastr.info("Please enter To Date Grater Than From Date")
      	}else{
    	var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          self.loading = true
          disciplineReportStore.trigger('read_date_wise_case_report', obj,self.refs.category_id.value)
          console.log(obj)
          console.log(self.refs.category_id.value)
        }
    }

    self.csvExport = () => {
    	var startDate = document.getElementById("start_date").value;
    	var endDate = document.getElementById("end_date").value;

    	if(!self.refs.start_date.value){
        	toastr.info("Please enter From Date and try again")
      	}else if(!self.refs.end_date.value){
      		toastr.info("Please enter To Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
       		toastr.info("Please enter To Date Grater Than From Date")
      	}else{
    	var obj={}

          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          disciplineReportStore.trigger('csv_export_read_date_wise_case_report', obj,self.refs.category_id.value)
          console.log(obj)
        }
    }

    disciplinedetailStore.on('read_discipline_categories_changed',CategoriesChanged)
    function CategoriesChanged(categories){
      console.log(categories)
      self.categories = categories
      self.update()
    }

    disciplineReportStore.on('read_date_wise_case_report_changed',ReadDateWiseCaseReportChanged)
    function ReadDateWiseCaseReportChanged(date_wise_case_report,session_name){
      self.date_wise_case_report = date_wise_case_report
      self.session_name = session_name
      if(self.date_wise_case_report.length==0){
      	toastr.info("No Data Found")
      }
      console.log(self.date_wise_case_report)
      self.loading = false
      self.st_date = self.refs.start_date.value
      self.en_date = self.refs.end_date.value
      self.update()
    }
});
riot.tag2('discipline-detail', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{discipline_view ==\'show_discipline\'}"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Discipline Detail</h2> <div class="level box no-print"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"><label class="label">Category</label></div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="category_id" id="CategoryName" onchange="{getDisciplineData}"> <option value="-1">ALL</option> <option each="{categories}" riot-value="{category_id}">{category_name}</option> </select> </div> </div> </div> </div> </div> <div class="level-right"> <div class="control"> <input class="input" ref="searchDisciplineDetail" onkeyup="{filterDisciplineDetail}" type="text" placeholder="Search By Enroll No or Name"> </div> <button class="button is-warning has-text-weight-bold ml5" onclick="{add_new_discipline}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> <button class="button is-link has-text-weight-bold ml5" onclick="{getDisciplineData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-success has-text-weight-bold ml5" onclick="{downloadCSV}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <a class="button is-primary has-text-weight-bold ml5" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </a> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable is-narrow print-discipline"> <p><center><strong>Category:{categoryName}</strong></center></p> <thead> <tr> <th>SL No</th> <th>Referred by</th> <th>Recorded by</th> <th>Name</th> <th>Enroll No</th> <th>Class</th> <th>Case</th> <th>Date</th> <th>Diagnosis</th> <th>Suggestion</th> <th style="width: 100px;" class="no-print"></th> </tr> </thead> <tbody> <tr each="{ac, i in filteredDisciplineDetail}"> <td>{i + 1}</td> <td>{ac.referred_by}</td> <td>{ac.created_by}</td> <td>{ac.student_name}</td> <td>{ac.enroll_number}</td> <td>{ac.standard}</td> <td>{ac.case_name}</td> <td>{ac.consult_date}</td> <td>{ac.diagnosis}</td> <td>{ac.remarks}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ac.confirmDelete}"> <span><a class="button is-small " onclick="{edit.bind(this, ac.id)}" title="Edit"> <i class="fa fa-edit" aria-hidden="true"></i></a></span> <span if="{role==\'ADMIN\'}"> <a class=" button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"> <i class="fa fa-trash" aria-hidden="true"></i></a></span> </div> <div class="table-buttons" if="{ac.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check" aria-hidden="true"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section class=" is-fluid" show="{discipline_view ==\'add_discipline\'}"> <div class="level"> <div class="level-left"> <div class="level-item"> <h2 class="title is-size-5" style="color: #ff3860;">{title} Detail</h2> </div> </div> <div class="level-right"> <button class="button is-warning is-rounded is-small" onclick="{close_new_discipline}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <div class="box"> <div class="columns"> <div class="column is-2"> <label class="label is-small" for="disciplineReferredInput">Referred by</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="disciplineReferredInput" id="disciplineReferredInput"> <option value="Class Monitor">Class Monitor</option> <option value="Class Teacher">Class Teacher</option> <option value="Discipline Cell">Discipline Cell</option> <option value="Out Sider">Out Sider</option> <option value="Parent">Parent</option> <option value="School Authority">School Authority</option> <option value="Student Directly">Student Directly</option> <option value="Subject Teacher">Subject Teacher</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="disciplineEnrollInput">Enroll No</label> </div> <div class="column is-2 "> <input class="input is-small" ref="disciplineEnrollInput" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="disciplineCategoryidInput">Category</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="disciplineCategoryidInput" onchange="{readCategoryCase}"> <option each="{categories}" riot-value="{category_id}">{category_name}</option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="discipline_case_id">Case</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="discipline_case_id"> <option each="{cases}" riot-value="{case_id}">{case_name}</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="disciplineDateInput">Date</label> </div> <div class="column is-2 "> <input class="input date is-small" type="text" ref="disciplineDateInput" readonly> </div> <div class="column is-2"> <label class="label is-small" for="disciplineDiagnosisInput">Diagnosis</label> </div> <div class="column is-2"> <input class="input is-small" ref="disciplineDiagnosisInput" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="disciplineRemarksInput">Suggestion</label> </div> <div class="column is-4"> <textarea class="textarea is-small" ref="disciplineRemarksInput" rows="3"></textarea> </div> </div> <div class="columns mt60"> <div class="column is-full"> <button class="button is-success has-text-weight-bold adjusted-top" onclick="{add}">Submit </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{close_new_discipline}">Cancel </button> </div> </div> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
    self.loading = false;
    self.title='Add'
    self.discipline_view = 'show_discipline'
    self.role = getCookie('role')
    self.update()
    flatpickr(".date", {
      allowInput: true,
      dateFormat: "d/m/Y",
    })
    self.readCategories()
    self.readCase()
    })

    self.on("unmount", function(){
      disciplinedetailStore.off('read_discipline_categories_changed',CategoriesChanged)
      disciplinedetailStore.off('read_case_changed',CaseChanged)
      disciplinedetailStore.off('read_discipline_changed',ReadDisciplineChanged)
      disciplinedetailStore.off('add_discipline_detail_changed',DisciplineChanged)
      disciplinedetailStore.off('read_for_edit_discipline_changed',ReadDisciplineForEditChanged)
      disciplinedetailStore.off('edit_discipline_detail_changed',EditDisciplineChanged)
      disciplinedetailStore.off('delete_discipline_detail_changed',DeleteDisciplineDetailsChanged)
    })

    self.readCategories = () =>{
      disciplinedetailStore.trigger('read_discipline_categories')
    }
    self.readCategoryCase = () => {
    	self.cases = []
    	self.cases = self.discipline_case.filter(c => {
          return c.category_id == self.refs.disciplineCategoryidInput.value
        })
    }

    self.readCase = () =>{
      disciplinedetailStore.trigger('read_discipline_case')
    }

    self.getDisciplineData = () =>{
      self.loading = true;
      disciplinedetailStore.trigger('read_discipline', self.refs.category_id.value)
    }

    self.downloadCSV = () =>{
      disciplinedetailStore.trigger('csv_export_discipline', self.refs.category_id.value)
    }

    self.add_new_discipline = () =>{
    	self.discipline_view='add_discipline'
    	self.title='Add'
    	self.clearForm()
    	self.update()
    }

     self.close_new_discipline = () =>{
    	self.discipline_view='show_discipline'
    	self.update()
    }

    self.edit = (c,ac) => {
      console.log(c)
      self.id = c
      disciplinedetailStore.trigger('read_for_edit_discipline',self.id)
      self.discipline_view='add_discipline'
      self.title='Update'
    }

    self.cancelOperation = (ac) => {
      self.disciplines.map(c => {
        c.confirmDelete = false
        c.confirmEdit = false
      })
    }
    self.confirmDelete = (ac) => {
      self.disciplines.map(c => {
        if(c.id != ac.item.ac.id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (ac) => {
      self.loading = true
      disciplinedetailStore.trigger('delete_discipline_detail', ac.item.ac.id)
    }

    self.add = () => {
    	if(!self.refs.disciplineEnrollInput.value){
       	toastr.info("Please enter Enroll No. and try again")
      }else if(!self.refs.disciplineCategoryidInput.value){
        toastr.info("Please Select Category and try again")
      }else if(!self.refs.disciplineDateInput.value){
        toastr.info("Please enter Date and try again")
      }else{
       	var obj={}
       	obj['referred_by']=self.refs.disciplineReferredInput.value
       	obj['enroll_number']=self.refs.disciplineEnrollInput.value
       	obj['category_id']=self.refs.disciplineCategoryidInput.value
       	obj['case_id']=self.refs.discipline_case_id.value
       	obj['consult_date']=convertDate(self.refs.disciplineDateInput.value)
       	obj['diagnosis']=self.refs.disciplineDiagnosisInput.value
       	obj['remarks']=self.refs.disciplineRemarksInput.value
     	  if(self.title=='Add'){
          disciplinedetailStore.trigger('add_discipline_detail', obj)
        }else if(self.title=='Update'){
          disciplinedetailStore.trigger('edit_discipline_detail', obj,self.edit_id)
          console.log(obj)
          self.discipline_view='show_discipline'
          }
        }
    }
    self.clearForm = () =>{
    	self.refs.disciplineReferredInput.value = 'Class Monitor'
	    self.refs.disciplineEnrollInput.value = ''
	    self.refs.disciplineDateInput.value = ''
	    self.refs.disciplineDiagnosisInput.value = ''
	    self.refs.disciplineRemarksInput.value = ''
      self.readCategories()
      self.readCategoryCase()
    }

    self.filterDisciplineDetail = ()=>{
      self.filteredDisciplineDetail = self.disciplines.filter(c => {
        var filter_value=c.student_name + c.enroll_number;
        return JSON.stringify(filter_value).toLowerCase().indexOf(self.refs.searchDisciplineDetail.value.toLowerCase())>=0
      })
    }

    disciplinedetailStore.on('read_discipline_categories_changed',CategoriesChanged)
    function CategoriesChanged(categories){
      console.log(categories)
      self.categories = categories
      self.update()
      self.getDisciplineData()
    }

    disciplinedetailStore.on('read_discipline_case_changed',CaseChanged)
    function CaseChanged(discipline_case){
      console.log(discipline_case)
      self.discipline_case = discipline_case
      self.update()
    }

    disciplinedetailStore.on('read_discipline_changed',ReadDisciplineChanged)
    function ReadDisciplineChanged(disciplines){
      self.loading = false;
      self.disciplines = disciplines
      self.filteredDisciplineDetail = disciplines
      self.categoryName = $("#CategoryName option:selected").text();
      if(self.disciplines.length==0){
        toastr.info("No Data Found")
      }
      self.update()
     }

    disciplinedetailStore.on('add_discipline_detail_changed',DisciplineChanged)
    function DisciplineChanged(disciplines){
      console.log(disciplines)
      self.disciplines = disciplines
      self.discipline_view='show_discipline'
      self.getDisciplineData()
      self.filteredDisciplineDetail = disciplines
      self.update()
    }

    disciplinedetailStore.on('read_for_edit_discipline_changed',ReadDisciplineForEditChanged)
    function ReadDisciplineForEditChanged(discipline_details){
      console.log(discipline_details)
      self.discipline_details = discipline_details
      self.refs.disciplineReferredInput.value = discipline_details[0].referred_by
      self.refs.disciplineEnrollInput.value = discipline_details[0].enroll_number
      self.refs.disciplineCategoryidInput.value = discipline_details[0].category_id
      self.cases = []
	    self.cases = self.discipline_case.filter(c => {
	     return c.category_id == discipline_details[0].category_id
	    })
      self.refs.disciplineDateInput.value = discipline_details[0].consult_date
      self.refs.disciplineDiagnosisInput.value = discipline_details[0].diagnosis
      self.refs.disciplineRemarksInput.value = discipline_details[0].remarks
      self.edit_id = discipline_details[0].id
      self.update()
      self.refs.discipline_case_id.value = discipline_details[0].case_id
      console.log(self.discipline_details)
     }

    disciplinedetailStore.on('edit_discipline_detail_changed',EditDisciplineChanged)
    function EditDisciplineChanged(disciplines){
      console.log(disciplines)
      self.disciplines = disciplines
      self.getDisciplineData()
      self.filteredDisciplineDetail = disciplines
      self.update()
    }

    disciplinedetailStore.on('delete_discipline_detail_changed',DeleteDisciplineDetailsChanged)
    function DeleteDisciplineDetailsChanged(delete_discipline_details){
      self.getDisciplineData()

      self.update()
     }
});
riot.tag2('discipline-report', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_master == \'discipline-case-wise-report\'}" href="#/discipline-report/discipline-case-wise-report"> <span>Case Wise Report</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'discipline-class-wise-report\'}" href="#/discipline-report/discipline-class-wise-report"> <span>Class Wise Report</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'discipline-date-wise-case-report\'}" href="#/discipline-report/discipline-date-wise-case-report"> <span>Date Wise Case Report</span> </a> </p> </div> <div id="discipline-report-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_master')
    console.log(opts.selected_master)
    if(!opts.selected_master){
      self.selected_master = 'discipline-case-wise-report'
    }else{
      self.selected_master = opts.selected_master
    }
});
riot.tag2('discipline-setting', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_master == \'discipline-category\'}" href="#/discipline-setting/discipline-category"> <span>Category</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'discipline-case\'}" href="#/discipline-setting/discipline-case"> <span>Case</span> </a> </p> </div> <div id="discipline-setting-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_master')
    console.log(opts.selected_master)
    if(!opts.selected_master){
      self.selected_master = 'discipline-category'
    }else{
      self.selected_master = opts.selected_master
    }
});
riot.tag2('due-by-class', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" id="standard_id" onchange="{getStudentData}"> <option></option> <option each="{standards}" riot-value="{standard_id}">{standard} </option> </select> </div> </div> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{getDueByClassMonth}"> GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Class Wise Due Detail</p> <p class="has-text-centered">Session: {sessionName}</p> <p class="has-text-centered">Class:{selectedClass}</p> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <tbody> <tr each="{cd, i in classWiseDueFees}"> <td>{cd.SlNo}</td> <td>{cd.Class}</td> <td class="has-text-right">{cd.Apr}</td> <td class="has-text-right">{cd.May}</td> <td class="has-text-right">{cd.Jun}</td> <td class="has-text-right">{cd.Jul}</td> <td class="has-text-right">{cd.Aug}</td> <td class="has-text-right">{cd.Sep}</td> <td class="has-text-right">{cd.Oct}</td> <td class="has-text-right">{cd.Nov}</td> <td class="has-text-right">{cd.Dec}</td> <td class="has-text-right">{cd.Jan}</td> <td class="has-text-right">{cd.FebMar}</td> <td class="has-text-right">{cd.Total}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      flatpickr(".date", {

    	allowInput: true,
    	altFormat: "d/m/Y",
    	dateFormat: "Y-m-d",
  		})
      self.readStandard()
      self.update();
    })

    self.on("unmount", function(){
      applyPlanStore.off('read_standard_changed',StandardChanged)
      feesReportStore.off('read_due_classwise_changed',ReadDueClasswiseChanged)
    })

   self.readStandard = () => {
       applyPlanStore.trigger('read_standards')
    }

    applyPlanStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()

    }

    self.getDueByClassMonth = () => {
    	var obj={}
    	  obj.standard_id = self.refs.standard_id.value

          self.loading = true
          feesReportStore.trigger('read_due_classwise', obj)
    }

    feesReportStore.on('read_due_classwise_changed',ReadDueClasswiseChanged)
    function ReadDueClasswiseChanged(classWiseDueFees, session_name){
      self.grand_total = 0
      self.classWiseDueFees = []
      self.classWiseDueFees = classWiseDueFees

       self.selectedClass = $("#standard_id option:selected").text()
       self.sessionName = session_name
       self.loading = false
      self.update()
    }
});
riot.tag2('employee-notification', '<section class=" is-fluid"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Employees Notification</h2> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"> <label class="label">Staff Type</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="emp_type_id" onchange="{getEmployeeData}"> <option each="{staffDepartments}" riot-value="{emp_type_id}">{emp_type} <option value="-1">ALL</option> </option> </select> </div> </div> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="get_message_type" onchange="{getMessageType}"> <option value="Email">Email</option> <option value="SMS">SMS</option> <option value="Both">Both</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" show="{choose_button}" onclick="{getStaffManually}">Choose Staff Manually </button> <button class="button has-text-weight-bold" onclick="{closeStaffManually}" show="{close_button}">Close </button> </div> </div> </div> <input class="input" style="margin-bottom: 12px;" type="text" id="employee_subject" ref="employee_subject" show="{employee_subject}" placeholder="SUBJECT"><br> <textarea class="textarea" id="employee_message" ref="employee_message" placeholder="MESSAGE"></textarea><br> <button class="button is-info is-pulled-right ml5" onclick="{clear}">Reset</button> <button class="button is-danger is-pulled-right" onclick="{sendEmployeeNotification}">Send</button> <table class="table is-fullwidth is-striped is-hoverable is-narrow" show="{employee_table}"> <thead> <tr> <th>#</th> <th>Emp Id</th> <th>Name</th> <th>Department</th> <th>Designation</th> <th>Mobile</th> <th>Email</th> <th style="text-align:center;"> <input type="checkbox" id="checkFacultyName" onclick="{selectAll}"> </th> </tr> </thead> <tbody> <tr each="{emp, i in employees}"> <td>{i+1}</td> <td>{emp.employee_id}</td> <td>{emp.employee_name}</td> <td>{emp.department_name}</td> <td>{emp.designation}</td> <td>{emp.mobile}</td> <td>{emp.email}</td> <td style="width:2%; text-align:center;"><input type="checkbox" checked="{emp.done}" id="{\'addEmployeeName\' + emp.employee_id}" onclick="{selectEmployee.bind(this,emp)}"></td> </tr> </tbody> </table> </section>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.addAllCheckBox=true;
      self.addCheckBox=true;
      self.staff_name = false;

      self.choose_button = true
      self.close_button = false
      self.update()
      self.readDepartments()

    })

     self.getMessageType = () =>{
      if(self.refs.get_message_type.value =='SMS'){
        self.employee_subject = false
      }else if(self.refs.get_message_type.value =='Email'){
        self.employee_subject = true
      }else{
        self.employee_subject = true
      }
    }

    self.getStaffManually = () =>{
      self.employee_table= true;
      self.choose_button = false
      self.close_button = true
    }

    self.closeStaffManually = () =>{
      self.employee_table = false;
      self.choose_button = true
      self.close_button = false
    }
    self.readDepartments = () => {
      console.log('readDepartments for employee tag file')
        employeeNotificationStore.trigger('read_staff_departments')
    }
    self.on("unmount", function(){
      employeeNotificationStore.off('employees_changed', EmployeeChanged)
      employeeNotificationStore.off('employee_sms_changed',SendSmsChanged)
      employeeNotificationStore.off('employee_email_changed',SendEmailChanged)
    })

    self.getEmployeeData = ()=>{
      employeeNotificationStore.trigger('read_employees', self.refs.emp_type_id.value)
    }

    self.selectAll = () => {
      if($('#checkFacultyName').is(":checked")){
        self.employees.map(i=>{
            i.done = true;
            $('addEmployeeName'+i.employee_id).prop('checked', true);
          })
      }else{
        self.employees.map(i=>{
            i.done = false;
            $('addEmployeeName'+i.employee_id).prop('checked', false);

          })
      }
      console.log(self.employees)
    }

    self.selectEmployee = (item,event) => {
      item.done=!event.item.emp.done
      self.mobile = item.mobile;
        console.log(self.mobile)
    }

    self.sendEmployeeNotification = () => {
      let mobile='';
      let email='';
      self.employees.map( q => {
        if(q.done){
          if(mobile==''){
            mobile=q.mobile
          }else{
            mobile=mobile+','+q.mobile
          }

          if(email==''){
            email=q.email
          }else{
            email=email+','+q.email
          }
        }
      })

      console.log(mobile);
      console.log(email);
      if(self.refs.get_message_type.value =='SMS'){
        if(self.refs.employee_message.value == ""){
          toastr.error("Please enter Valid Message and try again")
          return;
        }
        employeeNotificationStore.trigger('send_sms',mobile,self.refs.employee_message.value)
      }else if(self.refs.get_message_type.value =='Email'){
        if(self.refs.employee_subject.value == ""){
          toastr.error("Please enter Valid Subject and try again")
          return;
        }
        if(self.refs.employee_message.value == ""){
          toastr.error("Please enter Valid Message and try again")
          return;
        }
        employeeNotificationStore.trigger('send_email',email,self.refs.employee_subject.value,self.refs.employee_message.value)
      }else if(self.refs.get_message_type.value=='Both'){
        employeeNotificationStore.trigger('send_sms',mobile,self.refs.employee_message.value)
        employeeNotificationStore.trigger('send_email',email,self.refs.employee_subject.value,self.refs.employee_message.value)
      }
    }

    self.clear = () => {
      self.refs.employee_subject.value = ''
      self.refs.employee_message.value = ''
    }

    employeeNotificationStore.on('read_employee_notification_changed', function(employees) {
      self.loading = false
      self.employees = employees
      self.update()
    })

    employeeNotificationStore.on('staff_departments_changed',DepartmentChanged)
    function DepartmentChanged(staff_departments){
      console.log(staff_departments)
      self.staffDepartments = []
      self.staffDepartments = staff_departments
      self.update()
      self.getEmployeeData()
    }
    employeeNotificationStore.on('employees_changed',EmployeeChanged)
    function EmployeeChanged(employees){
      console.log(employees)
      self.employees = []
      self.employees = employees
      self.employees.map(i=>{
      if(i.mobile==""){
        i.done = false;

        $('addEmployeeName' + i.mobile ).prop('checked', false);
      }else{
        i.done = true;
        $('addEmployeeName' + i.mobile ).prop('checked', true);
      }
      })
      self.update()
    }
    employeeNotificationStore.on('employee_sms_changed',SendSmsChanged)
    function SendSmsChanged(){
      self.refs.employee_subject.value = ''
      self.refs.employee_message.value = ''
      toastr.success('sms send successfully')
      self.update()
    }
    employeeNotificationStore.on('employee_email_changed',SendEmailChanged)
    function SendEmailChanged(){
      toastr.success('email send successfully')
      self.refs.employee_subject.value = ''
      self.refs.employee_message.value = ''
      self.update()
    }
});
riot.tag2('employee-type', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Employee Types</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Employee Type</label> </div> <div class="column is-narrow"> <input class="input form-control input" id="addEmployeeTypeInput" ref="addEmployeeTypeInput" tabindex="0" type="text" onkeyup="{addEnter}"> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readEmployeeTypes}" style="margin-right:2px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Employee Type</th> <th></th> </tr> </thead> <tbody> <tr each="{r, i in employeeTypes}"> <td>{i+1}</td> <td>{r.emp_type}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{r.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, r)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{r.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readEmployeeTypes()
    })
    self.on("unmount", function(){
      employeeTypeStore.off('employeeTypes_changed', EmployeeTypesChanged)
    })

    self.readEmployeeTypes = () => {
      self.loading=true
       employeeTypeStore.trigger('read_employeeTypes')
    }

     self.add = () => {
      if(!self.refs.addEmployeeTypeInput.value){
        toastr.info("Please enter Item and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          employeeTypeStore.trigger('add_employeeType', self.refs.addEmployeeTypeInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          employeeTypeStore.trigger('edit_employeeType', self.refs.addEmployeeTypeInput.value,
            self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.employeeTypes.map(r => {
          r.confirmDelete = false
          r.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.employeeTypes.map(r => {
        if(r.emp_type_id != e.item.r.emp_type_id){
          r.confirmDelete = false
        }else{
          r.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      console.log(e.item.r.emp_type_id);
      employeeTypeStore.trigger('delete_employeeType', e.item.r.emp_type_id)
    }

    self.edit = (r,e) => {
      console.log(r)
      self.title='Update'
      self.refs.addEmployeeTypeInput.value = r.emp_type
      self.edit_id = r.emp_type_id
    }

    employeeTypeStore.on('employeeTypes_changed',EmployeeTypesChanged)
    function EmployeeTypesChanged(employeeTypes,emp_id){
      console.log(employeeTypes)
      self.title='Create'
      self.refs.addEmployeeTypeInput.value = ''
      self.loading = false
      self.emp_id=emp_id
      self.employeeTypes = employeeTypes
      self.update()
      console.log(self.employeeTypes)
    }

});
riot.tag2('employment-status', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Employment Status Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Employment Status</label> </div> <div class="column is-narrow"> <input class="input form-control input" id="addEmploymentStatusInput" ref="addEmploymentStatusInput" tabindex="0" type="text" onkeyup="{addEnter}"> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readEmploymentStatus}" style="margin-right:2px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>#</th> <th>Employment Status</th> <th></th> </tr> </thead> <tbody> <tr each="{d, i in employmentStatus}"> <td>{i + 1}</td> <td>{d.employment_status}</td> <td class="has-text-right no-print "> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{d.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, d)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{d.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readEmploymentStatus()
    })

     self.on("unmount", function(){
      employmentStatusStore.off('employment_status_changed', EmploymentStatusChanged)
    })

    self.readEmploymentStatus = () => {
      self.loading=true
       employmentStatusStore.trigger('read_employment_status')
    }

     self.add = () => {
      if(!self.refs.addEmploymentStatusInput.value){
        toastr.info("Please enter Levle and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          employmentStatusStore.trigger('add_employment_status', self.refs.addEmploymentStatusInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          employmentStatusStore.trigger('edit_employment_status', self.refs.addEmploymentStatusInput.value,
            self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.employmentStatus.map(d => {
          d.confirmDelete = false
          d.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.employmentStatus.map(d => {
        if(d.employment_status_id != e.item.d.employment_status_id){
          d.confirmDelete = false
        }else{
          d.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      employmentStatusStore.trigger('delete_employment_status', e.item.d.employment_status_id)
    }

    self.edit = (d,e) => {
      console.log(d)
      self.title='Update'
      self.refs.addEmploymentStatusInput.value = d.employment_status
      self.edit_id = d.employment_status_id
    }

    employmentStatusStore.on('employment_status_changed',EmploymentStatusChanged)
    function EmploymentStatusChanged(employmentStatus){
      console.log('employment_status_changed1')
      console.log(employmentStatus)
      self.title='Create'
      self.refs.addEmploymentStatusInput.value = ''
      self.loading = false
      self.employmentStatus = employmentStatus
      self.update()
      console.log('self.employmentStatus')
    }

});
riot.tag2('estimated-fees', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="date input" id="start_date" ref="start_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="date input" id="end_date" ref="end_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" onchange="{readStandardSection}"> <option></option> <option each="{standards}" riot-value="{standard_id}">{standard}</option> <option value="-1">All</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Section</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="section_id" onchange="{getStudentData}"> <option each="{filteredSections}" riot-value="{section_id}">{section}</option> <option value="-1">All</option> </select> </div> </div> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{getEstematedFees}"> GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Estimated Fees Report</p> <p class="has-text-centered">Session: {sessionName}</p> <p class="has-text-centered">Date: {fromSelectedDate} - {toSelectedDate} Class:{selectedClass} </p> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th class="slNo">#</th> <th>Header</th> <th>Amount</th> </tr> </thead> <tbody> <tr each="{cd, i in estimatedFees}"> <td>{i + 1}</td> <td>{cd.total}</td> <td class="has-text-right">{cd.total_fees}</td> </tr> <tr> <th class="has-text-right" colspan="2">Grand Total</th> <th class="has-text-right amount">{grand_total}</th> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      flatpickr(".date", {
    	allowInput: true,
    	dateFormat: "d/m/Y",
  		})
      self.readSection()
      self.readStandard()
      self.update();
    })

    self.on("unmount", function(){
      applyPlanStore.off('read_standard_changed',StandardChanged)
      applyPlanStore.off('read_section_changed',SectionChanged)
      feesReportStore.off('read_estimated_fees_changed',ReadEstimatedFeesChanged)
    })

   self.readStandard = () => {
       applyPlanStore.trigger('read_standards')
    }
    self.readSection = () => {
       applyPlanStore.trigger('read_sections')

    }

    self.readStandardSection = () => {

       console.log('filter')
       self.filteredSections = []
       self.filteredSections = self.sections.filter(s => {
       	return s.standard_id == self.refs.standard_id.value
       })
    }

    self.getEstematedFees = () => {
    	var startDate = document.getElementById("start_date").value
    	var endDate = document.getElementById("end_date").value
    	if(!self.refs.start_date.value){
    		toastr.info("Pleae enter From Date and try again")
    	}else if(!self.refs.end_date.value){
    		toastr.info("Pleae enter End Date and try again")
    	}else if((Date.parse(startDate)> Date.parse(endDate))){
           toastr.info("From date can't be greater")
    	}else{
    	var obj={}
    	  obj.standard_id = self.refs.standard_id.value
    	  obj.section_id = self.refs.section_id.value
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          self.loading = true
          feesReportStore.trigger('read_estimated_fees', obj)
       }
    }
    applyPlanStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()

      console.log(self.standards)
    }
    applyPlanStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections
      self.section_id = sections[0].section_id

      self.update()
      console.log(self.sections)
    }

    feesReportStore.on('read_estimated_fees_changed',ReadEstimatedFeesChanged)
    function ReadEstimatedFeesChanged(estimatedFees, session_name){
      self.grand_total = 0
      self.estimatedFees = []
      console.log("-----estimated-fees----------")
      console.log(estimatedFees)
      self.estimatedFees = estimatedFees
      self.loading = false
       self.estimatedFees.map(c => {
          self.grand_total +=Number(c.total_fees)
      })
          self.sessionName = session_name
          self.selected_start_date = self.refs.start_date.value
          self.selected_end_date = self.refs.end_date.value
          self.selectedClass = 'format class-section'
      self.update()
    }
});
riot.tag2('event-master', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_event_master == \'event-type\'}" href="#/master/event-master/event-type"> <span>Event Type</span> </a> </p> <p class="control"> <a class="button {is-active: selected_event_master == \'new-event\'}" href="#/master/event-master/new-event"> <span>Event</span> </a> </p> <p class="control"> <a class="button {is-active: selected_event_master == \'class-holiday\'}" href="#/master/event-master/class-holiday"> <span>Class Holiday</span> </a> </p> </div> <div id="event-master-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_event_master')
    console.log(opts.selected_event_master)
    if(!opts.selected_event_master){
      self.selected_event_master = 'event-type'
    }else{
      self.selected_event_master = opts.selected_event_master
    }
});



riot.tag2('event-type', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Event Type</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Event type</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addEventTypeInput" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readEventTypes}" style="margin-left:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Event Type</th> <th></th> </tr> </thead> <tbody> <tr each="{r, i in eventTypes}"> <td>{i+1}</td> <td>{r.event_type}</td> <td class="has-text-right no-print no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{r.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, r)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{r.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readEventTypes()
    })
    self.on("unmount", function(){
      eventTypeStore.off('eventTypes_changed', EventTypesChanged)
    })

    self.readEventTypes = () => {
      self.loading=true
       eventTypeStore.trigger('read_eventTypes')
    }

     self.add = () => {
      if(!self.refs.addEventTypeInput.value){
        toastr.info("Please enter Item and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          eventTypeStore.trigger('add_eventType', self.refs.addEventTypeInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          eventTypeStore.trigger('edit_eventType', self.refs.addEventTypeInput.value,
            self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.eventTypes.map(r => {
          r.confirmDelete = false
          r.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.eventTypes.map(r => {
        if(r.event_type_id != e.item.r.event_type_id){
          r.confirmDelete = false
        }else{
          r.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      console.log(e.item.r.event_type_id);
      eventTypeStore.trigger('delete_eventType', e.item.r.event_type_id)
    }

    self.edit = (r,e) => {
      console.log(r)
      self.title='Update'
      self.refs.addEventTypeInput.value = r.event_type
      self.edit_id = r.event_type_id
    }

    eventTypeStore.on('eventTypes_changed',EventTypesChanged)
    function EventTypesChanged(eventTypes){
      console.log(eventTypes)
      self.title='Create'
      self.refs.addEventTypeInput.value = ''
      self.loading = false
      self.eventTypes = eventTypes
      self.update()
      console.log(self.eventTypes)
    }

});
riot.tag2('event', '<section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Activity Event Management</h2> <div class="flex items-center mt-2 mb-6 no-print"> <div class="bg-green py-1 rounded w-10"> <div class="bg-grey h-px flex-auto"></div> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"> <label class="label">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="category_id"> <option each="{categories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Event</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addEventInput" type="text"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Category</th> <th>Event</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in eventDataItems}"> <td>{i+1}</td> <td>{ev.category_name}</td> <td>{ev.event_name}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ev.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, ev)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readCategories()
      self.readEvents()
    })
    self.on("unmount", function(){
      eventStore.off('add_event_changed', AddEventsChanged)
      eventStore.off('read_event_changed', ReadEventsChanged)
      eventStore.off('read_categories_changed',CategoriesChanged)
      eventStore.off('edit_event_changed',EditEventsChanged)
      eventStore.off('delete_event_changed',DeleteEventsChanged)
    })

    self.readCategories = () => {
       eventStore.trigger('read_categories')
    }

    self.readEvents = () => {
       eventStore.trigger('read_events')
    }

     self.add = () => {
      if(!self.refs.addEventInput.value){
        toastr.info("Please enter Event and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          eventStore.trigger('add_event', self.refs.addEventInput.value,
           self.refs.category_id.value)
        }else if(self.title=='Update'){
          console.log('update')
          eventStore.trigger('edit_event', self.refs.addEventInput.value,
            self.refs.category_id.value, self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.events.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.events.map(ev => {
        if(ev.event_id != e.item.ev.event_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      eventStore.trigger('delete_event', e.item.ev.event_id)
    }

    self.edit = (ev,e) => {
      console.log(ev)
      self.title='Update'
      self.refs.addEventInput.value = ev.events
      self.refs.category_id.value = ev.category_id
      self.edit_id = ev.event_id
    }

    eventStore.on('add_event_changed',AddEventsChanged)
    function AddEventsChanged(events){
      console.log(events)
      self.title='Create'
      self.refs.addEventInput.value = ''
      self.refs.category_id.value = ''
      self.loading = false
      self.events = events
      self.update()
      self.readEvents()
      console.log(self.events)
    }

    eventStore.on('edit_event_changed',EditEventsChanged)
    function EditEventsChanged(events){
      console.log(events)
      self.title='Create'
      self.refs.addEventInput.value = ''
      self.refs.category_id.value = ''
      self.loading = false
      self.events = events
      self.update()
      self.readEvents()
      console.log(self.events)
    }

    eventStore.on('delete_event_changed',DeleteEventsChanged)
    function DeleteEventsChanged(events){
      console.log(events)
      self.title='Create'
      self.refs.addEventInput.value = ''
      self.refs.category_id.value = ''
      self.loading = false
      self.events = events
      self.update()
      self.readEvents()
      console.log(self.events)
    }

    eventStore.on('read_event_changed',ReadEventsChanged)
    function ReadEventsChanged(events){
      console.log(events)
      self.title='Create'
      self.refs.addEventInput.value = ''
      self.loading = false
      self.events = events
      self.eventDataItems = []
      self.eventDataItems = events
      self.update()
      console.log(self.events)
    }

    eventStore.on('read_categories_changed',CategoriesChanged)
    function CategoriesChanged(categories){
      console.log(categories)
      self.categories = categories
      self.update()
      console.log(self.categories)
    }

});
riot.tag2('ex-staff', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Ex-Employee Details</h2> <div class="box no-print"> <div class="columns"> <div class="column "> <div class="control"> <div class="select"> <select ref="emp_type_id" onchange="{ReadExStaff}"> <option riot-value="{-1}">All</option> <option each="{employeeTypes}" riot-value="{emp_type_id}">{emp_type} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-primary has-text-weight-bold is-pulled-right is-small" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right is-small" onclick="{ReadExStaff}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th>Emp ID</th> <th>Name</th> <th>DOJ</th> <th>DOL</th> <th>Remarks</th> <th>Mobile</th> <th>Email</th> </tr> </thead> <tbody> <tr each="{st, i in exStaffs}"> <td>{i+1}</td> <td>{st.employee_id}</td> <td>{st.first_name} {st.middle_name} {st.last_name}</td> <td>{st.doj}</td> <td>{st.dol}</td> <td>{st.leaving_remark}</td> <td>{st.mobile}</td> <td>{st.email}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.role = getCookie('role')
    	self.readEmployeeTypes()
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
      staffStore.off('read_ex_staff_changed',ReadExStaffChanged)
      employeeTypeStore.off('employeeTypes_changed',EmployeeTypesChanged)
    })

    self.ReadExStaff = () =>{
    	self.loading=true
       staffStore.trigger('read_ex_staff', self.refs.emp_type_id.value)
    }
    self.readEmployeeTypes = () => {
       employeeTypeStore.trigger('read_employeeTypes')
    }

    employeeTypeStore.on('employeeTypes_changed',EmployeeTypesChanged)
    function EmployeeTypesChanged(employeeTypes){

      self.title='Create'
      self.loading = false
      self.employeeTypes = employeeTypes
      self.update()
      self.ReadExStaff()
    }
    staffStore.on('read_ex_staff_changed',ReadExStaffChanged)
    function ReadExStaffChanged(exStaffs){

      self.title='Create'
      self.loading = false
      self.exStaffs = exStaffs
      self.update()

    }

});
riot.tag2('exam-scheme', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{view==\'exam-schemes\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Exam Scheme</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{openExamSchemeModal}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> <button class="button is-warning is-rounded" onclick="{readExamSchemes}" style="margin-left:2px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="slno">SL</th> <th>Scheme Name</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in examSchemes}"> <td>{i+1}</td> <td>{c.scheme_name}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, c)}">Edit</a></span> <span><a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> <span><a class="button is-small is-rounded" rel="nofollow" onclick="{readExams.bind(this, c)}">Exams</a></span> <span><a class="button is-small is-rounded" rel="nofollow" onclick="{readClasses.bind(this, c)}">Classes</a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <div id="examSchemeModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">{title} Exam Scheme</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role">Exam Scheme</label> <div class="control"> <input class="input" type="text" ref="schemeNameInput"> </div> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-danger" onclick="{add}">{title}</button> <button class="button" id="item-modal-close" onclick="{closeExamSchemeModal}">Cancel</button> </footer> </div> </div> <section class=" is-fluid" show="{view==\'exams\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Exam Under : {exam_scheme}</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{backToExamSchemes}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-warning is-rounded" onclick="{openExamsForm}" style="margin-left:2px"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> <button class="button is-warning is-rounded" onclick="{refreshExams}" style="margin-left:2px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="slno">SL</th> <th>Exam</th> <th>Start Date</th> <th>End Date</th> <th>Last Login Date</th> <th>Assessment Type</th> <th>Exam Group</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in exams}"> <td>{i+1}</td> <td>{c.exam_type}</td> <td>{c.start_date}</td> <td>{c.end_date}</td> <td>{c.last_login_date}</td> <td>{c.assessment}</td> <td>{c.exam_group}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{editExam.bind(this, c)}">Edit</a></span> <span><a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmExamDelete}">Delete</a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{deleteExam}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelExamDeleteOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section class=" is-fluid" show="{view==\'exams-form\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title_exams} Exam Under : {exam_scheme}</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{backToExams}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role">Exam</label> <div class="control"> <input class="input" type="text" ref="examTypeInput"> </div> </div> <div class="field"> <label class="label" for="role">End Date</label> <div class="control"> <input class="input date" type="text" ref="endDateInput"> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Start Date</label> <div class="control"> <input class="input date" type="text" ref="startDateInput"> </div> </div> <div class="field"> <label class="label" for="role">Last Login Date</label> <div class="control"> <input class="input date" type="text" ref="lastLoginInput"> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Assessment Type</label> <div class="control"> <div class="select is-fullwidth"> <select ref="assessmentInput"> <option value="H">Half Yearly</option> <option value="F">Final</option> </select> </div> </div> </div> <div class="field"> <label class="label" for="role">Exam Group</label> <div class="control"> <div class="select is-fullwidth"> <select ref="examGroupInput"> <option>First</option> <option>Second</option> </select> </div> </div> </div> </div> </div> <div class="level"> <div class="level-left"> </div> <div class="level-right"> <button class="button is-danger" onclick="{addEditExam}">{title_exams}</button> <button class="button ml5" id="item-modal-close" onclick="{backToExams}">Cancel</button> </div> </div> </section> <section class=" is-fluid" show="{view==\'classes\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Classes Under : {exam_scheme}</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{backToExamSchemes}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-warning is-rounded ml5" onclick="{refreshClasses}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <div class="columns is-multiline is-mobile"> <div class="column"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="slno">SL</th> <th>Free Classes</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in freeClasses}"> <td>{i+1}</td> <td>{c.standard}</td> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'freeClassCheckBox\'+c.standard_id}" onclick="{selectFreeClass.bind(this,c)}"> </td> </tr> </tbody> </table> </div> <div class="column is-vertical-center is-narrow has-text-centered is-multiline"> <table> <tr> <td> <button class="button" onclick="{assignStandard}" style="margin-top:20px;">Assign classes <span style="margin-left:10px" class="fas fa-angle-double-right"></span></button> </td> </tr> <tr> <td> <button class="button" onclick="{freeUpStandard}" style="margin-top:20px;"><span style="margin-right:10px;" class="fas fa-angle-double-left"></span> Free up classes</button> </td> </tr> </table> </div> <div class="column"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th></th> <th class="slno">SL</th> <th>Assigned Classes</th> </tr> </thead> <tbody> <tr each="{c, i in assignedClasses}"> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'assignedClassCheckBox\'+c.standard_id}" onclick="{selectAssigndClass.bind(this,c)}"> </td> <td>{i+1}</td> <td>{c.standard}</td> </tr> </tbody> </table> </div> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title = 'Add'
      self.title_exams = 'Add'
      self.view = 'exam-schemes'
      self.loading = false;
      self.update()
      flatpickr(".date", {
        allowInput: true,
        dateFormat: "d/m/Y",
      })
      self.readExamSchemes()
    })
    self.on("unmount", function(){
        examSchemeStore.off('exam_scheme_changed', ExamSchemesChanged)
        examSchemeStore.off('add_exam_scheme_changed',AddExamSchemesChanged)
        examSchemeStore.off('delete_exam_scheme_changed',DeleteExamSchemesChanged)
        examSchemeStore.off('read_exams_changed',ExamSChanged)
        examSchemeStore.off('add_exams_changed',ExamsAddChanged)
        examSchemeStore.off('delete_exam_changed',ExamsDeleteChanged)
        examSchemeStore.off('read_classes_changed',ReadClassesChanged)
        examSchemeStore.off('assign_standard_changed',AssignStandardChanged)
    })

    self.readExamSchemes = () => {
       self.loading = true;
       examSchemeStore.trigger('read_exam_schemes')
    }

    self.openExamSchemeModal = () => {
      self.title = 'Add'
      $("#examSchemeModal").addClass("is-active");
    }

    self.closeExamSchemeModal = () => {
      $("#examSchemeModal").removeClass("is-active");
    }

    self.add = () => {
      if(!self.refs.schemeNameInput.value){
        toastr.info("Please enter Exam Scheme and try again")
      }else{
        self.loading = true
        if(self.title=='Add'){
          examSchemeStore.trigger('add_exam_scheme', self.refs.schemeNameInput.value)
        }else if(self.title=='Update'){
          examSchemeStore.trigger('update_exam_scheme', self.refs.schemeNameInput.value,self.edit_id)
        }
      }
    }

    self.edit = (c,e) => {
      console.log(c)
      self.title='Update'
      $("#examSchemeModal").addClass("is-active");
      self.refs.schemeNameInput.value = c.scheme_name
      self.edit_id = c.scheme_id
    }

    self.cancelOperation = (e) => {
      self.examSchemes.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.examSchemes.map(c => {
        if(c.scheme_id != e.item.c.scheme_id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      examSchemeStore.trigger('delete_exam_scheme', e.item.c.scheme_id)
    }

    self.readExams = (c,e) => {
      console.log(c)
      self.exam_scheme = c.scheme_name
      self.scheme_id = c.scheme_id
      self.loading = true
      examSchemeStore.trigger('read_exams', c.scheme_id)
    }

    self.refreshExams = () =>{
      self.loading = true
      examSchemeStore.trigger('read_exams', self.scheme_id)
    }

    self.openExamsForm = () => {
      self.title_exams = 'Add'
      self.view = 'exams-form'
    }

    self.closeExamsModal = () => {
      $("#examsModal").removeClass("is-active");
    }

    self.backToExamSchemes = () => {
      self.view = 'exam-schemes'
    }

    self.backToExams = () => {
      self.view = 'exams'
    }

    self.addEditExam = () =>{
      let error = '';

      console.log(error.length)

      if(self.refs.examTypeInput.value==''){
        error = error + "Please Enter Exam, "
      }

      if(self.refs.endDateInput.value==''){
        error = error + "Please Enter End Date, "
      }

      if(self.refs.startDateInput.value==''){
        error = error + "Please Enter Start Date, "
      }

      if(self.refs.assessmentInput.value==''){
        error = error + "Please Enter Assessment Type, "
      }

      if(self.refs.lastLoginInput.value==''){
        error = error + "Please Enter Last Login Date, "
      }

      if(self.refs.examGroupInput.value==''){
        error = error + "Please Enter Exam Group, "
      }

      console.log(error)
      console.log(error.length)

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        var obj = {}
        obj['scheme_id'] = self.scheme_id
        obj['exam_type'] = self.refs.examTypeInput.value
        obj['assessment'] = self.refs.assessmentInput.value
        obj['exam_group'] = self.refs.examGroupInput.value
        obj['start_date'] = convertDate(self.refs.startDateInput.value)
        obj['end_date'] = convertDate(self.refs.endDateInput.value)
        obj['last_login_date'] = convertDate(self.refs.lastLoginInput.value)
        console.log(obj)

        self.loading = true
        if(self.title_exams=='Add'){
          examSchemeStore.trigger('add_exam', obj)
        }else if(self.title_exams=='Update'){
          examSchemeStore.trigger('update_exam', obj,self.edit_exam_type_id)
        }

      }

    }

    self.clearExamForm = () => {
      self.refs.examTypeInput.value = ''
      self.refs.endDateInput.value = ''
      self.refs.startDateInput.value = ''
      self.refs.assessmentInput.value = ''
      self.refs.lastLoginInput.value = ''
      self.refs.examGroupInput.value = ''
    }

    self.editExam = (c,e) => {
      console.log(c)
      self.title_exams='Update'
      self.view = 'exams-form'
      self.refs.examTypeInput.value = c.exam_type
      self.refs.endDateInput.value = c.end_date
      self.refs.startDateInput.value = c.start_date
      self.refs.assessmentInput.value = c.assessment
      self.refs.lastLoginInput.value = c.last_login_date
      self.refs.examGroupInput.value = c.exam_group
      self.edit_exam_type_id = c.exam_type_id
    }

    self.cancelExamDeleteOperation = (e) => {
      self.exams.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }

    self.confirmExamDelete = (e) => {
      self.exams.map(c => {
        if(c.exam_type_id != e.item.c.exam_type_id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.deleteExam = (e) => {
      self.loading = true
      examSchemeStore.trigger('delete_exam', e.item.c.exam_type_id)
    }

    self.readClasses = (c) => {
      self.exam_scheme = c.scheme_name
      self.scheme_id = c.scheme_id
      self.loading = true
      examSchemeStore.trigger('read_classes', c.scheme_id)
    }

    self.refreshClasses = () =>{
      self.loading = true
      examSchemeStore.trigger('read_classes', self.scheme_id)
    }

    self.selectFreeClass = (standard,e) => {
        self.freeClasses.map(i=>{
          if(standard.standard_id==i.standard_id){
            i.selected=!i.selected
          }
        })
    }

    self.selectAssigndClass = (standard,e) => {
        self.assignedClasses.map(i=>{
          if(standard.standard_id==i.standard_id){
            i.selected=!i.selected
          }
        })
        console.log(self.assignedClasses)
    }

    self.assignStandard = () =>{
      let classes_to_assign = self.freeClasses.filter(c=>{
        return c.selected == true
      })
      self.loading = true
      examSchemeStore.trigger('assign_standard', self.scheme_id, classes_to_assign)
    }

    self.freeUpStandard = () =>{
      let classes_to_free = self.assignedClasses.filter(c=>{
        return c.selected == true
      })

      examSchemeStore.trigger('free_up_standard', self.scheme_id, classes_to_free)
    }

    examSchemeStore.on('exam_scheme_changed',ExamSchemesChanged)
    function ExamSchemesChanged(examSchemes){
      console.log(examSchemes)
      self.loading = false
      self.examSchemes = []
      self.examSchemes = examSchemes
      self.update()
      console.log(self.examSchemes)
    }

    examSchemeStore.on('add_exam_scheme_changed',AddExamSchemesChanged)
    function AddExamSchemesChanged(examSchemes){
      self.refs.schemeNameInput.value=''
      self.closeExamSchemeModal()
      self.loading = false
      self.examSchemes = []
      self.examSchemes = examSchemes
      self.update()
      console.log(self.examSchemes)
    }

    examSchemeStore.on('delete_exam_scheme_changed',DeleteExamSchemesChanged)
    function DeleteExamSchemesChanged(examSchemes){
      self.loading = false
      self.examSchemes = []
      self.examSchemes = examSchemes
      self.update()
      console.log(self.examSchemes)
    }

    examSchemeStore.on('read_exams_changed',ExamSChanged)
    function ExamSChanged(exams){
      self.loading = false
      self.exams = []
      self.exams = exams
      self.view='exams'
      self.update()
    }

    examSchemeStore.on('add_exam_changed',ExamsAddChanged)
    function ExamsAddChanged(exams){
      self.loading = false
      self.clearExamForm()
      self.view='exams'
      self.exams = []
      self.exams = exams
      self.update()
    }

    examSchemeStore.on('delete_exam_changed',ExamsDeleteChanged)
    function ExamsDeleteChanged(exams){
      self.loading = false
      self.exams = []
      self.exams = exams
      self.update()
    }

    examSchemeStore.on('read_classes_changed',ReadClassesChanged)
    function ReadClassesChanged(freeClasses,assignedClasses){
      self.loading = false
      self.freeClasses = []
      self.freeClasses = freeClasses
      self.freeClasses.map(c => {
          c.selected=false
      })
      console.log(freeClasses)
      self.assignedClasses = []
      self.assignedClasses = assignedClasses
      self.assignedClasses.map(c => {
          c.selected=false
      })
      self.view='classes'
      self.update()
    }

    examSchemeStore.on('assign_standard_changed',AssignStandardChanged)
    function AssignStandardChanged(classes_assigned){
      self.loading = false

      self.refreshClasses()

    }

});
riot.tag2('subject-group-map', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{view==\'subject-group-maps\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Subject Group</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{openSubjectGroupModal}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> <button class="button is-warning is-rounded" onclick="{readSubjectGroupMap}" style="margin-left:2px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="slno">SL</th> <th>Subject Group</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in subjectGroupMaps}"> <td>{i+1}</td> <td>{c.subject_group}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, c)}">Edit</a></span> <span><a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> <span><a class="button is-small is-rounded" rel="nofollow" onclick="{readSubjects.bind(this, c)}">Subjects</a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <div id="subjectGroupModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">{title} Subject Group</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role">Subject Group</label> <div class="control"> <input class="input" type="text" ref="subjectGroupInput"> </div> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-danger" onclick="{add}">{title}</button> <button class="button" id="item-modal-close" onclick="{closeSubjectGroupModal}">Cancel</button> </footer> </div> </div> <section class=" is-fluid" show="{view==\'subjects\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Subjects Under : {subject_group}</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{backToSubjectGroupMap}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-warning is-rounded ml5" onclick="{refreshSubjects}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <div class="columns is-multiline is-mobile"> <div class="column"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="slno">SL</th> <th>Free Subjects</th> <th>Short Name</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in freeSubjects}"> <td>{i+1}</td> <td>{c.subject_name}</td> <td>{c.subject_short_name}</td> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'freeSubjectCheckBox\'+c.subject_id}" onclick="{selectFreeSubject.bind(this,c)}"> </td> </tr> </tbody> </table> </div> <div class="column is-vertical-center is-narrow has-text-centered is-multiline"> <table> <tr> <td> <button class="button" onclick="{assignSubjects}" style="margin-top:20px;">Assign subjects <span style="margin-left:10px" class="fas fa-angle-double-right"></span></button> </td> </tr> <tr> <td> <button class="button" onclick="{freeUpStandard}" style="margin-top:20px;"><span style="margin-right:10px;" class="fas fa-angle-double-left"></span> Free up subjects</button> </td> </tr> </table> </div> <div class="column"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th></th> <th class="slno">SL</th> <th>Assigned Subjects</th> <th>Short Name</th> </tr> </thead> <tbody> <tr each="{c, i in assignedSubjects}"> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'assignedSubjectCheckBox\'+c.subject_id}" onclick="{selectAssigndSubject.bind(this,c)}"> </td> <td>{i+1}</td> <td>{c.subject_name}</td> <td>{c.subject_short_name}</td> </tr> </tbody> </table> </div> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title = 'Add'
      self.title_exams = 'Add'
      self.view = 'subject-group-maps'
      self.loading = false;
      self.update()
      flatpickr(".date", {
        allowInput: true,
        dateFormat: "d/m/Y",
      })
      self.readSubjectGroupMap()
    })
    self.on("unmount", function(){
      examSubjectGroupMapStore.off('subject_group_changed', SubjectGroupMapChanged)
      examSubjectGroupMapStore.off('add_subject_group_changed',AddSubjectGroupMapChanged)
      examSubjectGroupMapStore.off('delete_subject_group_changed',DeleteSubjectGroupMapChanged)
      examSubjectGroupMapStore.off('read_subjects_changed',ReadSubjectsChanged)
      examSubjectGroupMapStore.off('assign_subjects_changed',AssignStandardChanged)
    })

    self.readSubjectGroupMap = () => {
       self.loading = true;
       examSubjectGroupMapStore.trigger('read_subject_groups')
    }

    self.openSubjectGroupModal = () => {
      self.title = 'Add'
      $("#subjectGroupModal").addClass("is-active");
    }

    self.closeSubjectGroupModal = () => {
      $("#subjectGroupModal").removeClass("is-active");
    }

    self.add = () => {
      if(!self.refs.subjectGroupInput.value){
        toastr.info("Please enter Subject Group and try again")
      }else{
        self.loading = true
        if(self.title=='Add'){
          examSubjectGroupMapStore.trigger('add_subject_group', self.refs.subjectGroupInput.value)
        }else if(self.title=='Update'){
          examSubjectGroupMapStore.trigger('update_subject_group', self.refs.subjectGroupInput.value,self.edit_id)
        }
      }
    }

    self.edit = (c,e) => {
      console.log(c)
      self.title='Update'
      $("#subjectGroupModal").addClass("is-active");
      self.refs.subjectGroupInput.value = c.subject_group
      self.edit_id = c.id
    }

    self.cancelOperation = (e) => {
      self.subjectGroupMaps.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.subjectGroupMaps.map(c => {
        if(c.id != e.item.c.id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      examSubjectGroupMapStore.trigger('delete_subject_group', e.item.c.id)
    }

    self.readSubjects = (c) => {
      self.subject_group = c.subject_group
      self.id = c.subject_group
      self.loading = true
      examSubjectGroupMapStore.trigger('read_subjects', c.subject_group)
    }

    self.refreshSubjects = () =>{
      self.loading = true
      examSubjectGroupMapStore.trigger('read_subjects', self.id)
    }

    self.selectFreeSubject = (subject,e) => {
        self.freeSubjects.map(i=>{
          if(subject.subject_id==i.subject_id){
            i.selected=!i.selected
          }
        })
    }

    self.selectAssigndSubject = (subject,e) => {
        self.assignedSubjects.map(i=>{
          if(subject.subject_id==i.subject_id){
            i.selected=!i.selected
          }
        })
        console.log(self.assignedSubjects)
    }

    self.assignSubjects = () =>{
      let subjects_to_assign = self.freeSubjects.filter(c=>{
        return c.selected == true
      })
      console.log(self.id)
      console.log(subjects_to_assign)
      self.loading = true
      examSubjectGroupMapStore.trigger('assign_subjects', self.id, subjects_to_assign)
    }

    self.freeUpStandard = () =>{
      let subjects_to_free = self.assignedSubjects.filter(c=>{
        return c.selected == true
      })

      examSubjectGroupMapStore.trigger('free_up_subject', self.id, subjects_to_free)
    }
    self.backToSubjectGroupMap = () =>{
      self.view='subject-group-maps'
    }

    examSubjectGroupMapStore.on('subject_group_changed',SubjectGroupMapChanged)
    function SubjectGroupMapChanged(subjectGroupMaps){
      console.log(subjectGroupMaps)
      self.loading = false
      self.subjectGroupMaps = []
      self.subjectGroupMaps = subjectGroupMaps
      self.update()
      console.log(self.subjectGroupMaps)
    }

    examSubjectGroupMapStore.on('add_subject_group_changed',AddSubjectGroupMapChanged)
    function AddSubjectGroupMapChanged(subjectGroupMaps){
      self.refs.subjectGroupInput.value=''
      self.closeSubjectGroupModal()
      self.loading = false
      self.subjectGroupMaps = []
      self.subjectGroupMaps = subjectGroupMaps
      self.update()
      console.log(self.subjectGroupMaps)
    }

    examSubjectGroupMapStore.on('delete_subject_group_changed',DeleteSubjectGroupMapChanged)
    function DeleteSubjectGroupMapChanged(subjectGroupMaps){
      self.loading = false
      self.subjectGroupMaps = []
      self.subjectGroupMaps = subjectGroupMaps
      self.update()
      console.log(self.subjectGroupMaps)
    }

    examSubjectGroupMapStore.on('read_subjects_changed',ReadSubjectsChanged)
    function ReadSubjectsChanged(freeSubjects,assignedSubjects){
      self.loading = false
      self.freeSubjects = []
      self.freeSubjects = freeSubjects
      self.freeSubjects.map(c => {
          c.selected=false
      })
      console.log(freeSubjects)
      self.assignedSubjects = []
      self.assignedSubjects = assignedSubjects
      self.assignedSubjects.map(c => {
          c.selected=false
      })
      self.view='subjects'
      self.update()
    }

    examSubjectGroupMapStore.on('assign_subjects_changed',AssignStandardChanged)
    function AssignStandardChanged(subjects_assigned){
      self.loading = false

      self.refreshSubjects()

    }

});
riot.tag2('fee-head', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Fee Head Management</h2> <div class="flex items-center mt-2 mb-6 no-print"> <div class="bg-green py-1 rounded w-10"> <div class="bg-grey h-px flex-auto"></div> </div> </div> <div class="box"> <div class="columns"> <div class="column is-half"> <div class="field"> <label class="label" for="role">Head</label> <div class="control"> <input class="input" type="text" ref="addHeadInput" onkeyup="{addEnter}"> </div> </div> </div> <div class="column is-narrow"> <div class="field"> <div class="control"> <button disabled="{loading}" class="button is-danger has-text-weight-bold adjusted-top" onclick="{add}">{title}</button> </div> </div> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>#</th> <th>Head</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in heads}"> <td>{i+1}</td> <td>{c.head}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, c)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
 var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.loading = false
      self.update()
      self.readHeads()
    })
    self.on("unmount", function(){
      feeHeadStore.off('heads_changed', HeadsChanged)
    })

    self.readHeads = () => {
       feeHeadStore.trigger('read_heads')
    }

    self.add = () => {
      if(!self.refs.addHeadInput.value){
        toastr.info("Please enter Head and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          feeHeadStore.trigger('add_head', self.refs.addHeadInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          feeHeadStore.trigger('edit_head', self.refs.addHeadInput.value,
            self.head_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

    self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.edit = (c,e) => {
   	  console.log("here");
      console.log(c)
      self.title='Update'
      self.refs.addHeadInput.value = c.head
      self.head_id = c.head_id
    }

    self.cancelOperation = (e) => {
      self.heads.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.heads.map(c => {
        if(c.head_id != e.item.c.head_id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      feeHeadStore.trigger('delete_head', e.item.c.head_id)
    }

    feeHeadStore.on('heads_changed',HeadsChanged)
    function HeadsChanged(heads){
      console.log(heads)
      self.title='Create'
      self.refs.addHeadInput.value = ''
      self.loading = false
       self.heads = []
      self.heads = heads
      self.loading = false
      self.update()
      console.log(self.heads)
    }

});
riot.tag2('fee-plan', '<loading-bar if="{loading}"></loading-bar> <section class="container is-fluid" show="{fee_plan_view ==\'show_fee_plan\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Fee Plan Management</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{add_new_fee_plan}"> <span class="icon"> <span class="fas fa-plus"></span> </span> <span>Add Fee Plan</span> </button> <button disabled="{loading}" class="button is-warning is-rounded" onclick="{readFeePlans}" style="margin-left:2px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Fee Plan Name</th> <th>Standard</th> <th></th> </tr> </thead> <tbody> <tr each="{s, i in feePlans}"> <td>{i+1}</td> <td>{s.fee_plan_name}</td> <td>{s.standard}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{s.confirmDelete}"> <span><a class="button is-small is-rounded " onclick="{viewFeeSlip.bind(this, s)}">View/Edit/Del Slips</a></span> <span><a class="button is-small is-rounded is-success" onclick="{mapHead.bind(this, s.fee_plan_id)}">Map Fee Head</a></span> <span> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{s.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" title="Delete" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" title="Cancel" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section class="container is-fluid" show="{fee_plan_view ==\'add_fee_plan\'}"> <div class="level"> <div class="level-left"> <div class="level-item"> <h2 class="title" style="color: #ff3860;">{title} Fee Plan</h2> </div> </div> <div class="level-right"> <a class="button" onclick="{close_new_fee_plan}">Back</a> </div> </div> <div class="flex items-center mt-2 mb-6 no-print"> <div class="bg-green py-1 rounded w-10"></div> <div class="bg-grey h-px flex-auto"></div> </div> <div class="columns"> <div class="column is-full"> <div class="box max-w-md"> <div class="columns is-multiline"> <div class="column is-two-fifths"> <div class="field"> <label class="label">Plan Name</label> <input class="input" ref="fee_plan_name" type="text"> </div> </div> <div class="column is-three-fifths"> <div class="field"> <label class="label">Description</label> <input class="input" ref="fee_plan_description" type="text"> </div> </div> <div class="column is-full"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th width="50">Select</th> <th>Standard</th> </tr> </thead> <tbody> <tr each="{r, i in standards}"> <td class="has-text-right"> <input type="checkbox" class="id_check_box" checked="{r.done}" id="{\'standardId\' + r.standard_id}" onclick="{selectStandard.bind(this,r)}"> </td> <td>{r.standard}</td> </tr> </tbody> </table> </div> <div class="column is-full"> <button class="button is-danger" onclick="{add}">Submit</button> </div> </div> </div> </div> </div> </section> <section class="container is-fluid" show="{fee_plan_view ==\'map_fee_head\'}"> <div class="level"> <div class="level-left"> <div class="level-item"> <h2 class="title" style="color: #ff3860;">Map Fee Plan with Fee Heads by Fee Slip</h2> </div> </div> <div class="level-right"> <a class="button" onclick="{close_new_fee_plan}">Back</a> </div> </div> <div class="columns"> <div class="column is-full"> <div class="box max-w-md"> <div class="columns is-multiline"> <div class="columns"> <div class="column is-narrow"> <label class="label">Select Fee Slip</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="fee_slip_name"> <option value=""></option> <option each="{slips}" riot-value="{fee_slip_name}">{fee_slip_name}</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Last Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="date input flatpickr-input form-control input" ref="lastDateInput" placeholder="" tabindex="0" type="text" readonly="readonly"> </div> </div> </div> <div class="column is-full"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th width="50">Head</th> <th style="width:100px">Amount</th> </tr> </thead> <tbody> <tr each="{r, i in heads}"> <td>{r.head}</td> <td><input class="input" id="head_amount{r.head_id}" type="text" value="0" onkeyup="{getTotal}"></td> </tr> </tbody> <thead> <tr> <th width="50" class="has-text-right">Total</th> <th>{grandTotal}</th> </tr> </thead> </table> </div> <div class="column is-full"> <button class="button is-danger" style="float:right" onclick="{addHeadAmount}">Submit</button> </div> </div> </div> </div> </div> </section> <section class="container is-fluid" show="{fee_plan_view ==\'edit_fee_head\'}"> <div class="level"> <div class="level-left"> <div class="level-item"> <h4 class="title" style="color: #ff3860;">Edit Fee Slip Heads</h4> </div> </div> <div class="level-right"> <a class="button" onclick="{close_new_fee_plan}">Back</a> </div> </div> <div class="columns"> <div class="column is-full"> <div class="box max-w-md"> <div class="columns is-multiline"> <div class="columns"> <div class="column is-narrow"> <label class="label">Selected=== {selectedFeeSlip}</label> </div> <div class="column is-narrow"> <label class="label">Last Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="date input flatpickr-input form-control input" ref="lastDateEdit" placeholder="" tabindex="0" type="text" readonly="readonly"> </div> </div> </div> <div class="column is-full"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th width="50">Head</th> <th style="width:100px">Amount</th> </tr> </thead> <tbody> <tr each="{r, i in feeSlipEditHeads}"> <td>{r.head}</td> <td><input class="input" id="head_edit{r.head_id}" type="text" riot-value="{r.head_amount}" onkeyup="{getEditTotal}"></td> </tr> </tbody> <thead> <tr> <th width="50" class="has-text-right">Total</th> <th>{grandTotal}</th> </tr> </thead> </table> </div> <div class="column is-full"> <button class="button is-danger" style="float:right" onclick="{editHeadAmount}">Submit</button> </div> </div> </div> </div> </div> </section> <section class="container is-fluid" show="{fee_plan_view ==\'viewFeeSlipDetail\'}"> <div class="level"> <div class="level-left"> <div class="level-item"> <h4 class="title" style="color: #ff3860;">Selected Plan: {selectedPlan}</h4> </div> </div> <div class="level-right"> <a class="button" onclick="{close_new_fee_plan}">Back</a> </div> </div> <div class="columns"> <div class="column is-full"> <div class="box max-w-md"> <div class="column is-full"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>Particulars</th> <th class="has-text-right">Amount</th> </tr> </thead> <tbody> <tr each="{f, i in feeSlipHeads}" class="{header:f.amount==\'\'}"> <td class="{texRight:f.head==\'Sub Total\' || f.head==\'Grand Total\'}">{f.head}</td> <td style="text-align: right"> <span class="{texBold:f.head==\'Sub Total\' || f.head==\'Grand Total\'}" show="{f.fee_slip_id==\'\'}">{f.amount} </span> <span show="{f.fee_slip_id!=\'\'}"> <span><a class="button is-small is-rounded" onclick="{editFeeSlip.bind(this, f)}">Edit</a></span> <span> <a class="button is-small has-text-danger is-rounded" id="showModal" onclick="{confirmDeleteFeeSlip.bind(e, f.fee_slip_id)}">Delete</a></span> </span> </td> </tr> </tbody> </table> </div> </div> </div> </div> </section> <section class="container is-fluid" show="{fee_plan_view ==\'editFeeSlipDetail\'}"> <div class="level"> <div class="level-left"> <div class="level-item"> <h4 class="title" style="color: #ff3860;">Edit Fee Slip Under:{selectedPlan} for the month of {selectedSlip}</h4> </div> </div> <div class="level-right"> <a class="button" onclick="{close_new_fee_plan}">Back</a> </div> </div> <div class="columns"> <div class="column is-full"> <div class="box max-w-md"> <div class="columns is-multiline"> <div class="columns"> <div class="column is-narrow"> <label class="label">Select Fee Slip</label> </div> </div> <div class="column is-full"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th width="50">Head</th> <th style="width:100px">Amount</th> </tr> </thead> <tbody> <tr each="{r, i in heads}"> <td>{r.head}</td> <td><input class="input" id="head_amount{r.head_id}" type="text" value="0" onkeyup="{getTotal}"></td> </tr> </tbody> <thead> <tr> <th width="50" class="has-text-right">Total</th> <th>{grandTotal}</th> </tr> </thead> </table> </div> <div class="column is-full"> <button class="button is-danger" style="float:right" onclick="{addHeadAmount}">Submit</button> </div> </div> </div> </div> </div> </section> <div class="modal" id="deleteFeeSlipModel"> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Delete Confirmation</p> </header> <section class="modal-card-body"> <h4>Are you Sure?</h4> </section> <footer class="modal-card-foot"> <button class="button is-danger" onclick="{deleteFeeSlip}">Delete</button> <button class="button " id="modal-close" onclick="{removeDeleteFeeSlip}">Cancel</button> </footer> </div> </div>', '', '', function(opts) {

 var self = this
    self.on("mount", function(){
      flatpickr(".date", {

      allowInput: true,
      altFormat: "d/m/Y",
      dateFormat: "Y-m-d",
      })
      self.title='Add'
      self.role = getCookie('role')
      self.fee_plan_view = 'show_fee_plan'
      self.loading = false
      self.update()
      self.readFeePlans()
      self.readStandards()
      self.readHeads()
    })

    self.on("unmount", function(){
      feePlanStore.off('fee_plan_changed', PlansChanged)
      feePlanStore.off('fee_slip_head_changed', FeeSlipHeadChanged)
      feePlanStore.off('fee_slip_read_edit_changed', FeeSlipReadEditChanged)
      feePlanStore.off('add_fee_plan_changed', AddFeePlansChanged)
      feePlanStore.off('read_standard_changed', ReadStandnard)
      feePlanStore.off('map_fee_head_changed', MapFeeHeadsChanged)
      feeSlipStore.off('slips_changed', SlipsChanged)
      feeHeadStore.off('heads_changed', HeadsChanged)
      feeHeadStore.off('fee_slip_delete_changed', FeeSlipDeleteChanged)
    })

    self.getTotal = () =>{
      self.feedHeadValues = [];
      self.grandTotal = 0
      self.heads.map(g=>{
        let ha = 'head_amount'+g.head_id
        if(document.getElementById(ha).value!=0){
          self.grandTotal = self.grandTotal + Number(document.getElementById(ha).value)
          var obj ={}
          obj.head_id = g.head_id
          obj.head_amount = Number(document.getElementById(ha).value)
          self.feedHeadValues.push(obj)
        }
      })
    }

    self.getEditTotal = () =>{
      self.feedHeadValues = [];
      self.grandTotal = 0
      self.feeSlipEditHeads.map(g=>{
        let edit = 'head_edit'+g.head_id
        if(document.getElementById(edit).value!=0){
          self.grandTotal = self.grandTotal + Number(document.getElementById(edit).value)
          var obj ={}
          obj.head_id = g.head_id
          obj.head_amount = Number(document.getElementById(edit).value)
          self.feedHeadValues.push(obj)
        }
      })
    }

    self.readFeePlans = () => {
      self.loading=true
       feePlanStore.trigger('read_fee_plans')
    }
    self.readStandards = () =>{
    	feePlanStore.trigger('read_standards')
    }
self.viewFeeSlip = (c,e) =>{
      console.log("here");
      console.log(c)

      self.selectedPlan = c.fee_plan_name
      self.selected_plan_id = c.fee_plan_id
      feePlanStore.trigger('read_fee_slip_head', c.fee_plan_id)

}
self.readFeePlan = () =>{

}

self.mapHead = (c,e) => {
      console.log("here");
      console.log(c)
      self.readSlips()
      self.readHeads()
      self.selected_fee_plan_id = c
      self.fee_plan_view='map_fee_head'

    }
self.editFeeSlip = (c,e)=>{
  console.log("inside fee slip edit data read")
  console.log(c);

  self.selectedFeeSlip = c.head;
  self.refs.lastDateEdit.value = c.last_date
  self.edit_fee_slip_id = c.fee_slip_id
  self.fee_plan_view='edit_fee_head'
  feePlanStore.trigger('read_fee_slip_edit', c.fee_slip_id)

}

    self.readSlips = () => {
       feeSlipStore.trigger('read_slips')
    }

  self.readHeads = () => {
       feeHeadStore.trigger('read_heads')
    }

 self.close_new_fee_plan = () => {
    	self.fee_plan_view='show_fee_plan'
    	self.update()
    }
   self.selectStandard = (item,event) => {
    	item.done=!event.item.r.done
    	self.standard_id = item.standard_id;
        console.log(self.standards)
        console.log(self.standard_id)
    }
    self.add_new_fee_plan = () =>{
    	self.fee_plan_view='add_fee_plan'
    	self.title='Add'

    	self.update()

    }

    self.addHeadAmount = () =>{
      console.log("----------heads ")
      console.log(self.feedHeadValues)

      if(!self.refs.fee_slip_name.value){
        toastr.info("Please Fee Slip and try again")
      }else if(!self.refs.lastDateInput.value){
        toastr.info("Please insert Last date and try again")
      }else if(self.feedHeadValues.length==0){
          toastr.info("Please Insert Head amount and  try again")
      }else{
        var obj = {}
        obj['fee_slip_name'] = self.refs.fee_slip_name.value
        obj['last_date'] = self.refs.lastDateInput.value
        obj['feeHeads'] = self.feedHeadValues
        obj['total_amount'] = self.grandTotal
        obj['fee_plan_id'] = self.selected_fee_plan_id
        self.loading = true
          console.log("Add")
          console.log(obj)
          feePlanStore.trigger('add_head_amount', obj)
        }
      }

    self.editHeadAmount = () =>{
     if(!self.refs.lastDateEdit.value){
        toastr.info("Please insert Last date and try again")
      }else if(self.feedHeadValues.length==0){
          toastr.info("Please Insert Head amount and  try again")
      }else{
        var obj = {}
        obj['fee_slip_id'] = self.edit_fee_slip_id
        obj['last_date'] = self.refs.lastDateEdit.value
        obj['feeHeads'] = self.feedHeadValues
        obj['total_amount'] = self.grandTotal
        self.loading = true
          console.log("Edit")
          console.log(obj)
          feePlanStore.trigger('edit_head_amount', obj)
        }
      }

    self.add = () => {
       var tempStandards = [];
       var tempStandards = self.standards.filter(c => {
          return c.done == true
        })
      if(!self.refs.fee_plan_name.value){
        toastr.info("Please enter Fee Plan Title and try again")
      }else if(tempStandards.length==0){
          toastr.info("Please Select standard and try again")
      }else{
      	console.log("here")
        var obj = {}
        obj['fee_plan_name'] = self.refs.fee_plan_name.value
        obj['fee_plan_description'] = self.refs.fee_plan_description.value
        obj['standards'] = tempStandards

        self.loading = true
        if(self.title=='Add'){
        	console.log("Add")
          console.log(obj)
          feePlanStore.trigger('add_plan', obj)
        }else if(self.title=='Update'){
          console.log('update')

        }
      }
    }

    feePlanStore.on('fee_plan_changed',PlansChanged)
    function PlansChanged(feePlans){
      console.log(feePlans)
      self.title='Add'

      self.loading = false
       self.feePlans = []
      self.feePlans = feePlans
      self.update()
      console.log(self.feePlans)
    }

    feePlanStore.on('fee_slip_read_edit_changed',FeeSlipReadEditChanged)
     function FeeSlipReadEditChanged(feeSlipEditHeads){
      console.log(feeSlipEditHeads)
      self.loading = false
      self.feeSlipEditHeads = []
      self.feeSlipEditHeads = feeSlipEditHeads
      self.update()
      console.log(self.feeSlipEditHeads)
    }

    feePlanStore.on('fee_slip_head_changed',FeeSlipHeadChanged)
     function FeeSlipHeadChanged(feeSlipHeads){
      console.log(feeSlipHeads)
      self.loading = false
      self.feeSlipHeads = []
      self.fee_plan_view='viewFeeSlipDetail'

      self.feeSlipHeads = feeSlipHeads
      self.update()
      console.log(self.feeSlipHeads)
    }
    self.editDeleteShow = ()=>{
      console.log("inside")
      if(self.refs.edit_fee_slip_name.value!=-1) self.confirmSlipEditDelete = true
      else self.confirmSlipEditDelete = false
    }

    self.confirmDeleteFeeSlip = (e, s) =>{
      console.log("clicked")
      console.log(e)
      console.log("=============")
      console.log(s)
        self.selected_fee_slip_id = e;
        $("#deleteFeeSlipModel").addClass("is-active");
    }

    self.removeDeleteFeeSlip = () =>{
      console.log("")
      $("#deleteFeeSlipModel").removeClass("is-active");
    }
    self.deleteFeeSlip = () => {
      self.loading = true
      feePlanStore.trigger('delete_fee_slip', self.selected_fee_slip_id)
    }
    self.cancelOperation = () =>{
      c.confirmDelete = false
    }

    self.confirmDelete = (s) => {
      console.log(s);
      self.feePlans.map(c => {
        console.log(c);
        if(c.fee_plan_id != s.item.s.fee_plan_id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      feePlanStore.trigger('delete_plan', e.item.s.fee_plan_id)
    }

    feePlanStore.on('read_standard_changed',ReadStandnard)
    function ReadStandnard(standards){
      console.log(standards)
      self.loading = false
      self.standards = standards
      self.update()
      console.log(self.standards)
    }
    feePlanStore.on ('map_fee_head_changed',MapFeeHeadsChanged)
    function MapFeeHeadsChanged(feePlanHeads){
      console.log("-------Heads --------")
      console.log(feePlanHeads)
      self.loading = false
      self.lastDateInput.value =''
      self.refs.fee_slip_name.value = ''

      self.update()

    }
    feePlanStore.on('fee_slip_delete_changed',FeeSlipDeleteChanged)
    function FeeSlipDeleteChanged(){
      self.loading = false
      $("#deleteFeeSlipModel").removeClass("is-active");

      self.update()
    }
    feePlanStore.on('add_fee_plan_changed',AddFeePlansChanged)
    function AddFeePlansChanged(feePlans){
      console.log(feePlans)
      self.title='Add'
      self.loading = false
      self.feePlans = feePlans
      self.update()
      console.log(self.feePlans)
    }
    feeSlipStore.on('slips_changed',SlipsChanged)
    function SlipsChanged(slips){
      self.refs.lastDateInput.value = ''
      self.loading = false
       self.slips = []
      self.slips = slips
      self.update()

    }

    feeHeadStore.on('heads_changed',HeadsChanged)
    function HeadsChanged(heads){
      self.loading = false
       self.heads = []
       self.heads = heads
      self.update()
      console.log(self.heads)
    }
});
riot.tag2('fee-slip', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Fee Slip Management</h2> <div class="flex items-center mt-2 mb-6 no-print"> <div class="bg-green py-1 rounded w-10"> <div class="bg-grey h-px flex-auto"></div> </div> </div> <div class="box"> <div class="columns"> <div class="column is-half"> <div class="field"> <label class="label" for="role">Slip Name</label> <div class="control"> <input class="input" type="text" ref="addSlipName" id="addSlipName" onkeyup="{addEnter}"> </div> </div> </div> <div class="column is-narrow"> <div class="field"> <div class="control"> <button disabled="{loading}" class="button is-danger has-text-weight-bold adjusted-top" onclick="{add}">{title}</button> </div> </div> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>#</th> <th>Slip Name</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in slips}"> <td>{i+1}</td> <td>{c.fee_slip_name}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, c)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
 var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.loading = false
      self.update()
      self.readSlips()
    })
    self.on("unmount", function(){
      feeSlipStore.off('slips_changed', SlipsChanged)
    })

    self.readSlips = () => {
       feeSlipStore.trigger('read_slips')
    }

    self.add = () => {
      if(!self.refs.addSlipName.value){
        toastr.info("Please enter Slip Name and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          feeSlipStore.trigger('add_slip', self.refs.addSlipName.value)
        }else if(self.title=='Update'){
          console.log('update')
          feeSlipStore.trigger('edit_slip', self.refs.addSlipName.value,
            self.old_fee_slip_name)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

    self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.edit = (c,e) => {
   	  console.log("here");
      console.log(c)
      self.title='Update'
      document.getElementById("addSlipName").focus()
      self.refs.addSlipName.value = c.fee_slip_name
      self.old_fee_slip_name = c.fee_slip_name
    }

    self.cancelOperation = (e) => {
      self.slips.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.slips.map(c => {
        if(c.fee_slip_name != e.item.c.fee_slip_name){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      feeSlipStore.trigger('delete_slip', e.item.c.fee_slip_name)
    }

    feeSlipStore.on('slips_changed',SlipsChanged)
    function SlipsChanged(slips){
      console.log(slips)
      self.title='Create'
      self.refs.addSlipName.value = ''
       self.slips = []
      self.slips = slips
      self.loading = false
      self.update()
      console.log(self.slips)
    }

});
riot.tag2('fees-collection-summary', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="date input" id="start_date" ref="start_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="date input" id="end_date" ref="end_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{getFeesCollectionSummary}"> GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Bank/Cash Collection Summary</p> <p class="has-text-centered">Session: {sessionName}</p> <p class="has-text-centered">Class:{selectedClass} Month:{selectedMonth}</p> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th>#</th> <th>Bank</th> <th>Cash</th> <th>Cheque</th> <th>Online</th> <th>Total</th> </tr> </thead> <tbody> <tr each="{cd, i in collectionSummary}"> <td>{i + 1}</td> <td>{cd.bank}</td> <td class="has-text-right amount">{cd.cash}</td> <td class="has-text-right amount">{cd.cheque}</td> <td class="has-text-right amount">{cd.online}</td> <td class="has-text-right amount">{cd.total}</td> </tr> <tr> <th class="has-text-right" colspan="2">Total</th> <th class="has-text-right amount">{totalCash}</th> <th class="has-text-right amount">{totalCheque}</th> <th class="has-text-right amount">{totalOnline}</th> <th class="has-text-right amount">{totalGrandTotal}</th> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      flatpickr(".date", {

    	allowInput: true,
    	dateFormat: "d/m/Y",
  		})
      self.update();
    })

    self.on("unmount", function(){
      feesReportStore.off('read_collection_summary_changed',ReadCollectionSummaryChanged)
    })

    self.getFeesCollectionSummary = () => {
    	var startDate = document.getElementById("start_date").value
    	var endDate = document.getElementById("end_date").value
    	if(!self.refs.start_date.value){
    		toastr.info("Pleae enter From Date and try again")
    	}else if(!self.refs.end_date.value){
    		toastr.info("Pleae enter End Date and try again")
    	}else if((Date.parse(startDate)> Date.parse(endDate))){
           toastr.info("From date can't be greater")
    	}else{
    	  var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          self.loading = true
          feesReportStore.trigger('read_collection_summary', obj)
          }
    }

    feesReportStore.on('read_collection_summary_changed',ReadCollectionSummaryChanged)
    function ReadCollectionSummaryChanged(collectionSummary, session_name){
       console.log(collectionSummary)
          self.collectionSummary = []
          self.collectionSummary = collectionSummary
          self.totalCash = 0;
          self.totalCheque = 0;
          self.totalGrandTotal = 0;
          self.totalOnline = 0;
          self.collectionSummary.map(c => {
          	if(c.cash) self.totalCash = Number(self.totalCash) + Number(c.cash)
            if(c.cheque) self.totalCheque =Number(self.totalCheque) + Number(c.cheque)
            if(c.total) self.totalGrandTotal =Number(self.totalGrandTotal) + Number(c.total)
            if(c.online) self.totalOnline =Number(self.totalOnline) + Number(c.total)
      })
      self.sessionName = session_name
       self.fromSelectedDate = self.refs.start_date.value
       self.toSelectedDate = self.refs.end_date.value
       self.loading = false
      self.update()
    }
});
riot.tag2('fees-report', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_master == \'month-wise\'}" href="#/fees-report/month-wise"> <span>Month Wise</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'daily-collection\'}" href="#/fees-report/daily-collection"> <span>Daily Collection</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'daily-register\'}" href="#/fees-report/daily-register"> <span>Daily Register</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'bank-wise\'}" href="#/fees-report/bank-wise"> <span>Bank Wise Collection</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'date-wise\'}" href="#/fees-report/date-wise"> <span>Date Wise Fees</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'head-wise-summary\'}" href="#/fees-report/head-wise-summary"> <span>Head Wise Fees</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'head-wise\'}" href="#/fees-report/head-wise"> <span>Head Wise (C/B/Chq/Online)</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'outstanding-fees\'}" href="#/fees-report/outstanding-fees"> <span>Outstanding Fees</span> </a> </p> </div> <div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_master == \'outstanding-fees-class\'}" href="#/fees-report/outstanding-fees-class"> <span>Outstanding Fees By Class</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'due-by-class\'}" href="#/fees-report/due-by-class"> <span>Class Wise Due Detail</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'fees-collection-summary\'}" href="#/fees-report/fees-collection-summary"> <span>Fees Collection Summary</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'estimated-fees\'}" href="#/fees-report/estimated-fees"> <span>Estimated Fees</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'advance-by-class\'}" href="#/fees-report/advance-by-class"> <span>Class Wise Advance</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'advance-fees\'}" href="#/fees-report/advance-fees"> <span>Advance Fees</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'scholarship-list\'}" href="#/fees-report/scholarship-list"> <span>Scholarship List</span> </a> </p> </div> <div class="field has-addons no-print"> </p> <p class="control"> <a class="button {is-active: selected_master == \'issued-letter\'}" href="#/fees-report/issued-letter"> <span>Issued Letter</span> </a> </p> </p> <p class="control"> <a class="button {is-active: selected_master == \'fees-scheme-report\'}" href="#/fees-report/fees-scheme-report"> <span>Fees Scheme</span> </a> </p> </p> <p class="control"> <a class="button {is-active: selected_master == \'fees-scheme-assigned\'}" href="#/fees-report/fees-scheme-assigned"> <span>Assigned Scheme</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'fees-scheme-unassigned\'}" href="#/fees-report/fees-scheme-unassigned"> <span>Un-assigned Student</span> </a> </p> </div> <div id="fees-report-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_master')
    console.log(opts.selected_master)
    if(!opts.selected_master){
      self.selected_master = 'month-wise'
    }else{
      self.selected_master = opts.selected_master
    }
});
riot.tag2('fees-scheme-assigned', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Fee Scheme</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="fee_plan_id" id="fee_plan_id"> <option>Select Fees Scheme</option> <option each="{feePlans}" riot-value="{fee_plan_id}">{fee_plan_name} </option> </select> </div> </div> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{getAssignedStudents}"> GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Fee Scheme Assigned Student</p> <p class="has-text-centered">Session: {sessionName}</p> <p class="has-text-centered">Scheme: {selectedScheme}</p> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th class="slno">#</th> <th>Enrol No.</th> <th>Student\'s Name</th> <th>Class</th> <th>Mobile</th> <th>SMS</th> <th>Phone</th> </tr> </thead> <tbody> <tr each="{cd, i in assignedStudents}"> <td>{i + 1}</td> <td>{cd.enroll_number}</td> <td>{cd.name}</td> <td>{cd.standard}</td> <td>{cd.f_mobile}</td> <td>{cd.mobile}</td> <td>{cd.f_phone}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.role = getCookie('role')
       flatpickr(".date", {

    	allowInput: true,
    	altFormat: "d/m/Y",
    	dateFormat: "Y-m-d",
  		})
      self.update()
      self.readFeePlans()
    })
    self.on("unmount", function(){
      feePlanStore.off('fee_plan_changed', PlansChanged)
      feesReportStore.off('read_assigned_student_changed',AssignedStudentChanged)
    })

    self.readFeePlans = () => {
       feePlanStore.trigger('read_fee_plans')
    }
    self.getAssignedStudents = () =>{
      self.loading = true
      console.log(self.refs.fee_plan_id.value)
      feesReportStore.trigger('read_assigned_students', self.refs.fee_plan_id.value)
    }
    feePlanStore.on('fee_plan_changed',PlansChanged)
    function PlansChanged(feePlans){

      self.loading = false
       self.feePlans = []
      self.feePlans = feePlans
      self.update()

    }

    feesReportStore.on('read_assigned_student_changed',AssignedStudentChanged)
    function AssignedStudentChanged(assignedStudents,session_name){
    	console.log("assignedStudents")
      console.log(assignedStudents)
       self.assignedStudents = assignedStudents
       self.selectedScheme = $("#fee_plan_id option:selected").text()
       self.sessionName = session_name
      self.loading = false
       self.update()
    }

});
riot.tag2('fees-scheme-report', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;"></h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Session</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="session_id" id="session_id"> <option>Select Session</option> <option each="{sessions}" riot-value="{session_id}">{session_name} </option> </select> </div> </div> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{getData}"> GO </button> <input type="checkbox" id="checkTable" checked="{e.done}" onclick="{viewTable}" style="margin-top: 12px;"> Table <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Fee Scheme Report</p> <p class="has-text-centered">Session: {sessionName}</p> <p class="has-text-centered">Scheme: {selectedScheme}</p> <canvas id="canvas_pie" show="{report_view ==\'show_graph\'}"></canvas> <center> <table class="table is-striped is-hoverable is-bordered" show="{report_view ==\'show_table\'}"> <thead> <tr> <th>Fee Schme</th> <th class="has-text-right">Total</th> </tr> </thead> <tbody> <tr each="{cd, i in schemes}"> <td>{cd.fee_plan_name}</td> <td class="has-text-right">{cd.total}</td> </tr> <tr> <td class="has-text-right">Total</td> <td class="has-text-right">{grand_total}</td> </tr> </tbody> </table> </center> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.readSession()
      self.update();
    })

    self.on("unmount", function(){
      sessionStore.off('read_session_changed', ReadSessionChanged)
      feesReportStore.off('read_session_scheme_changed',ReadSessionSchemeChanged)
    })

    self.readSession = () => {
       sessionStore.trigger('read_session')
    }

    self.viewTable = () => {
    	if($('#checkTable').is(":checked")){
	        self.report_view = 'show_table'
    	}else{
	        self.report_view = 'show_graph'
    	}
    }
    self.getData = () => {
      if(self.refs.session_id.value){
      self.loading = true
      feesReportStore.trigger('read_session_scheme', self.refs.session_id.value)
      }else{
      	toastr.info("Please select session")
      }
    }

    sessionStore.on('read_session_changed',ReadSessionChanged)
    function ReadSessionChanged(sessions){
      console.log(sessions)
      self.loading = false
      self.sessions = sessions
      self.update()
    }

    feesReportStore.on('read_session_scheme_changed',ReadSessionSchemeChanged)
    function ReadSessionSchemeChanged(schemes,grand_total, session_name){
      self.schemes = schemes
      self.grand_total = grand_total

      var chartColors = ['#e3342f','#F6993F','#F2D024','#1F9D55','#2779BD','#9561E2','#B8C2CC','#fff'];

		var labels = []
		var chart_percentage = []
        var backgroundColor = []

		 for (var i = self.schemes.length - 1; i >= 0; i--) {
		 	var total_percentage = ((self.schemes[i].total*100)/self.grand_total).toFixed(2);
		    var percentage = self.schemes[i].fee_plan_name + ' ( ' + self.schemes[i].total + ' , ' + total_percentage + '% )';

		    labels.push(percentage)
		    chart_percentage.push(self.schemes[i].total)
		    if(typeof chartColors[i] != "undefined"){
		    	backgroundColor.push(chartColors[i])
		    }

		 }

		  console.log(labels);
		  console.log(chart_percentage);

		  var config = {
		    type: 'pie',
		    data: {
		      datasets: [{
		        data: chart_percentage,
		        backgroundColor: backgroundColor,
		        label: 'labels'
		      }],
		      labels: labels
		    },
		    options: {
		      responsive: true
		    }
		  };

		  var ctx = document.getElementById('canvas_pie').getContext('2d');
		  window.myPie = new Chart(ctx, config);

		  self.selectedSession = $("#session_id option:selected").text()
		  self.loading = false
      self.update()

      console.log(self.schemes)
    }
});
riot.tag2('fees-scheme-unassigned', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Un-assigned Students</p> <p class="has-text-centered">Session: {sessionName}</p> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th class="slno">#</th> <th>Enrol No.</th> <th>Student\'s Name</th> <th>Father\'s Name</th> <th>Class</th> </tr> </thead> <tbody> <tr each="{cd, i in students}"> <td>{i + 1}</td> <td>{cd.enroll_number}</td> <td>{cd.name}</td> <td>{cd.f_name}</td> <td>{cd.standard}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.getUnAssignedStudent()
      self.update();
    })

    self.on("unmount", function(){
      feesReportStore.off('read_no_scheme_changed',ReadNoSchemeChanged)
    })

    self.getUnAssignedStudent = () => {
        self.loading = true
        feesReportStore.trigger('read_no_scheme')

    }

    feesReportStore.on('read_no_scheme_changed',ReadNoSchemeChanged)
    function ReadNoSchemeChanged(students){

      self.students = []
      self.students = students
      self.loading = false
      self.update()
    }
});
riot.tag2('fees-setting', '<div class="field has-addons"> <p class="control"> <a class="button {is-active: selected_master == \'fine-setting\'}" href="#/fees-setting/fine-setting"> <span>Fine Setting</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'bank-account-setting\'}" href="#/fees-setting/bank-account-setting"> <span>Bank Account </span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'session-setting\'}" href="#/fees-setting/session-setting"> <span>Session</span> </a> </p> </div> <div id="setting-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_master')
    console.log(opts.selected_master)
    if(!opts.selected_master){
      self.selected_master = 'fine-setting'
    }else{
      self.selected_master = opts.selected_master
    }
});
riot.tag2('fees-withdraw', '<loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <div class="columns is-multiline is-mobile"> <div class="column"> <div class="box"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="enrolNumberText" type="text" placeholder="Enrol Number"> </div> </div> <div class="column"> <button class="button is-danger" onclick="{getStudentDetail}">Go</button> </div> </div> <div class="columns"> <div class="column "> <img src="https://bulma.io/images/placeholders/128x128.png"> <p class="label">Name: {student_name}</p> <p class="label">Class: {standard}</p> </div> </div> </div> </div> <div class="column"> <div class="box"> <h4 class="title has-text-centered" style="color: #ff3860;">Active Fee slip</h4> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL No.</th> <th>Fee Slips</th> <th>Amount</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in activeFeeSlips}"> <td>{i+1}</td> <td>{c.fee_slip_name}</td> <td>{c.amount}</td> <td class="has-text-right"> <a class="button is-small" onclick="{activeFees.bind(this,c.fee_slip_id)}"> <span class="fas fa-angle-double-right"></span> </a> </td> </tr> </tbody> </table> </div> </div> <div class="column"> <div class="box"> <h4 class="title has-text-centered" style="color: #ff3860;">InActive Fee slip</h4> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL No.</th> <th>Fee Slips</th> <th>Amount</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in removefeeSlips}"> <td>{i+1}</td> <td>{c.fee_slip_name}</td> <td>{c.amount}</td> <td class="has-text-right"> <a class="button is-small" onclick="{removeFees.bind(this,c.fee_slip_id)}"> <span class="fas fa-angle-double-left"></span> </a> </td> </tr> </tbody> </table> </div> </div> </div> </section>', '', '', function(opts) {
var self = this
    self.on("mount", function(){
      self.role = getCookie('role')
      self.loading = false
      self.update()
    })
    self.on("unmount", function(){
      feeWithdrawStore.off('read_student_changed',ReadStudentChanged)
      feeWithdrawStore.off('read_feeslip_changed',ReadFeeSlipChanged)
      feeWithdrawStore.off('active_fees_changed',ActiveFeeSlipChanged)
    })

	self.getStudentDetail = () =>{
      var enrol = self.refs.enrolNumberText.value
      if(enrol.length==0){
        toastr.info("Please enter an enrol numbar")
        return
      }else if(enrol.length<8){
        toastr.info("Please enter an valid enrol numbar")
        return
      }else{
      	self.loading = true
        feeWithdrawStore.trigger('read_student', self.refs.enrolNumberText.value)
      }
    }

    self.readFeeSlipBYEnrollNumber = () =>{
    	self.loading = true
      	feeWithdrawStore.trigger('read_fee_slip', self.studentId)
    }

    self.activeFees = (c,st) =>{
	    self.fee_slip_id = c
	    console.log(self.studentId)
	    console.log(self.fee_slip_id)
	    feeWithdrawStore.trigger('active_fees', self.fee_slip_id, self.studentId)
    }
    self.removeFees = (c,st) =>{
	    self.fee_slip_id = c
	    console.log(self.studentId)
	    console.log(self.fee_slip_id)
	    feeWithdrawStore.trigger('active_fees', self.fee_slip_id, self.studentId)
    }

    feeWithdrawStore.on('read_student_changed',ReadStudentChanged)
    function ReadStudentChanged(students){
      console.log(students)
      self.students = []
      self.students = students
      self.enroll_number = self.students[0].enroll_number;
      self.student_name = self.students[0].student_name;
      self.standard = self.students[0].standard;
      self.studentId = self.students[0].student_id;
      self.last_fee_slip_id = self.students[0].last_fee_slip_id;
      self.loading = false
      self.update()
      self.readFeeSlipBYEnrollNumber()

    }
    feeWithdrawStore.on('read_feeslip_changed',ReadFeeSlipChanged)
    function ReadFeeSlipChanged(feeSlips){
      console.log(feeSlips)
      self.feeSlips = []
      self.feeSlips = feeSlips
      self.last_month_id = self.last_fee_slip_id
      self.loading = false
      self.activeFeeSlips = Array()
      self.removefeeSlips = Array()

      if (self.last_fee_slip_id == 0) {
      	self.feeSlips.map(c => {
      		var obj = {}
			self.activeFeeSlips.push(c);

      		})
		}else if (self.last_fee_slip_id != 0){
			self.feeSlips.map(c => {
      		var obj = {}
			if(c.fee_slip_id <= self.last_month_id){
				self.activeFeeSlips.push(c)
			}else if (c.fee_slip_id > self.last_month_id) {
				self.removefeeSlips.push(c)
			}

      	 })
		}
		self.update()
    }
    feeWithdrawStore.on('active_fees_changed',ActiveFeeSlipChanged)
    function ActiveFeeSlipChanged(){
      self.getStudentDetail()

    }
});
riot.tag2('final-assessment-report-card', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{student_view ==\'show_student_list_view\'}"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Final Assessment Report Card</h2> <div class="level box"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" onchange="{getSection}" id="standard_id"> <option each="{standards}" riot-value="{standard_id}"> {standard}</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Section</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="section_id" onchange="{getStudentData}" id="section_id"> <option each="{filteredSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> </div> </div> <div class="level-right"> <div class="column is-narrow"><label class="label">Issue date</label></div> <div class="column is-narrow"> <div class="control"> <input class="input date is-small" ref="issue_date" type="text"> </div> </div> <div class="column is-narrow"><label class="label">Re-Open date</label></div> <div class="column is-narrow"> <div class="control"> <input class="input date is-small" ref="re_open_date" type="text"> </div> </div> <button class="button is-warning has-text-weight-bold ml5 is-small" onclick="{finalAssessmentReportCardOneToFour}"> Print Report Card </button> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <thead> <tr> <th>SL no</th> <th>Enroll No</th> <th>Roll no</th> <th>Student Name</th> <th>Final Term</th> <th class="has-text-centered"> <input type="checkbox" id="checkStudent" onclick="{selectAll}"> </th> </tr> </thead> <tbody> <tr each="{st, i in students}"> <td>{i+1}</td> <td>{st.enroll_number}</td> <td>{st.roll_number}</td> <td>{st.name}</td> <td></td> <td class="has-text-centered"> <input type="checkbox" class="id_check_box" checked="{st.done}" id="{\'StudentId\' + st.student_id}" onclick="{selectStudent.bind(this,st)}"> </td> </tr> </tbody> </table> </section> <section class="container is-fluid" show="{student_view==\'report_one_to_four\'}"> <div class="level no-print"> <div class="level-left"></div> <div class="level-right" style="margin-bottom: 5px;"> <button class="button is-warning has-text-weight-bold" onclick="{close_report_one_to_four}" style="margin-right: 5px;"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-primary has-text-weight-bold" onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> </div> </div> <div each="{r, i in reportsOneToFour}" class="fa-report-card-one-two-four"> <table class="table is-fullwidth is-narrow no-border"> <tbody> <tr> <td rowspan="5" style="width:145px;"> <img style="border:solid Black 1px" riot-src="../images/{r.details.session_id}/studentImages/103728.jpg"> </td> <td colspan="3" style="font-weight: bold;font-size: 18px;"> <p style="text-align:center;margin-bottom: -6px;">REPORT CARD </p> <p style="text-align:center;margin-top:6px;"><span style="border-bottom: dotted 2px #000;">FINAL ASSESSMENT, {session_name}</span></p> </td> </tr> <tr> <th style="width:180px">Name</th> <td style="width:430px">{r.details.student_name}</td> <th style="width:180px">Issue Date</th> <td style="width:250px">{issue_date}</td> </tr> <tr> <th>Enrolment no.</th> <td>{r.details.enroll_number}</td> <th>Class/Sec.</th> <td>{standard}</td> </tr> <tr> <th>Date of birth</th> <td>{r.details.dob}</td> <th>House</th> <td>{r.details.house_name}</td> </tr> <tr> <th>Date of Admission</th> <td>{r.details.doa} (<b>Session:</b> {r.details.year})</td> <td></td> <td></td> </tr> </tbody> </table> <table class="table is-fullwidth is-narrow border-less-table divider-subject"> <thead> <tr> <td class="has-text-centered table-head"></td> <td colspan="2" class="has-text-centered table-head lr-table-border">1st Assessment</td> <td colspan="2" class="has-text-centered table-head lr-table-border">Final Assessment</td> <td class="has-text-centered table-head">Final Evaluation</td> </tr> <tr> <td class="table-head">Subject</td> <td style="width:150px" class="has-text-centered table-head lr-table-border">Grade Obtained<br>(100)</td> <td style="width:150px" class="has-text-centered table-head">Highest Grade</td> <td style="width:150px" class="has-text-centered table-head lr-table-border">Grade Obtained<br>(100)</td> <td style="width:150px" class="has-text-centered table-head lr-table-border">Highest Grade</td> <td style="width:150px" class="has-text-centered table-head">Grade Obtained<br>(200)</td> </tr> </thead> <tbody> <tr each="{m in r.marks}" class="{m.show_in}"> <td>{m.subject_name}</td> <td class="has-text-centered lr-table-border">{m.first_assessment_marks}</td> <td class="has-text-centered">{m.max_marks}</td> <td class="has-text-centered lr-table-border">{m.final_assessment_marks}</td> <td class="has-text-centered lr-table-border">{m.max_marks_final}</td> <td class="has-text-centered">{m.final_marks} <span if="{m.final_att_percentage>0}"> (<b>{m.final_att_percentage}</b>)% </span></td> </tr> </tbody> </table> <hr style="border-top: double !important;"> <table class="table is-fullwidth signature-table is-narrow" style="margin-top:35px"> <tr> <td>Remarks</td> <td colspan="3"><hr style="border-top:dotted;width:100%"></td> </tr> <tr> <td>Signature</td> <td> <div class="signature"> <hr style="border-top:dotted"> <span><b>Class Teacher</b></span> </div> </td> <td> <div class="signature"> <hr style="border-top:dotted"> <span><b>Principal</b></span> </div> </td> <td> <div class="signature"> <hr style="border-top:dotted"> <span><b>Parent / Guardian</b></span> </div> </td> </tr> </table> <hr style="border-top: double !important;"> <p style="margin-top:30px;font-size: 15px;"> PROMOTED TO CLASS ___________ / NEEDS TO REPEAT CLASS ___________ &nbsp;&nbsp;&nbsp;SCHOOL RE-OPENS ON:&nbsp;<span style="font-weight:bold">{re_open_date}</span> </p> <h6>EAP/F/002</h6> <div class="page-break"></div> <h2 class="has-text-centered report-h3 is-size-3">Maturity Development</h2> <table class="table table-condensed backside is-narrow is-bordered"> <tr> <th colspan="3">Given below are six areas in which maturity of the student is shown. Within each area, four levels of maturity have been given. This information indicates at which level your son works at school. </th> </tr> <tr> <th class="has-text-centered">INITIATIVE &amp; PERSEVERANCE</th> <th class="has-text-centered" style="width:120px;">1st Term</th> <th class="has-text-centered" style="width:120px;">Final Term</th> </tr> <tr> <td>1. Self - motivated and completes tasks</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_first\']}.jpg "></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'initiative_first\']}.jpg "></td> </tr> <tr> <td>2. Works well with minimum direction</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_second\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'initiative_second\']}.jpg"></td> </tr> <tr> <td>3. Needs constant guidance</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_third\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'initiative_third\']}.jpg"></td> </tr> <tr> <td>4. Has to be told every thing</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_fourth\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'initiative_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">INTEREST</th> <td class="has-text-centered"></td> <td class="has-text-centered"></td> </tr> <tr> <td>1. Easily stimulated &amp; sustained</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_first\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'interest_first\']}.jpg"></td> </tr> <tr> <td>2. Interested only in some areas</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_second\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'interest_second\']}.jpg"></td> </tr> <tr> <td>3. Inconsistent</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_third\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'interest_third\']}.jpg"></td> </tr> <tr> <td>4. Indifferent</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_fourth\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'interest_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">USE OF TIME</th> <th class="has-text-centered"></th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Uses time profitably</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_first\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'use_time_first\']}.jpg"></td> </tr> <tr> <td>2. Organized most of the time</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_second\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'use_time_second\']}.jpg"></td> </tr> <tr> <td>3. Disorganized but responds well to guidance</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_third\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'use_time_third\']}.jpg"></td> </tr> <tr> <td>4. Easily distracted</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_fourth\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'use_time_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">WORK HABITS</th> <th class="has-text-centered"></th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Very careful worker</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_first\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'work_habit_first\']}.jpg"></td> </tr> <tr> <td>2. Usually neat</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_second\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'work_habit_second\']}.jpg"></td> </tr> <tr> <td>3. Untidy</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_third\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'work_habit_third\']}.jpg"></td> </tr> <tr> <td>4. Careless</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_fourth\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'work_habit_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">PARTICIPATION IN GROUP WORK</th> <th class="has-text-centered"></th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Contributes readily</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_first\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'participation_first\']}.jpg"></td> </tr> <tr> <td>2. Tries to dominate the group</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_second\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'participation_second\']}.jpg"></td> </tr> <tr> <td>3. Takes part occasionally</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_third\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'participation_third\']}.jpg"></td> </tr> <tr> <td>4. Has to be coaxed to participate</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_fourth\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'participation_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">RESPONSIBILITY</th> <th class="has-text-centered"></th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Takes initiative in situations which require responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_first\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'responsibility_first\']}.jpg"></td> </tr> <tr> <td>2. Accepts a responsibility only when it is assigned</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_second\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'responsibility_second\']}.jpg"></td> </tr> <tr> <td>3. Casual about responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_third\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'responsibility_third\']}.jpg"></td> </tr> <tr> <td>4. Reluctant to accept responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_fourth\']}.jpg"></td> <td class="has-text-centered"><img riot-src="dist/img/{r.md_final[\'responsibility_fourth\']}.jpg"></td> </tr> </table> <table class="table is-fullwidth"> <tr> <td style="width:50%"> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Explanation of Unit Test and Terminal Exam Grades</caption> <tbody> <tr> <th class="has-text-centered">Unit Test</th> <th class="has-text-centered">Terminal</th> <th></th> <th></th> </tr> <tr> <td>43 - 50</td> <td>86 - 100</td> <td>A</td> <td>Excellent</td> </tr> <tr> <td>36 - 42</td> <td>71 - 85</td> <td>B</td> <td>Very Good</td> </tr> <tr> <td>28 - 35</td> <td>56 - 70</td> <td>C</td> <td>Good</td> </tr> <tr> <td>20 - 27</td> <td>40 - 55</td> <td>D</td> <td>Fair</td> </tr> <tr> <td>0 - 19</td> <td>0 - 39</td> <td>E</td> <td>Poor</td> </tr> </tbody> </table> </td> <td style="width:50%"> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Physical Fitness Assessment of your ward</caption> <thead> <tr> <th class="has-text-centered">Skill</th> <th style="width:250px" class="has-text-centered">Grade (First Term)</th> <th style="width:250px" class="has-text-centered">Grade (Final Term)</th> </tr> </thead> <tbody> <tr> <td>Running</td> <td class="has-text-centered">{r.pf[\'first_skill\']}</td> <td class="has-text-centered">{r.pf_final[\'first_skill\']}</td> </tr> <tr> <td>Hopping</td> <td class="has-text-centered">{r.pf[\'second_skill\']}</td> <td class="has-text-centered">{r.pf_final[\'second_skill\']}</td> </tr> <tr> <td>Jumping</td> <td class="has-text-centered">{r.pf[\'third_skill\']}</td> <td class="has-text-centered">{r.pf_final[\'third_skill\']}</td> </tr> <tr> <td>Catching</td> <td class="has-text-centered">{r.pf[\'fourth_skill\']}</td> <td class="has-text-centered">{r.pf_final[\'fourth_skill\']}</td> </tr> <tr> <td>Throwing</td> <td class="has-text-centered">{r.pf[\'fifth_skill\']}</td> <td class="has-text-centered">{r.pf_final[\'fifth_skill\']}</td> </tr> </tbody> </table> </td> </tr> </table> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption" style="text-align:left">Physical Fitness Description</caption> <tr> <th>Grade</th> <td class="has-text-centered">A</td> <td class="has-text-centered">B</td> <td class="has-text-centered">C</td> <td class="has-text-centered">D</td> <td class="has-text-centered">E</td> <tr> <tr> <th>Description</th> <td class="has-text-centered">Excellent</td> <td class="has-text-centered">Very Good</td> <td class="has-text-centered">Good</td> <td class="has-text-centered">Average</td> <td class="has-text-centered">Needs Improvement</td> <tr> </table> <div class="page-break"></div> </div> </section> <section class="container is-fluid " show="{student_view==\'report_five_to_eight\'}"> <div class="level no-print"> <div class="level-left"></div> <div class="level-right" style="margin-bottom: 5px;"> <button class="button is-warning has-text-weight-bold" onclick="{close_report_five_to_eight}" style="margin-right: 5px;"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-primary has-text-weight-bold" onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> </div> </div> <div each="{r, i in reportsFiveToEight}" class="fa-report-card-one-two-four"> <h4 style="text-align:center;margin-bottom: -6px;font-weight:bold">REPORT CARD </h4> <h4 style="text-align:center;margin-bottom: 10px"> <span style="border-bottom: dotted 2px #000;font-weight:bold">FINAL ASSESSMENT {session_name}</span> </h4> <table class="table is-fullwidth is-narrow no-border"> <tbody> <tr> <th style="width:180px">Name</th> <td style="width:430px">{r.sd.student_name}</td> <th style="width:180px">Issue Date</th> <td style="width:250px">{issue_date}</td> </tr> <tr> <th>Enroll No</th> <td>{r.sd.enroll_number}</td> <th>Class</th> <td>{standard}</td> </tr> <tr> <th>Date of birth</th> <td>{r.sd.dob}</td> <th>House</th> <td>{r.sd.house_name}</td> </tr> </tbody> </table> <table class="table is-fullwidth is-narrow divider-subject no-border"> <thead> <tr> <td class="table-head">Subject</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">Class Test<br>50</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">Final <br>Assessment<br>100</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">M.O.<br>150</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">H.M.<br>150</td> <td style="width:250px" class="has-text-centered table-head">Comparison of student performance with class average</td> </tr> </thead> <tbody> <tr each="{m in r.marks}" class="{m.show_in}"> <td class="{m.class}">{m.subject_name}</td> <td class="has-text-centered lr-table-border {m.final_marks_limit} {m.class}">{m.final_marks}</td> <td class="has-text-centered lr-table-border {m.second_marks_limit} {m.class}">{m.second_marks}</td> <td class="has-text-centered lr-table-border {m.class}"> <span if="{m.marking_type==\'N\' || m.marking_type==\'T\'}">{m.mo_marks}</span> </td> <td class="has-text-centered lr-table-border {m.class}"> <span if="{m.marking_type==\'N\'}">{m.max_marks}</span> </td> <td class="has-text-centered {m.class}"> <div class="graph" riot-style="width:{(m.mo_marks * 0.80)}px" if="{m.marking_type==\'N\'}"> <div riot-style="font-size:.7em;margin-left:{((m.mo_marks * 0.80) + 5 )}px">{m.mo_marks}</div> </div> <div class="graph1" riot-style="width:{(m.avg_marks * 0.80)}px" if="{m.marking_type==\'N\'}"> <div riot-style="font-size:.7em;margin-left:{((m.avg_marks * 0.80) + 5 )}px">{m.avg_marks}</div> </div> </td> </tr> </tbody> </table> <hr style="border-top: double !important;"> <table class="table is-fullwidth signature-table is-narrow" style="margin-top:35px"> <tr> <td>*Remarks</td> <td colspan="3"><hr style="border-top:dotted;width:100%"></td> </tr> <tr> <td colspan="4"><hr style="border-top:dotted;width:100%"></td> </tr> <tr> <td>*Signature</td> <td> <div class="signature"> <hr style="border-top:dotted"> <span><b>Class Teacher</b></span> </div> </td> <td> <div class="signature"> <hr style="border-top:dotted"> <span><b>Principal</b></span> </div> </td> <td> <div class="signature"> <hr style="border-top:dotted"> <span><b>Parent / Guardian</b></span> </div> </td> </tr> </table> <hr style="border-top: double !important;"> <h6>EAP/F/002</h6> <div class="page-break"></div> <h3 class="has-text-centered report-h3">Maturity Development</h3> <table class="table table-condensed backside is-narrow is-bordered"> <tbody> <tr> <th colspan="2">Given below are six areas in which maturity of the student is shown. Within each area, four levels of maturity have been given. This information indicates at which level your son works at school. </th> </tr> <tr> <th class="has-text-centered">INITIATIVE &amp; PERSEVERANCE</th> <th class="has-text-centered" style="width:120px;">1st Term</th> </tr> <tr> <td>1. Self - motivated and completes tasks</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_first\']}.jpg "></td> </tr> <tr> <td>2. Works well with minimum direction</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_second\']}.jpg"></td> </tr> <tr> <td>3. Needs constant guidance</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_third\']}.jpg"></td> </tr> <tr> <td>4. Has to be told every thing</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">INTEREST</th> <td class="has-text-centered"></td> </tr> <tr> <td>1. Easily stimulated &amp; sustained</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_first\']}.jpg"></td> </tr> <tr> <td>2. Interested only in some areas</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_second\']}.jpg"></td> </tr> <tr> <td>3. Inconsistent</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_third\']}.jpg"></td> </tr> <tr> <td>4. Indifferent</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">USE OF TIME</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Uses time profitably</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_first\']}.jpg"></td> </tr> <tr> <td>2. Organized most of the time</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_second\']}.jpg"></td> </tr> <tr> <td>3. Disorganized but responds well to guidance</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_third\']}.jpg"></td> </tr> <tr> <td>4. Easily distracted</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">WORK HABITS</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Very careful worker</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_first\']}.jpg"></td> </tr> <tr> <td>2. Usually neat</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_second\']}.jpg"></td> </tr> <tr> <td>3. Untidy</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_third\']}.jpg"></td> </tr> <tr> <td>4. Careless</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">PARTICIPATION IN GROUP WORK</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Contributes readily</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_first\']}.jpg"></td> </tr> <tr> <td>2. Tries to dominate the group</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_second\']}.jpg"></td> </tr> <tr> <td>3. Takes part occasionally</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_third\']}.jpg"></td> </tr> <tr> <td>4. Has to be coaxed to participate</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">RESPONSIBILITY</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Takes initiative in situations which require responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_first\']}.jpg"></td> </tr> <tr> <td>2. Accepts a responsibility only when it is assigned</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_second\']}.jpg"></td> </tr> <tr> <td>3. Casual about responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_third\']}.jpg"></td> </tr> <tr> <td>4. Reluctant to accept responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_fourth\']}.jpg"></td> </tr> </tbody> </table> <table class="table is-fullwidth"> <tr> <td style="width:50%"> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Explanation of Unit Test and Terminal Exam Grades</caption> <tbody> <tr> <th class="has-text-centered">Unit Test</th> <th class="has-text-centered">Terminal</th> <th></th> <th></th> </tr> <tr> <td>43 - 50</td> <td>86 - 100</td> <td>A</td> <td>Excellent</td> </tr> <tr> <td>36 - 42</td> <td>71 - 85</td> <td>B</td> <td>Very Good</td> </tr> <tr> <td>28 - 35</td> <td>56 - 70</td> <td>C</td> <td>Good</td> </tr> <tr> <td>20 - 27</td> <td>40 - 55</td> <td>D</td> <td>Fair</td> </tr> <tr> <td>0 - 19</td> <td>0 - 39</td> <td>E</td> <td>Poor</td> </tr> </tbody> </table> </td> <td style="width:50%"> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Physical Fitness Assessment of your ward</caption> <thead> <tr> <th class="has-text-centered">Skill</th> <th style="width:250px" class="has-text-centered">Grade (Final Term)</th> </tr> </thead> <tbody> <tr> <td>Running</td> <td class="has-text-centered">{r.pf[\'first_skill\']}</td> </tr> <tr> <td>Hopping</td> <td class="has-text-centered">{r.pf[\'second_skill\']}</td> </tr> <tr> <td>Jumping</td> <td class="has-text-centered">{r.pf[\'third_skill\']}</td> </tr> <tr> <td>Catching</td> <td class="has-text-centered">{r.pf[\'fourth_skill\']}</td> </tr> <tr> <td>Throwing</td> <td class="has-text-centered">{r.pf[\'fifth_skill\']}</td> </tr> </tbody> </table> </td> </tr> </table> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Physical Fitness Description</caption> <tr> <th>Obtained Marks</th> <td class="centeralign">9-10</td> <td class="centeralign">7-8</td> <td class="centeralign">5-6</td> <td class="centeralign">3-4</td> <td class="centeralign">0-2</td> <tr> <tr> <th>Description</th> <td class="centeralign">Excellent</td> <td class="centeralign">Very Good</td> <td class="centeralign">Good</td> <td class="centeralign">Average</td> <td class="centeralign">Needs Improvement</td> <tr> </table> <div class="page-break"></div> </div> </section> <section class="container is-fluid " show="{student_view==\'report_nine_ten\'}"> <div class="level no-print"> <div class="level-left"></div> <div class="level-right" style="margin-bottom: 5px;"> <button class="button is-warning has-text-weight-bold" onclick="{close_report_nine_ten}" style="margin-right: 5px;"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-primary has-text-weight-bold" onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> </div> </div> <div each="{r, i in reportsNine}" class="fa-report-card-one-two-four"> <h4 style="text-align:center;margin-bottom: -6px;font-weight:bold">REPORT CARD </h4> <h4 style="text-align:center;margin-bottom: 10px"> <span style="border-bottom: dotted 2px #000;font-weight:bold"> <span hide="{ten_report}">FINAL ASSESSMENT {session_name}</span> <span show="{ten_report}">Pre Board Examination-I {session_name}</span> </span> </h4> <table class="table is-fullwidth is-narrow no-border"> <tbody> <tr> <th style="width:180px">Name</th> <td style="width:430px">{r.sd.student_name}</td> <th style="width:180px">Issue Date</th> <td style="width:250px">{issue_date}</td> </tr> <tr> <th>Enroll No</th> <td>{r.sd.enroll_number}</td> <th>Class</th> <td>{standard}</td> </tr> <tr> <th>Date of birth</th> <td>{r.sd.dob}</td> <th>House</th> <td>{r.sd.house_name}</td> </tr> </tbody> </table> <table class="table is-fullwidth is-narrow divider-subject bottom-border"> <thead> <tr> <td class="table-head" rowspan="2" style="vertical-align: middle;">Subject</td> <td style="width:175px" class="has-text-centered table-head lr-table-border" colspan="2">Ist Unit Test(50)</td> <td style="width:175px" class="has-text-centered table-head lr-table-border" colspan="2">Ist Term (100)</td> <td style="width:250px;vertical-align: middle;" class="has-text-centered table-head" rowspan="2">Comparison of student performance with class average</td> </tr> <tr> <td style="width:175px" class="has-text-centered table-head lr-table-border">M.O</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">Avg.</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">M.O</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">Avg.</td> </tr> </thead> <tbody> <tr each="{m in r.marks}" class="{m.show_in} {m.subject_group_class}"> <td class="{m.class}">{m.subject_name}</td> <td class="has-text-centered lr-table-border {m.final_marks_limit} {m.class}">{m.final_marks}</td> <td class="has-text-centered lr-table-border {m.class}" style="vertical-align: middle;" rowspan="{m.subject_group_count}" hide="{m.hide_avg_td}">{m.final_avg_marks}</td> <td class="has-text-centered lr-table-border {m.second_marks_limit} {m.class}">{m.second_marks}</td> <td class="has-text-centered lr-table-border {m.class}" style="vertical-align: middle;" rowspan="{m.subject_group_count}" hide="{m.hide_avg_td}">{m.second_avg_marks}</td> <td class="has-text-centered {m.class}"> <div class="graph" riot-style="width:{m.mo_marks}px" if="{m.marking_type==\'N\'}"> <div riot-style="font-size:.7em;margin-left:{(m.mo_marks + 5 )}px">{m.mo_marks}</div> </div> <div class="graph1" riot-style="width:{m.avg_marks}px" if="{m.marking_type==\'N\'}"> <div riot-style="font-size:.7em;margin-left:{(m.avg_marks + 5 )}px">{m.avg_marks}</div> </div> </td> </tr> </tbody> </table> <hr style="border-top: double !important;"> <table class="table is-fullwidth signature-table is-narrow" style="margin-top:35px"> <tr> <td>*Remarks</td> <td colspan="3"><hr style="border-top:dotted;width:100%"></td> </tr> <tr> <td colspan="4"><hr style="border-top:dotted;width:100%"></td> </tr> <tr> <td>*Signature</td> <td> <div class="signature"> <hr style="border-top:dotted"> <span><b>Class Teacher</b></span> </div> </td> <td> <div class="signature"> <hr style="border-top:dotted"> <span><b>Principal</b></span> </div> </td> <td> <div class="signature"> <hr style="border-top:dotted"> <span><b>Parent / Guardian</b></span> </div> </td> </tr> </table> <hr style="border-top: double !important;"> <h6>EAP/F/002</h6> <div class="page-break"></div> <h3 class="has-text-centered report-h3">Maturity Development</h3> <table class="table table-condensed backside is-narrow is-bordered"> <tbody> <tr> <th colspan="2">Given below are six areas in which maturity of the student is shown. Within each area, four levels of maturity have been given. This information indicates at which level your son works at school. </th> </tr> <tr> <th class="has-text-centered">INITIATIVE &amp; PERSEVERANCE</th> <th class="has-text-centered" style="width:120px;">1st Term</th> </tr> <tr> <td>1. Self - motivated and completes tasks</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_first\']}.jpg "></td> </tr> <tr> <td>2. Works well with minimum direction</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_second\']}.jpg"></td> </tr> <tr> <td>3. Needs constant guidance</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_third\']}.jpg"></td> </tr> <tr> <td>4. Has to be told every thing</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">INTEREST</th> <td class="has-text-centered"></td> </tr> <tr> <td>1. Easily stimulated &amp; sustained</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_first\']}.jpg"></td> </tr> <tr> <td>2. Interested only in some areas</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_second\']}.jpg"></td> </tr> <tr> <td>3. Inconsistent</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_third\']}.jpg"></td> </tr> <tr> <td>4. Indifferent</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">USE OF TIME</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Uses time profitably</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_first\']}.jpg"></td> </tr> <tr> <td>2. Organized most of the time</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_second\']}.jpg"></td> </tr> <tr> <td>3. Disorganized but responds well to guidance</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_third\']}.jpg"></td> </tr> <tr> <td>4. Easily distracted</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">WORK HABITS</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Very careful worker</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_first\']}.jpg"></td> </tr> <tr> <td>2. Usually neat</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_second\']}.jpg"></td> </tr> <tr> <td>3. Untidy</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_third\']}.jpg"></td> </tr> <tr> <td>4. Careless</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">PARTICIPATION IN GROUP WORK</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Contributes readily</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_first\']}.jpg"></td> </tr> <tr> <td>2. Tries to dominate the group</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_second\']}.jpg"></td> </tr> <tr> <td>3. Takes part occasionally</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_third\']}.jpg"></td> </tr> <tr> <td>4. Has to be coaxed to participate</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">RESPONSIBILITY</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Takes initiative in situations which require responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_first\']}.jpg"></td> </tr> <tr> <td>2. Accepts a responsibility only when it is assigned</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_second\']}.jpg"></td> </tr> <tr> <td>3. Casual about responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_third\']}.jpg"></td> </tr> <tr> <td>4. Reluctant to accept responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_fourth\']}.jpg"></td> </tr> </tbody> </table> <table class="table is-fullwidth"> <tr> <td style="width:50%"> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Explanation of Unit Test and Terminal Exam Grades</caption> <tbody> <tr> <th class="has-text-centered">Unit Test</th> <th class="has-text-centered">Terminal</th> <th></th> <th></th> </tr> <tr> <td>43 - 50</td> <td>86 - 100</td> <td>A</td> <td>Excellent</td> </tr> <tr> <td>36 - 42</td> <td>71 - 85</td> <td>B</td> <td>Very Good</td> </tr> <tr> <td>28 - 35</td> <td>56 - 70</td> <td>C</td> <td>Good</td> </tr> <tr> <td>20 - 27</td> <td>40 - 55</td> <td>D</td> <td>Fair</td> </tr> <tr> <td>0 - 19</td> <td>0 - 39</td> <td>E</td> <td>Poor</td> </tr> </tbody> </table> </td> <td style="width:50%"> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Physical Fitness Assessment of your ward</caption> <thead> <tr> <th class="has-text-centered">Parameters</th> <th style="width:250px" class="has-text-centered">Marks (Final Term)</th> </tr> </thead> <tbody> <tr> <td>Aerobic Capacity</td> <td class="has-text-centered">{r.pf[\'first_skill\']}</td> </tr> <tr> <td>Agility</td> <td class="has-text-centered">{r.pf[\'second_skill\']}</td> </tr> <tr> <td>Explosive Strength</td> <td class="has-text-centered">{r.pf[\'third_skill\']}</td> </tr> <tr> <td>Abdominal Strength</td> <td class="has-text-centered">{r.pf[\'fourth_skill\']}</td> </tr> <tr> <td>Flexiblity</td> <td class="has-text-centered">{r.pf[\'fifth_skill\']}</td> </tr> </tbody> </table> </td> </tr> </table> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Physical Fitness Description</caption> <tr> <th>Obtained Marks</th> <td class="centeralign">9-10</td> <td class="centeralign">7-8</td> <td class="centeralign">5-6</td> <td class="centeralign">3-4</td> <td class="centeralign">0-2</td> <tr> <tr> <th>Description</th> <td class="centeralign">Excellent</td> <td class="centeralign">Very Good</td> <td class="centeralign">Good</td> <td class="centeralign">Average</td> <td class="centeralign">Needs Improvement</td> <tr> </table> <div class="page-break"></div> </div> </section> <section class="container is-fluid " show="{student_view==\'report_eleven\'}"> <div class="level no-print"> <div class="level-left"></div> <div class="level-right" style="margin-bottom: 5px;"> <button class="button is-warning has-text-weight-bold" onclick="{close_report_eleven}" style="margin-right: 5px;"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-primary has-text-weight-bold" onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> </div> </div> <div each="{r, i in reportsEleven}" class="fa-report-card-one-two-four"> <h4 style="text-align:center;margin-bottom: -6px;font-weight:bold">REPORT CARD </h4> <h4 style="text-align:center;margin-bottom: 10px"> <span style="border-bottom: dotted 2px #000;font-weight:bold"> <span hide="{twelve_report}">FINAL ASSESSMENT {session_name}</span> <span show="{twelve_report}">Pre Board Examination-I {session_name}</span> </span> </h4> <table class="table is-fullwidth is-narrow no-border"> <tbody> <tr> <th style="width:180px">Name</th> <td style="width:430px">{r.sd.student_name}</td> <th style="width:180px">Issue Date</th> <td style="width:250px">{issue_date}</td> </tr> <tr> <th>Enroll No</th> <td>{r.sd.enroll_number}</td> <th>Class</th> <td>{standard}</td> </tr> <tr> <th>Date of birth</th> <td>{r.sd.dob}</td> <th>House</th> <td>{r.sd.house_name}</td> </tr> </tbody> </table> <table class="table is-fullwidth is-narrow divider-subject no-border"> <thead> <tr> <td class="table-head" rowspan="2" style="vertical-align: middle;">Subject</td> <td style="width:175px" class="has-text-centered table-head lr-table-border" colspan="2">Ist Unit Test(50)</td> <td style="width:175px" class="has-text-centered table-head lr-table-border" colspan="2">Ist Term (100)</td> <td style="width:250px;vertical-align: middle;" class="has-text-centered table-head" rowspan="2">Comparison of student performance with class average</td> </tr> <tr> <td style="width:175px" class="has-text-centered table-head lr-table-border">M.O</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">H.M</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">M.O</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">H.M</td> </tr> </thead> <tbody> <tr each="{m in r.marks}" class="{m.show_in} {m.subject_group_class}"> <td class="{m.class}">{m.subject_name}</td> <td class="has-text-centered lr-table-border {m.final_marks_limit} {m.class}">{m.final_marks}</td> <td class="has-text-centered lr-table-border {m.class}">{m.final_max_marks}</td> <td class="has-text-centered lr-table-border {m.second_marks_limit} {m.class}">{m.second_marks}</td> <td class="has-text-centered lr-table-border {m.class}">{m.second_max_marks}</td> <td class="has-text-centered {m.class}"> <div class="graph" riot-style="width:{m.mo_marks}px" if="{m.marking_type==\'N\'}"> <div riot-style="font-size:.7em;margin-left:{(m.mo_marks + 5 )}px">{m.mo_marks}</div> </div> <div class="graph1" riot-style="width:{m.avg_marks}px" if="{m.marking_type==\'N\'}"> <div riot-style="font-size:.7em;margin-left:{(m.avg_marks + 5 )}px">{m.avg_marks}</div> </div> </td> </tr> </tbody> </table> <hr style="border-top: double !important;"> <table class="table is-fullwidth signature-table is-narrow" style="margin-top:35px"> <tr> <td>*Remarks</td> <td colspan="3"><hr style="border-top:dotted;width:100%"></td> </tr> <tr> <td colspan="4"><hr style="border-top:dotted;width:100%"></td> </tr> <tr> <td>*Signature</td> <td> <div class="signature"> <hr style="border-top:dotted"> <span><b>Class Teacher</b></span> </div> </td> <td> <div class="signature"> <hr style="border-top:dotted"> <span><b>Principal</b></span> </div> </td> <td> <div class="signature"> <hr style="border-top:dotted"> <span><b>Parent / Guardian</b></span> </div> </td> </tr> </table> <hr style="border-top: double !important;"> <h6>EAP/F/002</h6> <div class="page-break"></div> <h3 class="has-text-centered report-h3">Maturity Development</h3> <table class="table table-condensed backside is-narrow is-bordered"> <tbody> <tr> <th colspan="2">Given below are six areas in which maturity of the student is shown. Within each area, four levels of maturity have been given. This information indicates at which level your son works at school. </th> </tr> <tr> <th class="has-text-centered">INITIATIVE &amp; PERSEVERANCE</th> <th class="has-text-centered" style="width:120px;">1st Term</th> </tr> <tr> <td>1. Self - motivated and completes tasks</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_first\']}.jpg "></td> </tr> <tr> <td>2. Works well with minimum direction</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_second\']}.jpg"></td> </tr> <tr> <td>3. Needs constant guidance</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_third\']}.jpg"></td> </tr> <tr> <td>4. Has to be told every thing</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">INTEREST</th> <td class="has-text-centered"></td> </tr> <tr> <td>1. Easily stimulated &amp; sustained</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_first\']}.jpg"></td> </tr> <tr> <td>2. Interested only in some areas</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_second\']}.jpg"></td> </tr> <tr> <td>3. Inconsistent</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_third\']}.jpg"></td> </tr> <tr> <td>4. Indifferent</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">USE OF TIME</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Uses time profitably</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_first\']}.jpg"></td> </tr> <tr> <td>2. Organized most of the time</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_second\']}.jpg"></td> </tr> <tr> <td>3. Disorganized but responds well to guidance</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_third\']}.jpg"></td> </tr> <tr> <td>4. Easily distracted</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">WORK HABITS</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Very careful worker</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_first\']}.jpg"></td> </tr> <tr> <td>2. Usually neat</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_second\']}.jpg"></td> </tr> <tr> <td>3. Untidy</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_third\']}.jpg"></td> </tr> <tr> <td>4. Careless</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">PARTICIPATION IN GROUP WORK</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Contributes readily</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_first\']}.jpg"></td> </tr> <tr> <td>2. Tries to dominate the group</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_second\']}.jpg"></td> </tr> <tr> <td>3. Takes part occasionally</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_third\']}.jpg"></td> </tr> <tr> <td>4. Has to be coaxed to participate</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">RESPONSIBILITY</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Takes initiative in situations which require responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_first\']}.jpg"></td> </tr> <tr> <td>2. Accepts a responsibility only when it is assigned</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_second\']}.jpg"></td> </tr> <tr> <td>3. Casual about responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_third\']}.jpg"></td> </tr> <tr> <td>4. Reluctant to accept responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_fourth\']}.jpg"></td> </tr> </tbody> </table> <table class="table is-fullwidth" hide="{twelve_report}"> <tr> <td style="width:50%"> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Explanation of Unit Test and Terminal Exam Grades</caption> <tbody> <tr> <th class="has-text-centered">Unit Test</th> <th class="has-text-centered">Terminal</th> <th></th> <th></th> </tr> <tr> <td>43 - 50</td> <td>86 - 100</td> <td>A</td> <td>Excellent</td> </tr> <tr> <td>36 - 42</td> <td>71 - 85</td> <td>B</td> <td>Very Good</td> </tr> <tr> <td>28 - 35</td> <td>56 - 70</td> <td>C</td> <td>Good</td> </tr> <tr> <td>20 - 27</td> <td>40 - 55</td> <td>D</td> <td>Fair</td> </tr> <tr> <td>0 - 19</td> <td>0 - 39</td> <td>E</td> <td>Poor</td> </tr> </tbody> </table> </td> <td style="width:50%"> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Physical Fitness Assessment of your ward</caption> <thead> <tr> <th class="has-text-centered">Parameters</th> <th style="width:250px" class="has-text-centered">Marks (Final Term)</th> </tr> </thead> <tbody> <tr> <td>Aerobic Capacity</td> <td class="has-text-centered">{r.pf[\'first_skill\']}</td> </tr> <tr> <td>Agility</td> <td class="has-text-centered">{r.pf[\'second_skill\']}</td> </tr> <tr> <td>Explosive Strength</td> <td class="has-text-centered">{r.pf[\'third_skill\']}</td> </tr> <tr> <td>Abdominal Strength</td> <td class="has-text-centered">{r.pf[\'fourth_skill\']}</td> </tr> <tr> <td>Flexiblity</td> <td class="has-text-centered">{r.pf[\'fifth_skill\']}</td> </tr> </tbody> </table> </td> </tr> </table> <table class="table is-fullwidth is-narrow is-bordered" hide="{twelve_report}"> <caption class="report-caption">Physical Fitness Description</caption> <tr> <th>Obtained Marks</th> <td class="centeralign">9-10</td> <td class="centeralign">7-8</td> <td class="centeralign">5-6</td> <td class="centeralign">3-4</td> <td class="centeralign">0-2</td> <tr> <tr> <th>Description</th> <td class="centeralign">Excellent</td> <td class="centeralign">Very Good</td> <td class="centeralign">Good</td> <td class="centeralign">Average</td> <td class="centeralign">Needs Improvement</td> <tr> </table> <h1 class="has-text-centered is-size-3" show="{twelve_report}">Explanation of Unit Test and Terminal Exam Grades</h1> <center style="font-weight: bolder;"> <table class="table table-condensed backside is-narrow no-border" show="{twelve_report}"> <tbody> <tr> <td class="has-text-centered" style="text-decoration:underline;width:200px;">Unit Test</td> <td class="has-text-centered" style="text-decoration:underline;width:200px;">Terminal</td> <td style="width:200px;"></td> <td style="width:200px;"></td> </tr> <tr> <td class="has-text-centered">43 - 50</td> <td class="has-text-centered">86 - 100</td> <td class="has-text-centered">A</td> <td class="has-text-centered">Excellent</td> </tr> <tr> <td class="has-text-centered">36 - 42</td> <td class="has-text-centered">71 - 85</td> <td class="has-text-centered">B</td> <td class="has-text-centered">Very Good</td> </tr> <tr> <td class="has-text-centered">28 - 35</td> <td class="has-text-centered">56 - 70</td> <td class="has-text-centered">C</td> <td class="has-text-centered">Good</td> </tr> <tr> <td class="has-text-centered">20 - 27</td> <td class="has-text-centered">40 - 55</td> <td class="has-text-centered">D</td> <td class="has-text-centered">Fair</td> </tr> <tr> <td class="has-text-centered">0 - 19</td> <td class="has-text-centered">0 - 39</td> <td class="has-text-centered">E</td> <td class="has-text-centered">Poor</td> </tr> </tbody> </table> </center> <div class="page-break"></div> </div> </section>', '', '', function(opts) {

	var self = this
	self.ten_report = false
	self.twelve_report = false
    self.on("mount", function(){
	    self.session_name= getCookie('session_name')
    	self.loading = false
    	self.role = getCookie('role')
    	self.student_view = 'show_student_list_view'
    	self.readStandard()
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
     	finalAssessmentReportStore.off('read_standard_changed',StandardChanged)
    	finalAssessmentReportStore.off('read_student_changed',StudentChanged)
    	finalAssessmentReportStore.off('read_final_assessment_report_card_one_to_four_changed',ReportOneToFourChanged)
    	finalAssessmentReportStore.off('read_final_assessment_report_card_five_to_eight_changed',ReportFiveToEightChanged)
    	finalAssessmentReportStore.off('read_final_assessment_report_card_nine_changed',ReportNineChanged)
    	finalAssessmentReportStore.off('read_final_assessment_report_card_eleven_changed',ReportElevenChanged)
    })

    self.getStudentData = () =>{

		finalAssessmentReportStore.trigger('read_student', self.refs.standard_id.value,self.refs.section_id.value)
    }

    self.readStandard = () => {
       finalAssessmentReportStore.trigger('read_standard')
    }

    self.getSection = () => {
    	self.filteredSections = []
    	self.filteredSections = self.sections.filter(s => {
    		return s.standard_id == self.refs.standard_id.value
    	})
      self.update()
      self.getStudentData()
    }

    self.selectAll = () => {

    	if($('#checkStudent').is(":checked")){
    		self.students.map(i=>{
	          i.done = true;
	          $('StudentId'+i.student_id).prop('checked', true);

	        })
    	}else{
    		self.students.map(i=>{
	          i.done = false;
	          $('StudentId'+i.student_id).prop('checked', false);
	          self.student_id = i.student_id;
            console.log(self.student_id)
	        })
    	}
      console.log(self.students)
    }

    self.selectStudent = (item,event) => {
    	item.done=!event.item.st.done
        self.student_id = item.student_id;
        console.log(self.student_id)
    }

    self.close_report_one_to_four = () => {
      self.student_view = 'show_student_list_view'
    }

    self.close_report_eleven = () => {
      self.student_view = 'show_student_list_view'
    }

    self.close_report_nine_ten = () => {
      self.student_view = 'show_student_list_view'
    }

    self.close_report_five_to_eight = () => {
      self.student_view = 'show_student_list_view'
    }

    self.finalAssessmentReportCardOneToFour = () => {
    	let student_id='';
	     self.students.map( q => {
	        if(q.done){
	          if(student_id==''){
	            student_id=q.student_id
	          }else{
	            student_id=student_id+','+q.student_id
	          }
	        }
	      })
	     console.log(student_id);
    	if(student_id==''){
        	toastr.info('Please select at least one student and try again')
        	return;
      	}else if(!self.refs.issue_date.value){
        	toastr.error("Please enter Issue Date and try again")
        	return;
      	}else if(!self.refs.re_open_date.value){
        	toastr.error("Please enter re-open and try again")
        	return;
      	}else{
      		self.issue_date=self.refs.issue_date.value
      		self.re_open_date=self.refs.re_open_date.value
      		self.standard=$("#standard_id option:selected").text()+ ' ' + $("#section_id option:selected").text();
      		var obj={}
          	obj['issue_date']=convertDate(self.refs.issue_date.value)
          	obj['standard_id']=self.refs.standard_id.value
          	obj['section_id']=self.refs.section_id.value
          	obj['student_id']=student_id
          	obj['end_date']=self.end_date
          	obj['end_date_final']=self.end_date_final
          	self.loading = true

          	if(self.refs.standard_id.value>=4 && self.refs.standard_id.value<=7){
	        	finalAssessmentReportStore.trigger('read_final_assessment_report_card_one_to_four',obj)
          	}else if(self.refs.standard_id.value>=8 && self.refs.standard_id.value<=11){
          		finalAssessmentReportStore.trigger('read_final_assessment_report_card_five_to_eight',obj)
          	}else if(self.refs.standard_id.value==12 || self.refs.standard_id.value==13){
          		if(self.refs.standard_id.value==13){
          			self.ten_report = true
          		}else{
          			self.ten_report = false
          		}
          		finalAssessmentReportStore.trigger('read_final_assessment_report_card_nine',obj)
          	}else if(self.refs.standard_id.value==14 || self.refs.standard_id.value==15){
          		if(self.refs.standard_id.value==15){
          			self.twelve_report = true
          		}else{
          			self.twelve_report = false
          		}
          		finalAssessmentReportStore.trigger('read_final_assessment_report_card_eleven',obj)
          	}else {
               toastr.error("No Report for this class")
               self.loading = false
               self.update()
        	   return;
          	}
      	}
    }

    finalAssessmentReportStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards,sections,end_date,end_date_final){
      console.log(standards)
      self.standards = standards
      self.sections = sections
      self.end_date = end_date
      self.end_date_final = end_date_final
      self.loading = false
      self.update()
      self.getSection()
      self.getStudentData()
    }

    finalAssessmentReportStore.on('read_student_changed',StudentChanged)
    function StudentChanged(students){
      console.log(students)
      self.students = students
      self.students.map(i=>{
	      i.done = false;
      })
      self.update()
    }

    finalAssessmentReportStore.on('read_final_assessment_report_card_one_to_four_changed',ReportOneToFourChanged)
    function ReportOneToFourChanged(reportsOneToFour){
      self.loading = false
      self.student_view	= 'report_one_to_four'
      self.reportsOneToFour = reportsOneToFour
      console.log(self.student_view)
      console.log('read_final_assessment_report_card_one_to_four_changed')
      self.update()
    }

    finalAssessmentReportStore.on('read_final_assessment_report_card_five_to_eight_changed',ReportFiveToEightChanged)
    function ReportFiveToEightChanged(reportsFiveToEight){
      self.loading = false
      self.student_view	= 'report_five_to_eight'
      self.reportsFiveToEight = reportsFiveToEight
      self.update()
      console.log('read_final_assessment_report_card_five_to_eight_changed')
      console.log(self.student_view)
      console.log('student-view'+self.student_view)
      self.update()
    }

    finalAssessmentReportStore.on('read_final_assessment_report_card_nine_changed',ReportNineChanged)
    function ReportNineChanged(reportsNine){
      self.loading = false
      self.student_view	= 'report_nine_ten'
      self.reportsNine = reportsNine
      self.update()
      console.log('read_final_assessment_report_card_nine_changed')
      console.log(self.student_view)
      console.log('student-view'+self.student_view)
      self.update()
    }

    finalAssessmentReportStore.on('read_final_assessment_report_card_eleven_changed',ReportElevenChanged)
    function ReportElevenChanged(reportsEleven){
      self.loading = false
      self.student_view	= 'report_eleven'
      self.reportsEleven = reportsEleven
      self.update()
      console.log(self.student_view)
      console.log('student-view'+self.student_view)
      self.update()
    }

});
riot.tag2('fine-setting', '<section class="container is-fluid"> <div class="level"> <div class="level-left"> <div class="level-item"> <h2 class="title" style="color: #ff3860;">Fine Setting</h2> </div> </div> </div> <div class="flex items-center mt-2 mb-6 no-print"> <div class="bg-green py-1 rounded w-10"></div> <div class="bg-grey h-px flex-auto"></div> </div> <div class="columns"> <div class="column is-two-fifths"> <div class="box max-w-md"> <div class="columns is-multiline"> <div class="column is-full"> <div class="field"> <label class="label" for="venue">Grace Period for Fine</label> <input class="input" ref="fineGracePreiodText" type="number"> </div> </div> <div class="column is-full"> <div class="field"> <label class="label" for="fineTypeList">Fine Type</label> <div class="control"> <div class="select is-fullwidth"> <select id="fineType" ref="fineTypeList"> <option value="Daily">Daily</option> <option value="Slab">Slab</option> </select> </div> </div> </div> </div> <div class="column is-full"> <label class="label" for="fineAmount">Fine Amount</label> <input class="input" ref="fineAmountText" type="number"> </div> <div class="column is-full"> <button class="button is-danger" onclick="{add}">Save</button> <button class="button is-info" onclick="{reset}">Reset</button> </div> </div> </div> </div> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Save'
      self.role = getCookie('role')
      self.update()
      self.readFineSetting()
    });
    self.on("unmount", function(){
      fineStore.off('read_fine_changed', ReadFineChanged)
      fineStore.off('add_fine_changed',AddFineChanged)

    });
    self.reset = () => {
    	fineStore.trigger('read_fine_setting')
    }

    self.readFineSetting = () => {
       fineStore.trigger('read_fine_setting')

    }

    self.add = () => {
      if(!self.refs.fineGracePreiodText.value){
        toastr.info("Please enter Fine Grace Period and try again")
      }if(!self.refs.fineAmountText.value){
        toastr.info("Please enter Fine Amount and try again")
      }else{
        self.loading = true
          console.log('save')
          fineStore.trigger('add', self.refs.fineGracePreiodText.value,
           self.refs.fineAmountText.value , self.refs.fineTypeList.value)
      }
    }

    fineStore.on('add_fine_changed',AddFineChanged)
    function AddFineChanged(fines){
      self.loading = false
      self.fines = fines
      self.update()
      console.log(self.fines)
    }

     fineStore.on('read_fine_changed',ReadFineChanged)
    function ReadFineChanged(f){
      self.fines = f
      self.update()
      self.refs.fineAmountText.value = self.fines[0].fine_amount
      self.refs.fineGracePreiodText.value = self.fines[0].fine_grace_preiod
      self.refs.fineTypeList.value = self.fines[0].fine_type
    }

});
riot.tag2('first-assessment-report-card', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{student_view ==\'show_student_list_view\'}"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">First Assessment Report Card</h2> <div class="level box"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" onchange="{getSection}" id="standard_id"> <option each="{standards}" riot-value="{standard_id}"> {standard}</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Section</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="section_id" onchange="{getStudentData}" id="section_id"> <option each="{filteredSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> </div> </div> <div class="level-right"> <div class="column is-narrow"><label class="label">Issue date</label></div> <div class="column is-narrow"> <div class="control"> <input class="input date is-small" ref="issue_date" type="text"> </div> </div> <button class="button is-warning has-text-weight-bold ml5 is-small" onclick="{firstAssessmentReportCardOneToFour}"> Print Report Card </button> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <thead> <tr> <th>SL no</th> <th>Enroll No</th> <th>Roll no</th> <th>Student Name</th> <th>First Term</th> <th class="has-text-centered"> <input type="checkbox" id="checkStudent" onclick="{selectAll}"> </th> </tr> </thead> <tbody> <tr each="{st, i in students}"> <td>{i+1}</td> <td>{st.enroll_number}</td> <td>{st.roll_number}</td> <td>{st.name}</td> <td></td> <td class="has-text-centered"> <input type="checkbox" class="id_check_box" checked="{st.done}" id="{\'StudentId\' + st.student_id}" onclick="{selectStudent.bind(this,st)}"> </td> </tr> </tbody> </table> </section> <section class="container is-fluid" show="{student_view==\'report_one_to_four\'}"> <div class="level no-print"> <div class="level-left"></div> <div class="level-right" style="margin-bottom: 5px;"> <button class="button is-warning has-text-weight-bold" onclick="{close_report_one_to_four}" style="margin-right: 5px;"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-primary has-text-weight-bold" onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> </div> </div> <div each="{r, i in reportsOneToFour}" class="fa-report-card-one-two-four"> <h4 style="text-align:center;margin-bottom: -6px;font-weight:bold">REPORT CARD </h4> <h4 style="text-align:center;margin-bottom: 10px"> <span style="border-bottom: dotted 2px #000;font-weight:bold">FIRST ASSESSMENT 2018-2019</span> </h4> <table class="table is-fullwidth is-narrow no-border"> <tbody> <tr> <th style="width:180px">Name</th> <td style="width:430px">{r.marks[0].student_name}</td> <th style="width:180px">Issue Date</th> <td style="width:250px">{issue_date}</td> </tr> <tr> <th>Enroll No</th> <td>{r.marks[0].enroll_number}</td> <th>Class</th> <td>{standard}</td> </tr> <tr> <th>Date of birth</th> <td>{r.marks[0].dob}</td> <th>House</th> <td>{r.marks[0].house_name}</td> </tr> </tbody> </table> <table class="table is-fullwidth is-narrow border-less-table divider-subject"> <thead> <tr> <td class="table-head">Subject</td> <td style="width:250px" class="has-text-centered table-head lr-table-border">Grade Obtained<br>(100)</td> <td style="width:250px" class="has-text-centered table-head">Highest Grade</td> </tr> </thead> <tbody> <tr each="{m in r.marks}" class="{m.show_in}"> <td>{m.subject_name}</td> <td class="has-text-centered lr-table-border">{m.marks}</td> <td class="has-text-centered">{m.max_marks}</td> </tr> </tbody> </table> <hr style="border-top: double !important;"> <table class="table is-fullwidth signature-table is-narrow" style="margin-top:35px"> <tr> <td>*Remarks</td> <td colspan="3"><hr style="border-top:dotted;width:100%"></td> </tr> <tr> <td colspan="4"><hr style="border-top:dotted;width:100%"></td> </tr> <tr> <td>*Signature</td> <td> <div class="signature"> <hr style="border-top:dotted"> <span>Class Teacher</span> </div> </td> <td> <div class="signature"> <hr style="border-top:dotted"> <span>Principal</span> </div> </td> <td> <div class="signature"> <hr style="border-top:dotted"> <span>Parent / Guardian</span> </div> </td> </tr> </table> <hr style="border-top: double !important;"> <h6>EAP/F/002</h6> <div class="page-break"></div> <h3 class="has-text-centered report-h3">Maturity Development</h3> <table class="table table-condensed backside is-narrow is-bordered"> <tr> <th colspan="2">Given below are six areas in which maturity of the student is shown. Within each area, four levels of maturity have been given. This information indicates at which level your son works at school. </th> </tr> <tr> <th class="has-text-centered">INITIATIVE &amp; PERSEVERANCE</th> <th class="has-text-centered" style="width:120px;">1st Term</th> </tr> <tr> <td>1. Self - motivated and completes tasks</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_first\']}.jpg "></td> </tr> <tr> <td>2. Works well with minimum direction</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_second\']}.jpg"></td> </tr> <tr> <td>3. Needs constant guidance</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_third\']}.jpg"></td> </tr> <tr> <td>4. Has to be told every thing</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">INTEREST</th> <td class="has-text-centered"></td> </tr> <tr> <td>1. Easily stimulated &amp; sustained</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_first\']}.jpg"></td> </tr> <tr> <td>2. Interested only in some areas</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_second\']}.jpg"></td> </tr> <tr> <td>3. Inconsistent</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_third\']}.jpg"></td> </tr> <tr> <td>4. Indifferent</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">USE OF TIME</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Uses time profitably</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_first\']}.jpg"></td> </tr> <tr> <td>2. Organized most of the time</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_second\']}.jpg"></td> </tr> <tr> <td>3. Disorganized but responds well to guidance</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_third\']}.jpg"></td> </tr> <tr> <td>4. Easily distracted</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">WORK HABITS</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Very careful worker</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_first\']}.jpg"></td> </tr> <tr> <td>2. Usually neat</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_second\']}.jpg"></td> </tr> <tr> <td>3. Untidy</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_third\']}.jpg"></td> </tr> <tr> <td>4. Careless</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">PARTICIPATION IN GROUP WORK</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Contributes readily</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_first\']}.jpg"></td> </tr> <tr> <td>2. Tries to dominate the group</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_second\']}.jpg"></td> </tr> <tr> <td>3. Takes part occasionally</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_third\']}.jpg"></td> </tr> <tr> <td>4. Has to be coaxed to participate</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">RESPONSIBILITY</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Takes initiative in situations which require responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_first\']}.jpg"></td> </tr> <tr> <td>2. Accepts a responsibility only when it is assigned</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_second\']}.jpg"></td> </tr> <tr> <td>3. Casual about responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_third\']}.jpg"></td> </tr> <tr> <td>4. Reluctant to accept responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_fourth\']}.jpg"></td> </tr> </table> <table class="table is-fullwidth"> <tr> <td style="width:50%"> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Explanation of Unit Test and Terminal Exam Grades</caption> <tbody> <tr> <th class="has-text-centered">Unit Test</th> <th class="has-text-centered">Terminal</th> <th></th> <th></th> </tr> <tr> <td>43 - 50</td> <td>86 - 100</td> <td>A</td> <td>Excellent</td> </tr> <tr> <td>36 - 42</td> <td>71 - 85</td> <td>B</td> <td>Very Good</td> </tr> <tr> <td>28 - 35</td> <td>56 - 70</td> <td>C</td> <td>Good</td> </tr> <tr> <td>20 - 27</td> <td>40 - 55</td> <td>D</td> <td>Fair</td> </tr> <tr> <td>0 - 19</td> <td>0 - 39</td> <td>E</td> <td>Poor</td> </tr> </tbody> </table> </td> <td style="width:50%"> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Physical Fitness Assessment of your ward</caption> <thead> <tr> <th class="has-text-centered">Skill</th> <th style="width:250px" class="has-text-centered">Grade (First Term)</th> </tr> </thead> <tbody> <tr> <td>Running</td> <td class="has-text-centered">{r.pf[\'first_skill\']}</td> </tr> <tr> <td>Hopping</td> <td class="has-text-centered">{r.pf[\'second_skill\']}</td> </tr> <tr> <td>Jumping</td> <td class="has-text-centered">{r.pf[\'third_skill\']}</td> </tr> <tr> <td>Catching</td> <td class="has-text-centered">{r.pf[\'fourth_skill\']}</td> </tr> <tr> <td>Throwing</td> <td class="has-text-centered">{r.pf[\'fifth_skill\']}</td> </tr> </tbody> </table> </td> </tr> </table> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption" style="text-align:left">Physical Fitness Description</caption> <tr> <th>Grade</th> <td class="has-text-centered">A</td> <td class="has-text-centered">B</td> <td class="has-text-centered">C</td> <td class="has-text-centered">D</td> <td class="has-text-centered">E</td> <tr> <tr> <th>Description</th> <td class="has-text-centered">Excellent</td> <td class="has-text-centered">Very Good</td> <td class="has-text-centered">Good</td> <td class="has-text-centered">Average</td> <td class="has-text-centered">Needs Improvement</td> <tr> </table> <div class="page-break"></div> </div> </section> <section class="container is-fluid " show="{student_view==\'report_five_to_eight\'}"> <div class="level no-print"> <div class="level-left"></div> <div class="level-right" style="margin-bottom: 5px;"> <button class="button is-warning has-text-weight-bold" onclick="{close_report_five_to_eight}" style="margin-right: 5px;"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-primary has-text-weight-bold" onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> </div> </div> <div each="{r, i in reportsFiveToEight}" class="fa-report-card-one-two-four"> <h4 style="text-align:center;margin-bottom: -6px;font-weight:bold">REPORT CARD </h4> <h4 style="text-align:center;margin-bottom: 10px"> <span style="border-bottom: dotted 2px #000;font-weight:bold">FIRST ASSESSMENT 2018-2019</span> </h4> <table class="table is-fullwidth is-narrow no-border"> <tbody> <tr> <th style="width:180px">Name</th> <td style="width:430px">{r.sd.student_name}</td> <th style="width:180px">Issue Date</th> <td style="width:250px">{issue_date}</td> </tr> <tr> <th>Enroll No</th> <td>{r.sd.enroll_number}</td> <th>Class</th> <td>{standard}</td> </tr> <tr> <th>Date of birth</th> <td>{r.sd.dob}</td> <th>House</th> <td>{r.sd.house_name}</td> </tr> </tbody> </table> <table class="table is-fullwidth is-narrow divider-subject no-border"> <thead> <tr> <td class="table-head">Subject</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">Class Test<br>50</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">First <br>Assessment<br>100</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">M.O.<br>150</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">H.M.<br>150</td> <td style="width:250px" class="has-text-centered table-head">Comparison of student performance with class average</td> </tr> </thead> <tbody> <tr each="{m in r.marks}" class="{m.show_in}"> <td class="{m.class}">{m.subject_name}</td> <td class="has-text-centered lr-table-border {m.first_marks_limit} {m.class}">{m.first_marks}</td> <td class="has-text-centered lr-table-border {m.second_marks_limit} {m.class}">{m.second_marks}</td> <td class="has-text-centered lr-table-border {m.class}"> <span if="{m.marking_type==\'N\' || m.marking_type==\'T\'}">{m.mo_marks}</span> </td> <td class="has-text-centered lr-table-border {m.class}"> <span if="{m.marking_type==\'N\'}">{m.max_marks}</span> </td> <td class="has-text-centered {m.class}"> <div class="graph" riot-style="width:{(m.mo_marks * 0.80)}px" if="{m.marking_type==\'N\'}"> <div riot-style="font-size:.7em;margin-left:{((m.mo_marks * 0.80) + 5 )}px">{m.mo_marks}</div> </div> <div class="graph1" riot-style="width:{(m.avg_marks * 0.80)}px" if="{m.marking_type==\'N\'}"> <div riot-style="font-size:.7em;margin-left:{((m.avg_marks * 0.80) + 5 )}px">{m.avg_marks}</div> </div> </td> </tr> </tbody> </table> <hr style="border-top: double !important;"> <table class="table is-fullwidth signature-table is-narrow" style="margin-top:35px"> <tr> <td>*Remarks</td> <td colspan="3"><hr style="border-top:dotted;width:100%"></td> </tr> <tr> <td colspan="4"><hr style="border-top:dotted;width:100%"></td> </tr> <tr> <td>*Signature</td> <td> <div class="signature"> <hr style="border-top:dotted"> <span>Class Teacher</span> </div> </td> <td> <div class="signature"> <hr style="border-top:dotted"> <span>Principal</span> </div> </td> <td> <div class="signature"> <hr style="border-top:dotted"> <span>Parent / Guardian</span> </div> </td> </tr> </table> <hr style="border-top: double !important;"> <h6>EAP/F/002</h6> <div class="page-break"></div> <h3 class="has-text-centered report-h3">Maturity Development</h3> <table class="table table-condensed backside is-narrow is-bordered"> <tbody> <tr> <th colspan="2">Given below are six areas in which maturity of the student is shown. Within each area, four levels of maturity have been given. This information indicates at which level your son works at school. </th> </tr> <tr> <th class="has-text-centered">INITIATIVE &amp; PERSEVERANCE</th> <th class="has-text-centered" style="width:120px;">1st Term</th> </tr> <tr> <td>1. Self - motivated and completes tasks</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_first\']}.jpg "></td> </tr> <tr> <td>2. Works well with minimum direction</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_second\']}.jpg"></td> </tr> <tr> <td>3. Needs constant guidance</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_third\']}.jpg"></td> </tr> <tr> <td>4. Has to be told every thing</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">INTEREST</th> <td class="has-text-centered"></td> </tr> <tr> <td>1. Easily stimulated &amp; sustained</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_first\']}.jpg"></td> </tr> <tr> <td>2. Interested only in some areas</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_second\']}.jpg"></td> </tr> <tr> <td>3. Inconsistent</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_third\']}.jpg"></td> </tr> <tr> <td>4. Indifferent</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">USE OF TIME</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Uses time profitably</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_first\']}.jpg"></td> </tr> <tr> <td>2. Organized most of the time</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_second\']}.jpg"></td> </tr> <tr> <td>3. Disorganized but responds well to guidance</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_third\']}.jpg"></td> </tr> <tr> <td>4. Easily distracted</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">WORK HABITS</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Very careful worker</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_first\']}.jpg"></td> </tr> <tr> <td>2. Usually neat</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_second\']}.jpg"></td> </tr> <tr> <td>3. Untidy</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_third\']}.jpg"></td> </tr> <tr> <td>4. Careless</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">PARTICIPATION IN GROUP WORK</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Contributes readily</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_first\']}.jpg"></td> </tr> <tr> <td>2. Tries to dominate the group</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_second\']}.jpg"></td> </tr> <tr> <td>3. Takes part occasionally</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_third\']}.jpg"></td> </tr> <tr> <td>4. Has to be coaxed to participate</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">RESPONSIBILITY</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Takes initiative in situations which require responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_first\']}.jpg"></td> </tr> <tr> <td>2. Accepts a responsibility only when it is assigned</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_second\']}.jpg"></td> </tr> <tr> <td>3. Casual about responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_third\']}.jpg"></td> </tr> <tr> <td>4. Reluctant to accept responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_fourth\']}.jpg"></td> </tr> </tbody> </table> <table class="table is-fullwidth"> <tr> <td style="width:50%"> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Explanation of Unit Test and Terminal Exam Grades</caption> <tbody> <tr> <th class="has-text-centered">Unit Test</th> <th class="has-text-centered">Terminal</th> <th></th> <th></th> </tr> <tr> <td>43 - 50</td> <td>86 - 100</td> <td>A</td> <td>Excellent</td> </tr> <tr> <td>36 - 42</td> <td>71 - 85</td> <td>B</td> <td>Very Good</td> </tr> <tr> <td>28 - 35</td> <td>56 - 70</td> <td>C</td> <td>Good</td> </tr> <tr> <td>20 - 27</td> <td>40 - 55</td> <td>D</td> <td>Fair</td> </tr> <tr> <td>0 - 19</td> <td>0 - 39</td> <td>E</td> <td>Poor</td> </tr> </tbody> </table> </td> <td style="width:50%"> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Physical Fitness Assessment of your ward</caption> <thead> <tr> <th class="has-text-centered">Skill</th> <th style="width:250px" class="has-text-centered">Grade (First Term)</th> </tr> </thead> <tbody> <tr> <td>Running</td> <td class="has-text-centered">{r.pf[\'first_skill\']}</td> </tr> <tr> <td>Hopping</td> <td class="has-text-centered">{r.pf[\'second_skill\']}</td> </tr> <tr> <td>Jumping</td> <td class="has-text-centered">{r.pf[\'third_skill\']}</td> </tr> <tr> <td>Catching</td> <td class="has-text-centered">{r.pf[\'fourth_skill\']}</td> </tr> <tr> <td>Throwing</td> <td class="has-text-centered">{r.pf[\'fifth_skill\']}</td> </tr> </tbody> </table> </td> </tr> </table> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Physical Fitness Description</caption> <tr> <th>Obtained Marks</th> <td class="centeralign">9-10</td> <td class="centeralign">7-8</td> <td class="centeralign">5-6</td> <td class="centeralign">3-4</td> <td class="centeralign">0-2</td> <tr> <tr> <th>Description</th> <td class="centeralign">Excellent</td> <td class="centeralign">Very Good</td> <td class="centeralign">Good</td> <td class="centeralign">Average</td> <td class="centeralign">Needs Improvement</td> <tr> </table> <div class="page-break"></div> </div> </section> <section class="container is-fluid " show="{student_view==\'report_nine_ten\'}"> <div class="level no-print"> <div class="level-left"></div> <div class="level-right" style="margin-bottom: 5px;"> <button class="button is-warning has-text-weight-bold" onclick="{close_report_nine_ten}" style="margin-right: 5px;"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-primary has-text-weight-bold" onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> </div> </div> <div each="{r, i in reportsNine}" class="fa-report-card-one-two-four"> <h4 style="text-align:center;margin-bottom: -6px;font-weight:bold">REPORT CARD </h4> <h4 style="text-align:center;margin-bottom: 10px"> <span style="border-bottom: dotted 2px #000;font-weight:bold"> <span hide="{ten_report}">FIRST ASSESSMENT 2018-2019</span> <span show="{ten_report}">Pre Board Examination-I 2018-2019</span> </span> </h4> <table class="table is-fullwidth is-narrow no-border"> <tbody> <tr> <th style="width:180px">Name</th> <td style="width:430px">{r.sd.student_name}</td> <th style="width:180px">Issue Date</th> <td style="width:250px">{issue_date}</td> </tr> <tr> <th>Enroll No</th> <td>{r.sd.enroll_number}</td> <th>Class</th> <td>{standard}</td> </tr> <tr> <th>Date of birth</th> <td>{r.sd.dob}</td> <th>House</th> <td>{r.sd.house_name}</td> </tr> </tbody> </table> <table class="table is-fullwidth is-narrow divider-subject bottom-border"> <thead> <tr> <td class="table-head" rowspan="2" style="vertical-align: middle;">Subject</td> <td style="width:175px" class="has-text-centered table-head lr-table-border" colspan="2">Ist Unit Test(50)</td> <td style="width:175px" class="has-text-centered table-head lr-table-border" colspan="2">Ist Term (100)</td> <td style="width:250px;vertical-align: middle;" class="has-text-centered table-head" rowspan="2">Comparison of student performance with class average</td> </tr> <tr> <td style="width:175px" class="has-text-centered table-head lr-table-border">M.O</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">Avg.</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">M.O</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">Avg.</td> </tr> </thead> <tbody> <tr each="{m in r.marks}" class="{m.show_in} {m.subject_group_class}"> <td class="{m.class}">{m.subject_name}</td> <td class="has-text-centered lr-table-border {m.first_marks_limit} {m.class}">{m.first_marks}</td> <td class="has-text-centered lr-table-border {m.class}" style="vertical-align: middle;" rowspan="{m.subject_group_count}" hide="{m.hide_avg_td}">{m.first_avg_marks}</td> <td class="has-text-centered lr-table-border {m.second_marks_limit} {m.class}">{m.second_marks}</td> <td class="has-text-centered lr-table-border {m.class}" style="vertical-align: middle;" rowspan="{m.subject_group_count}" hide="{m.hide_avg_td}">{m.second_avg_marks}</td> <td class="has-text-centered {m.class}"> <div class="graph" riot-style="width:{m.mo_marks}px" if="{m.marking_type==\'N\'}"> <div riot-style="font-size:.7em;margin-left:{(m.mo_marks + 5 )}px">{m.mo_marks}</div> </div> <div class="graph1" riot-style="width:{m.avg_marks}px" if="{m.marking_type==\'N\'}"> <div riot-style="font-size:.7em;margin-left:{(m.avg_marks + 5 )}px">{m.avg_marks}</div> </div> </td> </tr> </tbody> </table> <hr style="border-top: double !important;"> <table class="table is-fullwidth signature-table is-narrow" style="margin-top:35px"> <tr> <td>*Remarks</td> <td colspan="3"><hr style="border-top:dotted;width:100%"></td> </tr> <tr> <td colspan="4"><hr style="border-top:dotted;width:100%"></td> </tr> <tr> <td>*Signature</td> <td> <div class="signature"> <hr style="border-top:dotted"> <span>Class Teacher</span> </div> </td> <td> <div class="signature"> <hr style="border-top:dotted"> <span>Principal</span> </div> </td> <td> <div class="signature"> <hr style="border-top:dotted"> <span>Parent / Guardian</span> </div> </td> </tr> </table> <hr style="border-top: double !important;"> <h6>EAP/F/002</h6> <div class="page-break"></div> <h3 class="has-text-centered report-h3">Maturity Development</h3> <table class="table table-condensed backside is-narrow is-bordered"> <tbody> <tr> <th colspan="2">Given below are six areas in which maturity of the student is shown. Within each area, four levels of maturity have been given. This information indicates at which level your son works at school. </th> </tr> <tr> <th class="has-text-centered">INITIATIVE &amp; PERSEVERANCE</th> <th class="has-text-centered" style="width:120px;">1st Term</th> </tr> <tr> <td>1. Self - motivated and completes tasks</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_first\']}.jpg "></td> </tr> <tr> <td>2. Works well with minimum direction</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_second\']}.jpg"></td> </tr> <tr> <td>3. Needs constant guidance</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_third\']}.jpg"></td> </tr> <tr> <td>4. Has to be told every thing</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">INTEREST</th> <td class="has-text-centered"></td> </tr> <tr> <td>1. Easily stimulated &amp; sustained</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_first\']}.jpg"></td> </tr> <tr> <td>2. Interested only in some areas</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_second\']}.jpg"></td> </tr> <tr> <td>3. Inconsistent</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_third\']}.jpg"></td> </tr> <tr> <td>4. Indifferent</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">USE OF TIME</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Uses time profitably</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_first\']}.jpg"></td> </tr> <tr> <td>2. Organized most of the time</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_second\']}.jpg"></td> </tr> <tr> <td>3. Disorganized but responds well to guidance</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_third\']}.jpg"></td> </tr> <tr> <td>4. Easily distracted</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">WORK HABITS</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Very careful worker</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_first\']}.jpg"></td> </tr> <tr> <td>2. Usually neat</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_second\']}.jpg"></td> </tr> <tr> <td>3. Untidy</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_third\']}.jpg"></td> </tr> <tr> <td>4. Careless</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">PARTICIPATION IN GROUP WORK</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Contributes readily</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_first\']}.jpg"></td> </tr> <tr> <td>2. Tries to dominate the group</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_second\']}.jpg"></td> </tr> <tr> <td>3. Takes part occasionally</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_third\']}.jpg"></td> </tr> <tr> <td>4. Has to be coaxed to participate</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">RESPONSIBILITY</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Takes initiative in situations which require responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_first\']}.jpg"></td> </tr> <tr> <td>2. Accepts a responsibility only when it is assigned</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_second\']}.jpg"></td> </tr> <tr> <td>3. Casual about responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_third\']}.jpg"></td> </tr> <tr> <td>4. Reluctant to accept responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_fourth\']}.jpg"></td> </tr> </tbody> </table> <table class="table is-fullwidth"> <tr> <td style="width:50%"> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Explanation of Unit Test and Terminal Exam Grades</caption> <tbody> <tr> <th class="has-text-centered">Unit Test</th> <th class="has-text-centered">Terminal</th> <th></th> <th></th> </tr> <tr> <td>43 - 50</td> <td>86 - 100</td> <td>A</td> <td>Excellent</td> </tr> <tr> <td>36 - 42</td> <td>71 - 85</td> <td>B</td> <td>Very Good</td> </tr> <tr> <td>28 - 35</td> <td>56 - 70</td> <td>C</td> <td>Good</td> </tr> <tr> <td>20 - 27</td> <td>40 - 55</td> <td>D</td> <td>Fair</td> </tr> <tr> <td>0 - 19</td> <td>0 - 39</td> <td>E</td> <td>Poor</td> </tr> </tbody> </table> </td> <td style="width:50%"> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Physical Fitness Assessment of your ward</caption> <thead> <tr> <th class="has-text-centered">Parameters</th> <th style="width:250px" class="has-text-centered">Marks (First Term)</th> </tr> </thead> <tbody> <tr> <td>Aerobic Capacity</td> <td class="has-text-centered">{r.pf[\'first_skill\']}</td> </tr> <tr> <td>Agility</td> <td class="has-text-centered">{r.pf[\'second_skill\']}</td> </tr> <tr> <td>Explosive Strength</td> <td class="has-text-centered">{r.pf[\'third_skill\']}</td> </tr> <tr> <td>Abdominal Strength</td> <td class="has-text-centered">{r.pf[\'fourth_skill\']}</td> </tr> <tr> <td>Flexiblity</td> <td class="has-text-centered">{r.pf[\'fifth_skill\']}</td> </tr> </tbody> </table> </td> </tr> </table> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Physical Fitness Description</caption> <tr> <th>Obtained Marks</th> <td class="centeralign">9-10</td> <td class="centeralign">7-8</td> <td class="centeralign">5-6</td> <td class="centeralign">3-4</td> <td class="centeralign">0-2</td> <tr> <tr> <th>Description</th> <td class="centeralign">Excellent</td> <td class="centeralign">Very Good</td> <td class="centeralign">Good</td> <td class="centeralign">Average</td> <td class="centeralign">Needs Improvement</td> <tr> </table> <div class="page-break"></div> </div> </section> <section class="container is-fluid " show="{student_view==\'report_eleven\'}"> <div class="level no-print"> <div class="level-left"></div> <div class="level-right" style="margin-bottom: 5px;"> <button class="button is-warning has-text-weight-bold" onclick="{close_report_eleven}" style="margin-right: 5px;"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-primary has-text-weight-bold" onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> </div> </div> <div each="{r, i in reportsEleven}" class="fa-report-card-one-two-four"> <h4 style="text-align:center;margin-bottom: -6px;font-weight:bold">REPORT CARD </h4> <h4 style="text-align:center;margin-bottom: 10px"> <span style="border-bottom: dotted 2px #000;font-weight:bold"> <span hide="{twelve_report}">FIRST ASSESSMENT 2018-2019</span> <span show="{twelve_report}">Pre Board Examination-I 2018-2019</span> </span> </h4> <table class="table is-fullwidth is-narrow no-border"> <tbody> <tr> <th style="width:180px">Name</th> <td style="width:430px">{r.sd.student_name}</td> <th style="width:180px">Issue Date</th> <td style="width:250px">{issue_date}</td> </tr> <tr> <th>Enroll No</th> <td>{r.sd.enroll_number}</td> <th>Class</th> <td>{standard}</td> </tr> <tr> <th>Date of birth</th> <td>{r.sd.dob}</td> <th>House</th> <td>{r.sd.house_name}</td> </tr> </tbody> </table> <table class="table is-fullwidth is-narrow divider-subject no-border"> <thead> <tr> <td class="table-head" rowspan="2" style="vertical-align: middle;">Subject</td> <td style="width:175px" class="has-text-centered table-head lr-table-border" colspan="2">Ist Unit Test(50)</td> <td style="width:175px" class="has-text-centered table-head lr-table-border" colspan="2">Ist Term (100)</td> <td style="width:250px;vertical-align: middle;" class="has-text-centered table-head" rowspan="2">Comparison of student performance with class average</td> </tr> <tr> <td style="width:175px" class="has-text-centered table-head lr-table-border">M.O</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">H.M</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">M.O</td> <td style="width:175px" class="has-text-centered table-head lr-table-border">H.M</td> </tr> </thead> <tbody> <tr each="{m in r.marks}" class="{m.show_in} {m.subject_group_class}"> <td class="{m.class}">{m.subject_name}</td> <td class="has-text-centered lr-table-border {m.first_marks_limit} {m.class}">{m.first_marks}</td> <td class="has-text-centered lr-table-border {m.class}">{m.first_max_marks}</td> <td class="has-text-centered lr-table-border {m.second_marks_limit} {m.class}">{m.second_marks}</td> <td class="has-text-centered lr-table-border {m.class}">{m.second_max_marks}</td> <td class="has-text-centered {m.class}"> <div class="graph" riot-style="width:{m.mo_marks}px" if="{m.marking_type==\'N\'}"> <div riot-style="font-size:.7em;margin-left:{(m.mo_marks + 5 )}px">{m.mo_marks}</div> </div> <div class="graph1" riot-style="width:{m.avg_marks}px" if="{m.marking_type==\'N\'}"> <div riot-style="font-size:.7em;margin-left:{(m.avg_marks + 5 )}px">{m.avg_marks}</div> </div> </td> </tr> </tbody> </table> <hr style="border-top: double !important;"> <table class="table is-fullwidth signature-table is-narrow" style="margin-top:35px"> <tr> <td>*Remarks</td> <td colspan="3"><hr style="border-top:dotted;width:100%"></td> </tr> <tr> <td colspan="4"><hr style="border-top:dotted;width:100%"></td> </tr> <tr> <td>*Signature</td> <td> <div class="signature"> <hr style="border-top:dotted"> <span>Class Teacher</span> </div> </td> <td> <div class="signature"> <hr style="border-top:dotted"> <span>Principal</span> </div> </td> <td> <div class="signature"> <hr style="border-top:dotted"> <span>Parent / Guardian</span> </div> </td> </tr> </table> <hr style="border-top: double !important;"> <h6>EAP/F/002</h6> <div class="page-break"></div> <h3 class="has-text-centered report-h3">Maturity Development</h3> <table class="table table-condensed backside is-narrow is-bordered"> <tbody> <tr> <th colspan="2">Given below are six areas in which maturity of the student is shown. Within each area, four levels of maturity have been given. This information indicates at which level your son works at school. </th> </tr> <tr> <th class="has-text-centered">INITIATIVE &amp; PERSEVERANCE</th> <th class="has-text-centered" style="width:120px;">1st Term</th> </tr> <tr> <td>1. Self - motivated and completes tasks</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_first\']}.jpg "></td> </tr> <tr> <td>2. Works well with minimum direction</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_second\']}.jpg"></td> </tr> <tr> <td>3. Needs constant guidance</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_third\']}.jpg"></td> </tr> <tr> <td>4. Has to be told every thing</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'initiative_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">INTEREST</th> <td class="has-text-centered"></td> </tr> <tr> <td>1. Easily stimulated &amp; sustained</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_first\']}.jpg"></td> </tr> <tr> <td>2. Interested only in some areas</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_second\']}.jpg"></td> </tr> <tr> <td>3. Inconsistent</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_third\']}.jpg"></td> </tr> <tr> <td>4. Indifferent</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'interest_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">USE OF TIME</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Uses time profitably</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_first\']}.jpg"></td> </tr> <tr> <td>2. Organized most of the time</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_second\']}.jpg"></td> </tr> <tr> <td>3. Disorganized but responds well to guidance</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_third\']}.jpg"></td> </tr> <tr> <td>4. Easily distracted</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'use_time_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">WORK HABITS</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Very careful worker</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_first\']}.jpg"></td> </tr> <tr> <td>2. Usually neat</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_second\']}.jpg"></td> </tr> <tr> <td>3. Untidy</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_third\']}.jpg"></td> </tr> <tr> <td>4. Careless</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'work_habit_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">PARTICIPATION IN GROUP WORK</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Contributes readily</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_first\']}.jpg"></td> </tr> <tr> <td>2. Tries to dominate the group</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_second\']}.jpg"></td> </tr> <tr> <td>3. Takes part occasionally</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_third\']}.jpg"></td> </tr> <tr> <td>4. Has to be coaxed to participate</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'participation_fourth\']}.jpg"></td> </tr> <tr> <th class="has-text-centered">RESPONSIBILITY</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Takes initiative in situations which require responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_first\']}.jpg"></td> </tr> <tr> <td>2. Accepts a responsibility only when it is assigned</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_second\']}.jpg"></td> </tr> <tr> <td>3. Casual about responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_third\']}.jpg"></td> </tr> <tr> <td>4. Reluctant to accept responsibility</td> <td class="has-text-centered"><img riot-src="dist/img/{r.md[\'responsibility_fourth\']}.jpg"></td> </tr> </tbody> </table> <table class="table is-fullwidth" hide="{twelve_report}"> <tr> <td style="width:50%"> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Explanation of Unit Test and Terminal Exam Grades</caption> <tbody> <tr> <th class="has-text-centered">Unit Test</th> <th class="has-text-centered">Terminal</th> <th></th> <th></th> </tr> <tr> <td>43 - 50</td> <td>86 - 100</td> <td>A</td> <td>Excellent</td> </tr> <tr> <td>36 - 42</td> <td>71 - 85</td> <td>B</td> <td>Very Good</td> </tr> <tr> <td>28 - 35</td> <td>56 - 70</td> <td>C</td> <td>Good</td> </tr> <tr> <td>20 - 27</td> <td>40 - 55</td> <td>D</td> <td>Fair</td> </tr> <tr> <td>0 - 19</td> <td>0 - 39</td> <td>E</td> <td>Poor</td> </tr> </tbody> </table> </td> <td style="width:50%"> <table class="table is-fullwidth is-narrow is-bordered"> <caption class="report-caption">Physical Fitness Assessment of your ward</caption> <thead> <tr> <th class="has-text-centered">Parameters</th> <th style="width:250px" class="has-text-centered">Marks (First Term)</th> </tr> </thead> <tbody> <tr> <td>Aerobic Capacity</td> <td class="has-text-centered">{r.pf[\'first_skill\']}</td> </tr> <tr> <td>Agility</td> <td class="has-text-centered">{r.pf[\'second_skill\']}</td> </tr> <tr> <td>Explosive Strength</td> <td class="has-text-centered">{r.pf[\'third_skill\']}</td> </tr> <tr> <td>Abdominal Strength</td> <td class="has-text-centered">{r.pf[\'fourth_skill\']}</td> </tr> <tr> <td>Flexiblity</td> <td class="has-text-centered">{r.pf[\'fifth_skill\']}</td> </tr> </tbody> </table> </td> </tr> </table> <table class="table is-fullwidth is-narrow is-bordered" hide="{twelve_report}"> <caption class="report-caption">Physical Fitness Description</caption> <tr> <th>Obtained Marks</th> <td class="centeralign">9-10</td> <td class="centeralign">7-8</td> <td class="centeralign">5-6</td> <td class="centeralign">3-4</td> <td class="centeralign">0-2</td> <tr> <tr> <th>Description</th> <td class="centeralign">Excellent</td> <td class="centeralign">Very Good</td> <td class="centeralign">Good</td> <td class="centeralign">Average</td> <td class="centeralign">Needs Improvement</td> <tr> </table> <h1 class="has-text-centered is-size-3" show="{twelve_report}">Explanation of Unit Test and Terminal Exam Grades</h1> <center style="font-weight: bolder;"> <table class="table table-condensed backside is-narrow no-border" show="{twelve_report}"> <tbody> <tr> <td class="has-text-centered" style="text-decoration:underline;width:200px;">Unit Test</td> <td class="has-text-centered" style="text-decoration:underline;width:200px;">Terminal</td> <td style="width:200px;"></td> <td style="width:200px;"></td> </tr> <tr> <td class="has-text-centered">43 - 50</td> <td class="has-text-centered">86 - 100</td> <td class="has-text-centered">A</td> <td class="has-text-centered">Excellent</td> </tr> <tr> <td class="has-text-centered">36 - 42</td> <td class="has-text-centered">71 - 85</td> <td class="has-text-centered">B</td> <td class="has-text-centered">Very Good</td> </tr> <tr> <td class="has-text-centered">28 - 35</td> <td class="has-text-centered">56 - 70</td> <td class="has-text-centered">C</td> <td class="has-text-centered">Good</td> </tr> <tr> <td class="has-text-centered">20 - 27</td> <td class="has-text-centered">40 - 55</td> <td class="has-text-centered">D</td> <td class="has-text-centered">Fair</td> </tr> <tr> <td class="has-text-centered">0 - 19</td> <td class="has-text-centered">0 - 39</td> <td class="has-text-centered">E</td> <td class="has-text-centered">Poor</td> </tr> </tbody> </table> </center> <div class="page-break"></div> </div> </section>', '', '', function(opts) {

	var self = this
	self.ten_report = false
	self.twelve_report = false
    self.on("mount", function(){
    	self.loading = false
    	self.role = getCookie('role')
    	self.student_view = 'show_student_list_view'
    	self.readStandard()
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
     	firstAssessmentReportStore.off('read_standard_changed',StandardChanged)
    	firstAssessmentReportStore.off('read_student_changed',StudentChanged)
    	firstAssessmentReportStore.off('read_first_assessment_report_card_one_to_four_changed',ReportOneToFourChanged)
    	firstAssessmentReportStore.off('read_first_assessment_report_card_five_to_eight_changed',ReportFiveToEightChanged)
    	firstAssessmentReportStore.off('read_first_assessment_report_card_nine_changed',ReportNineChanged)
    	firstAssessmentReportStore.off('read_first_assessment_report_card_eleven_changed',ReportElevenChanged)
    })

    self.getStudentData = () =>{

		firstAssessmentReportStore.trigger('read_student', self.refs.standard_id.value,self.refs.section_id.value)
    }

    self.readStandard = () => {
       firstAssessmentReportStore.trigger('read_standard')
    }

    self.getSection = () => {
    	self.filteredSections = []
    	self.filteredSections = self.sections.filter(s => {
    		return s.standard_id == self.refs.standard_id.value
    	})
      self.update()
      self.getStudentData()
    }

    self.selectAll = () => {

    	if($('#checkStudent').is(":checked")){
    		self.students.map(i=>{
	          i.done = true;
	          $('StudentId'+i.student_id).prop('checked', true);

	        })
    	}else{
    		self.students.map(i=>{
	          i.done = false;
	          $('StudentId'+i.student_id).prop('checked', false);
	          self.student_id = i.student_id;
            console.log(self.student_id)
	        })
    	}
      console.log(self.students)
    }

    self.selectStudent = (item,event) => {
    	item.done=!event.item.st.done
        self.student_id = item.student_id;
        console.log(self.student_id)
    }

    self.close_report_one_to_four = () => {
      self.student_view = 'show_student_list_view'
    }

    self.close_report_eleven = () => {
      self.student_view = 'show_student_list_view'
    }

    self.close_report_nine_ten = () => {
      self.student_view = 'show_student_list_view'
    }

    self.close_report_five_to_eight = () => {
      self.student_view = 'show_student_list_view'
    }

    self.firstAssessmentReportCardOneToFour = () => {
    	let student_id='';
	     self.students.map( q => {
	        if(q.done){
	          if(student_id==''){
	            student_id=q.student_id
	          }else{
	            student_id=student_id+','+q.student_id
	          }
	        }
	      })
	     console.log(student_id);
    	if(student_id==''){
        	toastr.info('Please select at least one student and try again')
        	return;
      	}else if(!self.refs.issue_date.value){
        	toastr.error("Please enter Issue Date and try again")
        	return;
      	}else{
      		self.issue_date=self.refs.issue_date.value
      		self.standard=$("#standard_id option:selected").text()+ ' ' + $("#section_id option:selected").text();
      		var obj={}
          	obj['issue_date']=convertDate(self.refs.issue_date.value)
          	obj['standard_id']=self.refs.standard_id.value
          	obj['section_id']=self.refs.section_id.value
          	obj['student_id']=student_id
          	obj['end_date']=self.end_date
          	self.loading = true

          	if(self.refs.standard_id.value>=4 && self.refs.standard_id.value<=7){
	        	firstAssessmentReportStore.trigger('read_first_assessment_report_card_one_to_four',obj)
          	}else if(self.refs.standard_id.value>=8 && self.refs.standard_id.value<=11){
          		firstAssessmentReportStore.trigger('read_first_assessment_report_card_five_to_eight',obj)
          	}else if(self.refs.standard_id.value==12 || self.refs.standard_id.value==13){
          		if(self.refs.standard_id.value==13){
          			self.ten_report = true
          		}else{
          			self.ten_report = false
          		}
          		firstAssessmentReportStore.trigger('read_first_assessment_report_card_nine',obj)
          	}else if(self.refs.standard_id.value==14 || self.refs.standard_id.value==15){
          		if(self.refs.standard_id.value==15){
          			self.twelve_report = true
          		}else{
          			self.twelve_report = false
          		}
          		firstAssessmentReportStore.trigger('read_first_assessment_report_card_eleven',obj)
          	}else {
               toastr.error("No Report for this class")
               self.loading = false
               self.update()
        	   return;
          	}
      	}
    }

    firstAssessmentReportStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards,sections,end_date){
      console.log(standards)
      self.standards = standards
      self.sections = sections
      self.end_date = end_date
      self.loading = false
      self.update()
      self.getSection()
      self.getStudentData()
    }

    firstAssessmentReportStore.on('read_student_changed',StudentChanged)
    function StudentChanged(students){
      console.log(students)
      self.students = students
      self.students.map(i=>{
	      i.done = false;
      })
      self.update()
    }

    firstAssessmentReportStore.on('read_first_assessment_report_card_one_to_four_changed',ReportOneToFourChanged)
    function ReportOneToFourChanged(reportsOneToFour){
      self.loading = false
      self.student_view	= 'report_one_to_four'
      self.reportsOneToFour = reportsOneToFour
      console.log(self.student_view)
      console.log('read_first_assessment_report_card_one_to_four_changed')
      self.update()
    }

    firstAssessmentReportStore.on('read_first_assessment_report_card_five_to_eight_changed',ReportFiveToEightChanged)
    function ReportFiveToEightChanged(reportsFiveToEight){
      self.loading = false
      self.student_view	= 'report_five_to_eight'
      self.reportsFiveToEight = reportsFiveToEight
      self.update()
      console.log('read_first_assessment_report_card_five_to_eight_changed')
      console.log(self.student_view)
      console.log('student-view'+self.student_view)
      self.update()
    }

    firstAssessmentReportStore.on('read_first_assessment_report_card_nine_changed',ReportNineChanged)
    function ReportNineChanged(reportsNine){
      self.loading = false
      self.student_view	= 'report_nine_ten'
      self.reportsNine = reportsNine
      self.update()
      console.log('read_first_assessment_report_card_nine_changed')
      console.log(self.student_view)
      console.log('student-view'+self.student_view)
      self.update()
    }

    firstAssessmentReportStore.on('read_first_assessment_report_card_eleven_changed',ReportElevenChanged)
    function ReportElevenChanged(reportsEleven){
      self.loading = false
      self.student_view	= 'report_eleven'
      self.reportsEleven = reportsEleven
      self.update()
      console.log(self.student_view)
      console.log('student-view'+self.student_view)
      self.update()
    }

});

riot.tag2('grade', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{view==\'grades\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Grade</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{openGradeModal}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> <button class="button is-warning is-rounded" onclick="{readGrade}" style="margin-left:2px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"><label class="label">Exam Scheme</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="examSchemeSelect" onchange="{readExamType}"> <option value="">Select Exam Scheme</option> <option each="{examSchemes}" riot-value="{scheme_id}">{scheme_name}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Exam Type</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="examTypeSelect"> <option value="">Select Exam Type</option> <option each="{examTypes}" riot-value="{exam_type_id}">{exam_type}</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readGrade}">GO </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="slno">SL</th> <th>Max Marks</th> <th>Min Marks</th> <th>Grade</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in grades}"> <td>{i+1}</td> <td>{c.max_marks}</td> <td>{c.min_marks}</td> <td>{c.grade}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, c)}">Edit</a></span> <span><a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <div id="gradeModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">{title} Grade</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="field"> <div class="control"> <label class="label" for="role">Max Marks</label> <input class="input" type="text" ref="maxMarkInput"> </div> </div> <div class="field"> <div class="control"> <label class="label" for="role">Min Marks</label> <input class="input" type="text" ref="minMarkInput"> </div> </div> <div class="field"> <div class="control"> <label class="label" for="role">Grade</label> <input class="input" type="text" ref="gradeInput"> </div> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-danger" onclick="{add}">{title}</button> <button class="button" id="item-modal-close" onclick="{closeGradeModal}">Cancel</button> </footer> </div> </div>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title = 'Add'
      self.view = 'grades'
      self.loading = false;
      self.update()
      self.readExamScheme()
    })
    self.on("unmount", function(){
      gradeStore.on('exam_scheme_changed',ExamSchemeChanged)
      gradeStore.off('exam_type_changed',ExamTypeChanged)
      gradeStore.off('add_grade_changed',AddGradeChanged)
      gradeStore.off('delete_grade_changed',DeleteGradeChanged)
    })

    self.readExamScheme = () => {
       self.loading = true;
       gradeStore.trigger('read_exam_schemes')
    }

    self.readExamType = () => {
       if(self.refs.examSchemeSelect.value==''){
        toastr.info("Please select exam scheme and try again")
       }else{
         self.loading = true;
         gradeStore.trigger('read_exam_types',self.refs.examSchemeSelect.value)
       }
    }

    self.readGrade = () => {
      let error = '';

      console.log(error.length)

      if(self.refs.examSchemeSelect.value==''){
        error = error + "Please select exam scheme, "
      }

      if(self.refs.examTypeSelect.value==''){
        error = error + "Please select exam type "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        gradeStore.trigger('read_grades',self.refs.examSchemeSelect.value, self.refs.examTypeSelect.value)
      }

    }

    self.openGradeModal = () => {
      let error = '';

      if(self.refs.examSchemeSelect.value==''){
        error = error + "Please select exam scheme, "
      }

      if(self.refs.examTypeSelect.value==''){
        error = error + "Please select exam type "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.title = 'Add'
        $("#gradeModal").addClass("is-active");
      }
    }

    self.closeGradeModal = () => {
      $("#gradeModal").removeClass("is-active");
    }

    self.add = () => {
      let error = '';

      if(self.refs.maxMarkInput.value==''){
        error = error + "Please enter max marks, "
      }

      if(self.refs.minMarkInput.value==''){
        error = error + "Please enter min marks, "
      }

      if(self.refs.gradeInput.value==''){
        error = error + "Please enter grade, "
      }

      if(Number(self.refs.maxMarkInput.value)<Number(self.refs.minMarkInput.value)){
        error = error + "Min marks can not be greater than max marks "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        var obj = {}
        obj['scheme_id'] = self.refs.examSchemeSelect.value
        obj['exam_id'] = self.refs.examTypeSelect.value
        obj['max_marks'] = self.refs.maxMarkInput.value
        obj['min_marks'] = self.refs.minMarkInput.value
        obj['grade'] = self.refs.gradeInput.value

        self.loading = true
        if(self.title=='Add'){
          gradeStore.trigger('add_grade', obj)
        }else if(self.title=='Update'){
          gradeStore.trigger('update_grade', obj, self.edit_id)
        }
      }

    }

    self.edit = (c,e) => {
      console.log(c)
      self.title='Update'
      $("#gradeModal").addClass("is-active");
      self.refs.maxMarkInput.value = c.max_marks
      self.refs.minMarkInput.value = c.min_marks
      self.refs.gradeInput.value = c.grade
      self.edit_id = c.grade_id
    }

    self.cancelOperation = (e) => {
      self.grades.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.grades.map(c => {
        if(c.grade_id != e.item.c.grade_id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      gradeStore.trigger('delete_grade', e.item.c.grade_id)
    }

    gradeStore.on('exam_scheme_changed',ExamSchemeChanged)
    function ExamSchemeChanged(examSchemes){
      self.loading = false
      self.examSchemes = []
      self.examSchemes = examSchemes
      self.update()
      console.log(self.examSchemes)
    }

    gradeStore.on('exam_type_changed',ExamTypeChanged)
    function ExamTypeChanged(examTypes){
      self.loading = false
      self.examTypes = []
      self.examTypes = examTypes
      self.update()
      console.log(self.examTypes)
    }

    gradeStore.on('grades_changed',GradesChanged)
    function GradesChanged(grades){
      self.loading = false
      self.grades = []
      self.grades = grades
      self.update()
      console.log(self.grades)
    }

    gradeStore.on('add_grade_changed',AddGradeChanged)
    function AddGradeChanged(grades){
      self.refs.maxMarkInput.value=''
      self.refs.minMarkInput.value=''
      self.refs.gradeInput.value=''
      self.closeGradeModal()
      self.loading = false
      self.grades = []
      self.grades = grades
      self.update()
      console.log(self.grades)
    }

    gradeStore.on('delete_grade_changed',DeleteGradeChanged)
    function DeleteGradeChanged(grades){
      self.loading = false
      self.grades = []
      self.grades = grades
      self.update()
      console.log(self.grades)
    }

});
riot.tag2('head-wise-summary', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="date input is-small" id="start_date" ref="start_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="date input is-small" id="end_date" ref="end_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getHeadWise}"> GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Head Wise Fees Collection</p> <p class="has-text-centered">Session: {sessionName}</p> <p class="has-text-centered">{fromSelectedDate} - {toSelectedDate}</p> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th class="slno">#</th> <th>Head</th> <th>Bank</th> <th>School</th> <th>Total</th> </tr> </thead> <tbody> <tr each="{cd, i in headWiseData}"> <td>{i+1}</td> <td>{cd.head}</td> <td class="has-text-right amount">{cd.bank}</td> <td class="has-text-right amount">{cd.cash}</td> <td class="has-text-right amount">{cd.total}</td> </tr> <tr> <th class="has-text-right" colspan=" 2">Total</th> <th class="has-text-right amount">{totalBank}</th> <th class="has-text-right amount">{totalCash}</th> <th class="has-text-right amount">{grandTotal}</th> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      flatpickr(".date", {
    	allowInput: true,
    	dateFormat: "d/m/Y",
  		})
      self.update();
    })

    self.on("unmount", function(){
      feesReportStore.off('read_head_wise_changed',ReadHeadWiseChanged)
    })

    self.getHeadWise = () => {
    	var startDate = document.getElementById("start_date").value
    	var endDate = document.getElementById("end_date").value
    	if(!self.refs.start_date.value){
    		toastr.info("Pleae enter From Date and try again")
    	}else if(!self.refs.end_date.value){
    		toastr.info("Pleae enter End Date and try again")
    	}else if((Date.parse(startDate)> Date.parse(endDate))){
           toastr.info("From date can't be greater")
    	}else{
    	var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          self.loading = true
          feesReportStore.trigger('read_head_wise_fees', obj)
       }
    }

    feesReportStore.on('read_head_wise_changed',ReadHeadWiseChanged)
    function ReadHeadWiseChanged(headWiseData, session_name){
      self.totalBank = 0
      self.totalCash = 0
      self.grandTotal = 0

      self.headWiseData = []
      self.headWiseData = headWiseData
       self.headWiseData.map(c => {
          self.totalBank +=Number(c.bank)
          self.totalCash +=Number(c.cash)
          self.grandTotal +=Number(c.total)
      })
      self.sessionName = session_name
   	  self.fromSelectedDate = self.refs.start_date.value
      self.toSelectedDate = self.refs.end_date.value

      self.loading = false

      self.update()
    }
});
riot.tag2('head-wise', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="date is-small input" id="start_date" ref="start_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="date is-small input" id="end_date" ref="end_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getHeadWise}"> GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Head Wise Collection Detail</p> <p class="has-text-centered">Session: {sessionName}</p> <p class="has-text-centered">{fromSelectedDate} - {toSelectedDate}</p> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <tr each="{cd, i in headCategoryWiseData}"> <td>{cd.slNo}</td> <td>{cd.head}</td> <td class="has-text-right amount">{cd.cash}</td> </tr> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      flatpickr(".date", {
    	allowInput: true,
    	dateFormat: "d/m/Y",
  		})
      self.update();
    })

    self.on("unmount", function(){
      feesReportStore.off('read_head_category_wise_changed',ReadHeadCategoryWiseChanged)
    })

    self.getHeadWise = () => {
    	var startDate = document.getElementById("start_date").value
    	var endDate = document.getElementById("end_date").value
    	if(!self.refs.start_date.value){
    		toastr.info("Pleae enter From Date and try again")
    	}else if(!self.refs.end_date.value){
    		toastr.info("Pleae enter End Date and try again")
    	}else if((Date.parse(startDate)> Date.parse(endDate))){
           toastr.info("From date can't be greater")
    	}else{
    	var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          self.loading = true
          feesReportStore.trigger('read_head_category_wise_fees', obj)
       }
    }

    feesReportStore.on('read_head_category_wise_changed',ReadHeadCategoryWiseChanged)
    function ReadHeadCategoryWiseChanged(headCategoryWiseData, session_name){

      self.headCategoryWiseData = []
      self.headCategoryWiseData = headCategoryWiseData

      self.sessionName = session_name
   	  self.fromSelectedDate = self.refs.start_date.value
      self.toSelectedDate = self.refs.end_date.value

      self.loading = false

      self.update()
    }
});
riot.tag2('id-card', '<section class=" is-fluid" show="{student_view ==\'show_student_list_view\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Print Cards</h2> </div> <div class="level-right"> <button class="button is-small is-rounded" onclick="{id_card_print_preview}"> <span>Issue Id Card</span> </button> <button class="button is-small is-rounded ml5" onclick="{escort_card_print_preview}"> <span>Issue Escort Card</span> </button> <button class="button is-small is-rounded ml5" onclick="{duplicate_id_card_print_preview}"> <span>Duplicate Id Card</span> </button> <button class="button is-small is-rounded ml5" onclick="{duplicate_escort_card_print_preview}"> <span>Duplicate Escort Card</span> </button> </div> </div> <div class="level box"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" onchange="{getSection}"> <option each="{standards}" riot-value="{standard_id}"> {standard}</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Section</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="section_id" onchange="{getStudentData}"> <option each="{filteredSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> </div> </div> <div class="level-right"> <div class="column is-narrow field"> <div class="control"> <input class="input" ref="searchStudent" onkeyup="{filterStudent}" type="text" placeholder="Search Here"> </div> </div> <div class="column is-narrow field has-addons"> <div class="control"> <input class="input" ref="read_enroll_number" type="text" placeholder="Enter Enroll No"> </div> <div class="control"> <a class="button is-info" onclick="{getStudentData}">Search</a> </div> </div> <button class="button is-warning has-text-weight-bold ml5" style="margin-bottom:12px;" onclick="{getStudentData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <thead> <tr> <th>SL no</th> <th>Enroll No</th> <th>Roll no</th> <th>Student Name</th> <th class="has-text-centered"> <input type="checkbox" id="checkStudent" onclick="{selectAll}"> </th> </tr> </thead> <tbody> <tr each="{st, i in filteredStudent}"> <td>{i+1}</td> <td>{st.enroll_number}</td> <td>{st.roll_number}</td> <td>{st.name}</td> <td class="has-text-centered"> <input type="checkbox" class="id_check_box" checked="{st.done}" id="{\'StudentId\' + st.student_id}" onclick="{selectStudent.bind(this,st)}"> </td> </tr> </tbody> </table> </section> <section class="container is-fluid " show="{student_view ==\'show_student_print_view\'}"> <div class="level no-print"> <div class="level-left"></div> <div class="level-right" style="margin-bottom: 5px;"> <button class="button is-warning has-text-weight-bold" onclick="{close_print_view}" style="margin-right: 5px;"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-primary has-text-weight-bold" onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> </div> </div> <div each="{st, i in students_id_card_details}" style="font-size: 0.9rem; font-family: \'Open Sans\', sans-serif;"> <center> <div class="card-student-id schoolbg"> <div class="header-student-id-card">Student Identity Card {st.session_name}</div> <div style="padding:2px;"><img style="border:solid Black 1px;height:75px;" riot-src="images/{session_id}/studentImages/{st.student_id}.jpg"></div> <div class="title-student-id-card is-uppercase">{st.student_name}</div> <div class="title-student-id-card">{st.standard} - {st.section}</div> <div padding: 2px><span class="barcode">*{st.enroll_number}*</span></div> <table class="detail-student-id-card"> <tr> <td colspan="2">Enrolment No.: {st.enroll_number}</td> </tr> <tr> <td colspan="2" class="">Fathers\'Name: {st.f_name}</td> </tr> <tr> <td align="baseline">Address:</td> <td>{st.c_add_l1} {st.c_add_l2} {st.c_city} {st.c_zip}</td> </tr> <tr> <td colspan="2">Mob. No.: {st.mobile}</td> </tr> <tr> <td colspan="2">Mode of Transport: {st.transport_mode}</td> </tr> </table> <div style="width:50%;margin-right: 63px;" class="lower-student-id-card">Blood Group:<span style="color:#ff0000">{st.blood_group}</span></div> <div style="width:45%;right: 10px; position:absolute; bottom:10px" class="principal"> <p><img src="images/signatureImages/Principal.jpg" style="height: 24px"></p> <p>Principal</p> </div> </div> </center> <div class="" style="margin-top:65px;"></div> <div class="page-break w-full flex-auto" id="id_card_pb_back_16"></div> </div> </section> <section class="container is-fluid " show="{student_view ==\'show_student_print_view_duplicate\'}"> <div class="level no-print"> <div class="level-left"></div> <div class="level-right" style="margin-bottom: 5px;"> <button class="button is-warning has-text-weight-bold" onclick="{close_duplicate_print_view}" style="margin-right: 5px;"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-primary has-text-weight-bold" onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> </div> </div> <div each="{st, i in students_id_card_details}" style="font-size: 0.9rem; font-family: \'Open Sans\', sans-serif;"> <center> <div class="card-student-id schoolbg"> <div class="header-student-id-card">Duplicate Student Identity Card {st.session_name}</div> <div style="padding:2px;"><img style="border:solid Black 1px;height:75px;" riot-src="images/{session_id}/studentImages/{st.student_id}.jpg"></div> <div class="title-student-id-card is-uppercase">{st.student_name}</div> <div class="title-student-id-card">{st.standard} - {st.section}</div> <div padding: 2px><span class="barcode">*{st.enroll_number}*</span></div> <table class="detail-student-id-card"> <tr> <td colspan="2">Enrolment No.: {st.enroll_number}</td> </tr> <tr> <td colspan="2">Fathers\'Name: {st.f_name}</td> </tr> <tr> <td align="baseline">Address:</td> <td>{st.c_add_l1} {st.c_add_l2} {st.c_city} {st.c_zip}</td> </tr> <tr> <td colspan="2">Mob. No.: {st.mobile}</td> </tr> <tr> <td colspan="2">Mode of Transport: {st.transport_mode}</td> </tr> </table> <div style="width:50%;margin-right: 63px;" class="lower-student-id-card">Blood Group:<span style="color:#ff0000">{st.blood_group}</span></div> <div style="width:45%;right: 10px; position:absolute; bottom:10px" class="principal"> <p><img src="images/signatureImages/Principal.jpg" style="height: 24px"></p> <p>Principal</p> </div> </div> </center> <div class="" style="margin-top:65px;"></div> <div class="page-break w-full flex-auto" id="id_card_pb_back_16"></div> </div> </section> <section class="container is-fluid " show="{student_view ==\'show_student_escort_card_print_view\'}"> <div class="level no-print"> <div class="level-left"></div> <div class="level-right" style="margin-bottom: 5px;"> <button class="button is-warning has-text-weight-bold" onclick="{close_print_view}" style="margin-right: 5px;"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-primary has-text-weight-bold" onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> </div> </div> <div each="{st, i in students_escort_card_details}" style="font-size: 0.9rem; font-family: \'Open Sans\', sans-serif;"> <center> <div class="card-student-escort schoolbg-escort"> <div class="header-student-escort-card">Student Escort Card {st.session_name}</div> <div style="padding:2px;"><img style="border:solid Black 1px;height:75px;" riot-src="images/{session_id}/studentImages/{st.student_id}.jpg"></div> <div class="title-student-id-card is-uppercase">{st.student_name}</div> <div class="title-student-id-card">{st.standard} - {st.section}</div> <div padding: 2px><span class="barcode">*{st.enroll_number}*</span></div> <table class="detail-student-id-card" style=""> <tr> <td colspan="2">Enrolment No.: {st.enroll_number}</td> </tr> <tr> <td colspan="2">Fathers\'Name: {st.f_name}</td> </tr> <tr> <td align="baseline">Address:</td> <td>{st.c_add_l1} {st.c_add_l2} {st.c_city} {st.c_zip}</td> </tr> <tr> <td colspan="2">Mob. No.: {st.mobile}</td> </tr> <tr> <td colspan="2">Mode of Transport: {st.transport_mode}</td> </tr> </table> <div style="width:50%;margin-right: 63px;" class="lower-student-id-card">Blood Group:<span style="color:#ff0000">{st.blood_group}</span></div> <div style="width:45%;right: 10px; position:absolute; bottom:10px" class="principal"> <p><img src="images/signatureImages/Principal.jpg" style="height: 24px"></p> <p>Principal</p> </div> </div> </center> <div class="" style="margin-top:65px;"></div> <div class="page-break w-full flex-auto" id="id_card_pb_back_16"></div> </div> </section> <section class="container is-fluid" show="{student_view ==\'show_student_escort_card_print_view_duplicate\'}"> <div class="level no-print"> <div class="level-left"></div> <div class="level-right" style="margin-bottom: 5px;"> <button class="button is-warning has-text-weight-bold" onclick="{close_print_view}" style="margin-right: 5px;"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-primary has-text-weight-bold" onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> </div> </div> <div each="{st, i in students_escort_card_details}" style="font-size: 0.9rem; font-family: \'Open Sans\', sans-serif;"> <center> <div class="card-student-escort schoolbg-escort-duplicate"> <div class="header-student-escort-card-duplicate">Duplicate Student Escort Card {st.session_name}</div> <div style="padding:2px;"><img style="border:solid Black 1px;height:75px;" riot-src="images/{session_id}/studentImages/{st.student_id}.jpg"></div> <div class="title-student-id-card is-uppercase">{st.student_name}</div> <div class="title-student-id-card">{st.standard} - {st.section}</div> <div padding: 2px><span class="barcode">*{st.enroll_number}*</span></div> <table class="detail-student-id-card"> <tr> <td colspan="2">Enrolment No.: {st.enroll_number}</td> </tr> <tr> <td colspan="2">Fathers\'Name: {st.f_name}</td> </tr> <tr> <td align="baseline">Address:</td> <td>{st.c_add_l1} {st.c_add_l2} {st.c_city} {st.c_zip}</td> </tr> <tr> <td colspan="2">Mob. No.: {st.mobile}</td> </tr> <tr> <td colspan="2">Mode of Transport: {st.transport_mode}</td> </tr> </table> <div style="width:50%; margin-right: 63px;" class="lower-student-id-card">Blood Group:<span style="color:#ff0000">{st.blood_group}</span></div> <div style="width:45%;right: 10px; position:absolute; bottom:10px" class="principal"> <p><img src="images/signatureImages/Principal.jpg" style="height: 24px"></p> <p>Principal</p> </div> </div> </center> <div class="" style="margin-top:65px;"></div> <div class="page-break w-full flex-auto" id="id_card_pb_back_16"></div> </div> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.role = getCookie('role')
    	self.readStandard()
    	self.readSection()
    	self.student_view = 'show_student_list_view'
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
     	idCardStore.off('read_standard_changed',StandardChanged)
    	idCardStore.off('read_section_changed',SectionChanged)
    	idCardStore.off('read_student_changed',StudentChanged)
    	idCardStore.off('read_id_card_changed',ReadIdCardChanged)
    })

    self.getStudentData = () =>{

    	if(self.refs.read_enroll_number.value==""){
        self.loading = true
    		idCardStore.trigger('read_student', self.refs.standard_id.value,self.refs.section_id.value,0)
    	}else{
        self.loading = true
    		idCardStore.trigger('read_student',self.refs.standard_id.value,self.refs.section_id.value,
      	self.refs.read_enroll_number.value)
    	}
    }

    self.readStandard = () => {
       idCardStore.trigger('read_standard')
    }

    self.readSection = () => {
       idCardStore.trigger('read_section')
    }

    self.getSection = () => {
    	self.filteredSections = []
    	self.filteredSections = self.sections.filter(s => {
    		return s.standard_id == self.refs.standard_id.value
    	})
      self.update()
      self.getStudentData()
    }

    self.id_card_print_preview = () => {

    	let student_id='';
	     self.students.map( q => {
	        if(q.done){
	          if(student_id==''){
	            student_id=q.student_id
	          }else{
	            student_id=student_id+','+q.student_id
	          }
	        }
	      })
	     console.log(student_id);
      if(student_id==''){
        toastr.info('Please select at least one student and try again')
      }else{
      	self.student_view	= 'show_student_print_view'
        idCardStore.trigger('read_id_card',student_id)
      }
    }

    self.duplicate_id_card_print_preview = () => {
    	let student_id='';
	     self.students.map( q => {
	        if(q.done){
	          if(student_id==''){
	            student_id=q.student_id
	          }else{
	            student_id=student_id+','+q.student_id
	          }
	        }
	      })
	     console.log(student_id);
      if(student_id==''){
        toastr.info('Please select at least one student and try again')
      }else{
      	self.student_view	= 'show_student_print_view_duplicate'
        idCardStore.trigger('read_id_card',student_id)
      }
    }
    self.close_print_view = () => {
      self.student_view = 'show_student_list_view'
    }

    self.close_duplicate_print_view = () => {
    	self.student_view	= 'show_student_list_view'
    }

     self.escort_card_print_preview = () => {

    	let student_id='';
	     self.students.map( q => {
	        if(q.done){
	          if(student_id==''){
	            student_id=q.student_id
	          }else{
	            student_id=student_id+','+q.student_id
	          }
	        }
	      })
	     console.log(student_id);
      if(student_id==''){
        toastr.info('Please select at least one student and try again')
      }else{
      	self.student_view	= 'show_student_escort_card_print_view'
        idCardStore.trigger('read_escort_card',student_id)
      }
    }

    self.duplicate_escort_card_print_preview = () => {

    	let student_id='';
	     self.students.map( q => {
	        if(q.done){
	          if(student_id==''){
	            student_id=q.student_id
	          }else{
	            student_id=student_id+','+q.student_id
	          }
	        }
	      })
	     console.log(student_id);
      if(student_id==''){
        toastr.info('Please select at least one student and try again')
      }else{
      	self.student_view	= 'show_student_escort_card_print_view_duplicate'
        idCardStore.trigger('read_escort_card',student_id)
      }
    }

    self.selectAll = () => {

    	if($('#checkStudent').is(":checked")){
    		self.students.map(i=>{
	          i.done = true;
	          $('StudentId'+i.student_id).prop('checked', true);

	        })
    	}else{
    		self.students.map(i=>{
	          i.done = false;
	          $('StudentId'+i.student_id).prop('checked', false);
	          self.student_id = i.student_id;
            console.log(self.student_id)
	        })
    	}
      console.log(self.students)
    }

    self.selectStudent = (item,event) => {
    	item.done=!event.item.st.done
        self.student_id = item.student_id;
        console.log(self.student_id)
    }

    self.filterStudent = ()=>{
      self.filteredStudent = self.students.filter(c => {
        return JSON.stringify(c).toLowerCase().indexOf(self.refs.searchStudent.value.toLowerCase())>=0
      })
    }

    idCardStore.on('read_id_card_changed',ReadIdCardChanged)
    function ReadIdCardChanged(students_id_card_details, session_id){
      console.log(students_id_card_details)
      self.session_id = session_id
      self.students_id_card_details = []
      self.students_id_card_details = students_id_card_details
      self.update()
    }

    idCardStore.on('read_escort_card_changed',ReadEscortCardChanged)
    function ReadEscortCardChanged(students_escort_card_details,session_id){
      console.log(students_escort_card_details)
      self.session_id = session_id
      self.students_escort_card_details = []
      self.students_escort_card_details = students_escort_card_details
      self.update()
    }

    idCardStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()
    }

    idCardStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections
      self.update()
      self.getSection()
      self.getStudentData()
    }

    idCardStore.on('read_student_changed',StudentChanged)
    function StudentChanged(students){
      self.loading = false
      self.students = students
      self.filteredStudent = students
      self.students.map(i=>{
	      i.done = false;
      })
      $("#checkStudent").prop("checked", false);
      self.update()
    }
});
riot.tag2('id-signature', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="level"> <div class="level-left"> <h2 class="title is-size-5" style="color: #ff3860;">ID Card Signature Management</h2> </div> <div class="level-right"> <button class="button is-link has-text-weight-bold ml5 is-small" onclick="{getSignatureData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-warning has-text-weight-bold ml5 is-small" onclick="{openAddSignatureModal}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>SL No</th> <th>Type</th> <th>Active</th> <th>Signature</th> <th></th> </tr> </thead> <tbody> <tr each="{st, i in signature}"> <td>{i+1}</td> <td>{st.type}</td> <td>{st.active}</td> <td><img riot-src="/images/signatureImages/{st.type}.jpg" width="65" height="75"></td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{st.confirmDelete}"> <span><a class="button is-small" onclick="{isActive.bind(this, st)}" title="Active"><i class="fa fa-power-off" aria-hidden="true"></i></a></span> <span><a class="button is-small " onclick="{edit.bind(this, st)}" title="Edit"><i class="fa fa-edit" aria-hidden="true"></i></a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"><i class="fa fa-trash" aria-hidden="true"></i></a></span> </div> <div class="table-buttons" if="{st.confirmDelete}"> <span disabled="{loading}" class="button is-small" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <div id="signatureModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">{title} Signature</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="control"> <label class="label" for="type">Type</label> <div class="select is-fullwidth"> <select ref="type" id="type"> <option value="Principal">Principal</option> <option value="Trustee">Trustee</option> <option value="Sample">Sample</option> <option value="Test">Test</option> </select> </div> </div> <div class="control"> <label class="label" for="withdraw_remarks">Signature</label> <div id="pp_box" class="preview-box-wide" onclick="{trigger_file_input.bind(this,\'signature_picture\')}"> <div class="icon has-text-danger" onclick="{remove_picture.bind(this, \'pp_box\',\'signature_picture\')}"><i class="fas fa-trash"></i> </div> </div> <input accept="image/*" class="is-hidden" id="signature_picture" name="signature_picture" onchange="{loadFile.bind(this, \'pp_box\')}" type="file"> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-danger" onclick="{add}">Add</button> <button class="button" id="item-modal-close" onclick="{closeAddSignatureModal}">Cancel</button> </footer> </div> </div>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.title='Add'
      self.role = getCookie('role')
      self.update()
      self.getSignatureData()
    })

     self.on("unmount", function(){
      idSignatureStore.off('read_signature_changed',ReadSignatureChanged)
      idSignatureStore.off('add_signature_changed',AddSignatureChanged)
      idSignatureStore.off('edit_signature_changed',EditSignatureChanged)
      idSignatureStore.off('active_signature_changed',ActiveSignatureChanged)
      idSignatureStore.off('delete_signature_changed',DeleteSignatureChanged)
    })

     self.getSignatureData = () => {
      self.readSignature()
      self.loading = true

     }

    self.openAddSignatureModal = () => {
      self.title = 'Add'
       self.refs.type.value='Principal'
       pp_box.style.backgroundImage = "";
      $("#signatureModal").addClass("is-active");
    }

    self.closeAddSignatureModal = () => {
      $("#signatureModal").removeClass("is-active");
    }

	self.remove_picture = (item1, item2, e) => {
		console.log('item1'+item1)
		console.log('item2'+item2)
		var pp_box = document.getElementById(item1);
		pp_box.style.backgroundImage = "";
		document.getElementById(item2).value = ""
		event.stopPropagation();
	}

	self.trigger_file_input = (item,e) => {
		document.getElementById(item).click();
	}

     self.loadFile = (item,event) => {
		var reader = new FileReader();
		reader.onload = function (e) {
			console.log(item)
			document.getElementById(item).style.backgroundImage = 'url(' + e.target.result + ')';
			console.log(e.target.result)
			self.is_signature_image=true
		};
		reader.readAsDataURL(event.target.files[0]);

		console.log(event.target.files[0])
		self.signature_picture = event.target.files[0]
	}

	self.uploadSignatureImage = (type) => {
		if(self.is_signature_image == true){
    		idSignatureStore.trigger('upload_signature_image', self.signature_picture,type)
		}
    }

    self.readSignature = () => {
       idSignatureStore.trigger('read_signature')
    }

     self.add = () => {
      if(!self.refs.type.value){
        toastr.info("Please enter Type and try again")
      }else{
        self.loading = true
        if(self.title=='Add'){
          console.log('Add')
          idSignatureStore.trigger('add_signature', self.refs.type.value)
        }else if(self.title=='Update'){
          console.log('update')
          idSignatureStore.trigger('edit_signature', self.refs.type.value,
            self.old_type)
        }
      }
    }

    self.cancelOperation = (e) => {
      self.signature.map(st => {
          st.confirmDelete = false
          st.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.signature.map(st => {
        if(st.type != e.item.st.type){
          st.confirmDelete = false
        }else{
          st.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      idSignatureStore.trigger('delete_signature', e.item.st.type)
    }

    self.edit = (st,e) => {
      console.log(st)
      console.log(st.type)
      self.title='Update'
      $("#signatureModal").addClass("is-active");
      self.refs.type.value = st.type
      self.old_type= st.type;
      document.getElementById('pp_box').style.backgroundImage = 'url(/images/signatureImages/'+st.type+'.jpg)';
    }

    self.isActive = (st,e) => {
      console.log(st)
      console.log(st.type)
      self.type = st.type
      idSignatureStore.trigger('active_signature', self.type)
    }

    idSignatureStore.on('add_signature_changed',AddSignatureChanged)
    function AddSignatureChanged(signature,type){
      console.log(signature)
      console.log(type)
      self.signature = signature
      self.uploadSignatureImage(type)
      $("#signatureModal").removeClass("is-active");
      self.update()
      self.readSignature()
    }

    idSignatureStore.on('edit_signature_changed',EditSignatureChanged)
    function EditSignatureChanged(signature,type){
      self.signature = signature
      self.uploadSignatureImage(type)
      $("#signatureModal").removeClass("is-active");
      self.update()
      self.readSignature()
    }

    idSignatureStore.on('delete_signature_changed',DeleteSignatureChanged)
    function DeleteSignatureChanged(){
      self.readSignature()
      self.update()
    }

    idSignatureStore.on('active_signature_changed',ActiveSignatureChanged)
    function ActiveSignatureChanged(active_signature){
      console.log(active_signature)
      self.active_signature = active_signature
      self.readSignature()
      self.update()
    }

    idSignatureStore.on('read_signature_changed',ReadSignatureChanged)
    function ReadSignatureChanged(signature){

      self.signature = signature
      self.loading = false
      self.update()
    }

    idSignatureStore.on('upload_signature_image_changed',UploadSignatureImage)
    function UploadSignatureImage(image_name){
      console.log(image_name)
      self.signature_picture = image_name

      self.update()
    }

});
riot.tag2('infirmary-case', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Infirmary Case Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="category_id" onkeyup="{addEnter}"> <option each="{infirmaryCategories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Case</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="infirmary_case" id="infirmary_case" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readInfirmaryCase}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Category</th> <th>Case</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in infirmaryCases}"> <td>{i+1}</td> <td>{ev.category_name}</td> <td>{ev.case_name}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ev.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, ev)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readInfirmaryCategory()
      self.readInfirmaryCase()
    })
    self.on("unmount", function(){
      infirmarycaseStore.off('add_infirmary_case_changed', AddInfirmaryCaseChanged)
      infirmarycaseStore.off('read_infirmary_case_changed', ReadInfirmaryCaseChanged)
      infirmarycaseStore.off('read_infirmary_category_changed',InfirmaryCategoryChanged)
      infirmarycaseStore.off('edit_infirmary_case_changed',EditInfirmaryCaseChanged)
      infirmarycaseStore.off('delete_infirmary_case_changed',DeleteInfirmaryCaseChanged)
    })

    self.readInfirmaryCategory = () => {
       infirmarycaseStore.trigger('read_infirmary_category')
    }

    self.readInfirmaryCase = () => {
      self.loading=true
       infirmarycaseStore.trigger('read_infirmary_case')
    }

     self.add = () => {
      if(!self.refs.infirmary_case.value){
        toastr.info("Please enter Event and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          infirmarycaseStore.trigger('add_infirmary_case', self.refs.infirmary_case.value,
           self.refs.category_id.value)
        }else if(self.title=='Update'){
          console.log('update')
          infirmarycaseStore.trigger('edit_infirmary_case', self.refs.infirmary_case.value,
            self.refs.category_id.value, self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.infirmaryCases.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.infirmaryCases.map(ev => {
        if(ev.case_id != e.item.ev.case_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      infirmarycaseStore.trigger('delete_infirmary_case', e.item.ev.case_id)
    }

    self.edit = (ev,e) => {
      console.log(ev)
      self.title='Update'
      self.refs.infirmary_case.value = ev.case_name
      self.refs.category_id.value = ev.category_id
      self.edit_id = ev.case_id
      document.getElementById("infirmary_case").focus()
    }

    infirmarycaseStore.on('add_infirmary_case_changed',AddInfirmaryCaseChanged)
    function AddInfirmaryCaseChanged(infirmaryCases){
      console.log(infirmaryCases)
      self.title='Create'
      self.refs.infirmary_case.value = ''
      self.refs.category_id.value = ''
      self.loading = false
      self.infirmaryCases = infirmaryCases
      self.update()
      self.readInfirmaryCase()
      console.log(self.infirmaryCases)
    }

    infirmarycaseStore.on('edit_infirmary_case_changed',EditInfirmaryCaseChanged)
    function EditInfirmaryCaseChanged(infiramryCases){
      console.log(infiramryCases)
      self.title='Create'
      self.refs.infirmary_case.value = ''
      self.refs.category_id.value = ''
      self.loading = false
      self.infiramryCases = infiramryCases
      self.update()
      self.readInfirmaryCase()

    }

    infirmarycaseStore.on('delete_infirmary_case_changed',DeleteInfirmaryCaseChanged)
    function DeleteInfirmaryCaseChanged(infiramryCases){
      console.log(infiramryCases)
      self.title='Create'
      self.refs.infirmary_case.value = ''
      self.refs.category_id.value = ''
      self.loading = false
      self.infiramryCases = infiramryCases
      self.update()
      self.readInfirmaryCase()
      console.log(self.infiramryCases)
    }

    infirmarycaseStore.on('read_infirmary_case_changed',ReadInfirmaryCaseChanged)
    function ReadInfirmaryCaseChanged(infirmaryCases){
      console.log(infirmaryCases)
      self.title='Create'
      self.refs.infirmary_case.value = ''
      self.loading = false
      self.infirmaryCases = infirmaryCases
      self.update()
      console.log(self.infirmaryCases)
    }

    infirmarycaseStore.on('read_infirmary_category_changed',InfirmaryCategoryChanged)
    function InfirmaryCategoryChanged(infirmaryCategories){
      console.log(infirmaryCategories)
      self.infirmaryCategories = infirmaryCategories
      self.update()
      console.log(self.infirmaryCategories)
    }

});
riot.tag2('infirmary-category', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Infirmary Category Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Category</label> </div> <div class="column is-narrow"> <input class="input" type="text" ref="category_name" onkeyup="{addEnter}"> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readCategories}" style="margin-right:2px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Category</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in infirmaryCategories}"> <td>{i+1}</td> <td>{c.category_name}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, c)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	   var self = this
      self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readCategories()
    })
    self.on("unmount", function(){
      infirmarycategoryStore.off('categories_changed', CategoriesChanged)
    })

    self.readCategories = () => {
      self.loading=true
       infirmarycategoryStore.trigger('read_categories')
    }

     self.add = () => {
      if(!self.refs.category_name.value){
        toastr.info("Please enter Category and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          infirmarycategoryStore.trigger('add_category', self.refs.category_name.value)
        }else if(self.title=='Update'){
          console.log('update')
          infirmarycategoryStore.trigger('edit_category', self.refs.category_name.value,
            self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.infirmaryCategories.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.infirmaryCategories.map(c => {
        if(c.category_id != e.item.c.category_id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      infirmarycategoryStore.trigger('delete_category', e.item.c.category_id)
    }

    self.edit = (c,e) => {
      console.log(c)
      self.title='Update'
      self.refs.category_name.value = c.category_name
      self.edit_id = c.category_id
    }

    infirmarycategoryStore.on('categories_changed',CategoriesChanged)
    function CategoriesChanged(infirmaryCategories){
      console.log(infirmaryCategories)
      self.title='Create'
      self.refs.category_name.value = ''
      self.loading = false
      self.infirmaryCategories = infirmaryCategories

      self.update()
      console.log(self.infirmaryCategories)
    }

});
riot.tag2('infirmary-date-wise-case-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Student Wise Infirmary Case Report<br> <span style="font-size:18px"> Session : {session_name} <br> Category: {category_name} From: {start_date} To: {end_date}</span> </h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="read_category_id" id="category_id"> <option each="{infirmaryCategories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Start Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="start_date" placeholder="" tabindex="0" type="text" style="width:130px"> </div> </div> <div class="column is-narrow"> <label class="label">End Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="end_date" placeholder="" tabindex="0" type="text" style="width:130px"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readStudentInfirmaryDateWiseCaseReport}">Go </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readStudentInfirmaryDateWiseCaseReport}" style="margin-left:34;margin-right:4px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th>#</th> <th>Name</th> <th>Enroll No</th> <th>Class</th> <th>Case Name</th> <th>Date</th> <th>Time In</th> <th>Time Out</th> <th>Treatment</th> </tr> </thead> <tbody> <tr each="{st, i in studentDateWiseCaseReports}"> <td>{i+1}</td> <td>{st.student_name}</td> <td>{st.enroll_number}</td> <td>{st.standard}</td> <td>{st.case_name}</td> <td>{st.t_date}</td> <td>{st.time_in}</td> <td>{st.time_out}</td> <td>{st.treatment}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
   var self = this
        self.on("mount", function(){
        self.title='Create'
        self.role = getCookie('role')
        self.readInfirmaryCategory()

        console.log("inside student infirmary")
        flatpickr(".date", {
          allowInput: true,
          dateFormat: "d/m/Y",
       })
        self.update()
     })
     self.on("unmount", function(){
       studentinfirmaryStore.off('read_student_date_wise_case_report_changed', ReadStudentDateWiseCaseReportChanged)
       studentinfirmaryStore.off('read_infirmary_category_changed',InfirmaryCategoryChanged)
     })

     self.readStudentInfirmaryDateWiseCaseReport = () => {
            self.loading=true
            self.infirmary_student_view='show_student_table'
            self.category_name = $("#category_id option:selected").text();
            self.start_date=self.refs.start_date.value,
            self.end_date=self.refs.end_date.value
            self.s_date=convertDate(self.refs.start_date.value)
            self.e_date=convertDate(self.refs.end_date.value)

           studentinfirmaryStore.trigger('read_student_date_wise_case_report', self.refs.read_category_id.value, self.s_date,self.e_date)

     }
      self.readInfirmaryCategory = () => {
        studentinfirmaryStore.trigger('read_infirmary_category')
     }

     self.addEnter = (e) => {
       if(e.which == 13){
         self.add()
       }
     }

      self.editEnter = (e) => {
       if(e.which == 13){
         self.edit(e)
       }
     }

     studentinfirmaryStore.on('read_student_date_wise_case_report_changed',ReadStudentDateWiseCaseReportChanged)
     function ReadStudentDateWiseCaseReportChanged(studentDateWiseCaseReports,session_name){
       console.log(studentDateWiseCaseReports)
       self.loading = false
       self.studentDateWiseCaseReports = studentDateWiseCaseReports
       self.session_name=session_name
       self.update()
       console.log(self.studentDateWiseCaseReports)
     }

     studentinfirmaryStore.on('read_infirmary_category_changed',InfirmaryCategoryChanged)
     function InfirmaryCategoryChanged(infirmaryCategories){
       console.log(infirmaryCategories)
       self.infirmaryCategories = infirmaryCategories
       self.loading=false
       self.update()
       console.log(self.infirmaryCategories)
     }

});
riot.tag2('infirmary-lab-test', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid" show="{infirmary_staff_view == \'show_staff_table\'}"> <h2 class="title has-text-centered" style="color: #ff3860;">Staff Lab Test Detail</h2> <div class="box no-print"> <div class="columns"> <div class="column"> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-info is-rounded is-pulled-right" onclick="{readStaffLabTest}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{add_staff_infirmary}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th>#</th> <th>Emp ID</th> <th>Name</th> <th>Heamoglobin</th> <th>Platelet</th> <th>Creatinine</th> <th>Blood sugar (F)</th> <th>Blood sugar (PP)</th> <th>Triglyceride</th> <th>Total Cholesterol</th> <th>SGPT</th> <th>SGOT</th> <th>Systolic BP</th> <th>Diastolic BP</th> <th class="has-text-centered">Action</th> </tr> </thead> <tbody> <tr each="{st, i in staffInfirmaryLabTests}"> <td>{i+1}</td> <td>{st.employee_id}</td> <td>{st.first_name} {st.middle_name} {st.last_name}</td> <td>{st.heamoglobin}</td> <td>{st.platelet}</td> <td>{st.creatinine}</td> <td>{st.blood_sugar_f}</td> <td>{st.blood_sugar_p}</td> <td>{st.triglyceride}</td> <td>{st.total_cholesterol}</td> <td>{st.sgpt}</td> <td>{st.sgot}</td> <td>{st.systolic_bp}</td> <td>{st.diastolic_bp}</td> <td class="no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{st.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, st)}">Edit</a></span> <span> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> <span><a class="button is-small is-rounded has-text-success" onclick="{printProfile.bind(this, st)}">Profile</a> </span> </div> <div class="table-buttons" if="{st.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section class="is-fluid" show="{infirmary_staff_view ==\'show_infirmary_staff_form\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} Staff Lab Test </h2> </div> <div class="level-right"> <button class="button" onclick="{close_staff_infirmary_form}">Back</button> </div> </div> <div class="box"> <div class="columns"> <div class="column is-2"> <label class="label">Employee</label> </div> <div class="column is-2"> <div class="select is-fullwidth"> <select ref="emp_id"> <option each="{employees}" riot-value="{emp_id}">{name} </option> </select> </div> </div> </div> <div class="columns"> <div class="column is-2"> <label class="label" for="class">Heamoglobin : </label> </div> <div class="column is-2"> <div class="control"> <input class="input form-control input" ref="heamoglobin"> </div> </div> <div class="column is-2"> <label class="label" for="class">Platelet : </label> </div> <div class="column is-2"> <div class="control"> <input class="input form-control input" ref="platelet"> </div> </div> <div class="column is-2"> <label class="label" for="class">Creatinine:</label> </div> <div class="column is-2"> <div class="control"> <input class="input form-control input" ref="creatinine"> </div> </div> </div> <div class="columns"> <div class="column is-2"> <label class="label" for="class">Blood Sugar (F):</label> </div> <div class="column is-2"> <div class="control"> <input class="input form-control input" ref="blood_sugar_f"> </div> </div> <div class="column is-2"> <label class="label" for="class">Blood Sugar (PP):</label> </div> <div class="column is-2"> <div class="control"> <input class="input form-control input" ref="blood_sugar_p"> </div> </div> <div class="column is-2"> <label class="label" for="class">Triglyceride:</label> </div> <div class="column is-2"> <div class="control"> <input class="input form-control input" ref="triglyceride"> </div> </div> </div> <div class="columns"> <div class="column is-2"> <label class="label" for="class">Total Cholesterol:</label> </div> <div class="column is-2"> <div class="control"> <input class="input form-control input" ref="total_cholesterol"> </div> </div> <div class="column is-2"> <label class="label" for="class">SGPT:</label> </div> <div class="column is-2"> <div class="control"> <input class="input form-control input" ref="sgpt"> </div> </div> <div class="column is-2"> <label class="label" for="class">SGOT:</label> </div> <div class="column is-2"> <div class="control"> <input class="input form-control input" ref="sgot"> </div> </div> </div> <div class="columns"> <div class="column is-2"> <label class="label" for="class">Systolic BP:</label> </div> <div class="column is-2"> <div class="control"> <input class="input form-control input" ref="systolic_bp"> </div> </div> <div class="column is-2"> <label class="label" for="class">Diastolic BP:</label> </div> <div class="column is-2"> <div class="control"> <input class="input form-control input" ref="diastolic_bp"> </div> </div> </div> <div class="column is-full"> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{add}">{title}</button> </div> </div> <div class="box" each="{in, i in staffInfirmaryTest}"> <label class="label" for="class">Diastolic BP: {i}</label> <input class="input form-control input" id="platelet{i}"> <span><a class="button is-small is-rounded " onclick="{remove.bind(this, i)}">remove</a></span> </div> </section> <section class="is-fluid" show="{infirmary_staff_view == \'show_infirmary_print_form\'}"> <div class="level no-print"> <div class="level-left"> </div> <div class="level-right"> <button class="button is-primary has-text-weight-bold ml5 is-small" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning has-text-weight-bold ml5 is-small " onclick="{close_infirmary_staff_view}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <h2 class="title has-text-centered" style="color: #ff3860;">Staff Lab Test Detail</h2> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <tr> <th>Emp ID</th> <td class="has-text-weight-bold">{employee_id}</td> <th>Name</th> <td colspan="3" class="has-text-weight-bold">{first_name} {middle_name} {last_name}</td> </tr> <tr> <th style="width:140px">Test Name</th> <th style="width:90px">Result</th> <th class="has-background-danger"></th> <th class="has-background-warning"></th> <th class="has-background-success"></th> <th>UNIT</th> </tr> <tr show="{gender_male}"> <th>Heamoglobin</th> <td>{heamoglobin}</td> <td> < 6 </td> <td>7-11</td> <td>12-16</td> <td>gm/dl</td> </tr> <tr show="{gender_female}"> <th>Heamoglobin</th> <td>{heamoglobin}</td> <td> < 6 </td> <td>7-10</td> <td>11-15</td> <td>gm/dl</td> </tr> <tr> <th>Platelet</th> <td>{platelet}</td> <td> < 0.25</td> <td>0.25-1.4</td> <td>1.5-4.0</td> <td>lakh/cmm</td> </tr> <tr> <th>Creatinine</th> <td>{creatinine}</td> <td> > 3.0</td> <td>1.2-3.0</td> <td>0.6-1.1</td> <td>mg/dl</td> </tr> <tr> <th>Blood sugar (F)</th> <td>{blood_sugar_f}</td> <td> < 60 OR > 140</td> <td>60-69 OR 111-140</td> <td>70-100</td> <td>mg/dl</td> </tr> <tr> <th>Blood sugar (PP)</th> <td>{blood_sugar_p}</td> <td> > 160</td> <td>141-160</td> <td>70-140</td> <td>mg/dl</td> </tr> <tr> <th>Triglyceride</th> <td>{triglyceride}</td> <td> > 165 </td> <td> - </td> <td>60-165</td> <td>mg/dl</td> </tr> <tr> <th>Total Cholesterol</th> <td>{total_cholesterol}</td> <td> > 220</td> <td> - </td> <td>150-220</td> <td>mg/dl</td> </tr> <tr> <th>SGPT</th> <td>{sgpt}</td> <td> > 100 </td> <td>50-100</td> <td> Upto 49</td> <td>U/L</td> </tr> <tr> <th>SGOT</th> <td>{sgot}</td> <td> > 100</td> <td>47-100</td> <td>Upto 46</td> <td>U/L</td> </tr> <tr> <th>Systolic BP</th> <td>{systolic_bp}</td> <td> < 90 OR > 150 </td> <td>90-100 OR 140-150</td> <td>100-140</td> <td>mm of HG</td> </tr> <tr> <th>Diastolic BP</th> <td>{diastolic_bp}</td> <td> < 60 OR > 100</td> <td>60-70 OR 90-100</td> <td>70-90</td> <td>mm of HG</td> </tr> </table> </section>', '', '', function(opts) {
   var self = this
        self.on("mount", function(){
        self.title='Create'
        self.role = getCookie('role')
        self.infirmary_staff_view='show_staff_table'

        self.readEmployee()
        self.readStaffLabTest()
        console.log("inside staff infirmary")
        flatpickr(".date", {
         allowInput: true,
         altFormat: "d/m/Y",
         dateFormat: "Y-m-d",
       })
         self.gender_female=false
         self.gender_male=false

        self.update()
     })
     self.on("unmount", function(){
       staffinfirmaryStore.off('read_staff_infirmary_lab_test_changed', ReadStaffInfirmaryLabTestChanged)
       staffinfirmaryStore.off('add_staff_infirmary_lab_test_changed', AddStaffInfirmaryLabTestChanged)
       staffinfirmaryStore.off('edit_staff_infirmary_lab_test_changed',EditStaffInfirmaryLabTestChanged)
       staffinfirmaryStore.off('delete_staff_infirmary_lab_test_changed',DeleteStaffInfirmaryLabTestChanged)
       staffinfirmaryStore.off('read_employee_changed',EmployeeChanged)
     })

     self.readStaffLabTest = () => {
         self.infirmary_staff_view='show_staff_table'
         self.loading=true
         staffinfirmaryStore.trigger('read_staff_lab_test')

     }

      self.readEmployee = () => {
        staffinfirmaryStore.trigger('read_employee')
      }

     self.add_staff_infirmary = () => {
        self.infirmary_staff_view='show_infirmary_staff_form'

     }
    self.close_staff_infirmary_form = () => {
        self.infirmary_staff_view='show_staff_table'

    }

      self.add = () => {
       if(!self.refs.emp_id.value){
         toastr.info("Please enter Emp ID No and try again")
       }else{
         self.loading = true
         if(self.title=='Create'){
            console.log('create')

           staffinfirmaryStore.trigger('add_staff_lab_test_infirmary', self.refs.emp_id.value,self.refs.heamoglobin.value,self.refs.platelet.value,self.refs.creatinine.value,self.refs.blood_sugar_f.value,self.refs.blood_sugar_p.value,self.refs.triglyceride.value,self.refs.total_cholesterol.value,self.refs.sgpt.value,self.refs.sgot.value,self.refs.systolic_bp.value,self.refs.diastolic_bp.value)
         }else if(self.title=='Update'){
           console.log('update')
           console.log(self.edit_id)
           staffinfirmaryStore.trigger('edit_staff_lab_test_infirmary',  self.refs.emp_id.value,self.refs.heamoglobin.value,self.refs.platelet.value,self.refs.creatinine.value,self.refs.blood_sugar_f.value,self.refs.blood_sugar_p.value,self.refs.triglyceride.value,self.refs.total_cholesterol.value,self.refs.sgpt.value,self.refs.sgot.value,self.refs.systolic_bp.value,self.refs.diastolic_bp.value,self.edit_id)
         }
       }
     }

     self.addEnter = (e) => {
       if(e.which == 13){
         self.add()
       }
     }

      self.editEnter = (e) => {
       if(e.which == 13){
         self.edit(e)
       }
     }

    self.cancelOperation = (e) => {
       self.staffInfirmaryLabTests.map(ev => {
           ev.confirmDelete = false
           ev.confirmEdit = false
       })
     }

     self.confirmDelete = (e) => {
      console.log(e.item.st.lab_id)
      console.log("+++++++++++++")
       self.staffInfirmaryLabTests.map(ev => {
        console.log(ev.lab_id)
         if(ev.lab_id != e.item.st.lab_id){
           ev.confirmDelete = false
         }else{
           ev.confirmDelete = true
         }
       })
     }

     self.delete = (e) => {
       self.loading = true
       staffinfirmaryStore.trigger('delete_lab_test', e.item.st.lab_id)
     }

     self.edit = (ev,e) => {
       console.log(ev)
       self.title='Update'
        flatpickr(".date", {
         allowInput: true,
         altFormat: "d/m/Y",
         dateFormat: "Y-m-d",
       })

          self.infirmary_staff_view='show_infirmary_staff_form'
          self.refs.emp_id.value=ev.emp_id
          self.refs.heamoglobin.value=ev.heamoglobin
          self.refs.platelet.value=ev.platelet
          self.refs.creatinine.value=ev.creatinine
          self.refs.blood_sugar_f.value=ev.blood_sugar_f
          self.refs.blood_sugar_p.value=ev.blood_sugar_p
          self.refs.triglyceride.value=ev.triglyceride
          self.refs.total_cholesterol.value=ev.total_cholesterol
          self.refs.sgpt.value=ev.sgpt
          self.refs.sgot.value=ev.sgot
          self.refs.systolic_bp.value=ev.systolic_bp
          self.refs.diastolic_bp.value=ev.diastolic_bp
          self.edit_id=ev.lab_id
     }

      self.printProfile = (ev,e) => {
           console.log(ev)
          self.infirmary_staff_view='show_infirmary_print_form'
          self.gender = ev.gender

          if(self.gender=='M'){
             self.gender_male=true
             self.gender_female=false
          }else{
              self.gender_female=true
              self.gender_male=false
          }
          self.emp_id=ev.emp_id
          self.employee_id=ev.employee_id
          self.first_name=ev.first_name
          self.middle_name=ev.middle_name
          self.last_name=ev.last_name
          self.heamoglobin=ev.heamoglobin
          self.platelet=ev.platelet
          self.creatinine=ev.creatinine
          self.blood_sugar_f=ev.blood_sugar_f
          self.blood_sugar_p=ev.blood_sugar_p
          self.triglyceride=ev.triglyceride
          self.total_cholesterol=ev.total_cholesterol
          self.sgpt=ev.sgpt
          self.sgot=ev.sgot
          self.systolic_bp=ev.systolic_bp
          self.diastolic_bp=ev.diastolic_bp
          self.update()
      }
      self.close_infirmary_staff_view= () =>{
        self.infirmary_staff_view='show_staff_table'
      }

     staffinfirmaryStore.on('add_staff_infirmary_lab_test_changed',AddStaffInfirmaryLabTestChanged)
     function AddStaffInfirmaryLabTestChanged(staffInfirmaryLabTests){
       console.log(staffInfirmaryLabTests)
       self.title='Create'
          self.refs.emp_id.value=""
          self.refs.heamoglobin.value=""
          self.refs.platelet.value=""
          self.refs.creatinine.value=""
          self.refs.blood_sugar_f.value=""
          self.refs.blood_sugar_p.value=""
          self.refs.triglyceride.value=""
          self.refs.total_cholesterol.value=""
          self.refs.sgpt.value=""
          self.refs.sgot.value=""
          self.refs.systolic_bp.value=""
          self.refs.diastolic_bp.value=""
         self.loading = false
         self.staffInfirmaryLabTests = staffInfirmaryLabTests
        self.update()

       console.log(self.staffInfirmaryLabTests)
     }

     staffinfirmaryStore.on('edit_staff_infirmary_lab_test_changed',EditStaffInfirmaryLabTestChanged)
     function EditStaffInfirmaryLabTestChanged(staffInfirmaryLabTests){
       console.log(staffInfirmaryLabTests)
          self.title='Create'
          self.refs.emp_id.value=""
          self.refs.heamoglobin.value=""
          self.refs.platelet.value=""
          self.refs.creatinine.value=""
          self.refs.blood_sugar_f.value=""
          self.refs.blood_sugar_p.value=""
          self.refs.triglyceride.value=""
          self.refs.total_cholesterol.value=""
          self.refs.sgpt.value=""
          self.refs.sgot.value=""
          self.refs.systolic_bp.value=""
          self.refs.diastolic_bp.value=""
          self.loading = false
          self.staffInfirmaryLabTests = staffInfirmaryLabTests
          self.update()

     }

     staffinfirmaryStore.on('delete_staff_infirmary_lab_test_changed',DeleteStaffInfirmaryLabTestChanged)
     function DeleteStaffInfirmaryLabTestChanged(staffInfirmaryLabTests){
       console.log(staffInfirmaryLabTests)
        self.title='Create'
        self.refs.emp_id.value=""
        self.refs.heamoglobin.value=""
        self.refs.platelet.value=""
        self.refs.creatinine.value=""
        self.refs.blood_sugar_f.value=""
        self.refs.blood_sugar_p.value=""
        self.refs.triglyceride.value=""
        self.refs.total_cholesterol.value=""
        self.refs.sgpt.value=""
        self.refs.sgot.value=""
        self.refs.systolic_bp.value=""
        self.refs.diastolic_bp.value=""
        self.loading = false
        self.staffInfirmaryLabTests = staffInfirmaryLabTests
        self.update()

       console.log(self.staffInfirmaryLabTests)
     }

     staffinfirmaryStore.on('read_staff_infirmary_lab_test_changed',ReadStaffInfirmaryLabTestChanged)
     function ReadStaffInfirmaryLabTestChanged(staffInfirmaryLabTests){
        console.log(staffInfirmaryLabTests)
          self.title='Create'
          self.refs.emp_id.value=""
          self.refs.heamoglobin.value=""
          self.refs.platelet.value=""
          self.refs.creatinine.value=""
          self.refs.blood_sugar_f.value=""
          self.refs.blood_sugar_p.value=""
          self.refs.triglyceride.value=""
          self.refs.total_cholesterol.value=""
          self.refs.sgpt.value=""
          self.refs.sgot.value=""
          self.refs.systolic_bp.value=""
          self.refs.diastolic_bp.value=""
          self.loading = false
          self.staffInfirmaryLabTests = staffInfirmaryLabTests
          self.update()
        console.log(self.staffInfirmaryLabTests)
     }

    staffinfirmaryStore.on('read_infirmary_case_changed',InfirmaryCaseChanged)
     function InfirmaryCaseChanged(infirmaryCases){
       console.log(infirmaryCases)
       self.infirmaryCases = infirmaryCases
       self.update()
       console.log(self.infirmaryCases)
     }
     staffinfirmaryStore.on('read_employee_changed',EmployeeChanged)
     function EmployeeChanged(employees){
       console.log(employees)
       self.employees = employees
       self.update()
       console.log(self.employees)
     }

});
riot.tag2('infirmary-setting', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_master == \'infirmary-category\'}" href="#/infirmary-setting/infirmary-category"> <span>Category</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'infirmary-case\'}" href="#/infirmary-setting/infirmary-case"> <span>Case</span> </a> </p> </div> <div id="infirmary-setting-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_master')
    console.log(opts.selected_master)
    if(!opts.selected_master){
      self.selected_master = 'infirmary-category'
    }else{
      self.selected_master = opts.selected_master
    }
});



riot.tag2('infirmary-staff-bp-weight-report', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_infirmary_staff_bp_weight_report == \'infirmary-staff-wise-report\'}" href="#/infirmary/infirmary-staff-bp-weight-report/infirmary-staff-wise-report"> <span>Staff Wise Report</span> </a> </p> <p class="control"> <a class="button {is-active: selected_infirmary_staff_bp_weight_report == \'infirmary-staff-monthly-report\'}" href="#/infirmary/infirmary-staff-bp-weight-report/infirmary-staff-date-wise-report"> <span>Date Wise Report</span> </a> </p> </div> <div id="infirmary-staff-bp-weight-report-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_infirmary_staff_bp_weight_report')
    console.log(opts.selected_infirmary_staff_bp_weight_report)
    if(!opts.selected_infirmary_staff_bp_weight_report){
      self.selected_infirmary_staff_bp_weight_report = 'infirmary-staff-wise-report'
    }else{
    self.selected_infirmary_staff_bp_weight_report=opts.selected_infirmary_staff_bp_weight_report
    }
});



riot.tag2('infirmary-staff-bp-weight', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid" show="{infirmary_staff_view == \'show_staff_bp_weight_table\'}"> <h2 class="title printOnly_t has-text-centered" style="color: #ff3860;">Staff Weight and B.P Records</h2> <h2 class="title no-print has-text-centered" style="color: #ff3860;">Staff Health Detail</h2> <div class="box no-print"> <div class="columns"> <div class="column"> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readStaffBPWeight}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-info is-rounded is-pulled-right" onclick="{add_staff_infirmary}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th>#</th> <th>Name</th> <th>Emp ID</th> <th>Checkup Date</th> <th>Time In</th> <th>Time Out</th> <th>B.P</th> <th>Height</th> <th>Weight</th> <th>B.M.I</th> <th class="no-print">Action</th> </tr> </thead> <tbody> <tr each="{st, i in staffBpWeights}"> <td>{i+1}</td> <td>{st.name}</td> <td>{st.employee_id}</td> <td>{st.checkup_date}</td> <td>{st.time_in}</td> <td>{st.time_out}</td> <td>{st.blood_pressure}</td> <td>{st.height}</td> <td>{st.weight}</td> <td>{st.bmi}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{st.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, st)}">Edit</a></span> <span> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{st.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section class="is-fluid" show="{infirmary_staff_view ==\'show_staff_bp_weight_form\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title}</h2> </div> <div class="level-right"> <button class="button" onclick="{close_staff_infirmary_form}">Back</button> </div> </div> <div class="box"> <div class="columns is-variable is-1 is-multiline"> <div class="column is-one-third"> <label class="label">Employee</label> <div class="control"> <div class="select is-fullwidth"> <select ref="staff_id" onkeyup="{addEnter}"> <option each="{employees}" riot-value="{emp_id}">{name} </option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label">Date</label> <input class="input date flatpickr-input form-control input" ref="checkup_date" placeholder="" tabindex="0" type="text" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Time In</label> <input type="text" ref="time_in" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Time Out</label> <input type="text" ref="time_out" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Upper B.P</label> <input type="text" ref="upper_bp" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Lower B.P</label> <input type="text" ref="lower_bp" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Height (Cm)</label> <input ref="height" type="text" class="input" onkeyup="{addEnter}" type="number"> </div> <div class="column is-one-third"> <label class="label">Weight (Kg)</label> <input type="text" ref="weight" type="text" class="input" onkeyup="{calculateBmi}"> </div> <div class="column is-one-third"> <label class="label">BMI</label> <input type="text" ref="bmi" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-full"> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{add}">{title}</button> </div> </div> </div> </section>', '', '', function(opts) {
   var self = this
        self.on("mount", function(){
        self.title='Create'
        self.role = getCookie('role')
        self.infirmary_staff_view='show_staff_bp_weight_table'
        self.readStaffBPWeight()
        self.readEmployee()
        console.log("inside staff BP weight")
        flatpickr(".date", {
          allowInput: true,
          dateFormat: "d/m/Y",
       })
        self.update()
     })
     self.on("unmount", function(){
       staffbpweightStore.off('read_staff_bp_weight_changed', ReadStaffBPWeightChanged)
       staffbpweightStore.off('read_employee_changed', EmployeeChanged)
       staffbpweightStore.off('add_staff_bp_weight_changed', AddStaffBPWeightChanged)
       staffbpweightStore.off('edit_staff_bp_weight_changed',EditStaffBPWeightChanged)
       staffbpweightStore.off('delete_staff_bp_weight_changed',DeleteStaffBPWeightChanged)
     })

     self.calculateBmi=()=>{
      self.height=self.refs.height.value
      self.weight=self.refs.weight.value
      console.log(self.height)
      console.log(self.weight)
      self.totalHeight=Number(self.height) * Number(self.height)
      console.log(self.totalHeight)
      self.BMI=self.weight/self.totalHeight
      console.log(self.BMI);
     self.refs.bmi.value=Number((self.BMI) * (10000)).toFixed(2)
     }

     self.readStaffBPWeight = () => {
      self.loading=true
           staffbpweightStore.trigger('read_staff_bp_weight')

     }

     self.readEmployee = () => {
        staffbpweightStore.trigger('read_employee')
     }

     self.add_staff_infirmary = () => {
        self.title='Create'
        self.infirmary_staff_view='show_staff_bp_weight_form'

     }
    self.close_staff_infirmary_form = () => {
       self.infirmary_staff_view='show_staff_bp_weight_table'
       self.title='Create'
       self.refs.staff_id.value=''
       self.refs.height.value=''
       self.refs.weight.value=''
       self.refs.checkup_date.value=''
       self.refs.time_in.value=''
       self.refs.time_out.value=''
       self.refs.lower_bp.value=''
       self.refs.upper_bp.value=''
       self.refs.bmi.value=''
    }

    self.addEnter = (e) => {
       if(e.which == 13){
         self.add()
       }
    }

      self.add = () => {
       if(!self.refs.staff_id.value){
         toastr.info("Please enter Emp ID No and try again")
       }else{
         self.loading = true
         if(self.title=='Create'){
            console.log('create')
               self.checkup_date=convertDate(self.refs.checkup_date.value)
           staffbpweightStore.trigger('add_staff_bp_weight', self.refs.staff_id.value,   self.checkup_date,self.refs.time_in.value,self.refs.time_out.value, self.refs.upper_bp.value,self.refs.lower_bp.value,self.refs.height.value,self.refs.weight.value,self.refs.bmi.value)
         }else if(self.title=='Update'){
           console.log('update')
           console.log(self.edit_id)
             self.checkup_date=convertDate(self.refs.checkup_date.value)
           staffbpweightStore.trigger('edit_staff_bp_weight', self.refs.staff_id.value,   self.checkup_date,self.refs.time_in.value,self.refs.time_out.value, self.refs.upper_bp.value,self.refs.lower_bp.value,self.refs.height.value,self.refs.weight.value,self.refs.bmi.value,self.edit_id)
         }
       }
     }

      self.editEnter = (e) => {
       if(e.which == 13){
         self.edit(e)
       }
     }

    self.cancelOperation = (e) => {
       self.staffBpWeights.map(ev => {
           ev.confirmDelete = false
           ev.confirmEdit = false
       })
     }

     self.confirmDelete = (e) => {
     	console.log(e.item.st.health_id)
     	console.log("+++++++++++++")
       self.staffBpWeights.map(ev => {
       	console.log(ev.health_id)
         if(ev.health_id != e.item.st.health_id){
           ev.confirmDelete = false
         }else{
           ev.confirmDelete = true
         }
       })
     }

     self.delete = (e) => {
       self.loading = true
       staffbpweightStore.trigger('delete_staff_bp_weight', e.item.st.health_id)
     }

     self.edit = (ev,e) => {
       console.log(ev)
       self.title='Update'
        flatpickr(".date", {
         allowInput: true,

         dateFormat: "d/m/Y",
       })

       self.infirmary_staff_view='show_staff_bp_weight_form'
       self.refs.staff_id.value=ev.staff_id
       self.refs.height.value=ev.height
       self.refs.weight.value=ev.weight
       self.refs.checkup_date.value=ev.checkup_date
       self.refs.time_in.value=ev.time_in
       self.refs.time_out.value=ev.time_out
       self.refs.lower_bp.value=ev.lower_bp
       self.refs.upper_bp.value=ev.upper_bp
       self.refs.bmi.value=ev.bmi
       console.log(ev.health_id)
       self.edit_id=ev.health_id
     }

     staffbpweightStore.on('add_staff_bp_weight_changed',AddStaffBPWeightChanged)
     function AddStaffBPWeightChanged(staffBpWeights){
       console.log(staffBpWeights)
       self.title='Create'
       self.refs.staff_id.value=''
       self.refs.height.value=''
       self.refs.weight.value=''
       self.refs.checkup_date.value=''
       self.refs.time_in.value=''
       self.refs.time_out.value=''
       self.refs.upper_bp.value=''
       self.refs.lower_bp.value=''
       self.refs.bmi.value=''
       self.loading = false
       self.staffBpWeights = staffBpWeights
       self.update()

       console.log(self.staffBpWeights)
     }

     staffbpweightStore.on('edit_staff_bp_weight_changed',EditStaffBPWeightChanged)
     function EditStaffBPWeightChanged(staffBpWeights){
       console.log(staffBpWeights)
       self.title='Create'
       self.refs.staff_id.value=''
       self.refs.height.value=''
       self.refs.weight.value=''
       self.refs.checkup_date.value=''
       self.refs.time_in.value=''
       self.refs.time_out.value=''
       self.refs.upper_bp.value=''
       self.refs.lower_bp.value=''
       self.refs.bmi.value=''
       self.loading = false
       self.staffBpWeights = staffBpWeights
       self.update()

     }

     staffbpweightStore.on('delete_staff_bp_weight_changed',DeleteStaffBPWeightChanged)
     function DeleteStaffBPWeightChanged(staffBpWeights){
       console.log(staffBpWeights)
       self.title='Create'
       self.refs.staff_id.value=''
       self.refs.height.value=''
       self.refs.weight.value=''
       self.refs.checkup_date.value=''
       self.refs.time_in.value=''
       self.refs.time_out.value=''
       self.refs.upper_bp.value=''
       self.refs.lower_bp.value=''
       self.refs.bmi.value=''
       self.loading = false
       self.staffBpWeights = staffBpWeights
       self.update()
       self.readStaffBPWeight()
       console.log(self.staffBpWeights)
     }

     staffbpweightStore.on('read_staff_bp_weight_changed',ReadStaffBPWeightChanged)
     function ReadStaffBPWeightChanged(staffBpWeights){
       console.log(staffBpWeights)
       self.title='Create'
       self.refs.staff_id.value=''
       self.refs.height.value=''
       self.refs.weight.value=''
       self.refs.checkup_date.value=''
       self.refs.time_in.value=''
       self.refs.time_out.value=''
       self.refs.upper_bp.value=''
       self.refs.lower_bp.value=''
       self.refs.bmi.value=''
       self.loading = false
       self.staffBpWeights = staffBpWeights
       self.update()
       console.log(self.staffInfirmarys)
     }

     staffbpweightStore.on('read_employee_changed',EmployeeChanged)
     function EmployeeChanged(employees){
       console.log(employees)
       self.employees = employees
       self.update()
       console.log(self.employees)
     }

});
riot.tag2('infirmary-staff-date-wise-case-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid" show="{infirmary_staff_view == \'show_staff_date-wise-case-report-table\'}"> <h4 class="title has-text-centered" style="color: #ff3860;">Staff Wise Infirmary Case Report <br> <span style="font-size:18px"> Category: {category_name} From: {start_date} To: {end_date}</span> </h4> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="read_category_id" id="read_category_id"> <option each="{infirmaryCategories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Start Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" style="width:150px" ref="start_date" placeholder="" tabindex="0" type="text"> </div> </div> <div class="column is-narrow"> <label class="label">End Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" style="width:150px" ref="end_date" placeholder="" tabindex="0" type="text"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readStaffInfirmaryDateWiseCaseReport}">Go </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-info is-rounded is-pulled-right" onclick="{readStaffInfirmary}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th>#</th> <th>Name</th> <th>Emp ID</th> <th>Case Name</th> <th>Date</th> <th>Time In</th> <th>Time Out</th> <th>Treatment</th> </tr> </thead> <tbody> <tr each="{st, i in staffDateWiseCaseReports}"> <td>{i+1}</td> <td>{st.name}</td> <td>{st.employee_id}</td> <td>{st.case_name}</td> <td>{st.t_date}</td> <td>{st.time_in}</td> <td>{st.time_out}</td> <td>{st.treatment}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
   var self = this
        self.on("mount", function(){
        self.title='Create'
        self.role = getCookie('role')
        self.infirmary_staff_view='show_staff_date-wise-case-report-table';
        self.readInfirmaryCategory()

        console.log("inside staff infirmary")
        flatpickr(".date", {
         allowInput: true,
         altFormat: "d/m/Y",
         dateFormat: "Y-m-d",
       })
        self.update()
     })
     self.on("unmount", function(){
       staffinfirmaryStore.off('read_staff_date_wise_case_report_changed', ReadStaffDateWiseCaseReportChanged)
         staffinfirmaryStore.off('read_infirmary_category_changed',InfirmaryCategoryChanged)

     })

     self.readStaffInfirmaryDateWiseCaseReport = () => {
            self.category_name = $("#read_category_id option:selected").text();
            self.start_date=self.refs.start_date.value,
            self.end_date=self.refs.end_date.value
            self.loading=true
           staffinfirmaryStore.trigger('read_staff_date_wise_case_report', self.refs.read_category_id.value,self.refs.start_date.value,self.refs.end_date.value,)

     }

      self.readInfirmaryCategory = () => {
        staffinfirmaryStore.trigger('read_infirmary_category')
     }

     self.addEnter = (e) => {
       if(e.which == 13){
         self.add()
       }
     }

      self.editEnter = (e) => {
       if(e.which == 13){
         self.edit(e)
       }
     }

     staffinfirmaryStore.on('read_staff_date_wise_case_report_changed',ReadStaffDateWiseCaseReportChanged)
     function ReadStaffDateWiseCaseReportChanged(staffDateWiseCaseReports){
       console.log(staffDateWiseCaseReports)
       self.loading = false
       self.staffDateWiseCaseReports = staffDateWiseCaseReports
       self.update()
       console.log(self.staffDateWiseCaseReports)
     }

     staffinfirmaryStore.on('read_infirmary_category_changed',InfirmaryCategoryChanged)
     function InfirmaryCategoryChanged(infirmaryCategories){
       console.log(infirmaryCategories)
       self.infirmaryCategories = infirmaryCategories
       self.loading=false
       self.update()
       console.log(self.infirmaryCategories)
     }

});
riot.tag2('infirmary-staff-date-wise-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Staff Weight and B.P Record<br> From: <span style="color:#000">{sdate}</span> To: <span style="color:#000">{edate}</span> </h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Start Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" style="width:150px" ref="start_date" placeholder="" tabindex="0" type="text"> </div> </div> <div class="column is-narrow"> <label class="label">End Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" style="width:150px" ref="end_date" placeholder="" tabindex="0" type="text"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readStaffBPWeightDateWiseReport}">Go </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-info is-rounded is-pulled-right" onclick="{readStaffInfirmary}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th>#</th> <th>Name</th> <th>DOB</th> <th>Employee ID</th> <th>Check up Date</th> <th>Weight</th> <th>B.P</th> <th>B.M.I</th> </tr> </thead> <tbody> <tr each="{st, i in staffDateWiseBpWeightReports}"> <td>{i+1}</td> <td>{st.name}</td> <td>{st.dob}</td> <td>{st.employee_id}</td> <td>{st.checkup_date}</td> <td>{st.weight}</td> <td>{st.blood_pressure}</td> <td>{st.bmi}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
   var self = this
        self.on("mount", function(){
        self.title='Create'
        self.role = getCookie('role')
        flatpickr(".date", {
        allowInput: true,
          dateFormat: "d/m/Y",
      })
        self.update()
     })
     self.on("unmount", function(){
         staffbpweightStore.off('read_staff_bp_weight_date_wise_report_changed', ReadStafBpWeightDateWiseReportChanged)
     })

     self.readStaffBPWeightDateWiseReport = () => {

            self.start_date=convertDate(self.refs.start_date.value)
            self.end_date=convertDate(self.refs.end_date.value)
            self.sdate=self.refs.start_date.value
            self.edate=self.refs.end_date.value
            self.loading=true
           staffbpweightStore.trigger('read_staff_date_wise_bp_report',self.start_date,self.end_date)

     }

     self.addEnter = (e) => {
       if(e.which == 13){
         self.add()
       }
     }

      self.editEnter = (e) => {
       if(e.which == 13){
         self.edit(e)
       }
     }

     staffbpweightStore.on('read_staff_bp_weight_date_wise_report_changed',ReadStafBpWeightDateWiseReportChanged)
     function ReadStafBpWeightDateWiseReportChanged(staffDateWiseBpWeightReports){
       console.log(staffDateWiseBpWeightReports)
       self.loading = false
       self.staffDateWiseBpWeightReports = staffDateWiseBpWeightReports
       self.update()
       console.log(self.staffDateWiseBpWeightReports)
     }

});
riot.tag2('infirmary-staff-health-card-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <h4 class="title has-text-centered no-print" style="color: #ff3860;">Yearly Health Report</h4> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Start Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="start_date" placeholder="" tabindex="0" type="text" style="width:130px"> </div> </div> <div class="column is-narrow"> <label class="label">End Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="end_date" placeholder="" tabindex="0" type="text" style="width:130px"> </div> </div> <div class="column is-narrow"> <label class="label">Employee ID</label> </div> <div class="column"> <div class="control"> <input class="input form-control input" ref="employee_id" placeholder="" type="text"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{printStaffHealthReport}">Go </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="{printStaffHealthReport}" title="Print"> <span class="icon" style="margin-right:5px"> <i class="fas fa-print"></i></span> Print All </button> </div> </div> </div> </section> <section show="{health_view ==\'show_health\'}" each="{healthReport, i in staffInfirmaryHealthReports}" style="margin-top:20px"> <header></header> <h4 class="title has-text-centered" style="color: #ff3860;background-color:#eee">YEARLY HEALTH RECORD ({session_name}) From {start_date} To {end_date}</h4> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <tr> <th>Employee ID</th> <td>{healthReport.employee_id}</td> <th>Name</th> <td>{healthReport.name}</td> <th>Department</th> <td>{healthReport.department_name}</td> <th>Designation</th> <td>{healthReport.designation}</td> </tr> </table> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th>Date</th> <th>WEIGHT (kg)</th> <th>HEIGHT (cm)</th> <th>B.P</th> <th>B.M.I</th> </tr> </thead> <tbody> <tr each="{st, i in healthReport.staffHelathArray}"> <td>{st.checkup_date}</td> <td>{st.weight}</td> <td>{st.height}</td> <td>{st.blood_pressure}</td> <td>{st.bmi}</td> </tr> </tbody> </table> <table class="table is-fullwidth is-striped is-bordered"> <label>Doctor Remark/Advice</label> <tr> <td colspan="5" style="height:150px"></td> </tr> </table> <table class="table is-fullwidth is-striped is-bordered"> <label>Doctor\'s Signature</label> <label style="margin-left:200px">Note</label> <label class="is-pulled-right">Principle</label> <tr> <td colspan="5"> <span> Normal B.P.: 120/80<br> B.M.I Range Underweight=<18.5 Normal=18.5 ? 25 Overweight= 25-30 Obesity => 30 </span> </td> </tr> </table> <div class="page-break"></div> </section>', '', '', function(opts) {
   var self = this
        self.on("mount", function(){
        self.title='Create'
        self.role = getCookie('role')
        console.log("inside staff infirmary")
        flatpickr(".date", {
         allowInput: true,
         altFormat: "d/m/Y",
         dateFormat: "Y-m-d",
       })
        self.update()
     })
     self.on("unmount", function(){
      staffinfirmaryStore.off('read_staff_health_report_changed',ReadStaffHealthReportChanged)
     })

      self.printStaffHealthReport = () => {
          self.loading=true;
          if(!self.refs.start_date.value){
           toastr.info("Please enter start_date")
         }else if(!self.refs.end_date.value){
           toastr.info("Please enter end_date")
         }else{
          self.loading=true;
          self.start_date=self.refs.start_date.value
          self.end_date=self.refs.end_date.value
           staffinfirmaryStore.trigger('read_staff_health_report', self.refs.employee_id.value,self.refs.start_date.value,self.refs.end_date.value)
         }
      }

     self.addEnter = (e) => {
       if(e.which == 13){
         self.add()
       }
     }

      self.editEnter = (e) => {
       if(e.which == 13){
         self.edit(e)
       }
     }

    staffinfirmaryStore.on('read_staff_health_report_changed',ReadStaffHealthReportChanged)
     function ReadStaffHealthReportChanged(staffInfirmaryHealthReports,session_name){
       console.log(staffInfirmaryHealthReports)
       self.staffInfirmaryHealthReports = staffInfirmaryHealthReports
       self.staffLength=staffInfirmaryHealthReports.length
       self.session_name=session_name
       console.log("length")
       console.log(self.staffLength)
       self.health_view ='show_health'
       self.loading=false
       self.update()
       console.log("inside health")
       console.log(self.staffInfirmaryHealthReports)
     }

});
riot.tag2('infirmary-staff-monthly-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <h4 class="title has-text-centered" style="color: #ff3860;">Detail of All Staff Illness for the Month of {month}</h4> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Month</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="month_id" id="month_id"> <option value="01">JANUARY</option> <option value="02">FEBRUARY</option> <option value="03">MARCH</option> <option value="04">APRIL</option> <option value="05">MAY</option> <option value="06">JUNE</option> <option value="07">JULY</option> <option value="08">AUGUST</option> <option value="09">SEPTEMBER</option> <option value="10">OCTOBER</option> <option value="11">NOVEMBER</option> <option value="12">DECEMBER</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readStaffMonthlyCaseReport}">Go </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th>#</th> <th>Category</th> <th>Name</th> <th>Date</th> <th>Total</th> </tr> </thead> <tbody> <tr each="{st, i in staffMonthlyCaseReports}"> <td>{i+1}</td> <td>{st.category_name}</td> <td>{st.staff_name}</td> <td>{st.treatment_date}</td> <td>{st.total}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
   var self = this
        self.on("mount", function(){
        self.title='Create'
        self.role = getCookie('role')

        console.log("inside staff infirmary")
        flatpickr(".date", {
         allowInput: true,
         altFormat: "d/m/Y",
         dateFormat: "Y-m-d",
       })
        self.update()
     })
     self.on("unmount", function(){

      staffinfirmaryStore.off('read_staff_monthly_report_changed',ReadStaffMonthlyCaseReportChanged)
     })

     self.readStaffMonthlyCaseReport = () => {
           self.month = $("#month_id option:selected").text();
           staffinfirmaryStore.trigger('read_staff_monthly_case_report', self.refs.month_id.value)
     }

     self.addEnter = (e) => {
       if(e.which == 13){
         self.add()
       }
     }

      self.editEnter = (e) => {
       if(e.which == 13){
         self.edit(e)
       }
     }

    staffinfirmaryStore.on('read_staff_monthly_report_changed',ReadStaffMonthlyCaseReportChanged)
     function ReadStaffMonthlyCaseReportChanged(staffMonthlyCaseReports){
       console.log(staffMonthlyCaseReports)
       self.staffMonthlyCaseReports = staffMonthlyCaseReports
       self.update()
       console.log(self.staffMonthlyCaseReports)
     }

});
riot.tag2('infirmary-staff-report', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_infirmary_staff_report == \'infirmary-staff-date-wise-case-report\'}" href="#/infirmary/infirmary-staff-report/infirmary-staff-date-wise-case-report"> <span>Date Wise Case Report</span> </a> </p> <p class="control"> <a class="button {is-active: selected_infirmary_staff_report == \'infirmary-staff-monthly-report\'}" href="#/infirmary/infirmary-staff-report/infirmary-staff-monthly-report"> <span>Monthly Report</span> </a> </p> <p class="control"> <a class="button {is-active: selected_infirmary_staff_report == \'infirmary-staff-health-card-report\'}" href="#/infirmary/infirmary-staff-report/infirmary-staff-health-card-report"> <span>Health Record</span> </a> </p> </div> <div id="infirmary-staff-report-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_infirmary_staff_report')
    console.log(opts.selected_infirmary_staff_report)
    if(!opts.selected_infirmary_staff_report){
      self.selected_infirmary_staff_report = 'infirmary-staff-date-wise-case-report'
    }else{
      self.selected_infirmary_staff_report = opts.selected_infirmary_staff_report
    }
});



riot.tag2('infirmary-staff-wise-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <h2 class="title printOnly_t has-text-centered" style="color: #ff3860;">Staff Weight and B.P Records<br> From: <span style="color:#000">{sdate}</span> To: <span style="color:#000">{edate}</span> <br> Name : <span style="color:#000">{emp_name}</span> DOB: <span style="color:#000">{dob}</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Employee</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="staff_id" onkeyup="{addEnter}" id="emp_id"> <option each="{employees}" riot-value="{emp_id}">{name} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Start Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="start_date" placeholder="" tabindex="0" type="text" onkeyup="{addEnter}" style="width:120px"> </div> </div> <div class="column is-narrow"> <label class="label">End Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="end_date" placeholder="" tabindex="0" type="text" onkeyup="{addEnter}" style="width:120px"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readStaffWiseReport}">Go </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <div class="level no-print"> <div class="level-left"> <h4 class="title" style="color: #ff3860;">Staff Weight and B.P Records</h4> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th>#</th> <th>Checkip Date</th> <th>Weight</th> <th>B.P</th> <th>B.M.I</th> </tr> </thead> <tbody> <tr each="{st, i in staffWiseReports}"> <td>{i+1}</td> <td>{st.checkup_date}</td> <td>{st.weight}</td> <td>{st.blood_pressure}</td> <td>{st.bmi}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
   var self = this
        self.on("mount", function(){
        self.title='Create'
        self.role = getCookie('role')
        self.readEmployee()

        console.log("inside BP")
       flatpickr(".date", {
          allowInput: true,
          dateFormat: "d/m/Y",
       })
        self.update()
     })
     self.on("unmount", function(){
       staffbpweightStore.off('read_staff_wise_report_changed', ReadStaffWiseReportChanged)
       staffbpweightStore.off('read_epmloyee_changed',EmployeeChanged)
     })

     self.readStaffWiseReport = () => {
             self.start_date=convertDate(self.refs.start_date.value)
             self.end_date=convertDate(self.refs.end_date.value)
             self.sdate=self.refs.start_date.value
             self.edate=self.refs.end_date.value

             self.emp_name = $("#emp_id option:selected").text();
           staffbpweightStore.trigger('read_staff_wise_report', self.refs.staff_id.value, self.start_date, self.end_date)

     }
      self.readEmployee = () => {
        staffbpweightStore.trigger('read_employee')
     }

     self.addEnter = (e) => {
       if(e.which == 13){
         self.add()
       }
     }

      self.editEnter = (e) => {
       if(e.which == 13){
         self.edit(e)
       }
     }

     staffbpweightStore.on('read_staff_wise_report_changed',ReadStaffWiseReportChanged)
     function ReadStaffWiseReportChanged(staffWiseReports){
       console.log(staffWiseReports)
       self.loading = false
       self.staffWiseReports = staffWiseReports
       console.log(self.staffWiseReports[0].dob)
       self.dob=self.staffWiseReports[0].dob
       self.update()
       console.log(self.staffWiseReports)
     }

     staffbpweightStore.on('read_employee_changed',EmployeeChanged)
     function EmployeeChanged(employees){
       console.log(employees)
       self.employees = employees
       self.update()
       console.log(self.employees)
     }

});
riot.tag2('infirmary-staff', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid" show="{infirmary_staff_view == \'show_staff_table\'}"> <h2 class="title has-text-centered" style="color: #ff3860;">Staff Infirmary Detail</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="read_category_id"> <option each="{infirmaryCategories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readStaffInfirmary}">Go </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-info is-rounded is-pulled-right" onclick="{readStaffInfirmary}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{add_staff_infirmary}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th>#</th> <th>Name</th> <th>Emp ID</th> <th>Case Name</th> <th>Date</th> <th>Time In</th> <th>Time Out</th> <th>Treatment</th> <th>Action</th> </tr> </thead> <tbody> <tr each="{st, i in staffInfirmarys}"> <td>{i+1}</td> <td>{st.name}</td> <td>{st.employee_id}</td> <td>{st.case_name}</td> <td>{st.treatment_date}</td> <td>{st.time_in}</td> <td>{st.time_out}</td> <td>{st.treatment}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{st.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, st)}">Edit</a></span> <span> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{st.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section class="is-fluid" show="{infirmary_staff_view ==\'show_infirmary_staff_form\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} Staff Infirmary</h2> </div> <div class="level-right"> <button class="button" onclick="{close_staff_infirmary_form}">Back</button> </div> </div> <div class="box"> <div class="columns is-variable is-1 is-multiline"> <div class="column is-one-third"> <label class="label">Employee</label> <div class="control"> <div class="select is-fullwidth"> <select ref="staff_id" onkeyup="{addEnter}"> <option each="{employees}" riot-value="{emp_id}">{name} </option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label" for="class">Category</label> <div class="control"> <div class="select is-fullwidth"> <select ref="category_id" onkeyup="{addEnter}"> <option each="{infirmaryCategories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label" for="class">Case</label> <div class="control"> <div class="select is-fullwidth"> <select ref="case_id" onkeyup="{addEnter}"> <option each="{infirmaryCases}" riot-value="{case_id}">{case_name} </option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label">Date</label> <input class="input date flatpickr-input form-control input" ref="treatment_date" placeholder="" tabindex="0" type="text" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Time In</label> <input type="text" ref="time_in" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Time Out</label> <input type="text" ref="time_out" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Treatment</label> <input type="text" ref="treatment" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-full"> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{add}">{title}</button> </div> </div> </div> </section>', '', '', function(opts) {
   var self = this
        self.on("mount", function(){
        self.title='Create'
        self.role = getCookie('role')
        self.infirmary_staff_view='show_staff_table'
        self.readInfirmaryCategory()
        self.readInfirmaryCase()
        self.readEmployee()
        console.log("inside staff infirmary")
        flatpickr(".date", {
         allowInput: true,
          dateFormat: "d/m/Y",
       })
        self.update()
     })
     self.on("unmount", function(){
       staffinfirmaryStore.off('read_staff_infirmary_changed', ReadStaffInfirmaryChanged)
       staffinfirmaryStore.off('read_infirmary_category_changed',InfirmaryCategoryChanged)
       staffinfirmaryStore.off('read_infirmary_case_changed',InfirmaryCaseChanged)
       staffinfirmaryStore.off('read_employee_changed',EmployeeChanged)
       staffinfirmaryStore.off('add_staff_infirmary_changed', AddStaffInfirmaryChanged)
       staffinfirmaryStore.off('edit_staff_infirmary_changed',EditStaffInfirmaryChanged)

       staffinfirmaryStore.off('delete_staff_infirmary_changed',DeleteStaffInfirmaryChanged)
     })

     self.readStaffInfirmary = () => {
         self.infirmary_staff_view='show_staff_table'
         self.loading=true
           staffinfirmaryStore.trigger('read_staff_infirmary', self.refs.read_category_id.value)

     }
      self.readInfirmaryCategory = () => {
        staffinfirmaryStore.trigger('read_infirmary_category')
     }
     self.readEmployee = () => {
        staffinfirmaryStore.trigger('read_employee')
     }
     self.readInfirmaryCase = () => {
        staffinfirmaryStore.trigger('read_infirmary_case')
     }

     self.add_staff_infirmary = () => {
        self.infirmary_staff_view='show_infirmary_staff_form'

     }
    self.close_staff_infirmary_form = () => {
        self.infirmary_staff_view='show_staff_table'

    }

    self.addEnter = (e) => {
       if(e.which == 13){
         self.add()
       }
     }

      self.add = () => {
         self.infirmaryCases.map(ev => {
              if(ev.case_id==self.refs.case_id.value){
               self.case_name=ev.case_name;
              }
            })
       if(!self.refs.staff_id.value){
         toastr.info("Please enter Emp ID No and try again")
       }else{
         self.loading = true
         if(self.title=='Create'){
            console.log('create')
             self.treatment_date=convertDate(self.refs.treatment_date.value)
           staffinfirmaryStore.trigger('add_staff_infirmary', self.refs.staff_id.value,self.refs.category_id.value,self.refs.case_id.value,self.treatment_date,self.refs.time_in.value,self.refs.time_out.value, self.refs.treatment.value, self.case_name)
         }else if(self.title=='Update'){
           console.log('update')
           console.log(self.edit_id)
            self.treatment_date=convertDate(self.refs.treatment_date.value)
           staffinfirmaryStore.trigger('edit_staff_infirmary',  self.refs.staff_id.value,self.refs.category_id.value,self.refs.case_id.value,self.treatment_date,self.refs.time_in.value,self.refs.time_out.value, self.refs.treatment.value,self.edit_id,self.case_name)
         }
       }
     }

      self.editEnter = (e) => {
       if(e.which == 13){
         self.edit(e)
       }
     }

    self.cancelOperation = (e) => {
       self.staffInfirmarys.map(ev => {
           ev.confirmDelete = false
           ev.confirmEdit = false
       })
     }

     self.confirmDelete = (e) => {
     	console.log(e.item.st.staff_infirmary_id)
     	console.log("+++++++++++++")
       self.staffInfirmarys.map(ev => {
       	console.log(ev.staff_infirmary_id)
         if(ev.staff_infirmary_id != e.item.st.staff_infirmary_id){
           ev.confirmDelete = false
         }else{
           ev.confirmDelete = true
         }
       })
     }

     self.delete = (e) => {
       self.loading = true
       staffinfirmaryStore.trigger('delete_staff_infirmary', e.item.st.staff_infirmary_id)
     }

     self.edit = (ev,e) => {
       console.log(ev)
       self.title='Update'
        flatpickr(".date", {
          allowInput: true,
          dateFormat: "d/m/Y",
       })

       self.infirmary_staff_view='show_infirmary_staff_form'
       self.refs.staff_id.value=ev.staff_id
       self.refs.category_id.value=ev.category_id
       self.refs.case_id.value=ev.case_id
       self.refs.treatment_date.value=ev.treatment_date
       self.refs.time_in.value=ev.time_in
       self.refs.time_out.value=ev.time_out
       self.refs.treatment.value=ev.treatment
       console.log(ev.staff_infirmary_id)
       self.edit_id=ev.staff_infirmary_id
     }

     staffinfirmaryStore.on('add_staff_infirmary_changed',AddStaffInfirmaryChanged)
     function AddStaffInfirmaryChanged(staffInfirmarys){
       console.log(staffInfirmarys)
       self.title='Create'
       self.refs.staff_id.value=''
       self.refs.category_id.value=''
       self.refs.case_id.value=''
       self.refs.treatment_date.value=''
       self.refs.time_in.value=''
       self.refs.time_out.value=''
       self.refs.treatment.value=''
       self.loading = false
       self.staffInfirmarys = staffInfirmarys
       self.update()
       self.readStaffInfirmary()
       console.log(self.staffInfirmarys)
     }

     staffinfirmaryStore.on('edit_staff_infirmary_changed',EditStaffInfirmaryChanged)
     function EditStaffInfirmaryChanged(staffInfirmarys){
       console.log(staffInfirmarys)
       self.title='Create'
       self.refs.staff_id.value=''
       self.refs.category_id.value=''
       self.refs.case_id.value=''
       self.refs.treatment_date.value=''
       self.refs.time_in.value=''
       self.refs.time_out.value=''
       self.refs.treatment.value=''
       self.loading = false
       self.staffInfirmarys = staffInfirmarys
       self.update()
       self.readStaffInfirmary()

     }

     staffinfirmaryStore.on('delete_staff_infirmary_changed',DeleteStaffInfirmaryChanged)
     function DeleteStaffInfirmaryChanged(staffInfirmarys){
       console.log(staffInfirmarys)
       self.title='Create'
       self.refs.staff_id.value=''
       self.refs.category_id.value=''
       self.refs.case_id.value=''
       self.refs.treatment_date.value=''
       self.refs.time_in.value=''
       self.refs.time_out.value=''
       self.refs.treatment.value=''
       self.loading = false
       self.staffInfirmarys = staffInfirmarys
       self.update()
       self.readStaffInfirmary()
       console.log(self.staffInfirmarys)
     }

     staffinfirmaryStore.on('read_staff_infirmary_changed',ReadStaffInfirmaryChanged)
     function ReadStaffInfirmaryChanged(staffInfirmarys){
       console.log(staffInfirmarys)
       self.title='Create'
      self.refs.staff_id.value=''
       self.refs.category_id.value=''
       self.refs.case_id.value=''
       self.refs.treatment_date.value=''
       self.refs.time_in.value=''
       self.refs.time_out.value=''
       self.refs.treatment.value=''
       self.loading = false
       self.staffInfirmarys = staffInfirmarys
       self.update()
       console.log(self.staffInfirmarys)
     }

     staffinfirmaryStore.on('read_infirmary_category_changed',InfirmaryCategoryChanged)
     function InfirmaryCategoryChanged(infirmaryCategories){
       console.log(infirmaryCategories)
       self.infirmaryCategories = infirmaryCategories
       self.update()
       console.log(self.infirmaryCategories)
     }
    staffinfirmaryStore.on('read_infirmary_case_changed',InfirmaryCaseChanged)
     function InfirmaryCaseChanged(infirmaryCases){
       console.log(infirmaryCases)
       self.infirmaryCases = infirmaryCases
       self.update()
       console.log(self.infirmaryCases)
     }
     staffinfirmaryStore.on('read_employee_changed',EmployeeChanged)
     function EmployeeChanged(employees){
       console.log(employees)
       self.employees = employees
       self.update()
       console.log(self.employees)
     }

});
riot.tag2('infirmary-student-case-wise-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Student Category wise Infirmary Graph<br>Grand Total : <span style="color:#000">{grand_total}</span> </h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="date input flatpickr-input form-control input" placeholder="" ref="start_date" tabindex="0" type="text" onkeyup="{addEnter}" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="date input flatpickr-input form-control input" placeholder="" ref="end_date" tabindex="0" type="text" onkeyup="{addEnter}" readonly="readonly"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getData}"> GO </button> <input type="checkbox" id="checkTable" checked="{e.done}" onclick="{viewTable}" style="margin-top: 12px;"> Table <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </div> </div> </div> <center> <div id="piechart" style="width: 900px; height: 450px;" show="{report_view ==\'show_graph\'}"></div> </center> <div class=" printOnly_t is-centered"> <table class="table is-striped is-hoverable is-bordered is-fullwidth" style="margin-top:35px"> <thead> <tr> <th>Category</th> <th class="has-text-right">Total</th> </tr> </thead> <tbody> <tr each="{cd, i in case_wise_reports}"> <td>{cd.category_name}</td> <td class="has-text-right">{cd.total}</td> </tr> <tr> <td class="has-text-right">Total</td> <td class="has-text-right">{grand_total}</td> </tr> </tbody> </table> </div> <div class="columns is-centered"> <table class="table is-striped is-hoverable is-bordered no-print" show="{report_view ==\'show_table\'}"> <thead> <tr> <th>Category</th> <th class="has-text-right">Total</th> </tr> </thead> <tbody> <tr each="{cd, i in case_wise_reports}"> <td>{cd.category_name}</td> <td class="has-text-right">{cd.total}</td> </tr> <tr> <td class="has-text-right">Total</td> <td class="has-text-right">{grand_total}</td> </tr> </tbody> </table> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      flatpickr(".date", {

    	allowInput: true,
    	altFormat: "d/m/Y",
    	dateFormat: "Y-m-d",
  		})
      self.update();
    })

    self.on("unmount", function(){
      studentinfirmaryStore.off('read_case_wise_report_changed',ReadCaseChanged)
    })

    self.viewTable = () => {
    	if($('#checkTable').is(":checked")){
	        self.report_view = 'show_table'
    	}else{
	        self.report_view = 'show_graph'
    	}
    }
    self.getData = () => {
    	var obj={}
          obj['start_date']=self.refs.start_date.value
          obj['end_date']=self.refs.end_date.value
          self.loading = true
          studentinfirmaryStore.trigger('read_case_wise_report', obj)
          self.report_view = 'show_graph'
          console.log(obj)
    }

    studentinfirmaryStore.on('read_case_wise_report_changed',ReadCaseChanged)
    function ReadCaseChanged(case_wise_reports,grand_total){
      self.case_wise_reports = case_wise_reports
      self.grand_total = grand_total
      self.loading=false

      var chart_percentage = []
       chart_percentage.push(['Task', 'Hours per Day'])
       for (var i = self.case_wise_reports.length - 1; i >= 0; i--) {
		   chart_percentage.push([self.case_wise_reports[i].category_name,self.case_wise_reports[i].total])
		}

      google.charts.load("current", {packages:["corechart"]});
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {

        var data = google.visualization.arrayToDataTable(chart_percentage);

        var options = {
          is3D: true,
          legend:{position: 'labeled',
                  textStyle: {bold: true} },
          pieSliceText: 'value'
        };

        var chart = new google.visualization.PieChart(document.getElementById('piechart'));
        chart.draw(data, options);
      }

      self.update()
      console.log(self.case_wise_reports)
    }
});
riot.tag2('infirmary-student-class-wise-report', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Class Wise Infirmary Graph<br>Grand Total : <span style="color:#000">{grand_total}</span> <br> <span style="color:#000">{standard} {section}</span></h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" id="standard_id" onchange="{getReadSection}" onkeyup="{addEnter}"> <option each="{standards}" riot-value="{standard_id}">{standard} </option> <option value="-1">ALL</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Section</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="section_id" id="section_id" onkeyup="{addEnter}"> <option each="{readfilteredSections}" riot-value="{section_id}">{section} </option> <option value="-1">ALL</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getData}"> GO </button> <input type="checkbox" id="checkTable" checked="{e.done}" onclick="{viewTable}" style="margin-top: 12px;"> Table <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <center> <div id="chart_div" style="width:1300px; height: 600px;" show="{report_view ==\'show_graph\'}"></div> </center> <div class=" printOnly_t is-centered"> <table class="table is-striped is-hoverable is-bordered is-fullwidth"> <thead> <tr> <th>Case</th> <th class="has-text-right">Total</th> </tr> </thead> <tbody> <tr each="{cd, i in class_wise_case_report}"> <td>{cd.category_name}</td> <td class="has-text-right">{cd.total}</td> </tr> <tr> <td class="has-text-right">Total</td> <td class="has-text-right">{grand_total}</td> </tr> </tbody> </table> </div> <div class="columns is-centered"> <table class="table is-striped is-hoverable is-bordered is-fullwidth no-print" show="{report_view ==\'show_table\'}"> <thead> <tr> <th>Case</th> <th class="has-text-right">Total</th> </tr> </thead> <tbody> <tr each="{cd, i in class_wise_case_report}"> <td>{cd.category_name}</td> <td class="has-text-right">{cd.total}</td> </tr> <tr> <td class="has-text-right">Total</td> <td class="has-text-right">{grand_total}</td> </tr> </tbody> </table> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      flatpickr(".date", {

    	allowInput: true,
    	altFormat: "d/m/Y",
    	dateFormat: "Y-m-d",
  		})
      self.readStandard()
      self.readSection()

      self.update();
    })

    self.on("unmount", function(){
      studentinfirmaryStore.on('read_class_wise_report_changed',ReadClassWiseReportChanged)
      studentStore.off('read_standard_changed',StandardChanged)
      studentStore.off('read_section_changed',SectionChanged)
    })

    self.readStandard = () => {
       studentStore.trigger('read_standard')
    }

    self.readSection = () => {
       studentStore.trigger('read_section')
    }

    self.getReadSection = () => {
    	self.readfilteredSections = []
    	self.readfilteredSections = self.sections.filter(s => {
    		return s.standard_id == self.refs.standard_id.value
    	})
    }

    self.viewTable = () => {
    	if($('#checkTable').is(":checked")){
	        self.report_view = 'show_table'
    	}else{
	        self.report_view = 'show_graph'
    	}
    }
    self.getData = () => {
          self.loading = true
           self.standard = $("#standard_id option:selected").text();
           self.section= $("#section_id option:selected").text();
          studentinfirmaryStore.trigger('read_class_wise_report', self.refs.standard_id.value,self.refs.section_id.value)
          	self.report_view = 'show_graph'
    }

    studentStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()
    }

    studentStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections
      self.update()
    }

    studentinfirmaryStore.on('read_class_wise_report_changed',ReadClassWiseReportChanged)
    function ReadClassWiseReportChanged(class_wise_case_report,grand_total){
       self.loading=false
       self.class_wise_case_report=[]
       self.class_wise_case_report = class_wise_case_report
       self.grand_total = grand_total
       console.log(self.grand_total)

         var chartColors = ['#e3342f','#F6993F','#F2D024','#1F9D55','#2779BD','#9561E2','#B8C2CC','#eeefff','#e3342f','#F6993F','#F2D024','#1F9D55','#2779BD','#9561E2','#B8C2CC','#ffeeee','#e3342f','#F6993F','#F2D024','#1F9D55','#2779BD','#9561E2','#B8C2CC','#ffce'];

	    var chart_percentage = []
      	chart_percentage.push(['Head', 'Value', { role: 'style' }])
       	for (var i = self.class_wise_case_report.length - 1; i >= 0; i--) {

		   chart_percentage.push([self.class_wise_case_report[i].category_name,self.class_wise_case_report[i].total,chartColors[i]])
		}
      	google.charts.load("current", {packages:['corechart']});
    	google.charts.setOnLoadCallback(drawChart);
    		function drawChart() {
      			var data = google.visualization.arrayToDataTable(chart_percentage);
      			var view = new google.visualization.DataView(data);
      			view.setColumns([0, 1,
                       	{ calc: "stringify",
                          sourceColumn: 1,
                          type: "string",
                          role: "annotation" },2
                ]);
      			var options = {
        				width: 1000,
        				height: 450,

        				legend: { position: "none" },
      			};
      			var chart = new google.visualization.ColumnChart(document.getElementById("chart_div"));

      			chart.draw(view, options);

  			}

      self.update()
      console.log(self.class_wise_case_report)
    }
});
riot.tag2('infirmary-student-report', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_infirmary_student_report == \'infirmary-date-wise-case-report\'}" href="#/infirmary/infirmary-student-report/infirmary-date-wise-case-report"> <span>Date Wise Case Report</span> </a> </p> <p class="control"> <a class="button {is-active: selected_infirmary_student_report == \'infirmary-student-class-wise-report\'}" href="#/infirmary/infirmary-student-report/infirmary-student-class-wise-report"> <span>Class Wise Report</span> </a> </p> <p class="control"> <a class="button {is-active: selected_infirmary_student_report == \'infirmary-student-case-wise-report\'}" href="#/infirmary/infirmary-student-report/infirmary-student-case-wise-report"> <span>Case Wise Report</span> </a> </p> </div> <div id="infirmary-student-report-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_infirmary_student_report')
    console.log(opts.selected_infirmary_student_report)
    if(!opts.selected_infirmary_student_report){
      self.selected_infirmary_student_report = 'infirmary-date-wise-case-report'
    }else{
      self.selected_infirmary_student_report = opts.selected_infirmary_student_report
    }
});



riot.tag2('infirmary-student', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid" show="{infirmary_student_view == \'show_student_table\'}"> <h2 class="title has-text-centered" style="color: #ff3860;">Student Infirmary Details<br> Category : {category_name}</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="read_category_id" id="read_category_id"> <option each="{infirmaryCategories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readStudentInfirmary}">Go </button> </div> <div class="column"> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readStudentInfirmary}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-info is-rounded is-pulled-right" onclick="{add_student_infirmary}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th>#</th> <th>Name</th> <th>Enroll No</th> <th>Class</th> <th>Case Name</th> <th>Date</th> <th>Time In</th> <th>Time Out</th> <th>Treatment</th> <th>Action</th> </tr> </thead> <tbody> <tr each="{st, i in studentInfirmarys}"> <td>{i+1}</td> <td>{st.student_name}</td> <td>{st.enroll_number}</td> <td>{st.standard}</td> <td>{st.case_name}</td> <td>{st.treatment_date}</td> <td>{st.time_in}</td> <td>{st.time_out}</td> <td>{st.treatment}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{st.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, st)}">Edit</a></span> <span> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{st.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section class="is-fluid" show="{infirmary_student_view ==\'show_infirmary_student_form\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} Student Infirmary</h2> </div> <div class="level-right"> <button class="button" onclick="{close_student_infirmary_form}">Back</button> </div> </div> <div class="box"> <div class="columns is-variable is-1 is-multiline"> <div class="column is-one-third"> <label class="label">Enroll No</label> <input type="text" ref="enroll_number" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label" for="class">Category</label> <div class="control"> <div class="select is-fullwidth"> <select ref="category_id" id="category_id" onkeyup="{addEnter}" onchange="{filterInfiramryCase}"> <option></option> <option each="{infirmaryCategories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label" for="class">Case</label> <div class="control"> <div class="select is-fullwidth"> <select ref="case_id" id="case_id" onkeyup="{addEnter}"> <option each="{filterInfirmaryCases}" riot-value="{case_id}">{case_name} </option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label">Date</label> <input class="input date flatpickr-input form-control input" ref="treatment_date" placeholder="" tabindex="0" type="text"> </div> <div class="column is-one-third"> <label class="label">Time In</label> <input type="text" ref="time_in" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Time Out</label> <input type="text" ref="time_out" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Treatment</label> <input type="text" ref="treatment" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Sent Home</label> <input type="checkbox" id="sent_home_check_box" onkeyup="{addEnter}"> </div> <div class="column is-full"> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{add}">{title}</button> </div> </div> </div> </section>', '', '', function(opts) {
   var self = this
        self.on("mount", function(){
        self.title='Create'
        self.role = getCookie('role')
        self.infirmary_student_view='show_student_table'
        self.readInfirmaryCategory()
        self.readInfirmaryCase()

        console.log("inside student infirmary")
        flatpickr(".date", {
          allowInput: true,
          dateFormat: "d/m/Y",
       })
        self.update()
     })
     self.on("unmount", function(){
       studentinfirmaryStore.off('add_student_infirmary_changed', AddStudentInfirmaryChanged)
       studentinfirmaryStore.off('read_student_infirmary_changed', ReadStudentInfirmaryChanged)

       studentinfirmaryStore.off('read_infirmary_category_changed',InfirmaryCategoryChanged)
       studentinfirmaryStore.off('read_infirmary_case_changed',InfirmaryCaseChanged)
       studentinfirmaryStore.off('edit_student_infirmary_changed',EditStudentInfirmaryChanged)
       studentinfirmaryStore.off('delete_student_infirmary_changed',DeleteStudentInfirmaryChanged)
     })

     self.readStudentInfirmary = () => {
         self.loading=true
         self.category_name = $("#read_category_id option:selected").text();
         self.infirmary_student_view='show_student_table'
         studentinfirmaryStore.trigger('read_student_infirmary', self.refs.read_category_id.value)

     }
     self.readInfirmaryCase = () => {
        studentinfirmaryStore.trigger('read_infirmary_case')
     }
    self.readInfirmaryCategory = () => {
        studentinfirmaryStore.trigger('read_infirmary_category')

     }

    self.filterInfiramryCase = () => {
      self.filterInfirmaryCases = []
      self.filterInfirmaryCases = self.infirmaryCases.filter(s => {
        return s.category_id == self.refs.category_id.value
      })
    }

     self.add_student_infirmary = () => {
        self.infirmary_student_view='show_infirmary_student_form'

     }
    self.close_student_infirmary_form = () => {
        self.infirmary_student_view='show_student_table'
        self.refs.enroll_number.value=''
        self.refs.category_id.value=''
        self.refs.case_id.value=''
        self.refs.treatment_date.value=''
        self.refs.time_in.value=''
        self.refs.time_out.value=''
        self.refs.treatment.value=''

    }

    self.addEnter = (e) => {
       if(e.which == 13){
         self.add()
       }
     }

      self.add = () => {
        self.category_id=self.refs.category_id.value;
      	if($('#sent_home_check_box').is(":checked")){
      		self.sent_home=1;
      	}else{
      		self.sent_home=0;
      	}
         self.infirmaryCases.map(ev => {
              if(ev.category_id==self.refs.category_id.value){
               self.case_name=ev.case_name;
              }
            })
       if(!self.refs.enroll_number.value){
         toastr.info("Please enter Enroll No and try again")
       }else{
         self.loading = true
         if(self.title=='Create'){
             self.category = $("#category_id option:selected").text();
             self.case= $("#case_id option:selected").text();
            self.treatment_date=convertDate(self.refs.treatment_date.value)
           studentinfirmaryStore.trigger('add_student_infirmary', self.refs.enroll_number.value,self.refs.category_id.value,self.refs.case_id.value, self.treatment_date,self.refs.time_in.value,self.refs.time_out.value, self.refs.treatment.value, self.sent_home,self.case_name, self.category)
         }else if(self.title=='Update'){
           self.treatment_date=convertDate(self.refs.treatment_date.value)
           self.category = $("#category_id option:selected").text();
           self.case= $("#case_id option:selected").text();
           studentinfirmaryStore.trigger('edit_student_infirmary',  self.refs.enroll_number.value,self.refs.category_id.value,self.refs.case_id.value, self.treatment_date,self.refs.time_in.value,self.refs.time_out.value, self.refs.treatment.value, self.sent_home,self.edit_id,self.case_name,self.category)
         }
       }
     }

      self.editEnter = (e) => {
       if(e.which == 13){
         self.edit(e)
       }
     }

    self.cancelOperation = (e) => {
       self.studentInfirmarys.map(ev => {
           ev.confirmDelete = false
           ev.confirmEdit = false
       })
     }

     self.confirmDelete = (e) => {
     	console.log(e.item.st.infirmary_id)
     	console.log("+++++++++++++")
       self.studentInfirmarys.map(ev => {
       	console.log(ev.infirmary_id)
         if(ev.infirmary_id != e.item.st.infirmary_id){
           ev.confirmDelete = false
         }else{
           ev.confirmDelete = true
         }
       })
     }

     self.delete = (e) => {
       self.loading = true
       studentinfirmaryStore.trigger('delete_student_infirmary', e.item.st.infirmary_id)
     }

     self.edit = (ev,e) => {
       console.log(ev)
       self.title='Update'
          flatpickr(".date", {
          allowInput: true,
          dateFormat: "d/m/Y",
       })

       self.infirmary_student_view='show_infirmary_student_form'
       self.refs.enroll_number.value=ev.enroll_number
       self.refs.category_id.value=ev.category_id
       self.refs.case_id.value=ev.case_id
       self.refs.treatment_date.value= ev.treatment_date
       self.refs.time_in.value=ev.time_in
       self.refs.time_out.value=ev.time_out
       self.refs.treatment.value=ev.treatment
       self.sent_home
       self.filterInfiramryCase()
       self.update()
       if(ev.sent_home==1){
       	 $('#sent_home_check_box').prop('checked',true)
       }else{
       	 $('#sent_home_check_box').prop('checked',false)
       }
       self.edit_id = ev.infirmary_id
     }

     studentinfirmaryStore.on('add_student_infirmary_changed',AddStudentInfirmaryChanged)
     function AddStudentInfirmaryChanged(studentInfirmarys){
       console.log(studentInfirmarys)
       self.title='Create'
       self.refs.enroll_number.value=''
       self.refs.category_id.value=''
       self.refs.case_id.value=''
       self.refs.treatment_date.value=''
       self.refs.time_in.value=''
       self.refs.time_out.value=''
       self.refs.treatment.value=''
       self.loading = false
       self.studentInfirmarys = studentInfirmarys
       self.update()
       self.refs.read_category_id.value=self.category_id
       self.readStudentInfirmary ();
       console.log(self.studentInfirmarys)
     }

     studentinfirmaryStore.on('edit_student_infirmary_changed',EditStudentInfirmaryChanged)
     function EditStudentInfirmaryChanged(studentInfirmarys){
       console.log(studentInfirmarys)
       self.title='Create'
       self.refs.enroll_number.value=''
       self.refs.category_id.value=''
       self.refs.case_id.value=''
       self.refs.treatment_date.value=''
       self.refs.time_in.value=''
       self.refs.time_out.value=''
       self.refs.treatment.value=''
       self.loading = false
       self.studentInfirmarys = studentInfirmarys
       self.update()
       self.readStudentInfirmary()

     }

     studentinfirmaryStore.on('delete_student_infirmary_changed',DeleteStudentInfirmaryChanged)
     function DeleteStudentInfirmaryChanged(studentInfirmarys){
       console.log(studentInfirmarys)
       self.title='Create'
       self.refs.enroll_number.value=''
       self.refs.category_id.value=''
       self.refs.case_id.value=''
       self.refs.treatment_date.value=''
       self.refs.time_in.value=''
       self.refs.time_out.value=''
       self.refs.treatment.value=''
       self.loading = false
       self.studentInfirmarys = studentInfirmarys
       self.update()
       self.readStudentInfirmary()
       console.log(self.studentInfirmarys)
     }

     studentinfirmaryStore.on('read_student_infirmary_changed',ReadStudentInfirmaryChanged)
     function ReadStudentInfirmaryChanged(studentInfirmarys){
       console.log(studentInfirmarys)
       self.title='Create'
      self.refs.enroll_number.value=''
       self.refs.category_id.value=''
       self.refs.case_id.value=''
       self.refs.treatment_date.value=''
       self.refs.time_in.value=''
       self.refs.time_out.value=''
       self.refs.treatment.value=''
       self.loading = false
       self.studentInfirmarys = studentInfirmarys
       self.update()
       console.log(self.studentInfirmarys)
     }

     studentinfirmaryStore.on('read_infirmary_category_changed',InfirmaryCategoryChanged)
     function InfirmaryCategoryChanged(infirmaryCategories){
       console.log(infirmaryCategories)
       self.infirmaryCategories = infirmaryCategories
       self.update()
       console.log(self.infirmaryCategories)
     }
      studentinfirmaryStore.on('read_infirmary_case_changed',InfirmaryCaseChanged)
     function InfirmaryCaseChanged(infirmaryCases){
       console.log(infirmaryCases)
       self.infirmaryCases = infirmaryCases
       self.update()
       console.log(self.infirmaryCases)
     }

});
riot.tag2('infirmary', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_master == \'infirmary-student\'}" href="#/infirmary/infirmary-student"> <span>Student Infirmary</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'infirmary-student-report\'}" href="#/infirmary/infirmary-student-report/infirmary-date-wise-case-report">Student Report</a> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'infirmary-staff\'}" href="#/infirmary/infirmary-staff"> <span>Staff Infirmary</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'infirmary-lab-test\'}" href="#/infirmary/infirmary-lab-test"> <span>Lab Test</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'infirmary-staff-report\'}" href="#/infirmary/infirmary-staff-report/infirmary-staff-date-wise-case-report"> <span>Staff Report</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'infirmary-staff-bp-weight\'}" href="#/infirmary/infirmary-staff-bp-weight"> <span>Staff B.P/Weight </span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'infirmary-staff-bp-weight-report\'}" href="#/infirmary/infirmary-staff-bp-weight-report/infirmary-staff-wise-report"> <span>Staff B.P/Report</span> </a> </p> </div> <div id="infirmary-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_master')
    console.log(opts.selected_master)
    if(!opts.selected_master){
      self.selected_master = 'infirmary-student'
    }else{
      self.selected_master = opts.selected_master
    }
});



riot.tag2('interviewed-candidate', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{interviewed_candidate_view ==\'show_interviewed_candidate\'}"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Interviewee List</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="input date" ref="start_date" id="start_date" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="input date" ref="end_date" id="end_date" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">Result</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="result"> <option value="Accept">Accept</option> <option value="Hold">Hold</option> <option value="Reject">Reject</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getData}"> GO </button> </div> <div class="column"> <button class="button is-success has-text-weight-bold ml5 is-pulled-right" onclick="{csvExport}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-link has-text-weight-bold is-pulled-right" onclick="{getData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <thead> <tr> <th>Sl No</th> <th>Applicant No</th> <th>Name</th> <th>Post Applied</th> <th>Subject Taught</th> <th>Attendance</th> <th>Panel</th> <th>Feedback</th> <th>Class Taught</th> <th>DOB</th> <th>Sex</th> <th>Marital Status</th> <th>Interview Date</th> <th style="width: 90px;"></th> </tr> </thead> <tbody> <tr each="{a, i in InterviewedCandidateData}"> <td>{i+1}</td> <td>{a.career_id}</td> <td>{a.full_name}</td> <td>{a.post_applied_for}</td> <td>{a.subject_tobe_taught}</td> <td>{a.attendance}</td> <td>{a.panel}</td> <td>{a.feedback}</td> <td>{a.class_tobe_taught}</td> <td>{a.date_of_birth}</td> <td>{a.sex}</td> <td>{a.marital_status}</td> <td>{a.interview_date}</td> <td class="has-text-right no-print"> <span><a class="button is-small" onclick="{cancel_result.bind(this, a.interview_id)}" title="Cancel Result"><i class="fa fa-times" aria-hidden="true"></i></a></span> <span><a class="button is-small" onclick="{view_profile.bind(this, a.career_id)}" title="Profile"><i class="fa fa-eye" aria-hidden="true"></i></a></span> </td> </tr> </tbody> </table> </section> <div id="cancelresultModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Confirmation Required</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <h1 class="title has-text-centered is-size-5" style="color: #ff3860;">Are you sure you want to Cancel the Interview Status of the selected candidate?</h1> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-success" onclick="{UpdateInterviewedCandidate}">Yes</button> <button class="button is-danger" id="item-modal-close" onclick="{closecancelresultModal}">No</button> </footer> </div> </div> <print-header></print-header> <section class=" is-fluid" show="{interviewed_candidate_view ==\'applicant_profile\'}"> <div class="level no-print"> <div class="level-left"> </div> <div class="level-right"> <button class="button is-primary has-text-weight-bold " onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> <button class="button is-warning has-text-weight-bold ml5" onclick="{close_applicant_profile}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <center> <table class="table is-bordered career-profile-table"> <caption class="career-profile-caption">Applicant Profile</caption> </table> <h1 class="career-profile-h3 is-size-5">Personal Details</h1> <table class=" table is-bordered career-profile-table"> <tr> <th>Name</th> <td colspan="3" style="text-transform: capitalize;" class="profile-td">{st.first_name} {st.middle_name} {st.last_name}</td> <td style="width: 75px;" colspan="2" rowspan="6" class="profile-td"><div style="text-align: center;border: 1px solid #000;padding-top: 46px;margin-top:22px; height:150px;">Affix your recent passport size photograph<div> </td> </tr> <tr> <th class="profile-th">Father</th> <td colspan="3" class="profile-td">{st.f_first_name} {st.f_middle_name} {st.f_last_name} </td> <tr> <th class="profile-th">Husband Name</th> <td colspan="3" class="profile-td">{st.husband_first_name} {st.husband_middle_name} {st.husband_last_name} </td> </tr> <tr> <th class="profile-th">Sex</th> <td class="profile-td">{st.sex}</td> <th class="profile-th">Marital Status</th> <td class="profile-td">{st.marital_status}</td> </tr> <tr> <th class="profile-th">DOB</th> <td class="profile-td">{st.date_of_birth} </td> <th class="profile-th">Age</th> <td class="profile-td">{st.age} </td> </tr> <tr> <th class="profile-th">Post Applied</th> <td class="profile-td">{st.post_applied_for}</td> <th class="profile-th">Subject Taught</th> <td class="profile-td">{st.subject_tobe_taught}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Correspondence Address</h1> <table class="table is-bordered career-profile-table"> <tr> <th class="profile-th">Address Line 1</th> <td colspan="5" class="profile-td">{st.address_line1}</td> </tr> <tr> <th class="profile-th">Address Line 2</th> <td colspan="5" class="profile-td">{st.address_line2}</td> </tr> <tr> <th class="profile-th">City</th> <td class="profile-td">{st.city}</td> <th class="profile-th">Zip</th> <td class="profile-td">{st.zip}</td> <th class="profile-th">State</th> <td class="profile-td">{st.state}</td> </tr> <tr> <th class="profile-th">Country</th> <td colspan="5" class="profile-td">{st.country}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Permanent Address</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Address Line 1</th> <td colspan="5">{st.p_address_line1}</td> </tr> <tr> <th>Address Line 2</th> <td colspan="5">{st.p_address_line2}</td> </tr> <tr> <th>City</th> <td>{st.p_city}</td> <th>Zip</th> <td>{st.p_zip}</td> <th>State</th> <td>{st.p_state}</td> </tr> <tr> <th>Country</th> <td colspan="5">{st.p_country}</td> </tr> <tr> </table> <h1 class="career-profile-h3 is-size-5">Contact Information</h1> <table class="table is-bordered career-profile-table"> <tr> <th style="width:80px;">Mobile</th> <td style="width:100px;">{st.mobile}</td> <th style="width:80px;">Email</th> <td>{st.email}</td> <th style="width:80px;">Phone (O)</th> <td>{st.phone_office} </td> </tr> </tr> <th>phone (R)</th><td colspan="5">{st.phone_residence}</td> </tr> <tr> </table> <h1 class="career-profile-h3 is-size-5">Academic Qualification (B. Ed)</h1><br> <table class="table is-bordered career-profile-table"> <tr> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> <tr> <td>{st.bed_institution} </td> <td>{st.bed_college} </td> <td>{st.bed_year} </td> <td>{st.bed_subject} </td> <td>{st.bed_marks} </td> <td>{st.bed_remarks} </td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Montessori / T.T.C</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> <tr> <td>{st.ttc_institution}</td> <td>{st.ttc_college} </td> <td>{st.ttc_year} </td> <td>{st.ttc_subject} </td> <td>{st.ttc_marks} </td> <td>{st.ttc_remarks} </td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Post Graduation</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Degree</th> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> </tr> <td>{st.pg_degree}</td> <td>{st.pg_institution}</td> <td>{st.pg_college}</td> <td>{st.pg_year}</td> <td>{st.pg_subject}</td> <td>{st.pg_marks}</td> <td>{st.pg_remarks}</td> </tr> <tr> </table> <h1 class="career-profile-h3 is-size-5">Graduation</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Degree</th> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> <tr> <td>{st.g_degree}</td> <td>{st.g_institution}</td> <td>{st.g_college}</td> <td>{st.g_year}</td> <td>{st.g_subject}</td> <td>{st.g_marks}</td> <td>{st.g_remarks}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">XII</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Stream</th> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> </tr> <td></td> <td>{st.xii_institution}</td> <td>{st.xii_college}</td> <td>{st.xii_year}</td> <td>{st.xii_subject}</td> <td>{st.xii_marks}</td> <td>{st.xii_remarks}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">X</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Institution</th> <th>College / University</th> <th>Year</th> <th>Subject</th> <th>Marks (%)</th> <th>Remarks</th> </tr> </tr> <td>{st.x_institution}</td> <td>{st.x_college}</td> <td>{st.x_year}</td> <td>{st.x_subject}</td> <td>{st.x_marks}</td> <td>{st.x_remarks}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Other Qualification</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Sl.</th> <th>Degree/ Certificates</th> <th>University/Board/Institution</th> <th>Marks (%)</th> <th>Year</th> <th>Remarks</th> </tr> <tr> <td>1</td> <td>{st.degree1}</td> <td>{st.university1}</td> <td>{st.marks1}</td> <td>{st.year1}</td> <td>{st.remarks1}</td> </tr> <tr> <td>2</td> <td>{st.degree2}</td> <td>{st.university2}</td> <td>{st.marks2}</td> <td>{st.year2}</td> <td>{st.remarks2}</td> </tr> <tr> <td>3</td> <td>{st.degree3}</td> <td>{st.university3}</td> <td>{st.marks3}</td> <td>{st.year3}</td> <td>{st.remarks3}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Work Experience</h1> <table class="table is-bordered career-profile-table"> <tr> <th class="profile-th">Sl.</th> <th class="profile-th">School/Institution</th> <th class="profile-th">Address</th> <th class="profile-th">Designation</th> <th class="profile-th">Class Taught</th> <th class="profile-th">Subject Taught</th> <th class="profile-th">Work Profile</th> <th class="profile-th">From</th> <th class="profile-th">To</th> <th class="profile-th">Salary</th> </tr> <tr> <td class="profile-td">1</td> <td class="profile-td">{st.school1}</td> <td class="profile-td">{st.address1} </td> <td class="profile-td">{st.designation1} </td> <td class="profile-td">{st.class_taught1} </td> <td class="profile-td">{st.subject_taught1} </td> <td class="profile-td">{st.work_profile1} </td> <td class="profile-td">{st.from_date1} </td> <td class="profile-td">{st.to_date1} </td> <td class="profile-td">{st.salary_drawn1} </td> </tr> <tr> <td class="profile-td">2</td> <td class="profile-td">{st.school2} </td> <td class="profile-td">{st.address2} </td> <td class="profile-td">{st.designation2} </td> <td class="profile-td">{st.class_taught2} </td> <td class="profile-td">{st.subject_taught2} </td> <td class="profile-td">{st.work_profile2} </td> <td class="profile-td">{st.from_date2} </td> <td class="profile-td">{st.to_date2} </td> <td class="profile-td">{st.salary_drawn2} </td> </tr> <tr> <td class="profile-td">3</td> <td class="profile-td">{st.school3} </td> <td class="profile-td">{st.address3} </td> <td class="profile-td">{st.designation3} </td> <td class="profile-td">{st.class_taught3} </td> <td class="profile-td">{st.subject_taught3} </td> <td class="profile-td">{st.work_profile3} </td> <td class="profile-td">{st.from_date3} </td> <td class="profile-td">{st.to_date3} </td> <td class="profile-td">{st.salary_drawn3} </td> </tr> </table> <h1 class="career-profile-h3 is-size-5">Special Achivements</h1> <table class="table is-bordered career-profile-table"> <tr> <td colspan="6">{st.s_achievements}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5">References (If any)</h1> <table class="table is-bordered career-profile-table"> <tr> <th>Sl.</th> <th>Name</th> <th>Organisation</th> <th>Designation</th> <th>Phone</th> <th>Mobile</th> <th>Email</th> </tr> <tr> <td>1</td> <td>{st.r_name}</td> <td>{st.r_organisation}</td> <td>{st.r_designation}</td> <td>{st.r_phone}</td> <td>{st.r_mobile}</td> <td>{st.r_email}</td> </tr> <tr> <td>2</td> <td>{st.r1_name}</td> <td>{st.r1_organisation}</td> <td>{st.r1_designation}</td> <td>{st.r1_phone}</td> <td>{st.r1_mobile}</td> <td>{st.r1_email}</td> </tr> </table> <h1 class="career-profile-h3 is-size-5" style="margin-top: 20px;">Declaration</h1> <p style="width:860px;width: 860px;text-align: justify;padding-top: 15px;"> I hereby declare that all statements made in this application are true, complete and correct to the best of my knowledge and belief. I understand that in the event of any information being found untrue or incorrect at any stage, my candidature is liable to be cancelled. </p> <p style="width:860px;width: 860px;text-align:right;padding-top:25px;"> Signature </p> <div class="page-break"></div> </center> </section>', '', '', function(opts) {
	var self = this
	self.st={}
    self.on("mount", function(){
      self.loading = false;
      flatpickr(".date", {
	    allowInput: true,
        dateFormat: "d/m/Y",
  		})
      self.interviewed_candidate_view = 'show_interviewed_candidate'
      self.update();
    })

    self.on("unmount", function(){
      careerStore.off('read_interviewed_candidate_changed',ReadInterviewedCandidateChanged)
      careerStore.off('read_applicant_profile_changed',ReadApplicantProfileChanged)
      careerStore.on('update_interviewed_candidate_changed',UpdateInterviewedCandidateChanged)
    })

    self.getData = () => {
      var startDate = document.getElementById("start_date").value;
      var endDate = document.getElementById("end_date").value;
    	  if(!self.refs.start_date.value){
          toastr.info("Please enter From Date and try again")
      	}else if(!self.refs.end_date.value){
      	 toastr.info("Please enter To Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
          toastr.info("Please enter To Date Grater Than From Date")
        }else{
    	    var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          obj['result']=self.refs.result.value
          self.loading = true
          careerStore.trigger('read_interviewed_candidate', obj)

          console.log(obj)
        }
    }

    self.csvExport = () => {
        var startDate = document.getElementById("start_date").value;
        var endDate = document.getElementById("end_date").value;

        if(!self.refs.start_date.value){
        toastr.info("Please enter Start Date and try again")
      	}else if(!self.refs.end_date.value){
      	toastr.info("Please enter End Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
          toastr.info("Please enter To Date Grater Than From Date")
        }else{
    	    var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          obj['result']=self.refs.result.value
          careerStore.trigger('csv_export_interviewed_candidate', obj)
        }
    }

    self.cancel_result = (c,a) => {
      self.interview_id = c
      console.log(self.interview_id)
      $("#cancelresultModal").addClass("is-active");
    }

    self.closecancelresultModal = () => {
      $("#cancelresultModal").removeClass("is-active");
    }

    self.UpdateInterviewedCandidate = () =>{

    	careerStore.trigger('update_interviewed_candidate',self.interview_id)
    }

    self.view_profile = (c,a) => {
    	console.log("self.session_id")
    	console.log(self.career_id)
    	self.career_id = c
    	self.interviewed_candidate_view = 'applicant_profile'
    	careerStore.trigger('read_applicant_profile', self.career_id)
    }

    self.close_applicant_profile = () =>{
    	self.interviewed_candidate_view = 'show_interviewed_candidate'
    }

    careerStore.on('read_interviewed_candidate_changed',ReadInterviewedCandidateChanged)
    function ReadInterviewedCandidateChanged(interviewed_candidate){
      self.InterviewedCandidateData=[];
      self.InterviewedCandidateData = interviewed_candidate
      if(self.InterviewedCandidateData.length==0){
      	toastr.info("No Data Found")
      }
      self.loading = false;
      self.update();
    }

    careerStore.on('update_interviewed_candidate_changed',UpdateInterviewedCandidateChanged)
    function UpdateInterviewedCandidateChanged(){
      self.closecancelresultModal()
      self.getData()
      self.update();
    }

    careerStore.on('read_applicant_profile_changed',ReadApplicantProfileChanged)
    function ReadApplicantProfileChanged(applicant_profile_data){
      self.applicant_profile_data = applicant_profile_data
      self.st=applicant_profile_data[0]
      console.log(self.st.address_line1)
      self.loading = false;
      self.update();
    }
});
riot.tag2('inventory-category', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Inventory Category Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Department</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="department" onkeyup="{addEnter}"> <option each="{inventoryDepartments}" riot-value="{department}">{department} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Category</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="category_name" id="category_name" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readInventoryItem}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"><i class="fas fa-print"></i></span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Department</th> <th>Category</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in inventoryCategories}"> <td>{i+1}</td> <td>{ev.department}</td> <td>{ev.category_name}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ev.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, ev)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readInventoryDepartment()
      self.readInventoryCategory()
    })
    self.on("unmount", function(){
      inventoryCategoryStore.off('add_inventory_category_changed', AddInventoryCategoryChanged)
      inventoryCategoryStore.off('read_inventory_category_changed', ReadInventoryCategoryChanged)

      inventorydepartmentStore.off('read_inventorydepartment_changed', ReadInventoryDepartmentChanged)
      inventoryCategoryStore.off('edit_inventory_category_changed',EditInventoryCategoryChanged)
      inventoryCategoryStore.off('delete_inventory_category_changed',DeleteInventoryCategoryChanged)
    })

    self.readInventoryDepartment = () => {
       inventorydepartmentStore.trigger('read_inventorydepartment')
    }

    self.readInventoryCategory = () => {
      self.loading=true
       inventoryCategoryStore.trigger('read_inventory_category')
    }

     self.add = () => {
      if(!self.refs.department.value){
        toastr.info("Please enter department and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          inventoryCategoryStore.trigger('add_inventory_category', self.refs.department.value,
           self.refs.category_name.value)
        }else if(self.title=='Update'){
          console.log('update')
          inventoryCategoryStore.trigger('edit_inventory_category', self.refs.department.value,
           self.refs.category_name.value, self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.inventoryCategories.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.inventoryCategories.map(ev => {
        if(ev.category_id != e.item.ev.category_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      inventoryCategoryStore.trigger('delete_inventory_category', e.item.ev.category_id)
    }

    self.edit = (ev,e) => {
      console.log(ev)
      self.title='Update'
       document.getElementById("category_name").focus()
      self.refs.category_name.value = ev.category_name
      self.refs.department.value = ev.department
      self.edit_id = ev.category_id
    }

    inventoryCategoryStore.on('add_inventory_category_changed',AddInventoryCategoryChanged)
    function AddInventoryCategoryChanged(inventoryCategories){
      console.log(inventoryCategories)
      self.title='Create'
      self.refs.category_name.value = ''
      self.refs.department.value = ''
      self.loading = false
      self.inventoryCategories = inventoryCategories
      self.update()

      console.log(self.inventoryCategories)
    }

    inventoryCategoryStore.on('edit_inventory_category_changed',EditInventoryCategoryChanged)
    function EditInventoryCategoryChanged(inventoryCategories){
      console.log(inventoryCategories)
      self.title='Create'
      self.refs.category_name.value = ''
      self.refs.department.value = ''
      self.loading = false
      self.inventoryCategories = inventoryCategories
      self.update()

    }

    inventoryCategoryStore.on('delete_inventory_category_changed',DeleteInventoryCategoryChanged)
    function DeleteInventoryCategoryChanged(inventoryCategories){
      console.log(inventoryCategories)
      self.title='Create'
      self.refs.category_name.value = ''
      self.refs.department.value = ''
      self.loading = false
      self.inventoryCategories = inventoryCategories
      self.update()
      self.readInventoryCategory()
      console.log(self.inventoryCategories)
    }

    inventoryCategoryStore.on('read_inventory_category_changed',ReadInventoryCategoryChanged)
    function ReadInventoryCategoryChanged(inventoryCategories){
      console.log(inventoryCategories)
      self.title='Create'
      self.refs.category_name.value = ''
      self.refs.department.value = ''
      self.loading = false
      self.inventoryCategories = inventoryCategories
      self.update()
      console.log(self.inventoryCategories)
    }

    inventorydepartmentStore.on('read_inventorydepartment_changed',ReadInventoryDepartmentChanged)
    function ReadInventoryDepartmentChanged(inventoryDepartments){
      console.log(inventoryDepartments)
      self.inventoryDepartments = inventoryDepartments
      self.loading=true
      self.update()
      console.log(self.inventoryDepartments)
    }

});
riot.tag2('inventory-department', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{inventory_view ==\'show_assign_department\'}"> <h2 class="title has-text-centered" style="color: #ff3860;">Inventory Department</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Department</label> </div> <div class="column is-narrow"> <div class="control"> <div class="control"> <input class=" input" ref="addInventoryDepartmentInput" type="text" onkeyup="{addEnter}"> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readInventoryDepartment}" style="margin-right:5px;margin-left:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Department</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in inventoryDepartments}"> <td>{i+1}</td> <td>{ev.department}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ev.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, ev)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small is-rounded" rel="nofollow" onclick="{assignUser.bind(this, ev)}">Assign User</a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section show="{inventory_view ==\'show_assign_table\'}"> <div class="level"> <div class="level-left"> </div> <div class="level-right"> <button class="button is-info is-small is-pulled-right" onclick="{backAssignTable}">Back</button> </div> </div> <div class="columns is-multiline is-mobile"> <div class="column"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>Employee ID</th> <th>Name</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in freeStaffs}"> <td>{c.employee_id}</td> <td>{c.staff_name}</td> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'freeStaffCheckBox\'+c.employee_id}" onclick="{selectFreeStaff.bind(this,c)}"> </td> </tr> </tbody> </table> </div> <div class="column is-vertical-center is-narrow has-text-centered is-multiline" style="margin-top:50px;"> <table> <tr> <td> <button class="button" onclick="{assignStaffs}" style="margin-top:20px;">Assign Department <span style="margin-left:10px" class="fas fa-angle-double-right"></span> </button> </td> </tr> <tr> <td> <button class="button" onclick="{freeUpStaffs}" style="margin-top:20px;"><span style="margin-right:10px;" class="fas fa-angle-double-left"></span> Free up Department</button> </td> </tr> </table> </div> <div class="column"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th></th> <th>Employee ID</th> <th>Department</th> <th>Namer</th> </tr> </thead> <tbody> <tr each="{c, i in assignedStaffs}"> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'assignedStaffCheckBox\'+c.id}" onclick="{selectAssigndStaff.bind(this,c)}"> </td> <td>{c.employee_id}</td> <td>{c.department}</td> <td>{c.staff_name}</td> </tr> </tbody> </table> </div> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.inventory_view ='show_assign_department'
      self.update()
      self.readInventoryDepartment()
      self.readAssignStaff()
    })
    self.on("unmount", function(){
      inventorydepartmentStore.off('add_inventorydepartment_changed', AddInventoryDepartmentChanged)
      inventorydepartmentStore.off('read_inventorydepartment_changed', ReadInventoryDepartmentChanged)
      inventorydepartmentStore.off('read_readAssignStaff_changed', ReadAssignStaffChanged)
      inventorydepartmentStore.off('read_readFreeStaff_changed', ReadFreeStaffChanged)
      inventorydepartmentStore.off('edit_inventorydepartment_changed',EditInventoryDepartmentChanged)
      inventorydepartmentStore.off('assign_staffs_changed',AssignStaffsChanged)
      inventorydepartmentStore.off('delete_inventorydepartment_changed',DeleteInventoryDepartmentChanged)
    })

    self.readInventoryDepartment = () => {
       inventorydepartmentStore.trigger('read_inventorydepartment')
    }

    self.readAssignStaff = () => {
       inventorydepartmentStore.trigger('readAssignStaff')
    }
    self.backAssignTable = () => {
       self.inventory_view ='show_assign_department'
    }

     self.add = () => {
      if(!self.refs.addInventoryDepartmentInput.value){
        toastr.info("Please enter Inventory Department and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          inventorydepartmentStore.trigger('add_inventorydepartment', self.refs.addInventoryDepartmentInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          inventorydepartmentStore.trigger('edit_inventorydepartment', self.refs.addInventoryDepartmentInput.value,self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.inventoryDepartments.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.inventoryDepartments.map(ev => {
        if(ev.department != e.item.ev.department){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      inventorydepartmentStore.trigger('delete_inventorydepartment', e.item.ev.department)
    }

    self.edit = (ev,e) => {
      console.log(ev)
      self.title='Update'
      self.refs.addInventoryDepartmentInput.value = ev.department
      self.edit_id = ev.department
    }

    self.selectFreeStaff = (staff,e) => {
        self.freeStaffs.map(i=>{
          if(staff.employee_id==i.employee_id){
            i.selected=!i.selected
          }
        })
    }

    self.selectAssigndStaff = (staff,e) => {
        self.assignedStaffs.map(i=>{
          if(staff.id==i.id){
            i.selected=!i.selected
          }
        })
        console.log(self.assignedStaffs)
    }

    self.assignStaffs = () =>{
      console.log("inside")
      let employee_to_assign = self.freeStaffs.filter(c=>{
        return c.selected == true
      })
      console.log(employee_to_assign)

      if(employee_to_assign.length==0){
        toastr.error('Please select Employee to assign.')
        return
      }else{
        self.loading = true
        inventorydepartmentStore.trigger('assign_staff', self.department, employee_to_assign)
      }
    }

    self.freeUpStaffs = () =>{
      let employee_to_free = self.assignedStaffs.filter(c=>{
        return c.selected == true
      })

      if(employee_to_free.length==0){
        toastr.error('Please select Employee to free .')
        return
      }else{
        self.loading = true
        inventorydepartmentStore.trigger('free_up_staff', self.department, employee_to_free)
      }
    }

    self.assignUser = (ev,e) => {
       console.log(ev)
       if(ev!=undefined){
        self.department= ev.department
       }
       inventorydepartmentStore.trigger('readFreeStaff',  self.department)
      self.inventory_view ='show_assign_table'

    }

    inventorydepartmentStore.on('add_inventorydepartment_changed',AddInventoryDepartmentChanged)
    function AddInventoryDepartmentChanged(inventoryDepartments){
      console.log(inventoryDepartments)
      self.title='Create'
      self.refs.addInventoryDepartmentInput.value =''
      self.loading = false
      self.inventoryDepartments = inventoryDepartments
      self.update()
      self.readInventoryDepartment()
      console.log(self.inventoryDepartments)
    }

    inventorydepartmentStore.on('edit_inventorydepartment_changed',EditInventoryDepartmentChanged)
    function EditInventoryDepartmentChanged(inventoryDepartments){
      console.log(inventoryDepartments)
      self.title='Update'
      self.refs.addInventoryDepartmentInput.value =''
      self.loading = false
      self.inventoryDepartments = inventoryDepartments
      self.update()
      self.readInventoryDepartment()

    }

    inventorydepartmentStore.on('delete_inventorydepartment_changed',DeleteInventoryDepartmentChanged)
    function DeleteInventoryDepartmentChanged(inventoryDepartments){
      console.log(inventoryDepartments)
      self.title='Create'
      self.refs.addInventoryDepartmentInput.value =''
      self.loading = false
      self.inventoryDepartments = inventoryDepartments
      self.update()
      self.readInventoryDepartment()
      console.log(self.inventoryDepartments)
    }

    inventorydepartmentStore.on('read_inventorydepartment_changed',ReadInventoryDepartmentChanged)
    function ReadInventoryDepartmentChanged(inventoryDepartments){
      console.log(inventoryDepartments)
      self.title='Create'
      self.refs.addInventoryDepartmentInput.value =''
      self.loading = false
      self.inventoryDepartments = inventoryDepartments
      self.update()
      console.log(self.inventoryDepartments)
    }
     inventorydepartmentStore.on('read_Free_changed',ReadInventoryDepartmentChanged)
    function ReadInventoryDepartmentChanged(inventoryDepartments){
      console.log(inventoryDepartments)
      self.title='Create'
      self.refs.addInventoryDepartmentInput.value =''
      self.loading = false
      self.inventoryDepartments = inventoryDepartments
      self.update()
      console.log(self.inventoryDepartments)
    }

    inventorydepartmentStore.on('read_readAssignStaff_changed',ReadAssignStaffChanged)
    function ReadAssignStaffChanged(assignedStaffs){
      console.log(assignedStaffs)
      self.loading = false
      self.assignedStaffs = assignedStaffs
      self.update()
      console.log(self.assignedStaffs)
    }

    inventorydepartmentStore.on('read_readFreeStaff_changed',ReadFreeStaffChanged)
    function ReadFreeStaffChanged(freeStaffs){
      console.log(freeStaffs)
      self.loading = false
      self.freeStaffs = freeStaffs
      self.update()
      console.log(self.freeStaffs)
    }

    inventorydepartmentStore.on('assign_staffs_changed',AssignStaffsChanged)
    function AssignStaffsChanged(staffs){
      self.loading = false
      self.readAssignStaff()
      self.assignUser()

    }

});
riot.tag2('inventory-issue', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{inventory_issue_view == \'show_inventory_issue_table\'}"> <h4 class="title has-text-centered" style="color: #ff3860;">Goods Issue from Store Department</h4> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Type</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="r_issue_type"> <option>Staff</option> <option>College</option> <option>Health</option> <option>MV</option> <option>Other</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="r_category_id" onchange="{readInventoryIssue}"> <option each="{inventoryCategories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readInventoryIssue}" style="margin-left:3px; margin-right:3px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-info is-rounded is-pulled-right" onclick="{show_inventory_issue}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Date</th> <th>Category</th> <th>Item</th> <th>Issue To</th> <th>Quantity</th> <th>Purpose</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in inventoryIssues}"> <td>{i+1}</td> <td>{ev.issue_date}</td> <td>{ev.category_name}</td> <td>{ev.item_name}</td> <td>{ev.issue_to} {ev.staff_name}</td> <td>{ev.i_quantity}</td> <td>{ev.purpose}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ev.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, ev)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section class="is-fluid" show="{inventory_issue_view ==\'show_inventory_issue_form\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} Inventory Issue</h2> </div> <div class="level-right"> <button class="button" onclick="{close_inventory_issue_form}">Back</button> </div> </div> <div class="box"> <div class="columns is-variable is-1 is-multiline"> <div class="column is-one-third"> <label class="label">Issue Date</label> <input class="input date flatpickr-input form-control input" ref="issue_date" placeholder="" tabindex="0" type="text" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label" for="class">Category</label> <div class="control"> <div class="select is-fullwidth"> <select ref="category_id" id="category_id" onchange="{filterSubcategory}"> <option each="{inventoryCategories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label" for="class">Subcategory</label> <div class="control"> <div class="select is-fullwidth"> <select ref="sub_category_id" id="sub_category_id" onchange="{filterItem}"> <option each="{filteredSubcategories}" riot-value="{sub_category_id}">{sub_category} </option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label" for="class">Item</label> <div class="control"> <div class="select is-fullwidth"> <select ref="item_id" id="item_id" onchange="{getAvailableItemQuantity}"> <option each="{filteredItems}" riot-value="{item_id}">{item_name}</option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label" for="class">Return Type</label> <div class="control"> <div class="select is-fullwidth"> <select ref="return_type" onkeyup="{addEnter}"> <option value="Y">Retunable</option> <option value="N">Non-Retunable</option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label" for="class">Type</label> <div class="control"> <div class="select is-fullwidth"> <select ref="issue_type" onchange="{showIssueType}" onkeyup="{addEnter}"> <option>Staff</option> <option>College</option> <option>Health</option> <option>MV</option> <option>Other</option> </select> </div> </div> </div> <div class="column is-one-third" show="{show_view == \'show_employee\'}"> <label class="label" for="class">Staff</label> <div class="control"> <div class="select is-fullwidth"> <select ref="staff_id" onkeyup="{addEnter}"> <option each="{employees}" riot-value="{emp_id}">{name}</option> </select> </div> </div> </div> <div class="column is-one-third" show="{show_view == \'show_text_box\'}"> <label class="label">Issue To</label> <input type="text" ref="issue_to" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">In Stock</label> <input type="text" ref="available_quantity" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Quantity</label> <input type="text" ref="issue_quantity" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Unit</label> <input type="text" ref="unit" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Purpose</label> <textarea type="text" ref="purpose" type="text" class="input" rows="3" onkeyup="{addEnter}"></textarea> </div> <div class="column is-full"> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{add}">{title}</button> </div> </div> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.inventory_issue_view='show_inventory_issue_table'
      self.refs.issue_type.value='Staff'
     flatpickr(".date", {
         allowInput: true,
          dateFormat: "d/m/Y",
       })
      self.showIssueType()
      self.loading=false
      self.update()

      self.readInventoryCategory()

      self.readInventorySubcategory()
      self.readEmployee()
      self.readInventoryItem()

    })
  self.on("unmount", function(){
      inventoryCategoryStore.off('read_inventory_category_changed', ReadInventoryCategoryChanged)
      inventoryItemStore.off('read_inventory_item_changed', ReadInventoryItemChanged)
      inventorySubcategoryStore.off('read_inventory_subcategory_changed',ReadInventorySubcategoryChanged)
       staffinfirmaryStore.off('read_employee_changed',EmployeeChanged)
      inventoryIssueStore.off('read_inventory_issue_changed', ReadInventoryIssueChanged)
      inventoryIssueStore.off('add_inventory_issue_changed', AddInventoryIssueChanged)
      inventoryIssueStore.off('edit_inventory_issue_changed', EditInventoryIssueChanged)
      inventoryIssueStore.off('delete_inventory_issue_changed', DeleteInventoryIssueChanged)
      inventoryIssueStore.off('read_inventory_available_quantity_changed', ReadInventoryAvailableQuantityChanged)
  })

    self.showIssueType=()=>{
        console.log(self.refs.issue_type.value)
        if(self.refs.issue_type.value=='Staff'){
          self.show_view='show_employee'
          self.refs.issue_to.value=''
        }else{
          self.show_view='show_text_box'
          self.refs.staff_id.value=''
        }
    }
    self.show_inventory_issue=()=>{
       self.inventory_issue_view='show_inventory_issue_form'
       self.refs.return_type.value='Non-Retunable'
    }
    self.close_inventory_issue_form=()=>{
        self.inventory_issue_view='show_inventory_issue_table'
        self.title='Add'
        self.refs.issue_date.value=''
        self.refs.category_id.value=''
        self.refs.sub_category_id.value=''
        self.refs.item_id.value=''
        self.refs.return_type.value=''
        self.refs.issue_type.value=''
        self.refs.issue_to.value=''
        self.refs.staff_id.value=''
         self.refs.available_quantity.value=''
         self.refs.issue_quantity.value=''
        self.refs.unit.value=''
        self.refs.purpose.value=''
        self.rack_id=''
    }

   self.filterSubcategory = () => {
      self.filteredSubcategories = []
      self.filteredSubcategories = self.inventorySubcategories.filter(s => {
        console.log("inside")
         return s.category_id == self.refs.category_id.value
    })

      console.log(self.filteredSubcategories)
      self.update()
      self.filterItem()
   }

    self.filterItem = () => {
      self.filteredItems = []
      self.filteredItems = self.inventoryItems.filter(s => {
        console.log(s)
        return s.subcategory_id == self.refs.sub_category_id.value
    })
      self.update()
      self.getAvailableItemQuantity()
   }

    self.readInventoryIssue = () => {
      self.loading=true
       inventoryIssueStore.trigger('read_inventory_issue', self.refs.r_category_id.value,self.refs.r_issue_type.value,)
    }

    self.readInventoryCategory = () => {
       inventoryCategoryStore.trigger('read_inventory_category')
    }

    self.readInventorySubcategory = () => {
       inventorySubcategoryStore.trigger('read_inventory_subcategory')
    }

    self.readInventoryItem = () => {
       inventoryItemStore.trigger('read_inventory_item')
    }
    self.getAvailableItemQuantity = () => {
      console.log("item_id");
      console.log(self.refs.item_id.value);

       inventoryIssueStore.trigger('read_inventory_available_quantity',self.refs.item_id.value)

    }

    self.readEmployee = () => {
        staffinfirmaryStore.trigger('read_employee')
     }

    self.add = () => {
        self.issue_date=convertDate(self.refs.issue_date.value)
        self.category_name = $("#category_id option:selected").text();
        self.subcategory_name = $("#sub_category_id option:selected").text();
        self.item_name = $("#item_id option:selected").text();

        self.aq=self.refs.available_quantity.value
        self.iq=self.refs.issue_quantity.value
       if(Number(self.aq) < Number(self.iq)){
          toastr.info("Issue Quantity is greater than available stock")
          return
       }
      if(!self.refs.category_id.value){
        toastr.info("Please enter category name and try again")
      }else{
        self.available_quantity=self.refs.issue_quantity.value
        self.loading = true
        if(self.title=='Create'){
        inventoryIssueStore.trigger('add_inventory_issue', self.issue_date, self.refs.category_id.value,self.refs.sub_category_id.value,self.refs.item_id.value,self.refs.return_type.value,self.refs.issue_type.value,self.refs.issue_to.value,self.refs.staff_id.value, self.available_quantity,self.refs.issue_quantity.value,self.unit_id,self.refs.purpose.value,self.rack_id,self.category_name, self.subcategory_name,self.item_name)
        }else if(self.title=='Update'){

        inventoryIssueStore.trigger('edit_inventory_issue', self.issue_date, self.refs.category_id.value,self.refs.sub_category_id.value,self.refs.item_id.value,self.refs.return_type.value,self.refs.issue_type.value,self.refs.issue_to.value,self.refs.staff_id.value, self.available_quantity,self.refs.issue_quantity.value,self.unit_id,self.refs.purpose.value , self.rack_id, self.edit_id,self.category_name, self.subcategory_name,self.item_name)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.inventoryIssues.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.inventoryIssues.map(ev => {
        if(ev.issue_id != e.item.ev.issue_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      console.log("delet")
      inventoryIssueStore.trigger('delete_inventory_issue', e.item.ev.issue_id)
    }

    self.edit = (ev,e) => {
      console.log("insie edit")
      flatpickr(".date", {
         allowInput: true,
          dateFormat: "d/m/Y",
       })
       self.inventory_issue_view='show_inventory_issue_form'
       self.refs.category_id.value=ev.category_id
       self.filterSubcategory()
       self.update()
       self.refs.sub_category_id.value=ev.sub_category_id
       self.filterItem()
       self.update()
       self.refs.item_id.value=ev.item_id
       self.refs.issue_date.value=ev.issue_date
       self.refs.unit.value=ev.unit
       self.unit_id=ev.unit_id
       self.rack_id=ev.rack_id
       self.refs.available_quantity.value=ev.available_quantity
       self.refs.issue_quantity.value=ev.issue_quantity
       self.refs.issue_type.value=ev.issue_type
       self.refs.return_type.value=ev.return_type
       self.refs.issue_to.value=ev.issue_to
       self.refs.staff_id.value=ev.staff_id
       self.refs.purpose.value=ev.purpose
       self.edit_id = ev.issue_id
       self.title='Update'
       self.inventory_issue_view='show_inventory_issue_form'
    }

    inventoryIssueStore.on('add_inventory_issue_changed',AddInventoryIssueChanged)
    function AddInventoryIssueChanged(inventoryIssues){
      console.log(inventoryIssues)
      self.title='Create'
     self.refs.category_id.value=''
       self.refs.sub_category_id.value=''
       self.refs.item_id.value=''
       self.refs.issue_date.value=''
       self.refs.unit.value=''
       self.refs.available_quantity.value=''
       self.refs.issue_quantity.value=''
       self.refs.issue_type.value=''
       self.refs.return_type.value=''
       self.refs.issue_to.value=''
       self.refs.staff_id.value=''
       self.refs.purpose.value=''
      self.loading = false
      self.update()

      console.log(self.inventoryIssues)
    }

  inventoryIssueStore.on('edit_inventory_issue_changed',EditInventoryIssueChanged)
    function EditInventoryIssueChanged(inventoryIssues){
      console.log(inventoryIssues)
        self.title='Create'
       self.refs.category_id.value=''
       self.refs.sub_category_id.value=''
       self.refs.item_id.value=''
       self.refs.issue_date.value=''
       self.refs.unit.value=''
       self.refs.available_quantity.value=''
       self.refs.issue_quantity.value=''
       self.refs.issue_type.value=''
       self.refs.return_type.value=''
       self.refs.issue_to.value=''
       self.refs.staff_id.value=''
       self.refs.purpose.value=''
      self.loading = false
      self.inventoryIssues = inventoryIssues
      self.update()

    }

    inventoryIssueStore.on('delete_inventory_issue_changed',DeleteInventoryIssueChanged)
    function DeleteInventoryIssueChanged(inventoryIssues){
      console.log(inventoryIssues)
      self.title='Create'
      self.loading = false
      self.inventoryIssues = inventoryIssues
      self.update()

      console.log(self.inventoryIssues)
    }

    inventoryCategoryStore.on('read_inventory_category_changed',ReadInventoryCategoryChanged)
    function ReadInventoryCategoryChanged(inventoryCategories){
      console.log(inventoryCategories)

      self.loading = false
      self.inventoryCategories = inventoryCategories
      self.refs.sub_category_id.value = ''

      self.refs.category_id.value = ''
      self.refs.item_id.value = ''
      self.update()
      console.log(self.inventoryCategories)
      self.readInventoryIssue()
    }

inventoryIssueStore.on('read_inventory_available_quantity_changed',ReadInventoryAvailableQuantityChanged)
    function ReadInventoryAvailableQuantityChanged(availableItems,rack_ids){
      console.log(availableItems)

     console.log(rack_ids[0].rack_id);
      self.loading = false
      self.availableItems = availableItems
      self.rack_id = rack_ids[0].rack_id
      if(self.title=='Create'){
      self.refs.available_quantity.value=availableItems[0].total_received - (availableItems[0].total_issued + availableItems[0].total_sale)
      }else{
      self.refs.available_quantity.value=availableItems[0].total_received - (availableItems[0].total_issued + availableItems[0].total_sale) + Number(self.refs.issue_quantity.value);
      }
      self.refs.unit.value=availableItems[0].unit
      self.unit_id=availableItems[0].unit_id

      self.update()
      console.log(self.availableItems)
    }
  inventorySubcategoryStore.on('read_inventory_subcategory_changed',ReadInventorySubcategoryChanged)
    function ReadInventorySubcategoryChanged(inventorySubcategories){
      console.log(inventorySubcategories)

      self.loading = false
      self.inventorySubcategories = inventorySubcategories
      self.refs.sub_category_id.value = ''

      self.refs.category_id.value = ''
      self.update()
      console.log(self.inventorySubcategories)
    }

   inventoryItemStore.on('read_inventory_item_changed',ReadInventoryItemChanged)
    function ReadInventoryItemChanged(inventoryItems){
      console.log(inventoryItems)

      self.loading = false
      self.inventoryItems = inventoryItems

      self.update()
      console.log(self.inventoryItems)
    }
    inventoryIssueStore.on('read_inventory_issue_changed',ReadInventoryIssueChanged)
    function ReadInventoryIssueChanged(inventoryIssues){
      console.log(inventoryIssues)
      self.title='Create'
      self.loading = false
      self.inventoryIssues = inventoryIssues
      self.update()
      console.log(self.inventoryIssues)
    }

  staffinfirmaryStore.on('read_employee_changed',EmployeeChanged)
     function EmployeeChanged(employees){
       console.log(employees)
       self.employees = employees
       self.update()
       console.log(self.employees)
     }

});
riot.tag2('inventory-issued-goods-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Inventory Issue Report<br> <span style="font-size:18px">Type : {issue_type} From: {from_date} To: {to_date}</span></h2> <div class="flex items-center mt-2 mb-6 no-print"> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Type</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="issue_type"> <option>Staff</option> <option>College</option> <option>Health</option> <option>MV</option> <option>Other</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="start_date" placeholder="" tabindex="0" type="text"> </div> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="end_date" placeholder="" tabindex="0" type="text"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" style="margin-left:-20px" onclick="{getIssuedGoodsReport}">GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Date</th> <th>Item</th> <th>To Whom</th> <th>Issue Quantity</th> <th>Purpose</th> </tr> </thead> <tbody> <tr each="{ev, i in inventoryIssuedGoodsReports}"> <td>{i+1}</td> <td>{ev.issue_date}</td> <td>{ev.item_name}</td> <td>{ev.issue_to} {ev.staff_name}</td> <td>{ev.quantity}</td> <td>{ev.purpose}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      flatpickr(".date", {
         allowInput: true,
         dateFormat: "d/m/Y",
       })
      self.update()
    })
  self.on("unmount", function(){

      inventoryReportStore.off('read_inventory_issued_goods_report_changed',ReadInventoryIssuedGoodsReportChanged)
  })

    self.getIssuedGoodsReport = () => {
      self.issue_type=self.refs.issue_type.value,

      self.from_date=self.refs.start_date.value,
      self.to_date=self.refs.end_date.value

      self.s_date=convertDate(self.refs.start_date.value)
      self.e_date=convertDate(self.refs.end_date.value)
      self.loading=true
       inventoryReportStore.trigger('read_inventory_issued_goods_report',self.refs.issue_type.value,self.s_date,self.e_date)
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

inventoryReportStore.on('read_inventory_issued_goods_report_changed',ReadInventoryIssuedGoodsReportChanged)
    function ReadInventoryIssuedGoodsReportChanged(inventoryIssuedGoodsReports){
      console.log(inventoryIssuedGoodsReports)
      self.title='Create'
      self.loading = false
      self.inventoryIssuedGoodsReports = inventoryIssuedGoodsReports
      self.update()
      console.log(self.inventoryReceivedGoodsReports)
    }

});
riot.tag2('inventory-item-wise-issued-goods-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Inventory Item wise Issue Report</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="category_id" onchange="{readInventoryItem}"> <option each="{inventoryCategories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Item</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="item_id" style="width:300px"> <option each="{inventoryItems}" riot-value="{item_id}">{item_name}</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="start_date" placeholder="" tabindex="0" type="text" style="width:120px"> </div> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="end_date" placeholder="" tabindex="0" type="text" style="width:120px"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" style="margin-left:-20px" onclick="{getItemWiseIssuedGoodsReport}">GO </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Date</th> <th>Item</th> <th>To Whom</th> <th>Issue Quantity</th> <th>Purpose</th> </tr> </thead> <tbody> <tr each="{ev, i in inventoryItemWiseIssuedGoodsReports}"> <td>{i+1}</td> <td>{ev.issue_date}</td> <td>{ev.item_name}</td> <td>{ev.issue_to} {ev.staff_name}</td> <td>{ev.quantity}</td> <td>{ev.purpose}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      flatpickr(".date", {
         allowInput: true,
         dateFormat: "d/m/Y",
       })
       self.readInventoryCategory()

       self.update()
    })
  self.on("unmount", function(){
         inventoryCategoryStore.off('read_inventory_category_changed', ReadInventoryCategoryChanged)
         inventoryReportStore.off('read_inventory_item_changed', ReadInventoryItemChanged)
         inventoryReportStore.off('read_inventory_item_wise_issued_goods_report_changed',ReadInventoryItemWiseIssuedGoodsReportChanged)
  })

    self.getItemWiseIssuedGoodsReport = () => {
      self.loading=true

       self.start_date=convertDate(self.refs.start_date.value)
       self.end_date=convertDate(self.refs.end_date.value)

       inventoryReportStore.trigger('read_inventory_item_wise_issued_goods_report',self.refs.category_id.value,self.refs.item_id.value,self.start_date,self.end_date)
    }
    self.readInventoryCategory = () => {
       inventoryCategoryStore.trigger('read_inventory_category')
     }
    self.readInventoryItem = () => {
       inventoryReportStore.trigger('read_inventory_item',self.refs.category_id.value)
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

    inventoryCategoryStore.on('read_inventory_category_changed',ReadInventoryCategoryChanged)
    function ReadInventoryCategoryChanged(inventoryCategories){
      console.log(inventoryCategories)

      self.loading = false
      self.inventoryCategories = inventoryCategories
      self.update()
      self.readInventoryItem();
    }

     inventoryReportStore.on('read_inventory_item_changed',ReadInventoryItemChanged)
    function ReadInventoryItemChanged(inventoryItems){
      console.log(inventoryItems)
      self.loading = false
      self.inventoryItems = inventoryItems
      self.update()
      console.log(self.inventoryItems)
    }

    inventoryReportStore.on('read_inventory_item_wise_issued_goods_report_changed',ReadInventoryItemWiseIssuedGoodsReportChanged)
    function ReadInventoryItemWiseIssuedGoodsReportChanged(inventoryItemWiseIssuedGoodsReports){
      console.log(inventoryItemWiseIssuedGoodsReports)
      self.title='Create'
      self.loading = false
      self.inventoryItemWiseIssuedGoodsReports = inventoryItemWiseIssuedGoodsReports
      self.update()
      console.log(self.inventoryItemWiseIssuedGoodsReports)
    }

});
riot.tag2('inventory-item', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Inventory Item Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Department</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="department" style="margin-left:-10px" onchange="{filterCategory}onkeyup={addEnter}"> <option each="{inventoryDepartments}" riot-value="{department}">{department} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="category_id" id="category_id" style="margin-left:-10px" onchange="{filterSubcategory}" onkeyup="{addEnter}"> <option each="{filteredCategories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Subcategory</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="sub_category_id" id="sub_category_id" style="margin-left:-10px"> <option each="{filteredSubcategories}" riot-value="{sub_category_id}" onkeyup="{addEnter}">{sub_category} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Item</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="item_name" type="text" style="margin-left:-10px" onkeyup="{addEnter}"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" style="margin-left:-20px" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"><i class="fas fa-print"></i></span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readInventoryItem}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Department</th> <th>Category</th> <th>Subcategory</th> <th>Item</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in inventoryItems}"> <td>{i+1}</td> <td>{ev.department}</td> <td>{ev.category_name}</td> <td>{ev.sub_category}</td> <td>{ev.item_name}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ev.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, ev)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.loading=false
      self.update()
      self.readInventoryDepartment()
      self.readInventoryCategory()
      self.readInventorySubcategory()
      self.readInventoryItem()
    })
self.on("unmount", function(){
  inventoryCategoryStore.off('read_inventory_category_changed', ReadInventoryCategoryChanged)
  inventorydepartmentStore.off('read_inventorydepartment_changed', ReadInventoryDepartmentChanged)
  inventorySubcategoryStore.off('read_inventory_subcategory_changed',ReadInventorySubcategoryChanged)

  inventoryItemStore.off('read_inventory_item_changed', ReadInventoryItemChanged)
  inventoryItemStore.off('add_inventory_item_changed', AddInventoryItemChanged)
  inventoryItemStore.off('edit_inventory_item_changed',EditInventoryItemChanged)
  inventoryItemStore.off('delete_inventory_item_changed',DeleteInventoryItemChanged)
})

    self.filterCategory = () => {
      self.filteredCategories = []
      self.filteredCategories = self.inventoryCategories.filter(s => {
       return s.department == self.refs.department.value
      })
       self.update()
      console.log(self.refs.category_id.value)
       self.filterSubcategory()
   }
   self.filterSubcategory = () => {
      self.filteredSubcategories = []
      self.filteredSubcategories = self.inventorySubcategories.filter(s => {
      return s.category_id == self.refs.category_id.value
    })
      self.update()
      console.log(self.filteredSubcategories)

   }

    self.readInventoryDepartment = () => {
       inventorydepartmentStore.trigger('read_inventorydepartment')
    }

    self.readInventoryCategory = () => {
       inventoryCategoryStore.trigger('read_inventory_category')
    }

    self.readInventorySubcategory = () => {
       inventorySubcategoryStore.trigger('read_inventory_subcategory')
    }

    self.readInventoryItem = () => {
      self.loading=true
       inventoryItemStore.trigger('read_inventory_item')
    }

     self.add = () => {
      if(!self.refs.department.value){
        toastr.info("Please enter department and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){

          self.category_name = $("#category_id option:selected").text();
          self.subcategory_name = $("#sub_category_id option:selected").text();

        inventoryItemStore.trigger('add_inventory_item', self.refs.department.value,
           self.refs.category_id.value,self.refs.sub_category_id.value,self.refs.item_name.value,  self.category_name,self.subcategory_name)
        }else if(self.title=='Update'){
            self.category_name = $("#category_id option:selected").text();
          self.subcategory_name = $("#sub_category_id option:selected").text();
        inventoryItemStore.trigger('edit_inventory_item', self.refs.department.value,
           self.refs.category_id.value,self.refs.sub_category_id.value,self.refs.item_name.value, self.edit_id,self.category_name,self.subcategory_name)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.inventoryItems.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.inventoryItems.map(ev => {
        if(ev.item_id != e.item.ev.item_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      inventoryItemStore.trigger('delete_inventory_item', e.item.ev.item_id)
    }

    self.edit = (ev,e) => {
      console.log(ev)
      self.title='Update'

      document.getElementById("category_id").focus()

      self.refs.department.value = ev.department

       self.filterCategory()
       self.update()
       self.refs.category_id.value=ev.category_id
       self.filterSubcategory()
       self.update()
       self.refs.sub_category_id.value=ev.subcategory_id

      self.refs.item_name.value = ev.item_name
      self.edit_id = ev.item_id
    }

    inventoryItemStore.on('add_inventory_item_changed',AddInventoryItemChanged)
    function AddInventoryItemChanged(inventoryItems){
      console.log(inventoryItems)
      self.title='Create'
      self.refs.category_id.value = ''
      self.refs.department.value = ''
      self.refs.sub_category_id.value = ''
      self.refs.item_name.value = ''
      self.loading = false
      self.inventoryItems = inventoryItems
      self.update()
      self.readInventoryItem()
      console.log(self.inventoryItems)
    }

  inventoryItemStore.on('edit_inventory_item_changed',EditInventoryItemChanged)
    function EditInventoryItemChanged(inventoryItems){
      console.log(inventoryItems)
      self.title='Create'
      self.refs.category_id.value = ''
      self.refs.department.value = ''
      self.refs.item_name.value = ''
      self.refs.sub_category_id.value = ''
      self.loading = false
      self.inventoryItems = inventoryItems
      self.update()

    }

    inventoryItemStore.on('delete_inventory_item_changed',DeleteInventoryItemChanged)
    function DeleteInventoryItemChanged(inventoryItems){
      console.log(inventoryItems)
      self.title='Create'
      self.refs.sub_category.value = ''
      self.refs.item_name.value = ''
      self.refs.department.value = ''
      self.refs.category_id.value = ''
      self.loading = false
      self.inventoryItems = inventoryItems
      self.update()

      console.log(self.inventoryItems)
    }

    inventoryCategoryStore.on('read_inventory_category_changed',ReadInventoryCategoryChanged)
    function ReadInventoryCategoryChanged(inventoryCategories){
      console.log(inventoryCategories)
      self.title='Create'
      self.loading = false
      self.inventoryCategories = inventoryCategories
      self.refs.sub_category_id.value = ''
      self.refs.department.value = ''
      self.refs.category_id.value = ''
      self.refs.item_name.value = ''
      self.update()
      console.log(self.inventoryCategories)
    }
  inventorySubcategoryStore.on('read_inventory_subcategory_changed',ReadInventorySubcategoryChanged)
    function ReadInventorySubcategoryChanged(inventorySubcategories){
      console.log(inventorySubcategories)
      self.title='Create'
      self.loading = false
      self.inventorySubcategories = inventorySubcategories
      self.refs.sub_category_id.value = ''
      self.refs.department.value = ''
      self.refs.item_name.value = ''
      self.refs.category_id.value = ''
      self.update()
      console.log(self.inventorySubcategories)
    }

   inventoryItemStore.on('read_inventory_item_changed',ReadInventoryItemChanged)
    function ReadInventoryItemChanged(inventoryItems){
      console.log(inventoryItems)
      self.title='Create'
      self.loading = false
      self.inventoryItems = inventoryItems
      self.refs.sub_category_id.value = ''
      self.refs.department.value = ''
      self.refs.item_name.value = ''
      self.refs.category_id.value = ''

      self.update()
      console.log(self.inventoryItems)
    }

    inventorydepartmentStore.on('read_inventorydepartment_changed',ReadInventoryDepartmentChanged)
    function ReadInventoryDepartmentChanged(inventoryDepartments){
      console.log(inventoryDepartments)
      self.inventoryDepartments = inventoryDepartments
      self.update()
      console.log(self.inventoryDepartments)
    }

});
riot.tag2('inventory-person-wise-issued-goods-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Inventory Issue Report<br> <span style="font-size:18px">Type : {issue_type} Person: {issue_to}<br> From: {start_date} To: {end_date}</span></h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Type</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="issue_type" onchange="{getIssueTo}"> <option>Staff</option> <option>College</option> <option>Health</option> <option>MV</option> <option>Other</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Person</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="issue_to" id="isue_to" style="width:300px"> <option each="{issuedPersons}" riot-value="{issue_to}">{name} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="start_date" placeholder="" tabindex="0" type="text"> </div> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="end_date" placeholder="" tabindex="0" type="text"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" style="margin-left:-20px" onclick="{getIssuedGoodsReport}">GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Date</th> <th>Item</th> <th>Issue Quantity</th> <th>Purpose</th> </tr> </thead> <tbody> <tr each="{ev, i in inventoryPersonWiseIssuedGoodsReports}"> <td>{i+1}</td> <td>{ev.issue_date}</td> <td>{ev.item_name}</td> <td>{ev.quantity}</td> <td>{ev.purpose}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      flatpickr(".date", {
         allowInput: true,
         dateFormat: "d/m/Y",
       })
       self.getIssueTo()
      self.update()
    })
  self.on("unmount", function(){
       inventoryReportStore.off('read_inventory_issue_to_changed', ReadInventoryIssueToChanged)
        inventoryReportStore.off('read_inventory_person_wise_issued_goods_report_changed',ReadInventoryPersonWiseIssuedGoodsReportChanged)
  })

    self.getIssuedGoodsReport = () => {
      self.loading=true
      self.issue_type=self.refs.issue_type.value,
      self.issue_to = $("#isue_to option:selected").text();
      self.start_date=self.refs.start_date.value,
      self.end_date=self.refs.end_date.value,

      self.s_date=convertDate(self.refs.start_date.value)
      self.e_date=convertDate(self.refs.end_date.value)

      inventoryReportStore.trigger('read_inventory_person_wise_issued_goods_report',self.refs.issue_type.value,self.refs.issue_to.value,self.s_date,self.e_date)
    }
    self.getIssueTo = () => {
       inventoryReportStore.trigger('read_inventory_issue_to',self.refs.issue_type.value)
       self.update()
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

    inventoryReportStore.on('read_inventory_issue_to_changed',ReadInventoryIssueToChanged)
    function ReadInventoryIssueToChanged(issuedPersons){
      console.log(issuedPersons)
      self.title='Create'
      self.loading = false
      self.issuedPersons = issuedPersons
      self.update()
    }

    inventoryReportStore.on('read_inventory_person_wise_issued_goods_report_changed',ReadInventoryPersonWiseIssuedGoodsReportChanged)
    function ReadInventoryPersonWiseIssuedGoodsReportChanged(inventoryPersonWiseIssuedGoodsReports){
      console.log(inventoryPersonWiseIssuedGoodsReports)
      self.title='Create'
      self.loading = false
      self.inventoryPersonWiseIssuedGoodsReports = inventoryPersonWiseIssuedGoodsReports
      self.update()
      console.log(self.inventoryPersonWiseIssuedGoodsReports)
    }

});
riot.tag2('inventory-rack', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Inventory Rack Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Rack</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="rack_name" id="rack_name" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readRack}" style="margin-left:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Rack Name</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in inventoryRacks}"> <td>{i+1}</td> <td>{c.rack_name}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, c)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	   var self = this
      self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readInventoryRack()
    })
    self.on("unmount", function(){
      inventoryRackStore.off('inventoryRack_changed', InventoryRackChanged)
    })

    self.readInventoryRack = () => {
      self.loading=true
       inventoryRackStore.trigger('read_inventory_rack')
    }

     self.add = () => {
      if(!self.refs.rack_name.value){
        toastr.info("Please enter Rack and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          inventoryRackStore.trigger('add_inventory_rack', self.refs.rack_name.value)
        }else if(self.title=='Update'){
          console.log('update')
          inventoryRackStore.trigger('edit_inventory_rack', self.refs.rack_name.value,
            self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.inventoryRacks.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.inventoryRacks.map(c => {
        if(c.rack_id != e.item.c.rack_id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      inventoryRackStore.trigger('delete_inventory_rack', e.item.c.rack_id)
    }

    self.edit = (c,e) => {
      console.log(c)
      self.title='Update'
      document.getElementById("rack_name").focus()
      self.refs.rack_name.value = c.rack_name
      self.edit_id = c.rack_id
    }

    inventoryRackStore.on('inventoryRack_changed',InventoryRackChanged)
    function InventoryRackChanged(inventoryRacks){
      console.log(inventoryRacks)
      self.title='Create'
      self.refs.rack_name.value = ''
      self.loading = false
      self.inventoryRacks = inventoryRacks

      self.update()
      console.log(self.inventoryRacks)
    }

});
riot.tag2('inventory-received-goods-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h4 class="title has-text-centered" style="color: #ff3860;">Inventory Received From {received_from} </h4> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Received From</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="received_from" onchange="{readReceivedFrom}"> <option each="{receivedFromArray}" riot-value="{received_from}">{received_from} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="start_date" placeholder="" tabindex="0" type="text"> </div> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="end_date" placeholder="" tabindex="0" type="text"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" style="margin-left:-20px" onclick="{getReceivedGoodsReport}">GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Date</th> <th>Category</th> <th>Item</th> <th>Quantity</th> <th>Rate</th> <th>Amount</th> <th>Rack</th> <th>Remarks</th> </tr> </thead> <tbody> <tr each="{ev, i in inventoryReceivedGoodsReports}"> <td>{i+1}</td> <td>{ev.received_date}</td> <td>{ev.category_name}</td> <td>{ev.item_name}</td> <td>{ev.quantity}</td> <td>{ev.rate}</td> <td>{ev.amount}</td> <td>{ev.rack_name}</td> <td>{ev.remark}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
        flatpickr(".date", {
        allowInput: true,
          dateFormat: "d/m/Y",
      })
      self.update()
      self.getReceivedFrom()

    })
  self.on("unmount", function(){
      inventoryReportStore.off('read_inventory_received_From_changed', ReadInventoryReceivedFromChanged)
      inventoryReportStore.off('read_inventory_received_goods_report_changed',ReadInventoryReceivedGoodsReportChanged)
  })

    self.getReceivedFrom = () => {
       inventoryReportStore.trigger('read_inventory_received_from')
    }
    self.getReceivedGoodsReport = () => {
      self.received_from=self.refs.received_from.value
      self.start_date=convertDate(self.refs.start_date.value)
      self.end_date=convertDate(self.refs.end_date.value)
      self.loading=true
       inventoryReportStore.trigger('read_inventory_received_goods_report',self.refs.received_from.value,self.start_date,self.end_date)
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

inventoryReportStore.on('read_inventory_received_from_changed',ReadInventoryReceivedFromChanged)
    function ReadInventoryReceivedFromChanged(receivedFromArray){
      console.log(receivedFromArray)
      self.title='Create'
      self.loading = false
      self.receivedFromArray = receivedFromArray
      self.update()
    }
inventoryReportStore.on('read_inventory_received_goods_report_changed',ReadInventoryReceivedGoodsReportChanged)
    function ReadInventoryReceivedGoodsReportChanged(inventoryReceivedGoodsReports){
      console.log(inventoryReceivedGoodsReports)
      self.title='Create'
      self.loading = false
      self.inventoryReceivedGoodsReports = inventoryReceivedGoodsReports
      self.update()
      console.log(self.inventoryReceivedGoodsReports)
    }

});
riot.tag2('inventory-report', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_inventory_report == \'inventory-received-goods-report\'}" href="#/inventory-report/inventory-received-goods-report"> <span>Received Goods</span> </a> </p> <p class="control"> <a class="button {is-active: selected_inventory_report == \'inventory-issued-goods-report\'}" href="#/inventory-report/inventory-issued-goods-report"> <span>Issued Goods</span> </a> </p> <p class="control"> <a class="button {is-active: selected_inventory_report == \'inventory-person-wise-issued-goods-report\'}" href="#/inventory-report/inventory-person-wise-issued-goods-report"> <span>Person Wise Issue</span> </a> </p> <p class="control"> <a class="button {is-active: selected_inventory_report == \'inventory-item-wise-issued-goods-report\'}" href="#/inventory-report/inventory-item-wise-issued-goods-report"> <span>Item Wise Issue</span> </a> </p> <p class="control"> <a class="button {is-active: selected_inventory_report == \'inventory-sales-goods-report\'}" href="#/inventory-report/inventory-sales-goods-report"> <span>Sale Goods</span> </a> </p> <p class="control"> <a class="button {is-active: selected_inventory_report == \'inventory-return-goods-report\'}" href="#/inventory-report/inventory-return-goods-report"> <span>Return Goods</span> </a> </p> <p class="control"> <a class="button {is-active: selected_inventory_report == \'inventory-summary-report\'}" href="#/inventory-report/inventory-summary-report"> <span>Summary</span> </a> </p> </div> <div id="inventory-report-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_inventory_report')
    console.log(opts.selected_inventory_report)
    if(!opts.selected_inventory_report){
      self.selected_inventory_report = 'inventory-received-goods-report'
    }else{
      self.selected_inventory_report = opts.selected_inventory_report
    }
});



riot.tag2('inventory-return-goods-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h4 class="title has-text-centered" style="color: #ff3860;">Inventory Return Report <br> <span style="font-size:18px"> From: {start_date} To: {end_date}</span></h4> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="start_date" placeholder="" tabindex="0" type="text" style="width:120px"> </div> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="end_date" placeholder="" tabindex="0" type="text" style="width:120px"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" style="margin-left:-20px" onclick="{getReturnGoodsReport}">GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Date</th> <th>Category</th> <th>Item</th> <th>To Whom</th> <th>Quantity</th> <th>Return Date</th> <th>Remarks</th> </tr> </thead> <tbody> <tr each="{ev, i in inventoryReturnGoodsReports}"> <td>{i+1}</td> <td>{ev.issue_date}</td> <td>{ev.category_name}</td> <td>{ev.item_name}</td> <td>{ev.return_to}</td> <td>{ev.quantity}</td> <td> {ev.return_date}</td> <td>{ev.amount}</td> <td>{ev.return_remark}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      flatpickr(".date", {
         allowInput: true,
         dateFormat: "d/m/Y",
       })

       self.update()
    })
  self.on("unmount", function(){
         inventoryReportStore.off('read_inventory_return_goods_report_changed',ReadInventoryReturnGoodsReportChanged)
  })

    self.getReturnGoodsReport = () => {
      self.start_date=self.refs.start_date.value,
      self.end_date=self.refs.end_date.value,

      self.s_date=convertDate(self.refs.start_date.value)
      self.e_date=convertDate(self.refs.end_date.value)
      self.loading=true
       inventoryReportStore.trigger('read_inventory_return_goods_report',self.s_date, self.e_date)
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

    inventoryReportStore.on('read_inventory_return_goods_report_changed',ReadInventoryReturnGoodsReportChanged)
    function ReadInventoryReturnGoodsReportChanged(inventoryReturnGoodsReports){
      console.log(inventoryReturnGoodsReports)
      self.title='Create'
      self.loading = false
      self.inventoryReturnGoodsReports = inventoryReturnGoodsReports
      self.update()
      console.log(self.inventoryReturnGoodsReports)
    }

});
riot.tag2('inventory-returnable', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{inventory_returnable_view == \'show_inventory_returnable_table\'}"> <h4 class="title has-text-centered" style="color: #ff3860;">Returnable Items</h4> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Type</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="r_returnable_type"> <option></option> <option>Staff</option> <option>College</option> <option>Health</option> <option>MV</option> <option>Other</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="r_category_id" onchange="{readInventoryReturnableItem}"> <option></option> <option each="{inventoryCategories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-warning is-rounded is-pulled-right" onclick="{readInventoryReturnableItem}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>#</th> <th>Date</th> <th>Category</th> <th>Item</th> <th>Issue To</th> <th>Issued Quantity</th> <th>Availble Quantity</th> <th>Purpose</th> </tr> </thead> <tbody> <tr each="{ev, i in inventoryReturnableGoods}"> <td>{i+1}</td> <td><input type="checkbox" class="id_check_box" checked="{ev.done}" id="{\'IssueId\' + ev.issue_id}" onclick="{selectReturnableGoods.bind(this,ev)}"> </td> <td>{ev.issued_date}</td> <td>{ev.category_name}</td> <td>{ev.item_name}</td> <td>{ev.issue_to} {ev.staff_name}</td> <td>{ev.issued_quantity}</td> <td>{ev.available_qty}</td> <td>{ev.purpose}</td> </tr> </tbody> </table> </section> <div id="returnableModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">{title} Return Goods Entry</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role">Return Date</label> <div class="control"> <input class="input date flatpickr-input form-control input" type="text" ref="return_date"> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Return To</label> <div class="control"> <input class="input" type="text" ref="return_to"> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Available Quantity</label> <div class="control"> <input class="input" type="text" ref="available_quantity"> </div> </div> </div> </div> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role">Return Quantity</label> <div class="control"> <input class="input" type="text" ref="return_quantity"> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Return Rack</label> <div class="control"> <input class="input" type="text" ref="rack_name"> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Remarks</label> <div class="control"> <textarea class="input" type="text" ref="remark" rows="3"></textarea> </div> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-danger" onclick="{add}">{title}</button> <button class="button" id="item-modal-close" onclick="{closeReturnableModal}">Cancel</button> </footer> </div> </div>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.loading = false;
      self.role = getCookie('role')
      self.inventory_returnable_view='show_inventory_returnable_table'
      self.refs.r_returnable_type.value='Staff'
      self.readInventoryCategory()
      flatpickr(".date", {
         allowInput: true,
         dateFormat: "d/m/Y",

       })
      self.update()
    })
    self.on("unmount", function(){
        inventoryCategoryStore.off('read_inventory_category_changed', ReadInventoryCategoryChanged)
        inventoryIssueStore.off('read_inventory_returnable_changed', ReadInventoryReturnableChanged)
        inventoryIssueStore.off('add_inventory_return_goods_changed', AddInventoryReturnGoodsChanged)

    })
    self.selectReturnableGoods = (item,event) => {
      item.done=!event.item.ev.done
      console.log(item.done)
      if(event.item.ev.done==true){
        self.obj={};
        self.obj.issue_id = item.issue_id;
        self.obj.issue_date = item.issue_date;
        self.obj.item_id=item.issue_item_id
        self.obj.category_id=item.issue_category_id
        self.obj.sub_category_id=item.issue_sub_category_id
        self.obj.rack_id=item.issue_rack_id
        self.obj.rack_name=item.rack_name
        self.obj.unit=item.issue_unit
        self.obj.issue_type=item.issue_type
        self.obj.return_type=item.return_type
        self.obj.staff_id=item.staff_id
        self.obj.issue_to=item.issue_to
        self.obj.available_quantity=item.available_quantity
        self.obj.issue_quantity=item.issue_quantity
        self.refs.available_quantity.value=item.available_quantity
        self.refs.rack_name.value=item.rack_name
        console.log(self.obj)
        self.show_inventory_returnable_modal()

       }
     }

    self.readInventoryCategory = () => {
       inventoryCategoryStore.trigger('read_inventory_category')
    }
    self.show_inventory_returnable_modal = () => {
      self.title = 'Add'
      $("#returnableModal").addClass("is-active");
    }

    self.closeReturnableModal = () => {
       self.loading=false
      $("#returnableModal").removeClass("is-active");
      self.refs.return_date.value=''
      self.refs.available_quantity.value=''
      self.refs.rack_name.value=''
      self.refs.return_to.value=''
      self.refs.return_quantity.value=''
      self.refs.remark.value=''
       self.inventoryReturnableGoods.map(i=>{
          i.done = false;
          $('IssueId'+i.issue_id).prop('checked', false);
       })

    }

    self.readInventoryReturnableItem = () => {
      self.loading=true
       inventoryIssueStore.trigger('read_inventory_returnable_item', self.refs.r_category_id.value,self.refs.r_returnable_type.value,)
    }

    self.add = () => {
      if(!self.refs.return_date.value){
        toastr.info("Please enter return_date  and try again")
      }else{
        self.loading = true
          console.log('create')
          if(Number(self.refs.return_quantity.value)>Number(self.obj.issue_quantity)){
             toastr.info("Return Quantity Cannot be greater than available quantity")
            console.log(self.obj.issue_quantity)
            return;
          }
          self.return_date=convertDate(self.refs.return_date.value)
          inventoryIssueStore.trigger('add_inventory_return_goods',self.obj, self.return_date,
            self.refs.return_to.value,self.refs.return_quantity.value,self.refs.remark.value)
      }

    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

    inventoryIssueStore.on('add_inventory_return_goods_changed',AddInventoryReturnGoodsChanged)
    function AddInventoryReturnGoodsChanged(inventoryReturnableGoods){
      console.log(inventoryReturnableGoods)
      self.title='Create'
      self.loading = false
      self.closeReturnableModal();
      self.update()
      self.readInventoryReturnableItem()
      console.log(self.inventoryReturnableGoods)
    }

    inventoryCategoryStore.on('read_inventory_category_changed',ReadInventoryCategoryChanged)
    function ReadInventoryCategoryChanged(inventoryCategories){
      console.log(inventoryCategories)

      self.loading = false
      self.inventoryCategories = inventoryCategories
      self.update()

      console.log(self.inventoryCategories)

    }

    inventoryIssueStore.on('read_inventory_returnable_changed',ReadInventoryReturnableChanged)
    function ReadInventoryReturnableChanged(inventoryReturnableGoods){
      console.log(inventoryReturnableGoods)
      self.loading=false
      self.inventoryReturnableGoods = inventoryReturnableGoods
      self.inventoryReturnableGoods.map(i=>{
         if(i.issue_id==null){
              i.done = false;
               self.issue_id=i.issue_id
         }else{
          i.done = false;
          $('IssueId'+i.issue_id).prop('checked', false);
         }
       })

      self.update()
      console.log(self.inventoryReturnableGoods)
    }

});
riot.tag2('inventory-sale', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{inventory_sale_view == \'show_inventory_sale_table\'}"> <h4 class="title has-text-centered" style="color: #ff3860;">Goods Sale From Store Department</h4> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="r_category_id" onchange="{readInventorySale}"> <option each="{inventoryCategories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readInventorySale}" style="margin-left:3px;margin-right:3px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-info is-rounded is-pulled-right" onclick="{show_inventory_sale}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Date</th> <th>Category</th> <th>Item</th> <th>Quantity</th> <th>Rate</th> <th>Amount</th> <th>Sale To</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in inventorySales}"> <td>{i+1}</td> <td>{ev.sa_date}</td> <td>{ev.category_name}</td> <td>{ev.item_name}</td> <td>{ev.quantity}</td> <td>{ev.sale_rate}</td> <td>{ev.amount}</td> <td>{ev.sale_to}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ev.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, ev)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section class="is-fluid" show="{inventory_sale_view ==\'show_inventory_sale_form\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} Inventory Sale</h2> </div> <div class="level-right"> <button class="button" onclick="{close_inventory_sale_form}">Back</button> </div> </div> <div class="box"> <div class="columns is-variable is-1 is-multiline"> <div class="column is-one-third"> <label class="label">Sale Date</label> <input class="input date flatpickr-input form-control input" ref="sale_date" placeholder="" tabindex="0" type="text" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label" for="class">Category</label> <div class="control"> <div class="select is-fullwidth"> <select ref="category_id" id="category_id" onchange="{filterSubcategory}"> <option each="{inventoryCategories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label" for="class">Subcategory</label> <div class="control"> <div class="select is-fullwidth"> <select ref="sub_category_id" id="sub_category_id" onchange="{filterItem}"> <option each="{filteredSubcategories}" riot-value="{sub_category_id}">{sub_category} </option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label" for="class">Item</label> <div class="control"> <div class="select is-fullwidth"> <select ref="item_id" id="item_id" onchange="{getAvailableItemQuantity}"> <option each="{filteredItems}" riot-value="{item_id}">{item_name}</option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label">In Stock</label> <input type="text" ref="available_quantity" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Quantity</label> <input type="text" ref="sale_quantity" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Unit</label> <input type="text" ref="unit" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Rate</label> <input type="text" ref="rate" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Sale To</label> <input type="text" ref="sale_to" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-full"> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{add}">{title}</button> </div> </div> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.inventory_sale_view='show_inventory_sale_table'

       flatpickr(".date", {
         allowInput: true,
          dateFormat: "d/m/Y",
       })

      self.loading=false
      self.update()

      self.readInventoryCategory()

      self.readInventorySubcategory()

      self.readInventoryItem()

    })
  self.on("unmount", function(){
      inventoryCategoryStore.off('read_inventory_category_changed', ReadInventoryCategoryChanged)
      inventoryItemStore.off('read_inventory_item_changed', ReadInventoryItemChanged)
      inventorySubcategoryStore.off('read_inventory_subcategory_changed',ReadInventorySubcategoryChanged)
      inventoryIssueStore.off('read_inventory_available_quantity_changed', ReadInventoryAvailableQuantityChanged)

      inventorySaleStore.off('read_inventory_sale_changed', ReadInventorySaleChanged)
      inventorySaleStore.off('add_inventory_sale_changed', AddInventorySaleChanged)
      inventorySaleStore.off('edit_inventory_sale_changed', EditInventorySaleChanged)
      inventorySaleStore.off('delete_inventory_sale_changed', DeleteInventorySaleChanged)
  })

    self.show_inventory_sale=()=>{
       self.inventory_sale_view='show_inventory_sale_form'
       self.title='Create'
       self.refs.category_id.value=''
       self.refs.sub_category_id.value=''
       self.refs.item_id.value=''
       self.refs.sale_date.value=''
       self.refs.unit.value=''
       self.refs.available_quantity.value=''
       self.refs.sale_quantity.value=''
       self.refs.rate.value=''
       self.refs.sale_to.value=''

    }
    self.close_inventory_sale_form=()=>{
       self.inventory_sale_view='show_inventory_sale_table'
       self.title='Create'
       self.refs.category_id.value=''
       self.refs.sub_category_id.value=''
       self.refs.item_id.value=''
       self.refs.sale_date.value=''
       self.refs.unit.value=''
       self.refs.available_quantity.value=''
       self.refs.sale_quantity.value=''
       self.refs.rate.value=''
       self.refs.sale_to.value=''
    }

   self.filterSubcategory = () => {
      self.filteredSubcategories = []
      self.filteredSubcategories = self.inventorySubcategories.filter(s => {
        console.log("inside")
      return s.category_id == self.refs.category_id.value
    })
      self.update()
      console.log(self.filteredSubcategories)
      self.filterItem()
   }

    self.filterItem = () => {
      self.filteredItems = []
      self.filteredItems = self.inventoryItems.filter(s => {
        console.log(s)
      return s.subcategory_id == self.refs.sub_category_id.value
    })
      self.update()
      self.getAvailableItemQuantity()
   }

    self.readInventorySale = () => {
      self.loading=true
       inventorySaleStore.trigger('read_inventory_sale', self.refs.r_category_id.value)
    }

    self.readInventoryCategory = () => {
       inventoryCategoryStore.trigger('read_inventory_category')
    }

    self.readInventorySubcategory = () => {
       inventorySubcategoryStore.trigger('read_inventory_subcategory')
    }

    self.readInventoryItem = () => {
       inventoryItemStore.trigger('read_inventory_item')
    }
    self.getAvailableItemQuantity = () => {
       inventoryIssueStore.trigger('read_inventory_available_quantity',self.refs.item_id.value)
    }

    self.add = () => {

      self.sale_date=convertDate(self.refs.sale_date.value)
      self.category_name = $("#category_id option:selected").text();
      self.subcategory_name = $("#sub_category_id option:selected").text();
      self.item_name = $("#item_id option:selected").text();

      self.aq=self.refs.available_quantity.value
      self.iq=self.refs.sale_quantity.value
       if(Number(self.aq) < Number(self.iq)){
          toastr.info("Sale Quantity is greater than available stock")
          return
       }
      if(!self.refs.category_id.value){
        toastr.info("Please enter category name and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
        inventorySaleStore.trigger('add_inventory_sale', self.sale_date, self.refs.category_id.value,self.refs.sub_category_id.value,self.refs.item_id.value,self.refs.sale_to.value, self.refs.available_quantity.value,self.refs.sale_quantity.value,self.unit_id,self.refs.rate.value,self.category_name, self.subcategory_name,self.item_name)
        }else if(self.title=='Update'){
          console.log('update')
        inventorySaleStore.trigger('edit_inventory_sale', self.sale_date, self.refs.category_id.value,self.refs.sub_category_id.value,self.refs.item_id.value,self.refs.sale_to.value, self.refs.available_quantity.value,self.refs.sale_quantity.value,self.unit_id,self.refs.rate.value , self.edit_id,self.category_name, self.subcategory_name,self.item_name)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.inventorySales.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.inventorySales.map(ev => {
        if(ev.sale_id != e.item.ev.sale_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      console.log("delet")
      inventorySaleStore.trigger('delete_inventory_sale', e.item.ev.sale_id)
    }

    self.edit = (ev,e) => {
      console.log("insie edit")
        flatpickr(".date", {
         allowInput: true,
          dateFormat: "d/m/Y",
       })
       self.inventory_sale_view='show_inventory_sale_form'
       self.refs.category_id.value=ev.category_id
       self.filterSubcategory()
       self.update()
       self.refs.sub_category_id.value=ev.sub_category_id
       self.filterItem()
       self.update()
       self.refs.item_id.value=ev.item_id
       self.refs.sale_date.value=ev.sa_date
       self.refs.unit.value=ev.unit
       self.unit_id=ev.unit_id
       self.refs.rate.value=ev.sale_rate
       self.refs.available_quantity.value=ev.available_quantity
       self.refs.sale_quantity.value=ev.sale_quantity
       self.refs.sale_to.value=ev.sale_to
       self.edit_id = ev.sale_id
       self.title='Update'
       self.inventory_sale_view='show_inventory_sale_form'
    }

    inventorySaleStore.on('add_inventory_sale_changed',AddInventorySaleChanged)
    function AddInventorySaleChanged(inventorySales){
      console.log(inventorySales)
      self.title='Create'
     self.refs.category_id.value=''
       self.refs.sub_category_id.value=''
       self.refs.item_id.value=''
       self.refs.sale_date.value=''
       self.refs.unit.value=''
       self.refs.rate.value=''
       self.refs.available_quantity.value=''
       self.refs.sale_quantity.value=''

       self.refs.sale_to.value=''
       self.refs.rate.value=''

      self.loading = false
      self.readInventorySale()
      self.update()

      console.log(self.inventorySales)
    }

  inventorySaleStore.on('edit_inventory_sale_changed',EditInventorySaleChanged)
    function EditInventorySaleChanged(inventorySales){
      console.log(inventorySales)
       self.title='Create'
       self.refs.category_id.value=''
       self.refs.sub_category_id.value=''
       self.refs.item_id.value=''
       self.refs.sale_date.value=''
       self.refs.unit.value=''
       self.refs.available_quantity.value=''
       self.refs.sale_quantity.value=''
       self.refs.rate.value=''

       self.refs.sale_to.value=''

      self.loading = false
      self.inventorySales = inventorySales
      self.readInventorySale()
      self.update()

    }

    inventorySaleStore.on('delete_inventory_sale_changed',DeleteInventorySaleChanged)
    function DeleteInventorySaleChanged(inventorySales){
      console.log(inventorySales)
      self.title='Create'
      self.loading = false
      self.inventorySales = inventorySales
      self.update()

      console.log(self.inventorySales)
    }

    inventoryCategoryStore.on('read_inventory_category_changed',ReadInventoryCategoryChanged)
    function ReadInventoryCategoryChanged(inventoryCategories){
      console.log(inventoryCategories)

      self.loading = false
      self.inventoryCategories = inventoryCategories
      self.refs.sub_category_id.value = ''

      self.update()
      console.log(self.inventoryCategories)
      self.readInventorySale()
    }

inventoryIssueStore.on('read_inventory_available_quantity_changed',ReadInventoryAvailableQuantityChanged)
    function ReadInventoryAvailableQuantityChanged(availableItems,rack_ids){
      console.log(availableItems)

      self.loading = false
      self.availableItems = availableItems
      if(availableItems[0].total_issued==null || availableItems[0].total_issued==''){
        availableItems[0].total_issued=0;
      }
      if(availableItems[0].total_sale==null || availableItems[0].total_sale==''){
        availableItems[0].total_sale=0;
      }
       if(self.title=='Create'){
         self.refs.available_quantity.value=availableItems[0].total_received - (availableItems[0].total_issued + availableItems[0].total_sale)
        }else{
          self.refs.available_quantity.value=availableItems[0].total_received - (availableItems[0].total_issued + availableItems[0].total_sale) + Number(self.refs.sale_quantity.value)
          console.log("inside")
        }
      self.refs.unit.value=availableItems[0].unit
      self.unit_id=availableItems[0].unit_id
      self.update()
      console.log(self.availableItems)
    }
  inventorySubcategoryStore.on('read_inventory_subcategory_changed',ReadInventorySubcategoryChanged)
    function ReadInventorySubcategoryChanged(inventorySubcategories){
      console.log(inventorySubcategories)

      self.loading = false
      self.inventorySubcategories = inventorySubcategories
      self.update()
      console.log(self.inventorySubcategories)
    }

   inventoryItemStore.on('read_inventory_item_changed',ReadInventoryItemChanged)
    function ReadInventoryItemChanged(inventoryItems){
      console.log(inventoryItems)

      self.loading = false
      self.inventoryItems = inventoryItems

      self.update()
      console.log(self.inventoryItems)
    }
    inventorySaleStore.on('read_inventory_sale_changed',ReadInventorySaleChanged)
    function ReadInventorySaleChanged(inventorySales){
      console.log(inventorySales)
      self.title='Create'
      self.loading = false
      self.inventorySales = inventorySales
      self.update()
      console.log(self.inventorySales)
    }

});
riot.tag2('inventory-sales-goods-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Inventory Sales Report <br> <span style="font-size:18px">From: {start_date} To: {end_date}</span></h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="start_date" placeholder="" tabindex="0" type="text" style="width:120px"> </div> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="end_date" placeholder="" tabindex="0" type="text" style="width:120px"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" style="margin-left:-20px" onclick="{getSaleGoodsReport}">GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Date</th> <th>Category</th> <th>Item</th> <th>Quantity</th> <th>Rate</th> <th>Amount</th> <th>Sale To</th> </tr> </thead> <tbody> <tr each="{ev, i in inventorySaleGoodsReports}"> <td>{i+1}</td> <td>{ev.sale_date}</td> <td>{ev.category_name}</td> <td>{ev.item_name}</td> <td>{ev.quantity}</td> <td>{ev.sale_rate}</td> <td>{ev.amount}</td> <td>{ev.sale_to}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      flatpickr(".date", {
         allowInput: true,
         dateFormat: "d/m/Y",
       })

       self.update()
    })
  self.on("unmount", function(){
         inventoryReportStore.off('read_inventory_sale_goods_report_changed',ReadInventorySaleGoodsReportChanged)
  })

    self.getSaleGoodsReport = () => {
      self.start_date=self.refs.start_date.value,
      self.end_date=self.refs.end_date.value

      self.s_date=convertDate(self.refs.start_date.value)
      self.e_date=convertDate(self.refs.end_date.value)
      self.loading=true
       inventoryReportStore.trigger('read_inventory_sale_goods_report', self.s_date,self.e_date)
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

    inventoryReportStore.on('read_inventory_sale_goods_report_changed',ReadInventorySaleGoodsReportChanged)
    function ReadInventorySaleGoodsReportChanged(inventorySaleGoodsReports){
      console.log(inventorySaleGoodsReports)
      self.title='Create'
      self.loading = false
      self.inventorySaleGoodsReports = inventorySaleGoodsReports
      self.update()
      console.log(self.inventorySaleGoodsReports)
    }

});
riot.tag2('inventory-setting', '<div class="field has-addons"> <p class="control"> <a class="button {is-active: selected_master == \'inventory-rack\'}" href="#/inventory-setting/inventory-rack"> <span>Rack</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'inventory-unit\'}" href="#/inventory-setting/inventory-unit"> <span>Unit</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'inventory-category\'}" href="#/inventory-setting/inventory-category"> <span>Category</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'inventory-subcategory\'}" href="#/inventory-setting/inventory-subcategory"> <span>Sub Category</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'inventory-item\'}" href="#/inventory-setting/inventory-item"> <span>Item</span> </a> </p> </div> <div id="inventory-setting-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_master')
    console.log(opts.selected_master)
    if(!opts.selected_master){
      self.selected_master = 'inventory-rack'
    }else{
      self.selected_master = opts.selected_master
    }
});



riot.tag2('inventory-item', '<section class=" is-fluid"> <h2 class="title" style="color: #ff3860;">Inventory Item</h2> <div class="flex items-center mt-2 mb-6 no-print"> <div class="bg-green py-1 rounded w-10"> <div class="bg-grey h-px flex-auto"></div> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Department</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="department" style="margin-left:-10px" onchange="{filterCategory}"> <option each="{inventoryDepartments}" riot-value="{department}">{department} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="category_id" style="margin-left:-10px" onchange="{filterSubcategory}"> <option each="{filteredCategories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Subcategory</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="sub_category_id" style="margin-left:-10px"> <option each="{filteredSubcategories}" riot-value="{sub_category_id}">{sub_category} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Item</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="item_name" type="text" style="margin-left:-10px"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" style="margin-left:-20px" onclick="{add}">{title} </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Department</th> <th>Category</th> <th>Subcategory</th> <th>Item</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in inventoryItems}"> <td>{i+1}</td> <td>{ev.department}</td> <td>{ev.category_name}</td> <td>{ev.sub_category}</td> <td>{ev.item_name}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ev.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, ev)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readInventoryDepartment()
      self.readInventoryCategory()
      self.readInventorySubcategory()
      self.readInventoryItem()
    })
self.on("unmount", function(){
  inventoryCategoryStore.off('read_inventory_category_changed', ReadInventoryCategoryChanged)
  inventorydepartmentStore.off('read_inventorydepartment_changed', ReadInventoryDepartmentChanged)
  inventorySubcategoryStore.off('read_inventory_subcategory_changed',ReadInventorySubcategoryChanged)

  inventoryItemStore.off('read_inventory_item_changed', ReadInventoryItemChanged)
  inventoryItemStore.off('add_inventory_item_changed', AddInventoryItemChanged)
  inventoryItemStore.off('edit_inventory_item_changed',EditInventoryItemChanged)
  inventoryItemStore.off('delete_inventory_item_changed',DeleteInventoryItemChanged)
})

    self.filterCategory = () => {
      self.filteredCategories = []
      self.filteredCategories = self.inventoryCategories.filter(s => {
       return s.department == self.refs.department.value
      })
       self.update()
      console.log(self.refs.category_id.value)
       self.filterSubcategory()
   }
   self.filterSubcategory = () => {
      self.filteredSubcategories = []
      self.filteredSubcategories = self.inventorySubcategories.filter(s => {
      return s.category_id == self.refs.category_id.value
    })
      self.update()
      console.log(self.filteredSubcategories)

   }

    self.readInventoryDepartment = () => {
       inventorydepartmentStore.trigger('read_inventorydepartment')
    }

    self.readInventoryCategory = () => {
       inventoryCategoryStore.trigger('read_inventory_category')
    }

    self.readInventorySubcategory = () => {
       inventorySubcategoryStore.trigger('read_inventory_subcategory')
    }

    self.readInventoryItem = () => {
       inventoryItemStore.trigger('read_inventory_item')
    }

     self.add = () => {
      if(!self.refs.department.value){
        toastr.info("Please enter department and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
        inventoryItemStore.trigger('add_inventory_item', self.refs.department.value,
           self.refs.category_id.value,self.refs.sub_category_id.value,self.refs.item_name.value)
        }else if(self.title=='Update'){
          console.log('update')
        inventoryItemStore.trigger('edit_inventory_item', self.refs.department.value,
           self.refs.category_id.value,self.refs.sub_category_id.value,self.refs.item_name.value, self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.inventoryItems.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.inventoryItems.map(ev => {
        if(ev.item_id != e.item.ev.item_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      inventoryItemStore.trigger('delete_inventory_item', e.item.ev.item_id)
    }

    self.edit = (ev,e) => {
      console.log(ev)
      self.title='Update'

      self.refs.department.value = ev.department

       self.filterCategory()
       self.update()
       self.refs.category_id.value=ev.category_id
       self.filterSubcategory()
       self.update()
       self.refs.sub_category_id.value=ev.subcategory_id

      self.refs.item_name.value = ev.item_name
      self.edit_id = ev.item_id
    }

    inventoryItemStore.on('add_inventory_item_changed',AddInventoryItemChanged)
    function AddInventoryItemChanged(inventoryItems){
      console.log(inventoryItems)
      self.title='Create'
      self.refs.category_id.value = ''
      self.refs.department.value = ''
      self.refs.sub_category_id.value = ''
      self.refs.item_name.value = ''
      self.loading = false
      self.inventoryItems = inventoryItems
      self.update()

      console.log(self.inventoryItems)
    }

  inventoryItemStore.on('edit_inventory_item_changed',EditInventoryItemChanged)
    function EditInventoryItemChanged(inventoryItems){
      console.log(inventoryItems)
      self.title='Create'
      self.refs.category_id.value = ''
      self.refs.department.value = ''
      self.refs.item_name.value = ''
      self.refs.sub_category_id.value = ''
      self.loading = false
      self.inventoryItems = inventoryItems
      self.update()

    }

    inventoryItemStore.on('delete_inventory_item_changed',DeleteInventoryItemChanged)
    function DeleteInventoryItemChanged(inventoryItems){
      console.log(inventoryItems)
      self.title='Create'
      self.refs.sub_category.value = ''
      self.refs.item_name.value = ''
      self.refs.department.value = ''
      self.refs.category_id.value = ''
      self.loading = false
      self.inventoryItems = inventoryItems
      self.update()
      self.readInventoryItem()
      console.log(self.inventoryItems)
    }

    inventoryCategoryStore.on('read_inventory_category_changed',ReadInventoryCategoryChanged)
    function ReadInventoryCategoryChanged(inventoryCategories){
      console.log(inventoryCategories)
      self.title='Create'
      self.loading = false
      self.inventoryCategories = inventoryCategories
      self.refs.sub_category_id.value = ''
      self.refs.department.value = ''
      self.refs.category_id.value = ''
      self.refs.item_name.value = ''
      self.update()
      console.log(self.inventoryCategories)
    }
  inventorySubcategoryStore.on('read_inventory_subcategory_changed',ReadInventorySubcategoryChanged)
    function ReadInventorySubcategoryChanged(inventorySubcategories){
      console.log(inventorySubcategories)
      self.title='Create'
      self.loading = false
      self.inventorySubcategories = inventorySubcategories
      self.refs.sub_category_id.value = ''
      self.refs.department.value = ''
      self.refs.item_name.value = ''
      self.refs.category_id.value = ''
      self.update()
      console.log(self.inventorySubcategories)
    }

   inventoryItemStore.on('read_inventory_item_changed',ReadInventoryItemChanged)
    function ReadInventoryItemChanged(inventoryItems){
      console.log(inventoryItems)
      self.title='Create'
      self.loading = false
      self.inventoryItems = inventoryItems
      self.refs.sub_category_id.value = ''
      self.refs.department.value = ''
      self.refs.item_name.value = ''
      self.refs.category_id.value = ''
      self.update()
      console.log(self.inventoryItems)
    }

    inventorydepartmentStore.on('read_inventorydepartment_changed',ReadInventoryDepartmentChanged)
    function ReadInventoryDepartmentChanged(inventoryDepartments){
      console.log(inventoryDepartments)
      self.inventoryDepartments = inventoryDepartments
      self.update()
      console.log(self.inventoryDepartments)
    }

});
riot.tag2('inventory-stock', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{inventory_stock_view == \'show_inventory_stock_table\'}"> <h4 class="title has-text-centered" style="color: #ff3860;">Goods Entry in Store Department</h4> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label" style="margin-left:-14px">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="r_category_id" onchange="{readInventoryStock}"> <option each="{inventoryCategories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readInventoryStock}" style="margin-left:3px;margin-right:3px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-info is-rounded is-pulled-right" onclick="{show_inventory_stock}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Date</th> <th>Category</th> <th>Item</th> <th>Quantity</th> <th>Rate</th> <th>Amount</th> <th>Received From</th> <th>Rack</th> <th>Remarks</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in inventoryStocks}"> <td>{i+1}</td> <td>{ev.received_date}</td> <td>{ev.category_name}</td> <td>{ev.item_name}</td> <td>{ev.quantity}</td> <td>{ev.rate}</td> <td>{ev.amount}</td> <td>{ev.received_from}</td> <td>{ev.rack_name}</td> <td>{ev.remark}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ev.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, ev)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section class="is-fluid" show="{inventory_stock_view ==\'show_inventory_stock_form\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} Inventory Stock</h2> </div> <div class="level-right"> <button class="button" onclick="{close_inventory_stock_form}">Back</button> </div> </div> <div class="box"> <div class="columns is-variable is-1 is-multiline"> <div class="column is-one-third"> <label class="label">Received Date</label> <input class="input date flatpickr-input form-control input" ref="received_date" placeholder="" tabindex="0" type="text"></div> <div class="column is-one-third"> <label class="label" for="class">Category</label> <div class="control"> <div class="select is-fullwidth"> <select ref="category_id" id="category_id" onchange="{filterSubcategory}"> <option each="{inventoryCategories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label" for="class">Subcategory</label> <div class="control"> <div class="select is-fullwidth"> <select ref="sub_category_id" id="sub_category_id" onchange="{filterItem}"> <option each="{filteredSubcategories}" riot-value="{sub_category_id}">{sub_category} </option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label" for="class">Item</label> <div class="control"> <div class="select is-fullwidth"> <select ref="item_id" id="item_id" onkeyup="{addEnter}"> <option each="{filteredItems}" riot-value="{item_id}">{item_name} </option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label">Quantity</label> <input type="text" ref="quantity" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label" for="class">Unit</label> <div class="control"> <div class="select is-fullwidth"> <select ref="unit_id" onkeyup="{addEnter}"> <option each="{inventoryUnits}" riot-value="{unit_id}">{unit} </option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label">Rate</label> <input type="text" ref="rate" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label">Received Form</label> <input type="text" ref="received_from" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-one-third"> <label class="label" for="class">Rack</label> <div class="control"> <div class="select is-fullwidth"> <select ref="rack_id" onkeyup="{addEnter}"> <option each="{inventoryRacks}" riot-value="{rack_id}">{rack_name} </option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label">Remark</label> <input type="text" ref="remark" type="text" class="input" onkeyup="{addEnter}"> </div> <div class="column is-full"> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{add}">{title}</button> </div> </div> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.loading=false
      self.inventory_stock_view='show_inventory_stock_table'
      flatpickr(".date", {
         allowInput: true,
          dateFormat: "d/m/Y",
       })
      self.update()

      self.readInventoryCategory()
      self.readInventoryUnit()
      self.readInventorySubcategory()
      self.readInventoryItem()
      self.readInventoryRack()

    })
  self.on("unmount", function(){
      inventoryCategoryStore.off('read_inventory_category_changed', ReadInventoryCategoryChanged)

      inventorySubcategoryStore.off('read_inventory_subcategory_changed',ReadInventorySubcategoryChanged)
      inventoryUnitStore.off('inventoryUnit_changed', InventoryUnitChanged)
      inventoryRackStore.off('inventoryRack_changed', InventoryRackChanged)

      inventoryStockStore.off('read_inventory_stock_changed', ReadInventoryStockChanged)
      inventoryStockStore.off('add_inventory_stock_changed', AddInventoryStockChanged)
      inventoryStockStore.off('edit_inventory_stock_changed', EditInventoryStockChanged)
      inventoryStockStore.off('delete_inventory_stock_changed', DeleteInventoryStockChanged)
  })

    self.show_inventory_stock=()=>{

       self.inventory_stock_view='show_inventory_stock_form'
    }
    self.close_inventory_stock_form=()=>{
       self.inventory_stock_view='show_inventory_stock_table'
    }

   self.filterSubcategory = () => {
      self.filteredSubcategories = [{}]
      self.filteredSubcategories = self.inventorySubcategories.filter(s => {
        console.log("inside")
       return s.category_id == self.refs.category_id.value

      })
       self.update()
       self.filterItem()
   }

    self.filterItem = () => {
      self.filteredItems = [{}]
      self.filteredItems = self.inventoryItems.filter(s => {
         return s.subcategory_id == self.refs.sub_category_id.value
    })
      self.update()
   }

    self.readInventoryStock = () => {
      self.loading=true
       inventoryStockStore.trigger('read_inventory_stock', self.refs.r_category_id.value)
    }
    self.readInventoryUnit = () => {
       inventoryUnitStore.trigger('read_inventory_unit')
    }
    self.readInventoryRack = () => {
       inventoryRackStore.trigger('read_inventory_rack')
    }

    self.readInventoryCategory = () => {
       inventoryCategoryStore.trigger('read_inventory_category')
    }

    self.readInventorySubcategory = () => {
       inventorySubcategoryStore.trigger('read_inventory_subcategory')
    }

    self.readInventoryItem = () => {
       inventoryItemStore.trigger('read_inventory_item')
    }

    self.add = () => {
      self.received_date=convertDate(self.refs.received_date.value)
        self.category_name = $("#category_id option:selected").text();
        self.subcategory_name = $("#sub_category_id option:selected").text();
        self.item_name = $("#item_id option:selected").text();
      console.log(self.received_date);
      if(!self.refs.category_id.value){
        toastr.info("Please enter category name and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
        inventoryStockStore.trigger('add_inventory_stock', self.received_date, self.refs.category_id.value,self.refs.sub_category_id.value,self.refs.item_id.value,self.refs.rate.value,self.refs.quantity.value,self.refs.unit_id.value,self.refs.received_from.value,self.refs.rack_id.value,self.refs.remark.value,self.category_name, self.subcategory_name,self.item_name)
        }else if(self.title=='Update'){
          console.log('update')
        inventoryStockStore.trigger('edit_inventory_stock', self.received_date, self.refs.category_id.value,self.refs.sub_category_id.value,self.refs.item_id.value,self.refs.rate.value,self.refs.quantity.value,self.refs.unit_id.value,self.refs.received_from.value,self.refs.rack_id.value,self.refs.remark.value, self.edit_id,self.category_name, self.subcategory_name,self.item_name)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.inventoryStocks.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.inventoryStocks.map(ev => {
        if(ev.received_id != e.item.ev.received_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      inventoryStockStore.trigger('delete_inventory_stock', e.item.ev.received_id)
    }

    self.edit = (ev,e) => {
      console.log(ev)
      self.title='Update'
         flatpickr(".date", {
         allowInput: true,
         dateFormat: "d/m/Y",
       })
       self.refs.category_id.value=ev.category_id
       self.filterSubcategory()

       self.refs.sub_category_id.value=ev.sub_category_id
       self.filterItem()

       self.refs.item_id.value=ev.item_id
       self.refs.received_date.value=ev.received_date
       self.refs.item_id.value=ev.item_id
       self.refs.unit_id.value=ev.unit_id
       self.refs.quantity.value=ev.qty
       self.refs.rate.value=ev.rate
       self.refs.received_from.value=ev.received_from
       self.refs.item_id.value=ev.item_id
       self.refs.rack_id.value=ev.rack_id
       self.refs.remark.value=ev.remark
       self.edit_id = ev.received_id
       self.inventory_stock_view='show_inventory_stock_form'
       self.update()
    }

    inventoryStockStore.on('add_inventory_stock_changed',AddInventoryStockChanged)
    function AddInventoryStockChanged(inventoryStocks,category_id){
      self.inventoryStocks=inventoryStocks
      self.refs.r_category_id.value=category_id
      self.title='Create'
      self.refs.received_date.value=''
      self.refs.item_id.value=''
      self.refs.category_id.value=''
      self.refs.sub_category_id.value=''
      self.refs.unit_id.value=''
      self.refs.rate.value=''
      self.refs.received_from.value=''
      self.refs.rack_id.value=''
      self.refs.quantity.value=''
      self.refs.remark.value=''
      self.loading = false
      self.update()

      console.log(self.inventoryStocks)
    }

  inventoryStockStore.on('edit_inventory_stock_changed',EditInventoryStockChanged)
    function EditInventoryStockChanged(inventoryStocks){
      console.log(inventoryStocks)
      self.title='Create'
      self.refs.category_id.value=''
      self.refs.sub_category_id.value=''
      self.refs.received_date.value=''
      self.refs.item_id.value=''
      self.refs.unit_id.value=''
      self.refs.rate.value=''
      self.refs.received_from.value=''
      self.refs.rack_id.value=''
      self.refs.quantity.value=''
      self.refs.remark.value=''
      self.loading = false
      self.inventoryStocks = inventoryStocks
      self.update()

    }

    inventoryStockStore.on('delete_inventory_stock_changed',DeleteInventoryStockChanged)
    function DeleteInventoryStockChanged(inventoryStocks){
      console.log(inventoryStocks)
      self.title='Create'
      self.loading = false
      self.inventoryStocks = inventoryStocks
      self.update()

      console.log(self.inventoryStocks)
    }

    inventoryCategoryStore.on('read_inventory_category_changed',ReadInventoryCategoryChanged)
    function ReadInventoryCategoryChanged(inventoryCategories){
      console.log(inventoryCategories)
      self.title='Create'
      self.loading = false
      self.inventoryCategories = inventoryCategories
      self.refs.sub_category_id.value = ''

      self.refs.category_id.value = ''
      self.refs.item_id.value = ''
      self.update()
      console.log(self.inventoryCategories)
       self.readInventoryStock();
    }
    inventoryUnitStore.on('inventoryUnit_changed',InventoryUnitChanged)
    function InventoryUnitChanged(inventoryUnits){
      console.log(inventoryUnits)
      self.title='Create'

      self.loading = false
      self.inventoryUnits = inventoryUnits

      self.update()
      console.log(self.inventoryUnits)
    }
     inventoryRackStore.on('inventoryRack_changed',InventoryRackChanged)
    function InventoryRackChanged(inventoryRacks){
      console.log(inventoryRacks)
      self.title='Create'

      self.loading = false
      self.inventoryRacks = inventoryRacks

      self.update()
      console.log(self.inventoryRacks)
    }
  inventorySubcategoryStore.on('read_inventory_subcategory_changed',ReadInventorySubcategoryChanged)
    function ReadInventorySubcategoryChanged(inventorySubcategories){
      console.log(inventorySubcategories)
      self.title='Create'
      self.loading = false
      self.inventorySubcategories = inventorySubcategories
      self.refs.sub_category_id.value = ''

      self.refs.item_id.value = ''
      self.refs.category_id.value = ''
      self.update()
      console.log(self.inventorySubcategories)
    }

   inventoryItemStore.on('read_inventory_item_changed',ReadInventoryItemChanged)
    function ReadInventoryItemChanged(inventoryItems){
      console.log(inventoryItems)
      self.title='Create'
      self.loading = false
      self.inventoryItems = inventoryItems
      self.refs.sub_category_id.value = ''

      self.refs.item_id.value = ''
      self.refs.category_id.value = ''
      self.update()
      console.log(self.inventoryItems)
    }
    inventoryStockStore.on('read_inventory_stock_changed',ReadInventoryStockChanged)
    function ReadInventoryStockChanged(inventoryStocks){
      console.log(inventoryStocks)
      self.title='Create'
      self.loading = false
      self.inventoryStocks = inventoryStocks
      self.update()
      console.log(self.inventoryStocks)
    }

});
riot.tag2('inventory-subcategory', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h4 class="title has-text-centered" style="color: #ff3860;">Inventory Subcategory Details</h4> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Department</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="department" onkeyup="{addEnter}"> <option each="{inventoryDepartments}" riot-value="{department}">{department} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="category_id" id="category_id" onkeyup="{addEnter}"> <option each="{inventoryCategories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Subcategory</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="sub_category" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readInventorySubcategory}" style="margin-right:5px;margin-left:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Department</th> <th>Category</th> <th>Subcategory</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in inventorySubcategories}"> <td>{i+1}</td> <td>{ev.department}</td> <td>{ev.category_name}</td> <td>{ev.sub_category}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ev.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, ev)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.loading=false
      self.update()
      self.readInventoryDepartment()
      self.readInventoryCategory()
      self.readInventorySubcategory()
    })
self.on("unmount", function(){
  inventoryCategoryStore.off('read_inventory_category_changed', ReadInventoryCategoryChanged)
  inventorydepartmentStore.off('read_inventorydepartment_changed', ReadInventoryDepartmentChanged)

  inventorySubcategoryStore.off('add_inventory_subcategory_changed', AddInventorySubcategoryChanged)

inventorySubcategoryStore.off('read_inventory_subcategory_changed',ReadInventorySubcategoryChanged)

  inventorySubcategoryStore.off('edit_inventory_subcategory_changed',EditInventorySubcategoryChanged)

  inventorySubcategoryStore.off('delete_inventory_subcategory_changed',DeleteInventorySubcategoryChanged)
})

    self.readInventoryDepartment = () => {
       inventorydepartmentStore.trigger('read_inventorydepartment')
    }

    self.readInventoryCategory = () => {
       inventoryCategoryStore.trigger('read_inventory_category')
    }

    self.readInventorySubcategory = () => {
      self.loading=true
       inventorySubcategoryStore.trigger('read_inventory_subcategory')
    }

     self.add = () => {
      if(!self.refs.department.value){
        toastr.info("Please enter department and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
         self.category_name = $("#category_id option:selected").text();
        inventorySubcategoryStore.trigger('add_inventory_subcategory', self.refs.department.value,
           self.refs.category_id.value,self.refs.sub_category.value, self.category_name)
        }else if(self.title=='Update'){
       self.category_name = $("#category_id option:selected").text();
        inventorySubcategoryStore.trigger('edit_inventory_subcategory', self.refs.department.value,
           self.refs.category_id.value, self.refs.sub_category.value, self.edit_id, self.category_name)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.inventorySubcategories.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.inventorySubcategories.map(ev => {
        if(ev.sub_category_id != e.item.ev.sub_category_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      inventorySubcategoryStore.trigger('delete_inventory_subcategory', e.item.ev.sub_category_id)
    }

    self.edit = (ev,e) => {
      console.log(ev)
      self.title='Update'
      document.getElementById("category_id").focus()
      self.refs.category_id.value = ev.category_id
      self.refs.department.value = ev.department
      self.refs.sub_category.value = ev.sub_category
      self.edit_id = ev.sub_category_id
    }

    inventorySubcategoryStore.on('add_inventory_subcategory_changed',AddInventorySubcategoryChanged)
    function AddInventorySubcategoryChanged(inventorySubcategories){
      console.log(inventorySubcategories)
      self.title='Create'
      self.refs.category_id.value = ''
      self.refs.department.value = ''
      self.refs.sub_category.value = ''
      self.loading = false
      self.inventorySubcategories = inventorySubcategories
      self.update()

      console.log(self.inventorySubcategories)
    }

  inventorySubcategoryStore.on('edit_inventory_subcategory_changed',EditInventorySubcategoryChanged)
    function EditInventorySubcategoryChanged(inventorySubcategories){
      console.log(inventorySubcategories)
      self.title='Create'
      self.refs.category_id.value = ''
      self.refs.department.value = ''
      self.refs.sub_category.value = ''
      self.loading = false
      self.inventorySubcategories = inventorySubcategories
      self.update()

    }

    inventorySubcategoryStore.on('delete_inventory_subcategory_changed',DeleteInventoryCategoryChanged)
    function DeleteInventoryCategoryChanged(inventorySubcategories){
      console.log(inventorySubcategories)
      self.title='Create'
      self.refs.sub_category.value = ''
      self.refs.department.value = ''
      self.refs.category_id.value = ''
      self.loading = false
      self.inventorySubcategories = inventorySubcategories
      self.update()
      self.readInventorySubcategory()
      console.log(self.inventorySubcategories)
    }

    inventoryCategoryStore.on('read_inventory_category_changed',ReadInventoryCategoryChanged)
    function ReadInventoryCategoryChanged(inventoryCategories){
      console.log(inventoryCategories)
      self.title='Create'
      self.loading = false
      self.inventoryCategories = inventoryCategories
      self.refs.sub_category.value = ''
      self.refs.department.value = ''
      self.refs.category_id.value = ''
      self.update()
      console.log(self.inventoryCategories)
    }
  inventorySubcategoryStore.on('read_inventory_subcategory_changed',ReadInventorySubcategoryChanged)
    function ReadInventorySubcategoryChanged(inventorySubcategories){
      console.log(inventorySubcategories)
      self.title='Create'
      self.loading = false
      self.inventorySubcategories = inventorySubcategories
      self.refs.sub_category.value = ''
      self.refs.department.value = ''
      self.refs.category_id.value = ''

      self.update()
      console.log(self.inventorySubcategories)
    }

    inventorydepartmentStore.on('read_inventorydepartment_changed',ReadInventoryDepartmentChanged)
    function ReadInventoryDepartmentChanged(inventoryDepartments){
      console.log(inventoryDepartments)
      self.inventoryDepartments = inventoryDepartments
      self.loading=false
      self.update()
      console.log(self.inventoryDepartments)
    }

});
riot.tag2('inventory-summary-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h4 class="title has-text-centered" style="color: #ff3860;">Item Wise Summary Report <br> <span style="font-size:18px"> From: {start_date} To: {end_date}</span></h4> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="start_date" placeholder="" tabindex="0" type="text" style="width:120px"> </div> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="input date flatpickr-input form-control input" ref="end_date" placeholder="" tabindex="0" type="text" style="width:120px"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" style="margin-left:-20px" onclick="{getInventorySummaryReport}">GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"><i class="fas fa-print"></i></span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{getInventorySummaryReport}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Item</th> <th>Opening Balance</th> <th>Total Received</th> <th>Total Issued</th> <th>Total Sold</th> <th>Closing Balance</th> </tr> </thead> <tbody> <tr each="{ev, i in inventorySummaryReports}"> <td>{i+1}</td> <td>{ev.item_name}</td> <td>{ev.opening_balance}</td> <td>{ev.total_received}</td> <td>{ev.total_issued}</td> <td>{ev.total_sold}</td> <td>{ev.closing_balance}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      flatpickr(".date", {
         allowInput: true,
         altFormat: "d/m/Y",
         dateFormat: "Y-m-d",
       })

       self.update()
    })
  self.on("unmount", function(){
        inventoryReportStore.off('read_inventory_summary_report_changed',ReadInventorySummaryReportChanged)
  })

  self.getInventorySummaryReport = () => {
       self.start_date=self.refs.start_date.value,
       self.end_date=self.refs.end_date.value
       self.loading=true
       inventoryReportStore.trigger('read_inventory_summary_report',self.refs.start_date.value,self.refs.end_date.value)
  }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

    inventoryReportStore.on('read_inventory_summary_report_changed',ReadInventorySummaryReportChanged)
    function ReadInventorySummaryReportChanged(inventorySummaryReports){
      console.log(inventorySummaryReports)
      self.title='Create'
      self.loading = false
      self.inventorySummaryReports = inventorySummaryReports
      self.update()
      console.log(self.inventorySummaryReports)
    }

});
riot.tag2('inventory-unit', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Inventory Unit Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Unit</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="unit" id="unit" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readUnit}" style="margin-left:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Unit</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in inventoryUnits}"> <td>{i+1}</td> <td>{c.unit}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, c)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	   var self = this
      self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readInventoryUnit()
    })
    self.on("unmount", function(){
      inventoryUnitStore.off('inventoryUnit_changed', InventoryUnitChanged)
    })

    self.readInventoryUnit = () => {
       inventoryUnitStore.trigger('read_inventory_unit')
    }

     self.add = () => {
      if(!self.refs.unit.value){
        toastr.info("Please enter Unit and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('creaadd_inventory_unit')
          inventoryUnitStore.trigger('add_inventory_unit', self.refs.unit.value)
        }else if(self.title=='Update'){
          console.log('update')
          inventoryUnitStore.trigger('edit_inventory_unit', self.refs.unit.value,
            self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.inventoryUnits.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.inventoryUnits.map(c => {
        if(c.unit_id != e.item.c.unit_id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      inventoryUnitStore.trigger('delete_inventory_unit', e.item.c.unit_id)
    }

    self.edit = (c,e) => {
      console.log(c)
      self.title='Update'
      document.getElementById("unit").focus()
      self.refs.unit.value = c.unit
      self.edit_id = c.unit_id
    }

    inventoryUnitStore.on('inventoryUnit_changed',InventoryUnitChanged)
    function InventoryUnitChanged(inventoryUnits){
      console.log(inventoryUnits)
      self.title='Create'
      self.refs.unit.value = ''
      self.loading = false
      self.inventoryUnits = inventoryUnits

      self.update()
      console.log(self.inventoryUnits)
    }

});
riot.tag2('issue-certificate', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid no-print" show="{view_print ==\'hide_print\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Print Certificate</h2> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" onchange="{getReadSection}"> <option>Choose Standard</option> <option each="{standards}" riot-value="{standard_id}">{standard} </option> </select> </div> </div> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="section_id"> <option>Choose Section</option> <option each="{readfilteredSections}" riot-value="{section_id}">{section} </option> </select> </div> </div> </div> <div class="column is-narrow"> <button class="button is-danger has-text-weight-bold" onclick="{readStudent}">GO </button> </div> </div> </div> <div style="height:270px; overflow-x: scroll; overflow-y:scroll ;border:solid #000 3px;"> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th style="width:40px">#</th> <th style="width:40px"> <input type="checkbox" id="checkStudent" onclick="{selectAll}"> </th> <th>Enroll no</th> <th>Roll no</th> <th>Name</th> </tr> </thead> <tbody> <tr each="{st, i in students}"> <td>{i+1}</td> <td> <input type="checkbox" class="id_check_box" checked="{st.done}" id="{\'StudentId\' + st.student_id}" onclick="{selectStudent.bind(this,st)}"> </td> <td>{st.enroll_number}</td> <td>{st.roll_number}</td> <td>{st.student_name}</td> </tr> </tbody> </table> </div> <div class="columns" style="margin-top:5px"> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="c_id"> <option>Choose Certificate</option> <option each="{certificates}" riot-value="{c_id}">{certificate_name} </option> </select> </div> </div> </div> <div class="column is-narrow"> <div class="control"> <button class="button" onclick="{printOriginalCertificate}">Print</button> <button class="button" onclick="{printDuplicateCertificate}">Duplicate Print</button> </div> </div> </div> </section> <section> <div show="{view_print ==\'show_print\'}" each="{st, i in certificates}"> <raw content="{st.certificate_text}"></raw> </div> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.report_view = 'show_old_text_box'
    	self.view_print='hide_print'
    	self.readStandard()
    	self.readSection()
    	self.readCertificate()
    	self.role = getCookie('role')

        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
      studentStore.off('read_standard_changed',StandardChanged)
      studentStore.off('read_section_changed',SectionChanged)
      certificateStore.off('read_student_change',ReadStudentChanged)
      certificateStore.off('read_certificate_change',ReadCertificateChanged)
      certificateStore.off('print_certificate_change',PrintCertificateChanged)
    })

    self.selectAll = () => {
    	if($('#checkStudent').is(":checked")){
    		self.students.map(i=>{
	          i.done = true;
	          $('StudentId'+i.student_id).prop('checked', true);

	        })
    	}else{
    		self.students.map(i=>{
	          i.done = false;
	          $('StudentId'+i.student_id).prop('checked', false);
	          self.student_id = i.student_id;
            console.log(self.student_id)
	        })
    	}
      console.log(self.students)
    }

     self.selectStudent = (item,event) => {
    	item.done=!event.item.st.done
        self.student_id = item.student_id;
        console.log(self.student_id)
    }

     self.viewTable = () => {
    	if($('#checkTable').is(":checked")){
	        self.report_view = 'show_text_box'
    	}else{
	        self.report_view = 'show_old_text_box'
    	}
    }

	self.readCertificate = () => {
       certificateStore.trigger('read_certificate')
    }

    self.readStandard = () => {
       studentStore.trigger('read_standard')
    }

    self.readSection = () => {
       studentStore.trigger('read_section')
    }

    self.getReadSection = () => {
    	self.readfilteredSections = []
    	self.readfilteredSections = self.sections.filter(s => {
    		return s.standard_id == self.refs.standard_id.value
    	})
    }
    self.readStudent= () => {
    	self.loading=true
       certificateStore.trigger('read_student',self.refs.standard_id.value,self.refs.section_id.value)
    }

    self.printOriginalCertificate=()=>{
    	var now = new Date();
		var jsonDate = now.toJSON();
		var dt = new Date(jsonDate);
    	var certificateKey = "MCKV/" + dt.getHours() + dt.getDay() + dt.getMinutes() + dt.getMonth() + dt.getSeconds() + dt.getFullYear();
    	console.log("Key")
    	console.log(certificateKey)

    	let studentData=[]
        self.students.map( q => {
        	let a={}
	        if(q.done==true){
	        	a.student_id=q.student_id
	            studentData.push(a)
	          }
        })
        console.log(studentData)
        self.c_type='O'
         self.view_print='show_print'
        certificateStore.trigger('add_issue_certificate', studentData,self.refs.c_id.value,self.refs.standard_id.value,self.refs.section_id.value,certificateKey,self.c_type)

    }

    certificateStore.on('read_certificate_changed',ReadCertificateChanged)
    function ReadCertificateChanged(certificates){
      console.log(certificates)
      self.certificates = certificates

      self.update()
    }

    certificateStore.on('print_certificate_changed',PrintCertificateChanged)
    function PrintCertificateChanged(){
      console.log()
      self.certificates.map(i=>{
	      if(i.c_id==self.refs.c_id.value){
	      	self.certificate_text=i.certificate_text
		      var str=self.certificate_text
              var  res1 = str.replace(/|name|/, "Tarique")

		       console.log(res1)
		      console.log("inside chnage method")

	      }
      })

      self.update()
    }

   studentStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()
    }

    studentStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections
      self.update()
      self.getReadSection()
    }
    certificateStore.on('read_student_change',ReadStudentChanged)
    function ReadStudentChanged(students){

      self.title='Create'
      self.loading = false
      self.students = students
      self.students.map(i=>{
	      i.done = false;
      })
      self.update()

    }

});
riot.tag2('issued-certificate', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h4 class="title has-text-centered" style="color: #ff3860;">Issued Certificate Details</h4> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" onchange="{getReadSection}" onkeyup="{addEnter}"> <option>Choose Standard</option> <option each="{standards}" riot-value="{standard_id}">{standard} </option> </select> </div> </div> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="section_id" onkeyup="{addEnter}"> <option>Choose Section</option> <option each="{readfilteredSections}" riot-value="{section_id}">{section} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readIssuedCertificateStudent}">GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i></span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readNewStudentCategoryReport}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <thead> <tr> <th style="width:40px">#</th> <th>Student Name</th> <th>Certiifcate Key</th> <th>Class</th> <th>Certificate</th> <th>Type</th> </tr> </thead> <tbody> <tr each="{st, i in issuedCertificates}"> <td>{i+1}</td> <td>{st.name}</td> <td>{st.c_key}</td> <td>{st.standard}</td> <td>{st.certificate_name}</td> <td>{st.type}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.report_view = 'show_old_text_box'
    	self.readStandard()
    	self.readSection()
    	self.role = getCookie('role')

        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
      studentStore.off('read_standard_changed',StandardChanged)
      studentStore.off('read_section_changed',SectionChanged)
      certificateStore.off('read_issued_certificate_change',ReadIssuedCertificateChanged)
    })

    self.readStandard = () => {
       studentStore.trigger('read_standard')
    }

    self.readSection = () => {
       studentStore.trigger('read_section')
    }

    self.getReadSection = () => {
    	self.readfilteredSections = []
    	self.readfilteredSections = self.sections.filter(s => {
    		return s.standard_id == self.refs.standard_id.value
    	})
    }
     self.addEnter = (e) => {
      if(e.which == 13){
        self.readIssuedCertificateStudent()
      }
    }
    self.readIssuedCertificateStudent= () => {
    	self.loading=true
       certificateStore.trigger('read_issued_certificate',self.refs.standard_id.value,self.refs.section_id.value)
    }

    certificateStore.on('read_issued_certificate_change',ReadIssuedCertificateChanged)
    function ReadIssuedCertificateChanged(issuedCertificates){
      console.log(issuedCertificates)
      self.loading=false
      self.issuedCertificates = issuedCertificates
      self.update()
    }

   studentStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()
    }

    studentStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections
      self.update()
      self.getReadSection()
    }

});
riot.tag2('issued-letter', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Month</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="monthList" id="monthList"> <option value="1">January</option> <option value="2">February</option> <option value="3">March</option> <option value="4">April</option> <option value="5">May</option> <option value="6">June</option> <option value="7">July</option> <option value="8">August</option> <option value="9">September</option> <option value="10">October</option> <option value="11">November</option> <option value="12">December</option> </select> </div> </div> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{getLetterStudent}"> GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Issued Letter Report</p> <p class="has-text-centered">Session: {sessionName}</p> <p class="has-text-centered">Month: {selecteMonth}</p> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th class="slno">#</th> <th>Enrol No.</th> <th>Student\'s Name</th> <th>Class</th> <th>Issued Date</th> <th>Letter Key</th> <th>Letter</th> <th>Issued by</th> </tr> </thead> <tbody> <tr each="{cd, i in letter_students}"> <td>{i + 1}</td> <td>{cd.enroll_number}</td> <td>{cd.name}</td> <td>{cd.standard}</td> <td>{cd.issue_date}</td> <td>{cd.letter_key}</td> <td>{cd.letter_name}</td> <td>{cd.modified_by}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.role = getCookie('role')

      self.update()

    })
    self.on("unmount", function(){
      feesReportStore.off('read_fees_letter_changed',IssuedLetterChanged)
    })

    self.getLetterStudent = () =>{
      if(self.refs.monthList.value){
        self.loading = true
        feesReportStore.trigger('read_issued_fees_letter', self.refs.monthList.value)
      }else{
        toastr.info("Please select a month")
      }
    }

    feesReportStore.on('read_fees_letter_changed',IssuedLetterChanged)
    function IssuedLetterChanged(letter_students,session_name){
    	console.log("letter_students")
       self.letter_students = letter_students
       self.sessionName = session_name
       self.selectedMonth = $("#monthList option:selected").text()
       self.loading = false
       self.update()
    }

});
riot.tag2('item', '<section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Item Management Console</h2> <div class="box"> <div class="columns"> <div class="column is-half"> <div class="field"> <label class="label" for="role">Item</label> <div class="control"> <input class="input" type="text" ref="addItemInput" onkeyup="{addEnter}"> </div> </div> </div> <div class="column is-narrow"> <div class="field"> <div class="control"> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{add}">{title}</button> </div> </div> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Item</th> <th></th> </tr> </thead> <tbody> <tr each="{r, i in Items}"> <td>{i+1}</td> <td>{r.item_name}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{r.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, r)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{r.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readItems()
    })
    self.on("unmount", function(){
      itemStore.off('items_changed', ItemsChanged)
    })

    self.readItems = () => {
       itemStore.trigger('read_items')
    }

     self.add = () => {
      if(!self.refs.addItemInput.value){
        toastr.info("Please enter Item and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          itemStore.trigger('add_item', self.refs.addItemInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          itemStore.trigger('edit_item', self.refs.addItemInput.value,
            self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.Items.map(r => {
          r.confirmDelete = false
          r.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.Items.map(r => {
        if(r.item_id != e.item.r.item_id){
          r.confirmDelete = false
        }else{
          r.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      itemStore.trigger('delete_item', e.item.r.item_id)
    }

    self.edit = (r,e) => {
      console.log(r)
      self.title='Update'
      self.refs.addItemInput.value = r.item_name
      self.edit_id = r.item_id
    }

    itemStore.on('items_changed',ItemsChanged)
    function ItemsChanged(items){
      console.log(items)
      self.title='Create'
      self.refs.addItemInput.value = ''
      self.loading = false
      self.Items = items
      self.update()
      console.log(self.Items)
    }

});
riot.tag2('level', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Level Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Level</label> </div> <div class="column is-narrow"> <input class="input form-control input" id="addLevelInput" ref="addLevelInput" tabindex="0" type="text" onkeyup="{addEnter}"> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readLevel}" style="margin-right:2px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>#</th> <th>Level</th> <th></th> </tr> </thead> <tbody> <tr each="{d, i in levels}"> <td>{i + 1}</td> <td>{d.level}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{d.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, d)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{d.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readLevel()
    })

     self.on("unmount", function(){
      levelStore.off('level_changed', LevelChanged)
    })

    self.readLevel = () => {
      self.loading=true
       levelStore.trigger('read_level')
    }

     self.add = () => {
      if(!self.refs.addLevelInput.value){
        toastr.info("Please enter Levle and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          levelStore.trigger('add_level', self.refs.addLevelInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          levelStore.trigger('edit_level', self.refs.addLevelInput.value,
            self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.levels.map(d => {
          d.confirmDelete = false
          d.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.levels.map(d => {
        if(d.level_id != e.item.d.level_id){
          d.confirmDelete = false
        }else{
          d.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      levelStore.trigger('delete_level', e.item.d.level_id)
    }

    self.edit = (d,e) => {
      console.log(d)
      self.title='Update'
      self.refs.addLevelInput.value = d.level
      self.edit_id = d.level_id
    }

    levelStore.on('level_changed',LevelChanged)
    function LevelChanged(levels){
      console.log('level_changed1')
      console.log(levels)
      self.title='Create'
      self.refs.addLevelInput.value = ''
      self.loading = false
      self.levels = levels
      self.levels = []
      self.levels = levels
      self.update()
      console.log(self.levels)
      console.log('self.levels')
    }

});
riot.tag2('loading-bar', '<div class="load-bar"> <div class="bar"></div> <div class="bar"></div> <div class="bar"></div> </div>', 'loading-bar .load-bar,[data-is="loading-bar"] .load-bar{ position: fixed; top: 68px; left: 0; width: 100%; height: 6px; background-color: #A5D6A7; } loading-bar .bar,[data-is="loading-bar"] .bar{ content: ""; display: inline; position: absolute; width: 0; height: 100%; left: 50%; text-align: center; } loading-bar .bar:nth-child(1),[data-is="loading-bar"] .bar:nth-child(1){ background-color: #00BCD4; animation: loading 3s linear infinite; } loading-bar .bar:nth-child(2),[data-is="loading-bar"] .bar:nth-child(2){ background-color: #FFEB3B; animation: loading 3s linear 1s infinite; } loading-bar .bar:nth-child(3),[data-is="loading-bar"] .bar:nth-child(3){ background-color: #FF5722; animation: loading 3s linear 2s infinite; } @keyframes loading { from {left: 50%; width: 0;z-index:100;} 33.3333% {left: 0; width: 100%;z-index: 10;} to {left: 0; width: 100%;} }', '', function(opts) {
});
riot.tag2('login', '<div class="login-banner"> <div class="columns is-gapless is-marginless"> <div class="column is-three-fifths is-hidden-mobile" style="height: 100vh;"> <div class="cover_image" style="background-image: url(\'img/classroom.jpg\'); height: 100%;"></div> </div> <div class="column is-two-fifths has-background-white"> <section class="section"> <div class="pad"> <h1 class="title is-spaced has-text-success is-size-1 has-text-weight-bold">Sarathi</h1> <p class="is-size-6 has-text-grey" style="margin-top: -1.5em; margin-bottom: 2em;">School Management simplified!</p> <div class="subtitle">Login</div> <div> <div class="field"> <label class="label" for="username">Username</label> <div class="control"> <input class="input is-medium" id="username" ref="username" type="text" onkeyup="{addEnter}"> </div> </div> <div class="field"> <label class="label" for="user_password">Password</label> <div class="control"> <input class="input is-medium" ref="password" type="password" onkeyup="{addEnter}"> </div> </div> <div class="field"> <label class="label" for="user_role">Role</label> <div class="control"> <div class="select is-fullwidth"> <select ref="role"> <option value="ADMIN">ADMIN</option> <option value="Teacher">Teacher</option> <option value="Class Teacher">Class Teacher</option> <option each="{roles}" riot-value="{role}">{role}</option> </select> </div> </div> </div> <div class="field"> <div class="control"> <button class="button is-danger is-medium" type="submit" onclick="{login}">Submit</button> </div> </div> </div> </div> </section> </div> </div> </div>', '', '', function(opts) {
    var self = this
    self.login_warning = false

    self.on('mount', function() {
      document.getElementById("username").focus()
      self.update()
      self.readRoles()
    })

    self.on("unmount", function(){
      loginStore.off('login_changed', LoginChanged)
      loginStore.off('roles_for_login_changed',RolesChanged)
    })

    self.readRoles = () => {
      loginStore.trigger('read_roles')
    }
    self.addEnter = (e) => {
      if(e.which == 13){
        self.login()
      }
    }

    self.login = (e) => {
      if(!self.refs.username.value){
        toastr.info("Please enter Username and try again")
        return;
      }else  if(!self.refs.password.value){
        toastr.info("Please enter Password and try again")
        return;
      }else if(!self.refs.username.value || !self.refs.password.value){
        self.login_warning = true
      }
      loginStore.trigger('check_login', self.refs.username.value, self.refs.password.value, self.refs.role.value)
    }

    loginStore.on('login_changed',LoginChanged)
    function LoginChanged(role){
      console.log(role)
      console.log("Login Changed");

        if(role == 'ADMIN'){
          route("/setting")
        }else if(role =='Teacher'){
          route("/student-browser")
        }else if(role =='Class Teacher'){
          route("/student-browser")
        }else if(role =='Activity'){
          route("/activity-detail")
        }else if(role =='Career'){
          route("/career-setting/applicant-detail")
        }else if(role =='Mentor'){
         route("/mentor-detail")
        }else if(role =='Store'){
          route("/inventory-stock")
        }else if(role =='Infirmary'){
          route("/infirmary-setting/infirmary-category")
        }else if(role =='Discipline'){
         route("/discipline-detail")
        }else if(role =='Admission'){
         route("/student")
        }
        window.location.reload(true);

    }

    loginStore.on('roles_for_login_changed',RolesChanged)
    function RolesChanged(roles){
        self.roles = roles
        self.update()
    }

});

riot.tag2('main-nav', '<nav class="navbar is-fixed-top is-light no-print" role="navigation" aria-label="main navigation" if="{showAdminNavItems}"> <div class="container is-fluid"> <div class="navbar-brand"> <div class="navbar-item is-size-3 has-text-weight-bold has-text-wight"> Sarathi </div> <div class="navbar-burger burger" data-target="navbarExampleTransparentExample"> <span aria-hidden="true"></span> <span aria-hidden="true"></span> <span aria-hidden="true"></span> </div> </div> <div id="navbarExampleTransparentExample" class="navbar-menu has-text-weight-bold"> <div class="navbar-end"> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Exam</a> <div class="navbar-dropdown"> <a class="navbar-item" href="#/exam-scheme">Exam Scheme</a> <a class="navbar-item" href="#/grade">Grade</a> <a class="navbar-item" href="#/marks-manager">Marks Manager</a> <a class="navbar-item" href="#/marks-entry">Marks Entry</a> <a class="navbar-item" href="#/marks-report/merit-list">Marks Report</a> <a class="navbar-item" href="#/maturity-development">Maturity Development</a> <a class="navbar-item" href="#/result-activation">Result Activation</a> <a class="navbar-item" href="#/physical-fitness">Physical Fitness</a> <a class="navbar-item" href="#/subject-group-map">Subject Group Map</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Admin</a> <div class="navbar-dropdown"> <a class="navbar-item" href="#/id-card">ID Card</a> <a class="navbar-item {active: selected_nav_item == \'certificate\'}" href="#/certificate/issue-certificate">Certificate</a> <a class="navbar-item " href="#/birthday">Bithday</a> <a class="navbar-item " href="#/occupation-report">Occupation Report</a> <a class="navbar-item" href="#/id-signature">Id Signature</a> <a class="navbar-item" href="#/student-assign-house">Assign House</a> <a class="navbar-item" href="#/student-group-student">Group Student</a> <a class="navbar-item" href="#/student-assign-subject">Assign Subject</a> <a class="navbar-item" href="#/student-assign-section">Assign Section</a> <a class="navbar-item" href="#/student-result-activation">Result Activation</a> <a class="navbar-item {active: selected_nav_item == \'alumni-setting\'}" href="#/alumni-setting/alumni">Alumni</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Time Table</a> <div class="navbar-dropdown"> <a class="navbar-item" href="#/teacher-time-table">Teacher Time Table</a> <a class="navbar-item" href="#/time-table-substitutation">Time Table Substitutaion</a> <a class="navbar-item" href="#/time-table-report-nav">Reports</a> <a class="navbar-item" href="#/time-table-admin">Admin</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Student</a> <div class="navbar-dropdown"> <a class="navbar-item" href="#/student">Student</a> <a class="navbar-item " href="#/student-search">Search</a> <a class="navbar-item " href="#/student-browser">Browser</a> <a class="navbar-item {active: selected_nav_item == \'admin-report\'}" href="#/admin-report/student-summary-report">Report</a> <a class="navbar-item" href="#/student-withdrawn-student">Withdrawn Student</a> <a class="navbar-item" href="#/promote">Promote Student</a> <a class="navbar-item" href="#/student-login-slip">Login Slip</a> <a class="navbar-item" href="#/student-school-leaving">Student Leaving Certificate</a> <a class="navbar-item" href="#/student-info-update">Student Info Update</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Notification</a> <div class="navbar-dropdown"> <a class="navbar-item " href="#/student-notification">Student Email & Sms</a> <a class="navbar-item" href="#/employee-notification">Employee Email & Sms</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Fees</a> <div class="navbar-dropdown"> <a class="navbar-item {active: selected_nav_item == \'receive-fees\'}" href="#/receive-fees">Receive Fees</a> <a class="navbar-item {active: selected_nav_item == \'fee-bill\'}" href="#/fee-bill/bill">Fee Head</a> <a class="navbar-item {active: selected_nav_item == \'fees-report\'}" href="#/fees-report/month-wise">Reports</a> <a class="navbar-item {active: selected_nav_item == \'scholarship\'}" href="#/scholarship">Scholarship</a> <a class="navbar-item {active: selected_nav_item == \'fees-withdraw\'}" href="#/fees-withdraw">Withdraw</a> <a class="navbar-item {active: selected_nav_item == \'fees-setting\'}" href="#/fees-setting/fine-setting">Setting</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Mentor</a> <div class="navbar-dropdown"> <a class="navbar-item " href="#/mentor-detail">Mentor Detail</a> <a class="navbar-item" href="#/mentor-report">Report</a> <a class="navbar-item {active: selected_nav_item == \'mentor-setting\'}" href="#/mentor-setting/mentor-category">Setting</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Discipline</a> <div class="navbar-dropdown"> <a class="navbar-item " href="#/discipline-detail">Discipline Detail</a> <a class="navbar-item" href="#/discipline-report">Report</a> <a class="navbar-item {active: selected_nav_item == \'discipline-setting\'}" href="#/discipline-setting/discipline-category">Setting</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Activity</a> <div class="navbar-dropdown"> <a class="navbar-item " href="#/activity-detail">Activity Detail</a> <a class="navbar-item" href="#/activity-report">Report</a> <a class="navbar-item {active: selected_nav_item == \'activity-setting\'}" href="#/activity-setting/activity-item">Setting</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Attendance</a> <div class="navbar-dropdown"> <a class="navbar-item " href="#/attendance-entry">Attendance Entry</a> <a class="navbar-item " href="#/daily-attendance">Daily Attendance</a> <a class="navbar-item " href="#/monthly-attendance">Monthly Attendance</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Staff</a> <div class="navbar-dropdown"> <a class="navbar-item " href="#/staff">Staff</a> <a class="navbar-item " href="#/ex-staff">EX-Staff</a> <a class="navbar-item " href="#/browse-staff">Browse</a> <a class="navbar-item " href="#/approve-staff-profile">Approve Profile</a> <a class="navbar-item" href="#/staff-gender-report">Staff By Gender Report</a> <a class="navbar-item" href="#/staff-type-report">Staff By Type Report</a> <a class="navbar-item {active: selected_nav_item == \'career-setting\'}" href="#/career-setting/applicant-detail">Career</a> </div> </div> <div class="navbar-end"> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Master</a> <div class="navbar-dropdown"> <a class="navbar-item {active: selected_nav_item == \'master\'}" href="#/master/employee-type">Setting</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Infirmary</a> <div class="navbar-dropdown"> <a class="navbar-item {active: selected_nav_item == \'infirmary-setting\'}" href="#/infirmary-setting/infirmary-category">Setting</a> <a class="navbar-item {active: selected_nav_item == \'infirmary\'}" href="#/infirmary/infirmary-student">Infirmary Detail</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Inventory</a> <div class="navbar-dropdown"> <a class="navbar-item {active: selected_nav_item == \'inventory-setting\'}" href="#/inventory-setting/inventory-rack">Setting</a> <a class="navbar-item" href="#/inventory-stock">Stock Inwards Entry</a> <a class="navbar-item" href="#/inventory-issue">Issue</a> <a class="navbar-item" href="#/inventory-sale">Sale</a> <a class="navbar-item" href="#/inventory-returnable">Returnable</a> <a class="navbar-item {active: selected_nav_item == \'inventory-report\'}" href="#/inventory-report/inventory-received-goods-report">Report</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item" style="font-size: 20px;"><i class="fa fa-caret-down" aria-hidden="true"></i></a> <div class="navbar-dropdown"> <a class="navbar-item has-text-danger" onclick="{logout}"><i class="fas fa-power-off"></i></a> <a class="navbar-item" onclick="{changePassword}"><i class="fas fa-key"></i></a> </div> </div> </div> </div> </div> </nav> <nav class="navbar is-fixed-top is-light no-print" role="navigation" aria-label="main navigation" if="{showTeacherNavItems}"> <div class="container is-fluid"> <div class="navbar-brand"> <div class="navbar-item is-size-3 has-text-weight-bold has-text-wight"> Sarathi </div> <div class="navbar-burger burger" data-target="navbarExampleTransparentExample"> <span aria-hidden="true"></span> <span aria-hidden="true"></span> <span aria-hidden="true"></span> </div> </div> <div id="navbarExampleTransparentExample" class="navbar-menu has-text-weight-bold"> <div class="navbar-end"> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">My Class</a> <div class="navbar-dropdown"> <a class="navbar-item" href="#/student-browser">Student</a> <a class="navbar-item" href="#/marks-entry">Marks Entry</a> <a class="navbar-item" href="#/consolidate-tabulation-sheet">Marks Report</a> <a class="navbar-item" href="#/maturity-development">Home Work</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Staff Profile</a> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item" href="#/teacher-time-table">Teacher Time Table</a> </div> <a class="navbar-item has-text-danger" onclick="{logout}"><i class="fas fa-power-off"></i></a> </div> </div> </div> </nav> <nav class="navbar is-fixed-top is-light no-print" role="navigation" aria-label="main navigation" if="{showClassTeacherNavItems}"> <div class="container is-fluid"> <div class="navbar-brand"> <div class="navbar-item is-size-3 has-text-weight-bold has-text-wight"> Sarathi </div> </div> <div id="navbarExampleTransparentExample" class="navbar-menu has-text-weight-bold"> <div class="navbar-end"> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">My Class</a> <div class="navbar-dropdown"> <a class="navbar-item" href="#/student-browser">Student</a> <a class="navbar-item" href="#/attendance-entry">Mark Attendance</a> <a class="navbar-item" href="#/daily-attendance">Attendance Report</a> <a class="navbar-item" href="#/marks-manager">Marks Manager</a> <a class="navbar-item" href="#/marks-entry">Marks Entry</a> <a class="navbar-item" href="#/marks-report/merit-list">Marks Report</a> <a class="navbar-item" href="#/class-holiday">Class Holiday</a> <a class="navbar-item" href="#/student-school-leaving">School Leaving</a> <a class="navbar-item" href="#/maturity-development">Maturity Development</a> <a class="navbar-item" href="#/physical-fitness">Physical Fitness</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item" href="#/staff-profile">Staff Profile</a> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item" href="#/teacher-time-table">Teacher Time Table</a> </div> <a class="navbar-item has-text-danger" onclick="{logout}"><i class="fas fa-power-off"></i></a> </div> </div> </div> </nav> <nav class="navbar is-fixed-top is-light no-print" role="navigation" aria-label="main navigation" if="{showInventoryNavItems}"> <div class="container is-fluid"> <div class="navbar-brand"> <div class="navbar-item is-size-3 has-text-weight-bold has-text-wight"> Sarathi </div> <div class="navbar-burger burger" data-target="navbarExampleTransparentExample"> <span aria-hidden="true"></span> <span aria-hidden="true"></span> <span aria-hidden="true"></span> </div> </div> <div id="navbarExampleTransparentExample" class="navbar-menu has-text-weight-bold"> <div class="navbar-end"> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Inventory</a> <div class="navbar-dropdown"> <a class="navbar-item {active: selected_nav_item == \'inventory-setting\'}" href="#/inventory-setting/inventory-rack">Setting</a> <a class="navbar-item" href="#/inventory-stock">Stock Inwards Entry</a> <a class="navbar-item" href="#/inventory-issue">Issue</a> <a class="navbar-item" href="#/inventory-sale">Sale</a> <a class="navbar-item" href="#/inventory-returnable">Returnable</a> <a class="navbar-item {active: selected_nav_item == \'inventory-report\'}" href="#/inventory-report/inventory-received-goods-report">Report</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item" href="#/staff-profile">Staff Profile</a> </div> <a class="navbar-item has-text-danger" onclick="{logout}"><i class="fas fa-power-off"></i></a> </div> </div> </div> </nav> <nav class="navbar is-fixed-top is-light no-print" role="navigation" aria-label="main navigation" if="{showInfirmaryNavItems}"> <div class="container is-fluid"> <div class="navbar-brand"> <div class="navbar-item is-size-3 has-text-weight-bold has-text-wight"> Sarathi </div> <div class="navbar-burger burger" data-target="navbarExampleTransparentExample"> <span aria-hidden="true"></span> <span aria-hidden="true"></span> <span aria-hidden="true"></span> </div> </div> <div id="navbarExampleTransparentExample" class="navbar-menu has-text-weight-bold"> <div class="navbar-end"> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Infirmary</a> <div class="navbar-dropdown"> <a class="navbar-item {active: selected_nav_item == \'infirmary-setting\'}" href="#/infirmary-setting/infirmary-category">Setting</a> <a class="navbar-item {active: selected_nav_item == \'infirmary\'}" href="#/infirmary/infirmary-student">Infirmary Detail</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item" href="#/staff-profile">Staff Profile</a> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item" shape="font-size: 20px;"><i class="fa fa-caret-down" aria-hidden="true"></i></a> <div class="navbar-dropdown"> <a class="navbar-item has-text-danger" onclick="{logout}"><i class="fas fa-power-off"></i></a> <a class="navbar-item" onclick="{changePassword}"><i class="fas fa-key"></i></a> </div> </div> </div> </div> </div> </nav> <nav class="navbar is-fixed-top is-light no-print" role="navigation" aria-label="main navigation" if="{showActivityItems}"> <div class="container is-fluid"> <div class="navbar-brand"> <div class="navbar-item is-size-3 has-text-weight-bold has-text-wight"> Sarathi </div> <div class="navbar-burger burger" data-target="navbarExampleTransparentExample"> <span aria-hidden="true"></span> <span aria-hidden="true"></span> <span aria-hidden="true"></span> </div> </div> <div id="navbarExampleTransparentExample" class="navbar-menu has-text-weight-bold"> <div class="navbar-end"> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Activity</a> <div class="navbar-dropdown"> <a class="navbar-item " href="#/activity-detail">Activity Detail</a> <a class="navbar-item" href="#/activity-report">Report</a> <a class="navbar-item {active: selected_nav_item == \'activity-setting\'}" href="#/activity-setting/activity-item">Setting</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Staff Profile</a> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item" style="font-size:20px;"><i class="fa fa-caret-down" aria-hidden="true"></i></a> <div class="navbar-dropdown"> <a class="navbar-item has-text-danger" onclick="{logout}"><i class="fas fa-power-off"></i></a> <a class="navbar-item" onclick="{changePassword}"><i class="fas fa-key"></i></a> </div> </div> </div> </div> </div> </nav> <nav class="navbar is-fixed-top is-light no-print" role="navigation" aria-label="main navigation" if="{showCareerItems}"> <div class="container is-fluid"> <div class="navbar-brand"> <div class="navbar-item is-size-3 has-text-weight-bold has-text-wight"> Sarathi </div> <div class="navbar-burger burger" data-target="navbarExampleTransparentExample"> <span aria-hidden="true"></span> <span aria-hidden="true"></span> <span aria-hidden="true"></span> </div> </div> <div id="navbarExampleTransparentExample" class="navbar-menu has-text-weight-bold"> <div class="navbar-end"> <div class="navbar-item has-dropdown is-hoverable"> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item {active: selected_nav_item == \'career-setting\'}" href="#/career-setting/applicant-detail">Career <a class="navbar-item">Staff Profile</a> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item" style="font-size: 20px;"><i class="fa fa-caret-down" aria-hidden="true"></i></a> <div class="navbar-dropdown"> <a class="navbar-item has-text-danger" onclick="{logout}"><i class="fas fa-power-off"></i></a> <a class="navbar-item" onclick="{changePassword}"><i class="fas fa-key"></i></a> </div> </div> </div> </div> </div> </nav> <nav class="navbar is-fixed-top is-light no-print" role="navigation" aria-label="main navigation" if="{showMentorItems}"> <div class="container is-fluid"> <div class="navbar-brand"> <div class="navbar-item is-size-3 has-text-weight-bold has-text-wight"> Sarathi </div> <div class="navbar-burger burger" data-target="navbarExampleTransparentExample"> <span aria-hidden="true"></span> <span aria-hidden="true"></span> <span aria-hidden="true"></span> </div> </div> <div id="navbarExampleTransparentExample" class="navbar-menu has-text-weight-bold"> <div class="navbar-end"> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Mentor</a> <div class="navbar-dropdown"> <a class="navbar-item " href="#/mentor-detail">Mentor Detail</a> <a class="navbar-item" href="#/mentor-report">Report</a> <a class="navbar-item {active: selected_nav_item == \'mentor-setting\'}" href="#/mentor-setting/mentor-category">Setting</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Staff Profile</a> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item" style="font-size: 20px;"><i class="fa fa-caret-down" aria-hidden="true"></i></a> <div class="navbar-dropdown"> <a class="navbar-item has-text-danger" onclick="{logout}"><i class="fas fa-power-off"></i></a> <a class="navbar-item" onclick="{changePassword}"><i class="fas fa-key"></i></a> </div> </div> </div> </div> </div> </nav> <nav class="navbar is-fixed-top is-light no-print" role="navigation" aria-label="main navigation" if="{showDisciplineItems}"> <div class="container is-fluid"> <div class="navbar-brand"> <div class="navbar-item is-size-3 has-text-weight-bold has-text-wight"> Sarathi </div> <div class="navbar-burger burger" data-target="navbarExampleTransparentExample"> <span aria-hidden="true"></span> <span aria-hidden="true"></span> <span aria-hidden="true"></span> </div> </div> <div id="navbarExampleTransparentExample" class="navbar-menu has-text-weight-bold"> <div class="navbar-end"> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Discipline</a> <div class="navbar-dropdown"> <a class="navbar-item " href="#/discipline-detail">Discipline Detail</a> <a class="navbar-item" href="#/discipline-report">Report</a> <a class="navbar-item {active: selected_nav_item == \'discipline-setting\'}" href="#/discipline-setting/discipline-category">Setting</a> </div> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item" href="#/student">Student</a> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Staff Profile</a> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item" style="font-size: 20px;"><i class="fa fa-caret-down" aria-hidden="true"></i></a> <div class="navbar-dropdown"> <a class="navbar-item has-text-danger" onclick="{logout}"><i class="fas fa-power-off"></i></a> <a class="navbar-item" onclick="{changePassword}"><i class="fas fa-key"></i></a> </div> </div> </div> </div> </div> </nav> <nav class="navbar is-fixed-top is-light no-print" role="navigation" aria-label="main navigation" if="{showAdmissionItems}"> <div class="container is-fluid"> <div class="navbar-brand"> <div class="navbar-item is-size-3 has-text-weight-bold has-text-wight"> Sarathi </div> <div class="navbar-burger burger" data-target="navbarExampleTransparentExample"> <span aria-hidden="true"></span> <span aria-hidden="true"></span> <span aria-hidden="true"></span> </div> </div> <div id="navbarExampleTransparentExample" class="navbar-menu has-text-weight-bold"> <div class="navbar-end"> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item" href="#/student">Student</a> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item">Staff Profile</a> </div> <div class="navbar-item has-dropdown is-hoverable"> <a class="navbar-item" style="font-size: 20px;"><i class="fa fa-caret-down" aria-hidden="true"></i></a> <div class="navbar-dropdown"> <a class="navbar-item has-text-danger" onclick="{logout}"><i class="fas fa-power-off"></i></a> <a class="navbar-item" onclick="{changePassword}"><i class="fas fa-key"></i></a> </div> </div> </div> </div> </div> </nav> <div class="modal" id="passwordChangeModal"> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Change Password</p> <button class="delete" aria-label="close" onclick="{closeChangePasswordModal}"></button> </header> <section class="modal-card-body"> <div class="field"> <p class="control has-icons-left"> <input class="input" type="password" ref="oldPasswordInput" placeholder="Old Password"> <span class="icon is-small is-left"> <i class="fas fa-lock"></i> </span> </p> </div> <div class="field"> <p class="control has-icons-left"> <input class="input" type="password" ref="newPasswordInput" placeholder="New Password"> <span class="icon is-small is-left"> <i class="fas fa-lock"></i> </span> </p> </div> <div class="field"> <p class="control has-icons-left"> <input class="input" type="password" ref="newPasswordInput2" placeholder="Re-type New Password"> <span class="icon is-small is-left"> <i class="fas fa-lock"></i> </span> </p> </div> </section> <footer class="modal-card-foot"> <button class="button is-success" onclick="{savePassword}">Save changes</button> <button class="button" onclick="{closeChangePasswordModal}">Cancel</button> </footer> </div> </div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_nav_item')
    console.log(opts.selected_nav_item)
    self.getCookie = (c_name) => {
       var i,x,y,ARRcookies=document.cookie.split(";");
       for (i=0; i<ARRcookies.length; i++)
       {
          x=ARRcookies[i].substr(0,ARRcookies[i].indexOf("="));
          y=ARRcookies[i].substr(ARRcookies[i].indexOf("=")+1);
          x=x.replace(/^\s+|\s+$/g,"");
          if (x==c_name)
          {
            return unescape(y);
          }
       }
    }

    if(!opts.selected_nav_item){
      self.selected_nav_item = 'login'
      self.showAdminNavItems=false
      self.showTeacherNavItems=false
      self.showClassTeacherNavItems=false
      self.showActivityItems = false
      self.showCareerItems = false
      self.showMentorItems = false
      self.showDisciplineItems = false
      self.showAdmissionItems = false
    }else{
      self.selected_nav_item = opts.selected_nav_item
      if(self.selected_nav_item == 'login'){
        self.showAdminNavItems=false
        self.showTeacherNavItems=false
        self.showClassTeacherNavItems=false
        self.showActivityItems=false
        self.showCareerItems=false
        self.showMentorItems = false
        self.showDisciplineItems = false
        self.showAdmissionItems = false
      }else{
        var role = self.getCookie('role')
        console.log('role')
        console.log(role)
        if(role=='ADMIN'){
          self.showAdminNavItems=true
        }else if(role=='Teacher'){
          self.showTeacherNavItems=true
        }else if(role=='Class Teacher'){
          self.showClassTeacherNavItems=true
        }else if(role=='Activity'){
          self.showActivityItems=true
        }else if(role=='Discipline'){
          self.showDisciplineItems=true
        }else if(role=='Career'){
          self.showCareerItems=true
        }else if(role=='Mentor'){
         self.showMentorItems=true
        }else if(role=='Admission'){
         self.showAdmissionItems=true
        }else {

        }

      }

    }
    self.username = undefined

    self.changePassword = () => {
      $("#passwordChangeModal").addClass("is-active");
    }

    self.closeChangePasswordModal = () => {
      $("#passwordChangeModal").removeClass("is-active");
    }

    self.savePassword = () => {

      if(self.refs.oldPasswordInput.value==''){
        toastr.error('Please enter old password and try again')
        return
      }

      if(self.refs.newPasswordInput.value==''){
        toastr.error('Please enter new password and try again')
        return
      }

      var str=self.refs.newPasswordInput.value
      var p = str.length

      if(Number(p)<5){
        toastr.error('new password lenth must be >4')
        return;
      }

      if(self.refs.newPasswordInput.value!=self.refs.newPasswordInput2.value){
        toastr.error('new password not match')
        return;
      }

      RiotControl.trigger('change_password',self.refs.oldPasswordInput.value,self.refs.newPasswordInput.value)

    }

    self.logout = () => {
      console.log("calling logout")
      RiotControl.trigger('logout')
    }

    RiotControl.on('login_changed_main_nav', function(login_status) {
      console.log("calling me in nav tag")
      self.username = login_status.username

      console.log("login status = " + login_status.role)
      if(login_status.role=='ADMIN'){
        self.showAdminNavItems=true
      }else if(login_status.role=='Teacher'){
          self.showTeacherNavItems=true
        }else if(login_status.role=='Class Teacher'){
          self.showClassTeacherNavItems=true
        }  else if(role=='Store'){
          self.showInventoryNavItems=true
        }else if(role=='Infirmary'){
          self.showInfirmaryNavItems=true
        }else if(role=='Discipline'){
         self.showDisciplineItems=true
        }else if(role=='Admission'){
         self.showAdmissionItems=true
        }else {

        }

      console.log('ADMIN')
      console.log(self.admin)
      console.log(self.teacher)

      self.update()
    })

    RiotControl.on('logOut_changed', function() {
     console.log("logged out");
        self.showAdminNavItems=false
        self.showTeacherNavItems=false
        route("/login")
        window.location.reload(true);

    })

    RiotControl.on('change_password_completed', function(count) {
     console.log("Password changed");
     if(Number(count)==1){
        self.refs.oldPasswordInput.value=''
        self.refs.newPasswordInput.value=''
        self.refs.newPasswordInput2.value=''
        $("#passwordChangeModal").removeClass("is-active");
        toastr.info('Password Changed Successfully')
        self.update()
     }else{
      toastr.error('Please check your password')
     }

    });
});

riot.tag2('manage-certificate', '<header></header> <loading-bar if="{loading}"></loading-bar> <section> <div class="box"> <div class="columns"> <div class="column is-narrow" show="{report_view ==\'show_old_text_box\'}"> <div class="control"> <div class="select"> <select ref="certificate_name" onchange="{readCertificateData}" onkeyup="{addEnter}"> <option>Choose Certificate</option> <option each="{certificates}" riot-value="{certificate_name}">{certificate_name} </option> </select> </div> </div> </div> <div class="column is-narrow"> <input type="checkbox" id="checkTable" checked="{e.done}" onclick="{viewTable}" style="margin-top: 12px;"> Add New </div> <div class="column is-narrow" show="{report_view ==\'show_text_box\'}"> <input class="input" ref="new_certificate_name" type="text"> </div> </div> </div> <div class="box"> <div class="columns"> <div class="column"> <input id="x" type="hidden" name="content"> <trix-editor input="x" ref="certificate_text" class="HI"> </trix-editor> </div> <div class="column"> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>Key</th> <th>Meaning</th> </tr> <tbody> <tr> <td>|child|</td> <td>Son/Daughter</td> </tr> <tr> <td>|heshe|</td> <td>he/she</td> </tr> <tr> <td>|hesheCaps|</td> <td>He/She</td> </tr> <tr> <td>|hisher|</td> <td>his/her</td> </tr> <tr> <td>|hisherCaps|</td> <td>His/Her</td> </tr> <tr> <td>|himher|</td> <td>him/her</td> </tr> <tr> <td>|session|</td> <td>Student Acedamic Year</td> </tr> <tr> <td>|rollno|</td> <td>Student Roll\'s Number</td> </tr> <tr> <td>|enrollno|</td> <td>Student Enroll\'s Number</td> </tr> <tr> <td>|name|</td> <td>Student\'s Name</td> </tr> <tr> <td>|father|</td> <td>Student\'s Father Name</td> </tr> <tr> <td>|address|</td> <td>Student\'s Permanent Address</td> </tr> </tbody> </thead> </table> </div> </div> </div> <div class="column is-narrow"> <button class="button is-danger has-text-weight-bold" onclick="{addCertificate}">Save </button> <button class="button has-text-weight-bold" onclick="{deleteCertificate}">Delete </button> </div> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.report_view = 'show_old_text_box'
    	self.role = getCookie('role')
    	 self.readCertificate()

        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
    	 certificateStore.off('read_certificate_data_changed',ReadCertificateDataChanged)
    	 certificateStore.off('read_certificate_change',ReadCertificateChanged)
         certificateStore.off('add_certificate_change',AddCertificateChanged)
    })

    self.addCertificate=()=>{
    	self.loading=true
    	if($('#checkTable').is(":checked")){
    		self.certificate_name=self.refs.new_certificate_name.value
    	}else{
	        self.certificate_name=self.refs.certificate_name.value
    	}
    	 certificateStore.trigger('add_certificate',self.refs.certificate_text.value,self.certificate_name,self.new_certificate)
    }
    self.readCertificateData=()=>{
    	self.loading=true
    	if(self.refs.certificate_name.value!='Choose Certificate')
	    self.certificate_name=self.refs.certificate_name.value
    	 certificateStore.trigger('read_certificate_data',self.certificate_name)
    }

    self.viewTable = () => {
    	if($('#checkTable').is(":checked")){
    		self.certificate_name=self.refs.new_certificate_name.value
    		self.refs.certificate_text.value=''
	        self.report_view = 'show_text_box'
    	}else{
	        self.report_view = 'show_old_text_box'
	        self.certificate_name=self.refs.certificate_name.value
    	}
    }

    self.readCertificate = () => {
       certificateStore.trigger('read_certificate')
    }
    self.deleteCertificate = () => {
       self.refs.certificate_text.value=''
    }

    certificateStore.on('read_certificate_changed',ReadCertificateChanged)
    function ReadCertificateChanged(certificates){
      console.log(certificates)
      self.loading=false
      self.certificates = certificates
      self.update()

    }

    certificateStore.on('read_certificate_data_changed',ReadCertificateDataChanged)
    function ReadCertificateDataChanged(certificateData){
      console.log(certificateData)
      self.loading=false
      self.refs.certificate_text.value = certificateData[0].certificate_text
      self.update()
    }

    certificateStore.on('add_certificate_change',AddCertificateChanged)
    function AddCertificateChanged(id){
      console.log(id)
      self.loading=false
      self.c_id = id
      self.update()
    }

});
riot.tag2('marks-entry', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Marks Entry</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded ml5" onclick="{readMarksEntry}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"><label class="label">Standard</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="standardSelect" onchange="{changeSection}"> <option value="">Select Standard</option> <option each="{classes}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="sectionSelect" onchange="{readClassSubject}"> <option value="">Select Section</option> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Subjects</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth" onchange="{readMarksLimit}"> <select ref="subjectSelect"> <option value="">Select Subject</option> <option each="{subjects}" riot-value="{subject_id}">{subject_name}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Exam Type</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="examTypeSelect" onchange="{readMarksLimit}"> <option value="">Select Exam Type</option> <option each="{examTypes}" riot-value="{exam_type_id}">{exam_type}</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readMarksEntry}">GO </button> </div> </div> </div> <div class="box"> <div class="columns"> <div class="column"> <div><i>Roll No:</i> <strong>{roll_number}</strong></div> <div><i>Enroll No:</i> <strong>{enroll_number}</strong></div> </div> <div class="column"> <div><i>Name:</i> <strong>{name}</strong></div> </div> <div class="column"> <div><i>Marks:</i> <input class="input" type="text" ref="marksInput" id="marksInput" style="width:100px;font-weight:bold; text-transform: uppercase;" onkeyup="{addEnter}"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title}</button> </div> <div><i>Absent:</i> <input type="checkbox" class="checkbox" ref="absentCheckBox" id="absentCheckBoxId"></div> </div> <div class="column" hide="{marksLimit.marking_type==\'G\'}"> <div><i>Max Marks:</i> <strong>{marksLimit.max_marks}</strong> <strong style="color:#FF0000">({marksLimit.marking_type})</strong> </div> <div><i>Min Marks:</i> <strong>{marksLimit.min_marks}</strong></div> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th style="width:200px;">Roll No</th> <th>Enroll No</th> <th>Student Name</th> <th hide="{marksLimit.marking_type==\'G\'}">Marks</th> <th>Grade</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in marksEntries}"> <td>{c.roll_number}</td> <td>{c.enroll_number}</td> <td>{c.name}</td> <td hide="{marksLimit.marking_type==\'G\'}">{c.marks}</td> <td>{c.marks_grade}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, c)}">Edit</a></span> <span><a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
  self.marksLimit = {}
  self.marksLimit['min_marks'] = '';
  self.marksLimit.max_marks = '';
  self.marksLimit.marking_type = '';
    self.on("mount", function(){
      self.title = 'Add'
      self.loading = false;
      self.tempSections = []
      self.update()
      self.readClass()
      self.readSection()
    })
    self.on("unmount", function(){
      marksEntryStore.off('read_classes_changed',ClassesChanged)
      marksEntryStore.off('read_section_changed',SectionChanged)
      marksEntryStore.off('exam_types_changed',ExamTypesChanged)
      marksEntryStore.off('subjects_changed',SubjectsChanged)
      marksEntryStore.off('marks_limit_changed',MarksLimitChanged)
      marksEntryStore.off('marks_entries_changed',MarksEntriesChanged)
      marksEntryStore.off('add_marks_entries_changed',AddMarksEntriesChanged)
      marksEntryStore.off('delete_marks_entries_changed',DeleteMarksEntriesChanged)
    })

    self.readClass = () => {
       self.loading = true;
       marksEntryStore.trigger('read_classes')
    }

    self.readSection = () => {
       self.loading = true;
       marksEntryStore.trigger('read_section')
    }

    self.changeSection = () => {
       if(self.refs.standardSelect.value==''){
        toastr.info("Please select standard and try again")
       }else{
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.standardSelect.value
        })
       }

       marksEntryStore.trigger('read_exam_types',self.refs.standardSelect.value)
    }

    self.readClassSubject = () =>{
      let error = '';

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
       marksEntryStore.trigger('read_subjects',self.refs.standardSelect.value, self.refs.sectionSelect.value)
      }
    }

    self.readMarksLimit = () => {

      let error = '';

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(self.refs.subjectSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.examTypeSelect.value==''){
        error = error + "Please select exam type, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading=true
       marksEntryStore.trigger('read_marks_limit', self.refs.sectionSelect.value, self.refs.subjectSelect.value, self.refs.examTypeSelect.value)
      }
    }

    self.readMarksEntry = () => {

      let error = '';

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(self.refs.examTypeSelect.value==''){
        error = error + "Please select exam type, "
      }

      if(self.refs.subjectSelect.value==''){
        error = error + "Please select subject, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading=true
        marksEntryStore.trigger('read_marks_entries',self.refs.examTypeSelect.value, self.refs.sectionSelect.value, self.refs.subjectSelect.value, self.marksLimit.marking_type)
      }

    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

    self.add = () => {
      let error = '';

      if($('#absentCheckBoxId').prop("checked") == false){
        if(self.refs.marksInput.value==''){
          error = error + "Please enter marks, "
        }

        if(self.marksLimit.marking_type=='N'){
          if(Number(self.marksLimit.max_marks)<Number(self.refs.marksInput.value)){
            error = error + "Marks can not be greater than max marks, "
          }
        }else if(self.marksLimit.marking_type=='G'){
          if(!isNaN(self.refs.marksInput.value)){
            error = error + "Please enter grade "
          }
        }

      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(self.refs.examTypeSelect.value==''){
        error = error + "Please select exam type, "
      }

      if(self.refs.subjectSelect.value==''){
        error = error + "Please select subject, "
      }

      if(!self.marksLimit.marking_type){
        error = error + "No Marking Type defined, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
          var obj = {}
          obj['marks_id'] = self.marksLimit.marks_id
          obj['student_id'] = self.students[0].student_id
          obj['exam_id'] = self.refs.examTypeSelect.value
          obj['subject_id'] = self.refs.subjectSelect.value
          obj['section_id'] = self.refs.sectionSelect.value
          obj['marks_group'] = self.marksLimit.exam_group
          obj['marking_type'] = self.marksLimit.marking_type

        if(self.marksLimit.marking_type =='N'){

          if($('#absentCheckBoxId').prop("checked") == true){
            obj['marks'] = -1
          }else{
            obj['marks'] = self.refs.marksInput.value
          }

        }else if(self.marksLimit.marking_type =='G'){

          if($('#absentCheckBoxId').prop("checked") == true){
            obj['marks_grade'] = -1
          }else{
            obj['marks_grade'] = self.refs.marksInput.value
          }

        }else if(self.marksLimit.marking_type =='NG') {

          if($('#absentCheckBoxId').prop("checked") == true){
            obj['marks'] = -1
          }else{
            obj['marks'] = self.refs.marksInput.value
          }

        }

        self.loading = true
        if(self.title=='Add'){
          console.log(obj)
          marksEntryStore.trigger('add_marks_entries', obj)
        }else if(self.title=='Update'){
          marksEntryStore.trigger('update_marks_entries', obj, self.edit_id)
        }
      }

    }

    self.edit = (c,e) => {
      self.title='Update'
      self.students = []
      self.students.push(c)
      self.roll_number = c.roll_number
      self.enroll_number = c.enroll_number
      self.name = c.name

      if(c.marks == 'AB' || c.marks_grade == 'AB'){
        document.getElementById("absentCheckBoxId").checked = true;
        $("#absentCheckBoxId").focus();
      }else{
         if(self.marksLimit.marking_type =='G'){
          self.refs.marksInput.value = c.marks_grade
         }else{
          self.refs.marksInput.value = c.marks
         }

        $("#marksInput").focus();
      }

      self.edit_id = c.id
      self.update()
    }

   self.cancelOperation = (e) => {
      self.marksEntries.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.marksEntries.map(c => {
        if(c.id != e.item.c.id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      marksEntryStore.trigger('delete_marks_entries', e.item.c.id)
    }

    marksEntryStore.on('read_classes_changed',ClassesChanged)
    function ClassesChanged(classes){
      self.loading = false
      self.classes = []
      self.classes = classes
      self.update()
      console.log(self.classes)
    }

    marksEntryStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      self.loading = false
      self.sections = []
      self.sections = sections
      self.update()
    }

    marksEntryStore.on('exam_types_changed',ExamTypesChanged)
    function ExamTypesChanged(examTypes){
      self.loading = false
      self.examTypes = []
      self.examTypes = examTypes
      self.update()
    }

    marksEntryStore.on('subjects_changed',SubjectsChanged)
    function SubjectsChanged(subjects){
      self.loading = false
      self.subjects = []
      self.subjects = subjects
      self.update()
    }

    marksEntryStore.on('marks_limit_changed',MarksLimitChanged)
    function MarksLimitChanged(marksLimit){
      self.loading = false
      self.marksLimit = {}

      if(marksLimit.length==0){
        toastr.error('Min marks, Max marks not defined on this subject')
      }else{
        self.marksLimit = marksLimit[0]
      }
      self.update()
    }

    marksEntryStore.on('marks_entries_changed',MarksEntriesChanged)
    function MarksEntriesChanged(marksEntries,students){
      self.loading = false
      self.marksEntries = []
      self.marksEntries = marksEntries
      self.students = []
      self.students = students
      if(students.length==0){
        toastr.info('No students to for marks entry')
        self.roll_number = ''
        self.enroll_number = ''
        self.name = ''
      }else{
        self.roll_number = students[0].roll_number
        self.enroll_number = students[0].enroll_number
        self.name = students[0].name
        self.refs.roll_number.value = self.roll_number
        self.refs.enroll_number.value = self.enroll_number
        self.refs.name.value = self.name
      }

      self.update()
    }

    marksEntryStore.on('add_marks_entries_changed',AddMarksEntriesChanged)
    function AddMarksEntriesChanged(){
      self.loading = false
      self.title = 'Add'
      self.refs.marksInput.value=''
      document.getElementById("absentCheckBoxId").checked = false;
      self.readMarksEntry()
    }

    marksEntryStore.on('delete_marks_entries_changed',DeleteMarksEntriesChanged)
    function DeleteMarksEntriesChanged(){
      self.loading = false
      self.readMarksEntry()
    }

});
riot.tag2('marks-manager', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{view==\'marks_settings\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Marks Manager <span show="{action==\'MarksSettingsForm\'}">(</span>{title}<span show="{action==\'MarksSettingsForm\'}">)</span></h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{openMarksSettingsForm}" hide="{action==\'MarksSettingsForm\'}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> <button class="button is-warning is-rounded" onclick="{closeMarksSettingsForm}" show="{action==\'MarksSettingsForm\'}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-warning is-rounded ml5" onclick="{readMarksSettings}" hide="{action==\'MarksSettingsForm\'}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"><label class="label">Standard</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="standardSelect" onchange="{changeSection}"> <option value="">Select Standard</option> <option each="{classes}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="sectionSelect" onchange="{readClassSubject}"> <option value="">Select Section</option> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Exam Type</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="examTypeSelect"> <option value="">Select Exam Type</option> <option each="{examTypes}" riot-value="{exam_type_id}">{exam_type}</option> </select> </div> </div> </div> <div class="column is-narrow" show="{action==\'MarksSettingsForm\'}"><label class="label">Subjects</label></div> <div class="column" show="{action==\'MarksSettingsForm\'}"> <div class="control"> <div class="select is-fullwidth"> <select ref="subjectSelect"> <option value="">Select Subject</option> <option each="{subjects}" riot-value="{subject_id}">{subject_name}</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readMarksSettings}" hide="{action==\'MarksSettingsForm\'}">GO </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable" hide="{action==\'MarksSettingsForm\'}"> <thead> <tr> <th class="slno">SL</th> <th>Subject</th> <th>Exam Date</th> <th>Max Marks</th> <th>Min Marks</th> <th>Marking Type</th> <th>Details</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in marksSettings}"> <td>{i+1}</td> <td>{c.subject_name}</td> <td>{c.exam_date}</td> <td>{c.max_marks}</td> <td>{c.min_marks}</td> <td>{c.marking_type}</td> <td>{c.details}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, c)}">Edit</a></span> <span><a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> <section class=" is-fluid" show="{action==\'MarksSettingsForm\'}"> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role">Date of Exam</label> <div class="control"> <input class="input date" type="text" ref="examDateInput"> </div> </div> <div class="field"> <label class="label" for="role">Marking Type</label> <div class="control"> <div class="select is-fullwidth"> <select ref="markingTypeSelect" onchange="{selectIncludeInGrandTotal}"> <option value="N">Numbered</option> <option value="G">Graded</option> <option value="NG">Number Graded</option> </select> </div> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Max Marks</label> <div class="control"> <input class="input" type="text" ref="maxMarksInput"> </div> </div> <div class="field"> <label class="label" for="role">Include In Grand Total</label> <div class="control"> <div class="select is-fullwidth"> <select ref="includeInGrandTotalSelect"> <option value="Y">Yes</option> <option value="N">No</option> </select> </div> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Min Marks</label> <div class="control"> <input class="input" type="text" ref="minMarksInput"> </div> </div> <div class="field"> <label class="label" for="role">Show in</label> <div class="control"> <div class="select is-fullwidth"> <select ref="showInSelect"> <option value="B1">Block I</option> <option value="B2">Block II</option> </select> </div> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Details</label> <div class="control"> <textarea class="textarea" rows="4" ref="detailsInput"></textarea> </div> </div> </div> </div> <div class="level"> <div class="level-left"> </div> <div class="level-right"> <button class="button is-danger" onclick="{add}">{title}</button> <button class="button ml5" onclick="{closeMarksSettingsForm}">Cancel</button> </div> </div> </section> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title = ''
      self.view = 'marks_settings'
      self.action = ''
      self.loading = false;
      self.tempSections = []
      self.update()
      flatpickr(".date", {
        allowInput: true,
        dateFormat: "d/m/Y",
      })
      self.readClass()
      self.readSection()
    })
    self.on("unmount", function(){
      marksManagerStore.off('read_classes_changed',ClassesChanged)
      marksManagerStore.off('read_section_changed',SectionChanged)
      marksManagerStore.off('exam_types_changed',ExamTypesChanged)
      marksManagerStore.off('subjects_changed',SubjectsChanged)
      marksManagerStore.off('marks_settings_changed',MarksSettingssChanged)
    })

    self.readClass = () => {
       self.loading = true;
       marksManagerStore.trigger('read_classes')
    }

    self.readSection = () => {
       self.loading = true;
       marksManagerStore.trigger('read_section')
    }

    self.changeSection = () => {
       if(self.refs.standardSelect.value==''){
        toastr.info("Please select standard and try again")
       }else{
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.standardSelect.value
        })
       }

       marksManagerStore.trigger('read_exam_types',self.refs.standardSelect.value)
    }

    self.readClassSubject = () =>{
      let error = '';

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
       marksManagerStore.trigger('read_subjects',self.refs.standardSelect.value, self.refs.sectionSelect.value)
      }
    }

    self.readMarksSettings = () => {
      let error = '';

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(self.refs.examTypeSelect.value==''){
        error = error + "Please select exam type "
      }

      console.log(self.refs.examTypeSelect.value)
      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading=true
        marksManagerStore.trigger('read_marks_settings',self.refs.sectionSelect.value, self.refs.examTypeSelect.value)
      }

    }

    self.openMarksSettingsForm = () => {
      self.title='Add'
      self.action='MarksSettingsForm'
      self.update()
    }

    self.closeMarksSettingsForm = () => {
      self.title=''
      self.action=''
    }

    self.selectIncludeInGrandTotal = () => {
      console.log(self.refs.markingTypeSelect.value)
      if(self.refs.markingTypeSelect.value=='G'){
        self.refs.includeInGrandTotalSelect.value='N'
      }else{
        self.refs.includeInGrandTotalSelect.value='Y'
      }

    }

    self.add = () => {
      let error = '';

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(self.refs.examTypeSelect.value==''){
        error = error + "Please select exam type, "
      }

      if(self.refs.subjectSelect.value==''){
        error = error + "Please select subject, "
      }

      if(self.refs.maxMarksInput.value==''){
        error = error + "Please enter max marks, "
      }

      if(self.refs.minMarksInput.value==''){
        error = error + "Please enter min marks, "
      }

      if(Number(self.refs.maxMarksInput.value)<Number(self.refs.minMarksInput.value)){
        error = error + "Min marks can not be greater than max marks "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        var obj = {}
        obj['section_id'] = self.refs.sectionSelect.value
        obj['exam_id'] = self.refs.examTypeSelect.value
        obj['subject_id'] = self.refs.subjectSelect.value
        obj['date_of_exam'] = convertDate(self.refs.examDateInput.value)
        obj['marking_type'] = self.refs.markingTypeSelect.value
        obj['grand_total'] = self.refs.includeInGrandTotalSelect.value
        obj['max_marks'] = self.refs.maxMarksInput.value
        obj['min_marks'] = self.refs.minMarksInput.value
        obj['show_in'] = self.refs.showInSelect.value
        obj['details'] = self.refs.detailsInput.value

        self.loading = true
        if(self.title=='Add'){
          marksManagerStore.trigger('add_marks_settings', obj)
        }else if(self.title=='Update'){
          marksManagerStore.trigger('update_grade_settings', obj, self.edit_id)
        }
      }

    }

    self.edit = (c,e) => {
      self.title='Update'
      self.action='MarksSettingsForm'
      self.refs.subjectSelect.value = c.subject_id
      self.refs.examDateInput.value = c.exam_date
      self.refs.markingTypeSelect.value = c.marking_type
      self.refs.includeInGrandTotalSelect.value = c.grand_total
      self.refs.maxMarksInput.value = c.max_marks
      self.refs.minMarksInput.value = c.min_marks
      self.refs.showInSelect.value = c.show_in
      self.refs.detailsInput.value = c.details
      self.edit_id = c.marks_id

      console.log(self.refs.examDateInput.value)

      self.update()
    }

   self.cancelOperation = (e) => {
      self.marksSettings.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.marksSettings.map(c => {
        if(c.marks_id != e.item.c.marks_id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      marksManagerStore.trigger('delete_marks_settings', e.item.c.marks_id)
    }

    marksManagerStore.on('read_classes_changed',ClassesChanged)
    function ClassesChanged(classes){
      self.loading = false
      self.classes = []
      self.classes = classes
      self.update()
      console.log(self.classes)
    }

    marksManagerStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      self.loading = false
      self.sections = []
      self.sections = sections
      self.update()
    }

    marksManagerStore.on('exam_types_changed',ExamTypesChanged)
    function ExamTypesChanged(examTypes){
      self.loading = false
      self.examTypes = []
      self.examTypes = examTypes
      self.update()
    }

    marksManagerStore.on('subjects_changed',SubjectsChanged)
    function SubjectsChanged(subjects){
      self.loading = false
      self.subjects = []
      self.subjects = subjects
      self.update()
    }

    marksManagerStore.on('marks_settings_changed',MarksSettingssChanged)
    function MarksSettingssChanged(marksSettings){
      self.loading = false
      self.marksSettings = []
      self.marksSettings = marksSettings
      self.update()
    }

    marksManagerStore.on('add_marks_settings_changed',AddMarksSettingsChanged)
    function AddMarksSettingsChanged(marksSettings){
      self.loading = false
      self.refs.maxMarksInput.value=''
      self.refs.minMarksInput.value=''
      self.refs.examDateInput.value=''
      self.refs.detailsInput.value=''
      self.closeMarksSettingsForm()
      self.readMarksSettings()
    }

    marksManagerStore.on('delete_marks_settings_changed',DeleteMarksSettingsChanged)
    function DeleteMarksSettingsChanged(marksSettings){
      self.loading = false
      self.marksSettings = []
      self.marksSettings = marksSettings
      self.update()
    }

});
riot.tag2('marks-report', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_marks_report == \'consolidate-tabulation-sheet\'}" href="#/marks-report/consolidate-tabulation-sheet"> <span>Consolidate Tabulation Sheet</span> </a> </p> <p class="control"> <a class="button {is-active: selected_marks_report == \'merit-list\'}" href="#/marks-report/merit-list"> <span>Merit List</span> </a> </p> <p class="control"> <a class="button {is-active: selected_marks_report == \'top-five\'}" href="#/marks-report/top-five"> <span>Top Five</span> </a> </p> <p class="control"> <a class="button {is-active: selected_marks_report == \'first-assessment-report-card\'}" href="#/marks-report/first-assessment-report-card"> <span>First Assessment Report Card</span> </a> </p> <p class="control"> <a class="button {is-active: selected_marks_report == \'final-assessment-report-card\'}" href="#/marks-report/final-assessment-report-card"> <span>Final Assessment Report Card</span> </a> </p> </div> <div id="marks-report-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_marks_report')
    console.log(opts.selected_marks_report)
    if(!opts.selected_marks_report){
      self.selected_marks_report = 'item'
    }else{
      self.selected_marks_report = opts.selected_marks_report
    }
});
riot.tag2('master', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_master == \'employee-type\'}" href="#/master/employee-type"> <span>Employee Type</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'designation\'}" href="#/master/designation"> <span>Designation</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'department\'}" href="#/master/department"> <span>Department</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'level\'}" href="#/master/level"> <span>Level</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'employment-status\'}" href="#/master/employment-status"> <span>Employment Status</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'role\'}" href="#/master/role"> <span>Employee Role</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'category\'}" href="#/master/category"> <span>Category</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'subject\'}" href="#/master/subject"> <span>Subject</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'country\'}" href="#/master/country"> <span>Country</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'city\'}" href="#/master/city"> <span>City</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'state\'}" href="#/master/state"> <span>State</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'religion\'}" href="#/master/religion"> <span>Religion</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'area\'}" href="#/master/area"> <span>Area</span> </a> </p> </div> <div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_master == \'standard\'}" href="#/master/standard"> <span>New Class</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'section-master\'}" href="#/master/section-master"> <span>Section</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'class-teacher-master\'}" href="#/master/class-teacher-master"> <span>Class Teacher</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'club\'}" href="#/master/club"> <span>Club</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'event-master\'}" href="#/master/event-master/event-type">Event Calender</a> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'inventory-department\'}" href="#/master/inventory-department">Inventory Department</a> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'activate-session\'}" href="#/master/activate-session"> <span>Activate Session</span> </a> </p> </div> <div id="master-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_master')
    console.log(opts.selected_master)
    if(!opts.selected_master){
      self.selected_master = 'employee-type'
    }else{
      self.selected_master = opts.selected_master
    }
});



riot.tag2('maturity-development', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{view==\'maturity_developments\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Maturity Development <span style="font-weight:normal" show="{action==\'MaturityDevelopmentForm\'}">({details})({title})</span> </h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{closeMaturityDevelopmentForm}" show="{action==\'MaturityDevelopmentForm\'}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-warning is-rounded ml5" onclick="{readMaturityDevelopmentStudents}" hide="{action==\'MaturityDevelopmentForm\'}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"><label class="label">Standard</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="standardSelect" onchange="{changeSection}"> <option value="">Select Standard</option> <option each="{classes}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="sectionSelect" onchange="{readClassSubject}"> <option value="">Select Section</option> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Exam Term</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="examTermSelect"> <option value="">Select Exam Term</option> <option value="First">First</option> <option value="Final">Final</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readMaturityDevelopmentStudents}" hide="{action==\'MaturityDevelopmentForm\'}">GO </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable" hide="{action==\'MaturityDevelopmentForm\'}"> <thead> <tr> <th class="slno">SL</th> <th>Enroll No</th> <th>Name</th> <th>Class</th> <th>Status</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in maturityDevelopments}"> <td>{i+1}</td> <td>{c.enroll_number}</td> <td>{c.student_name}</td> <td>{c.standard}</td> <td>{c.exam_term}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span show="{c.exam_term==\'N\'}"><a class="button is-small" onclick="{openMaturityDevelopmentForm.bind(this, c)}" title="Assign"><i class="fa fa-plus-circle" aria-hidden="true"></i></a></span> <span><a class="button is-small" onclick="{viewDetails.bind(this, c)}" title="View"><i class="fa fa-eye" aria-hidden="true"></i></a></span> <span><a class="button is-small" onclick="{edit.bind(this, c)}" title="Edit"><i class="fa fa-edit" aria-hidden="true"></i></a></span> <span><a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"><i class="fa fa-trash" aria-hidden="true"></i></a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> <section class=" is-fluid" show="{action==\'MaturityDevelopmentForm\'}"> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role">Initiative and Perseverance</label> <div class="control"> <div class="select is-fullwidth"> <select ref="initiativeAndPerseveranceSelect"> <option value="initiative_first">Self-motivated and completes tasks</option> <option value="initiative_second">Works well with minimum direction</option> <option value="initiative_third">Needs constant guidance</option> <option value="initiative_fourth">Has to be told every thing</option> </select> </div> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Interest</label> <div class="control"> <div class="select is-fullwidth"> <select ref="interestSelect"> <option value="interest_first">Easily Stimulated and sustained</option> <option value="interest_second">Interested only in some areas</option> <option value="interest_third">Inconsistent</option> <option value="interest_fourth">Indifferent</option> </select> </div> </div> </div> </div> </div> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role">Use of Time</label> <div class="control"> <div class="select is-fullwidth"> <select ref="useOfTimeSelect"> <option value="time_first">Uses time profitably</option> <option value="time_second">Organized most of the time</option> <option value="time_third">Disorganized but responds well to guidance</option> <option value="time_fourth">Easily distracted</option> </select> </div> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Works Habits</label> <div class="control"> <div class="select is-fullwidth"> <select ref="worksHabitsSelect"> <option value="work_first">Very careful worker</option> <option value="work_second">Usually neat</option> <option value="work_third">Untidy</option> <option value="work_fourth">Careless</option> </select> </div> </div> </div> </div> </div> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role">Participation in Group Work</label> <div class="control"> <div class="select is-fullwidth"> <select ref="participationInGroupWorkSelect"> <option value="participation_first">Contributes readily</option> <option value="participation_second">Tries to dominate the group</option> <option value="participation_third">Takes part occasionally</option> <option value="participation_fourth">Has to be coaxed to participate</option> </select> </div> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Responsibility</label> <div class="control"> <div class="select is-fullwidth"> <select ref="responsibilitySelect"> <option value="responsibility_first">Takes initiative in situations which require responsibility</option> <option value="responsibility_second">Accepts a responsibility only when it is assigned</option> <option value="responsibility_third">Casual about responsibility</option> <option value="responsibility_fourth">Reluctant to accept responsibility</option> </select> </div> </div> </div> </div> </div> <div class="level"> <div class="level-left"> </div> <div class="level-right"> <button class="button is-danger" onclick="{add}">{title}</button> <button class="button ml5" onclick="{closeMaturityDevelopmentForm}">Cancel</button> </div> </div> </section> </section> <section class="is-fluid" show="{view==\'details\'}"> <div class="level no-print"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Maturity Development</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{closeDetails}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <center> <h6 class="title">Maturity Development view for Class {student_info.standard} </h6> <table class="table"> <tbody> <tr> <th>Name</th> <td>{student_info.student_name}</td> <th>Enroll Number</th> <td>{student_info.enroll_number}</td> </tr> </tbody> </table> <table class="table is-bordered"> <tbody> <tr> <td colspan="2">Given below are six areas in which maturity of the students is shown. within each areas, four levels of maturity have been given. This information indicates at which level your son works at school. </td> </tr> <tr> <th class="has-text-centered">INITIATIVE &amp; PERSEVERANCE</th> <th class="has-text-centered" style="width:120px;">{student_info.term} Term</th> </tr> <tr> <td>1. Self - motivated and completes tasks</td> <td class="has-text-centered"> <span class="icon" show="{initiative_first}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <td>2. Works well with minimum direction</td> <td class="has-text-centered"> <span class="icon" show="{initiative_second}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <td>3. Needs constant guidance</td> <td class="has-text-centered"> <span class="icon" show="{initiative_third}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <td>4. has to be told every thing</td> <td class="has-text-centered"> <span class="icon" show="{initiative_fourth}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <th class="has-text-centered">INTEREST</th> <td class="has-text-centered"></td> </tr> <tr> <td>1. Easily stimulated &amp; sustained</td> <td class="has-text-centered"> <span class="icon" show="{interest_first}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <td>2. Interested only in some areas</td> <td class="has-text-centered"> <span class="icon" show="{interest_second}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <td>3. Inconsistent</td> <td class="has-text-centered"> <span class="icon" show="{interest_third}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <td>4. Indifferent</td> <td class="has-text-centered"> <span class="icon" show="{interest_fourth}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <th class="has-text-centered">USE OF TIME</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Uses time profitably</td> <td class="has-text-centered"> <span class="icon" show="{time_first}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <td>2. Organized most of the time</td> <td class="has-text-centered"> <span class="icon" show="{time_second}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <td>3. Disorganized but responds well to guidance</td> <td class="has-text-centered"> <span class="icon" show="{time_third}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <td>4. Easily distracted</td> <td class="has-text-centered"> <span class="icon" show="{time_fourth}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <th class="has-text-centered">WORK HABITS</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Very careful worker</td> <td class="has-text-centered"> <span class="icon" show="{work_first}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <td>2. Usually neat</td> <td class="has-text-centered"> <span class="icon" show="{work_second}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <td>3. Untidy</td> <td class="has-text-centered"> <span class="icon" show="{work_third}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <td>4. Careless</td> <td class="has-text-centered"> <span class="icon" show="{work_fourth}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <th class="has-text-centered">PARTICIPATION IN GROUP WORK</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Contributes readily</td> <td class="has-text-centered"> <span class="icon" show="{participation_first}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <td>2. Tries to dominate the group</td> <td class="has-text-centered"> <span class="icon" show="{participation_second}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <td>3. Takes part occasionally</td> <td class="has-text-centered"> <span class="icon" show="{participation_third}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <td>4. Has to be coaxed to participate</td> <td class="has-text-centered"> <span class="icon" show="{participation_fourth}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <th class="has-text-centered">RESPONSIBILITY</th> <th class="has-text-centered"></th> </tr> <tr> <td>1. Takes initiative in situations which require responsibility</td> <td class="has-text-centered"> <span class="icon" show="{responsibility_first}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <td>2. Accepts a responsibility only when it is assigned</td> <td class="has-text-centered"> <span class="icon" show="{responsibility_second}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <td>3. Casual about responsibility</td> <td class="has-text-centered"> <span class="icon" show="{responsibility_third}"> <span class="fas fa-check"></span> </span> </td> </tr> <tr> <td>4. Reluctant to accept responsibility</td> <td class="has-text-centered"> <span class="icon" show="{responsibility_fourth}"> <span class="fas fa-check"></span> </span> </td> </tr> </tbody> </table> </center> </section>', '', '', function(opts) {
	var self = this
  self.student_info = {'student_name':'','enroll_number':'','term':'','standard':''}
    self.on("mount", function(){
      self.title = ''
      self.view = 'maturity_developments'
      self.action = ''
      self.details = ''
      self.loading = false;
      self.tempSections = []
      self.update()
      flatpickr(".date", {
        allowInput: true,
        dateFormat: "d/m/Y",
      })
      self.readClass()
      self.readSection()
    })
    self.on("unmount", function(){
      maturityDevelopmentStore.off('read_classes_changed',ClassesChanged)
      maturityDevelopmentStore.off('read_section_changed',SectionChanged)
      maturityDevelopmentStore.off('maturity_developments_changed',MaturityDevelopmentsChanged)
      maturityDevelopmentStore.off('maturity_development_student_update_changed',MaturityDevelopmentsReadUpdateChanged)
      maturityDevelopmentStore.off('read_maturity_development_details_changed',MaturityDevelopmentsDetailsChanged)
    })

    self.readClass = () => {
       self.loading = true;
       maturityDevelopmentStore.trigger('read_classes')
    }

    self.readSection = () => {
       self.loading = true;
       maturityDevelopmentStore.trigger('read_section')
    }

    self.changeSection = () => {
       if(self.refs.standardSelect.value==''){
        toastr.info("Please select standard and try again")
       }else{
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.standardSelect.value
        })
       }

       maturityDevelopmentStore.trigger('read_exam_types',self.refs.standardSelect.value)
    }

    self.readMaturityDevelopmentStudents = () => {
      let error = '';

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(self.refs.examTermSelect.value==''){
        error = error + "Please select exam type "
      }

      console.log(self.refs.examTermSelect.value)
      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading=true
        maturityDevelopmentStore.trigger('read_maturity_development_students',self.refs.sectionSelect.value, self.refs.examTermSelect.value)
      }

    }

    self.openMaturityDevelopmentForm = (c,e) => {
      self.title='Add'
      self.action='MaturityDevelopmentForm'
      self.details=c.student_name + ',' + 'Enroll No: ' + c.enroll_number
      self.student_id=c.student_id
      self.update()
    }

    self.closeMaturityDevelopmentForm = () => {
      self.title=''
      self.action=''
    }

    self.selectIncludeInGrandTotal = () => {
      console.log(self.refs.markingTypeSelect.value)
      if(self.refs.markingTypeSelect.value=='G'){
        self.refs.includeInGrandTotalSelect.value='N'
      }else{
        self.refs.includeInGrandTotalSelect.value='Y'
      }

    }

    self.add = () => {
      let error = '';

      var obj = {}
      obj['initiative_first']=0
      obj['initiative_second']=0
      obj['initiative_third']=0
      obj['initiative_fourth']=0

      if(self.refs.initiativeAndPerseveranceSelect.value == 'initiative_first'){
        obj['initiative_first']=1
      }else if(self.refs.initiativeAndPerseveranceSelect.value == 'initiative_second'){
        obj['initiative_second']=1
      }else if(self.refs.initiativeAndPerseveranceSelect.value == 'initiative_third'){
        obj['initiative_third']=1
      }else if(self.refs.initiativeAndPerseveranceSelect.value == 'initiative_fourth'){
        obj['initiative_fourth']=1
      }

      obj['interest_first']=0
      obj['interest_second']=0
      obj['interest_third']=0
      obj['interest_fourth']=0

      if(self.refs.interestSelect.value == 'interest_first'){
        obj['interest_first']=1
      }else if(self.refs.interestSelect.value == 'interest_second'){
        obj['interest_second']=1
      }else if(self.refs.interestSelect.value == 'interest_third'){
        obj['interest_third']=1
      }else if(self.refs.interestSelect.value == 'interest_fourth'){
        obj['interest_fourth']=1
      }

      obj['use_time_first']=0
      obj['use_time_second']=0
      obj['use_time_third']=0
      obj['use_time_fourth']=0

      if(self.refs.useOfTimeSelect.value == 'time_first'){
        obj['use_time_first']=1
      }else if(self.refs.useOfTimeSelect.value == 'time_second'){
        obj['use_time_second']=1
      }else if(self.refs.useOfTimeSelect.value == 'time_third'){
        obj['use_time_third']=1
      }else if(self.refs.useOfTimeSelect.value == 'time_fourth'){
        obj['use_time_fourth']=1
      }

      obj['work_habit_first']=0
      obj['work_habit_second']=0
      obj['work_habit_third']=0
      obj['work_habit_fourth']=0

      if(self.refs.worksHabitsSelect.value == 'work_first'){
        obj['work_habit_first']=1
      }else if(self.refs.worksHabitsSelect.value == 'work_second'){
        obj['work_habit_second']=1
      }else if(self.refs.worksHabitsSelect.value == 'work_third'){
        obj['work_habit_third']=1
      }else if(self.refs.worksHabitsSelect.value == 'work_fourth'){
        obj['work_habit_fourth']=1
      }

      obj['participation_first']=0
      obj['participation_second']=0
      obj['participation_third']=0
      obj['participation_fourth']=0

      if(self.refs.participationInGroupWorkSelect.value == 'participation_first'){
        obj['participation_first']=1
      }else if(self.refs.participationInGroupWorkSelect.value == 'participation_second'){
        obj['participation_second']=1
      }else if(self.refs.participationInGroupWorkSelect.value == 'participation_third'){
        obj['participation_third']=1
      }else if(self.refs.participationInGroupWorkSelect.value == 'participation_fourth'){
        obj['participation_fourth']=1
      }

      obj['responsibility_first']=0
      obj['responsibility_second']=0
      obj['responsibility_third']=0
      obj['responsibility_fourth']=0

      if(self.refs.responsibilitySelect.value == 'responsibility_first'){
        obj['responsibility_first']=1
      }else if(self.refs.responsibilitySelect.value == 'responsibility_second'){
        obj['responsibility_second']=1
      }else if(self.refs.responsibilitySelect.value == 'responsibility_third'){
        obj['responsibility_third']=1
      }else if(self.refs.responsibilitySelect.value == 'responsibility_fourth'){
        obj['responsibility_fourth']=1
      }

      if(self.refs.examTermSelect.value==''){
        error = error + "Please select exam term, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        obj['student_id']=self.student_id
        obj['exam_term']=self.refs.examTermSelect.value

        self.loading = true
        if(self.title=='Add'){
          maturityDevelopmentStore.trigger('add_maturity_developments', obj)
        }else if(self.title=='Update'){
          maturityDevelopmentStore.trigger('update_maturity_developments', obj, self.student_details.id)
        }
      }

    }

    self.viewDetails = (c,e) => {
      self.student_info=c
      self.student_info.term=self.refs.examTermSelect.value
      self.loading=true
      maturityDevelopmentStore.trigger('read_maturity_development_details',c.student_id, self.refs.examTermSelect.value)
    }

    self.closeDetails = (c,e) => {
      self.view='maturity_developments'
      self.update()
    }

    self.edit = (c,e) => {
      self.details=c.student_name + ',' + 'Enroll No: ' + c.enroll_number
      self.loading=true
      maturityDevelopmentStore.trigger('read_maturity_development_update',c.student_id, self.refs.examTermSelect.value)
    }

   self.cancelOperation = (e) => {
      self.maturityDevelopments.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.maturityDevelopments.map(c => {
        if(c.student_id != e.item.c.student_id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      maturityDevelopmentStore.trigger('delete_maturity_developments', e.item.c.student_id,self.refs.examTermSelect.value)
    }

    maturityDevelopmentStore.on('read_classes_changed',ClassesChanged)
    function ClassesChanged(classes){
      self.loading = false
      self.classes = []
      self.classes = classes
      self.update()
      console.log(self.classes)
    }

    maturityDevelopmentStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      self.loading = false
      self.sections = []
      self.sections = sections
      self.update()
    }

    maturityDevelopmentStore.on('maturity_development_students_changed',MaturityDevelopmentsChanged)
    function MaturityDevelopmentsChanged(maturityDevelopments){
      self.loading = false
      self.maturityDevelopments = []
      self.maturityDevelopments = maturityDevelopments
      self.update()
    }

    maturityDevelopmentStore.on('maturity_development_student_update_changed',MaturityDevelopmentsReadUpdateChanged)
    function MaturityDevelopmentsReadUpdateChanged(details){
      self.student_details = {}
      if(details.length>0){
        self.student_details = details[0]
        self.title='Update'
        self.action='MaturityDevelopmentForm'

        if(self.student_details.initiative_first==1){
          self.refs.initiativeAndPerseveranceSelect.value = 'initiative_first'
        }else if(self.student_details.initiative_second==1){
          self.refs.initiativeAndPerseveranceSelect.value = 'initiative_second'
        }else if(self.student_details.initiative_third==1){
          self.refs.initiativeAndPerseveranceSelect.value = 'initiative_third'
        }else if(self.student_details.initiative_fourth==1){
          self.refs.initiativeAndPerseveranceSelect.value = 'initiative_fourth'
        }

        if(self.student_details.interest_first==1){
          self.refs.interestSelect.value = 'interest_first'
        }else if(self.student_details.interest_second==1){
          self.refs.interestSelect.value = 'interest_second'
        }else if(self.student_details.interest_third==1){
          self.refs.interestSelect.value = 'interest_third'
        }else if(self.student_details.interest_fourth==1){
          self.refs.interestSelect.value = 'interest_fourth'
        }

        if(self.student_details.use_time_first==1){
          self.refs.useOfTimeSelect.value = 'time_first'
        }else if(self.student_details.use_time_second==1){
          self.refs.useOfTimeSelect.value = 'time_second'
        }else if(self.student_details.use_time_third==1){
          self.refs.useOfTimeSelect.value = 'time_third'
        }else if(self.student_details.use_time_fourth==1){
          self.refs.useOfTimeSelect.value = 'time_fourth'
        }

        if(self.student_details.work_habit_first==1){
          self.refs.worksHabitsSelect.value = 'work_first'
        }else if(self.student_details.work_habit_second==1){
          self.refs.worksHabitsSelect.value = 'work_second'
        }else if(self.student_details.work_habit_third==1){
          self.refs.worksHabitsSelect.value = 'work_third'
        }else if(self.student_details.work_habit_fourth==1){
          self.refs.worksHabitsSelect.value = 'work_fourth'
        }

        if(self.student_details.participation_first==1){
          self.refs.participationInGroupWorkSelect.value = 'participation_first'
        }else if(self.student_details.participation_second==1){
          self.refs.participationInGroupWorkSelect.value = 'participation_second'
        }else if(self.student_details.participation_third==1){
          self.refs.participationInGroupWorkSelect.value = 'participation_third'
        }else if(self.student_details.participation_fourth==1){
          self.refs.participationInGroupWorkSelect.value = 'participation_fourth'
        }

        if(self.student_details.responsibility_first==1){
          self.refs.responsibilitySelect.value = 'responsibility_first'
        }else if(self.student_details.responsibility_second==1){
          self.refs.responsibilitySelect.value = 'responsibility_second'
        }else if(self.student_details.responsibility_third==1){
          self.refs.responsibilitySelect.value = 'responsibility_third'
        }else if(self.student_details.responsibility_fourth==1){
          self.refs.responsibilitySelect.value = 'responsibility_fourth'
        }

        self.loading = false
        self.update()
      }else{
        self.loading = false
        toastr.error('Please Assign Maturity Development')
        self.update()
      }

    }

    maturityDevelopmentStore.on('read_maturity_development_details_changed',MaturityDevelopmentsDetailsChanged)
    function MaturityDevelopmentsDetailsChanged(details){

      if(details.length>0){
        self.view='details'

        self.initiative_first = false
        self.initiative_second = false
        self.initiative_third = false
        self.initiative_fourth = false
        if(details[0].initiative_first==1){
          self.initiative_first = true
        }else if(details[0].initiative_second==1){
          self.initiative_second = true
        }else if(details[0].initiative_third==1){
          self.initiative_third = true
        }else if(details[0].initiative_fourth==1){
          self.initiative_fourth = true
        }

        self.interest_first = false
        self.interest_second = false
        self.interest_third = false
        self.interest_fourth = false
        if(details[0].interest_first==1){
          self.interest_first = true
        }else if(details[0].interest_second==1){
          self.interest_second = true
        }else if(details[0].interest_third==1){
          self.interest_third = true
        }else if(details[0].interest_fourth==1){
          self.interest_fourth = true
        }

        self.time_first = false
        self.time_second = false
        self.time_third = false
        self.time_fourth = false
        if(details[0].use_time_first==1){
          self.time_first = true
        }else if(details[0].use_time_second==1){
          self.time_second = true
        }else if(details[0].use_time_third==1){
          self.time_third = true
        }else if(details[0].use_time_fourth==1){
          self.time_fourth = true
        }

        self.work_first = false
        self.work_second = false
        self.work_third = false
        self.work_fourth = false
        if(details[0].work_habit_first==1){
          self.work_first = true
        }else if(details[0].work_habit_second==1){
          self.work_second = true
        }else if(details[0].work_habit_third==1){
          self.work_third = true
        }else if(details[0].work_habit_fourth==1){
          self.work_fourth = true
        }

        self.participation_first = false
        self.participation_second = false
        self.participation_third = false
        self.participation_fourth = false
        if(details[0].participation_first==1){
          self.participation_first = true
        }else if(details[0].participation_second==1){
          self.participation_second = true
        }else if(details[0].participation_third==1){
          self.participation_third = true
        }else if(details[0].participation_fourth==1){
          self.participation_fourth = true
        }

        self.responsibility_first = false
        self.responsibility_second = false
        self.responsibility_third = false
        self.responsibility_fourth = false
        if(details[0].responsibility_first==1){
          self.responsibility_first = true
        }else if(details[0].responsibility_second==1){
          self.responsibility_second = true
        }else if(details[0].responsibility_third==1){
          self.responsibility_third = true
        }else if(details[0].responsibility_fourth==1){
          self.responsibility_fourth = true
        }

        self.loading = false
        self.update()
      }else{
        self.loading = false
        toastr.error('Please Assign Maturity Development')
        self.update()
      }

    }

    maturityDevelopmentStore.on('add_maturity_developments_changed',AddMaturityDevelopmentChanged)
    function AddMaturityDevelopmentChanged(maturityDevelopments){
      self.closeMaturityDevelopmentForm()
      self.loading = false
      self.readMaturityDevelopmentStudents()
      self.update()
    }

    maturityDevelopmentStore.on('delete_maturity_developments_changed',DeleteMaturityDevelopmentChanged)
    function DeleteMaturityDevelopmentChanged(maturityDevelopments){
      self.loading = false
      self.maturityDevelopments.map(c => {
        c.confirmDelete = false
      })
      self.readMaturityDevelopmentStudents()
      self.update()
    }

});
riot.tag2('mentor-case-wise-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered is-size-6" style="color: #ff3860;margin-bottom: 20px;">Student Category wise Mentor Report <br> Grand Total: {grand_total}</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="input date" ref="start_date" id="start_date" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="input date" ref="end_date" id="end_date" type="text" readonly="readonly"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getData}"> GO </button> <input type="checkbox" id="checkTable" checked="{e.done}" onclick="{viewTable}" style="margin-top: 12px;"> Table </div> <div class="column"> <button class="button is-success has-text-weight-bold ml5 is-pulled-right" onclick="{csvExport}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <center> <div id="piechart" style="width: 900px; height: 500px;" show="{report_view ==\'show_graph\'}"></div> </center> <div class="printOnly"> <div class="columns is-centered"> <table class="table is-striped is-hoverable is-bordered" style="margin-top:50px; width: 50%;"> <thead> <tr> <th>Category</th> <th class="has-text-right">Total</th> </tr> </thead> <tbody> <tr each="{cd, i in case_wise_reports}"> <td>{cd.category_name}</td> <td class="has-text-right">{cd.total}</td> </tr> <tr> <td class="has-text-right">Total</td> <td class="has-text-right">{grand_total}</td> </tr> </tbody> </table> </div> </div> <div class="columns is-centered no-print"> <table class="table is-striped is-hoverable is-bordered" style="width: 50%;" show="{report_view ==\'show_table\'}"> <thead> <tr> <th>Category</th> <th class="has-text-right">Total</th> </tr> </thead> <tbody> <tr each="{cd, i in case_wise_reports}"> <td>{cd.category_name}</td> <td class="has-text-right">{cd.total}</td> </tr> <tr> <td class="has-text-right">Total</td> <td class="has-text-right">{grand_total}</td> </tr> </tbody> </table> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.loading = false;
      flatpickr(".date", {
	    allowInput: true,
        dateFormat: "d/m/Y",
  		})
      self.update();
    })

    self.on("unmount", function(){
      mentorReportStore.off('read_case_wise_report_changed',ReadCaseChanged)
    })

    self.viewTable = () => {
    	if($('#checkTable').is(":checked")){
	        self.report_view = 'show_table'
    	}else{
	        self.report_view = 'show_graph'
    	}
    }
    self.getData = () => {
    	var startDate = document.getElementById("start_date").value;
    	var endDate = document.getElementById("end_date").value;

    	if(!self.refs.start_date.value){
        toastr.info("Please enter Start Date and try again")
      	}else if(!self.refs.end_date.value){
      	toastr.info("Please enter End Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
       		toastr.info("Please enter To Date Grater Than From Date")
      	}else{
    	var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          self.loading = true
          mentorReportStore.trigger('read_case_wise_report', obj)
          self.report_view = 'show_graph'
          console.log(obj)
        }
    }
    self.csvExport = () => {
    	var startDate = document.getElementById("start_date").value;
    	var endDate = document.getElementById("end_date").value;

    	if(!self.refs.start_date.value){
        toastr.info("Please enter Start Date and try again")
      	}else if(!self.refs.end_date.value){
      	toastr.info("Please enter End Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
       		toastr.info("Please enter To Date Grater Than From Date")
      	}else{
    	var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          mentorReportStore.trigger('csv_case_wise_report', obj)
        }
    }

    mentorReportStore.on('read_case_wise_report_changed',ReadCaseChanged)
    function ReadCaseChanged(case_wise_reports,grand_total){
      self.loading = false;
      self.case_wise_reports = case_wise_reports
      self.grand_total = grand_total

      var chart_percentage = []
      chart_percentage.push(['Task', 'Hours per Day'])
       for (var i = self.case_wise_reports.length - 1; i >= 0; i--) {
		   chart_percentage.push([self.case_wise_reports[i].category_name,self.case_wise_reports[i].total])
		}

      google.charts.load("current", {packages:["corechart"]});
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {
        var data = google.visualization.arrayToDataTable(chart_percentage);
        var options = {
          is3D: true,
          legend:{position: 'labeled',
                  textStyle: {bold: true} },
          pieSliceText: 'value'
        };

        var chart = new google.visualization.PieChart(document.getElementById('piechart'));
        chart.draw(data, options);
      }

      self.update()
      console.log(self.case_wise_reports)
    }
});
riot.tag2('mentor-case', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Mentor Case Management Console</h2> <div class="level box no-print"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"> <label class="label">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="category_id" id="category_id"> <option each="{categories}" riot-value="{category_id}">{category_name}</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Case</label> </div> <div class="column is-half"> <div class="control"> <input class=" input" ref="addCaseInput" id="addCaseInput" type="text"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold " onclick="{add}"> {title} </button> </div> </div> </div> <div class="level-right"> <div class="control"> <input class="input" ref="searchMentorCase" onkeyup="{filterMentorCase}" type="text" placeholder="Search By Case"> </div> <button class="button is-link has-text-weight-bold ml5 " onclick="{getData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-success has-text-weight-bold ml5" onclick="{downloadCSV}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold ml5" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Category</th> <th>Case</th> <th class="no-print" style="width:140px;"></th> </tr> </thead> <tbody> <tr each="{ca, i in filteredMentorCase}"> <td>{i+1}</td> <td>{ca.category_name}</td> <td>{ca.case_name}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ca.confirmDelete}"> <span><a class="button is-small" onclick="{edit.bind(this, ca)}" title="Edit"> <i class="fa fa-edit" aria-hidden="true"></i> </a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"> <i class="fa fa-trash" aria-hidden="true"></i> </a></span> </div> <div class="table-buttons" if="{ca.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.loading = false
      self.role = getCookie('role')

      self.update()
      self.readCategories()
      self.readCase()
    })
    self.on("unmount", function(){
      mentorcaseStore.off('add_case_changed', AddCaseChanged)
      mentorcaseStore.off('read_case_changed', ReadCaseChanged)
      mentorcaseStore.off('read_categories_changed',CategoriesChanged)
      mentorcaseStore.off('edit_case_changed',EditCaseChanged)
      mentorcaseStore.off('delete_case_changed',DeleteCaseChanged)
    })

    self.readCategories = () => {
       mentorcaseStore.trigger('read_categories')
    }

    self.readCase = () => {
       mentorcaseStore.trigger('read_case')
    }
    self.getData = () =>{
      self.loading = true
      mentorcaseStore.trigger('read_case')
    }

    self.csvExport = () => {
      mentorcaseStore.trigger('csv_export_mentor_case')
    }
     self.add = () => {
      if(!self.refs.addCaseInput.value){
        toastr.info("Please enter Case and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          mentorcaseStore.trigger('add_case', self.refs.addCaseInput.value,
           self.refs.category_id.value)
        }else if(self.title=='Update'){
          console.log('update')
          mentorcaseStore.trigger('edit_case', self.refs.addCaseInput.value,
            self.refs.category_id.value, self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.mentor_case.map(ca => {
          ca.confirmDelete = false
          ca.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.mentor_case.map(ca => {
        if(ca.case_id != e.item.ca.case_id){
          ca.confirmDelete = false
        }else{
          ca.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      mentorcaseStore.trigger('delete_case', e.item.ca.case_id)
    }

    self.edit = (ca,e) => {
      console.log(ca)
      self.title='Update'
      document.getElementById("addCaseInput").focus()
      self.refs.addCaseInput.value = ca.case_name
      self.refs.category_id.value = ca.category_id
      self.edit_id = ca.case_id
    }

    self.filterMentorCase = ()=>{
      self.filteredMentorCase = self.mentor_case.filter(c => {
        return JSON.stringify(c).toLowerCase().indexOf(self.refs.searchMentorCase.value.toLowerCase())>=0
      })
    }

    mentorcaseStore.on('add_case_changed',AddCaseChanged)
    function AddCaseChanged(mentor_case){
      console.log(mentor_case)
      self.title='Create'
      self.refs.addCaseInput.value = ''
      self.mentor_case = mentor_case
      self.update()
      self.readCase()
      self.readCategories()
    }

    mentorcaseStore.on('edit_case_changed',EditCaseChanged)
    function EditCaseChanged(mentor_case){
      console.log(mentor_case)
      self.title='Create'
      self.refs.addCaseInput.value = ''
      self.mentor_case = mentor_case
      self.update()
      self.readCase()
      self.readCategories()
    }

    mentorcaseStore.on('delete_case_changed',DeleteCaseChanged)
    function DeleteCaseChanged(mentor_case){
      console.log(mentor_case)
      self.title='Create'
      self.loading = false
      self.mentor_case = mentor_case
      self.update()
      self.readCase()
      self.readCategories()
    }

    mentorcaseStore.on('read_case_changed',ReadCaseChanged)
    function ReadCaseChanged(mentor_case){
      self.title='Create'
      self.refs.addCaseInput.value = ''
      self.loading = false
      self.mentor_case = mentor_case
      self.filteredMentorCase = mentor_case
      self.update()
    }

    mentorcaseStore.on('read_categories_changed',CategoriesChanged)
    function CategoriesChanged(categories){
      console.log(categories)
      self.categories = categories
      self.update()
      console.log(self.categories)
    }

});
riot.tag2('mentor-category', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Mentor Category Management</h2> <div class="level box no-print"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"> <label class="label">Category</label> </div> <div class="column is-full"> <input class="input" type="text" ref="addMentorCategoryInput" id="addMentorCategoryInput" onkeyup="{addEnter}"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold " onclick="{add}"> {title} </button> </div> </div> </div> <div class="level-right"> <div class="control"> <input class="input" ref="searchMentorCategory" onkeyup="{filterMentorCategory}" type="text" placeholder="Search By Category"> </div> <button class="button is-link has-text-weight-bold ml5 " onclick="{getData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-success has-text-weight-bold ml5" onclick="{downloadCSV}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold ml5" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Category</th> <th class="no-print"></th> </tr> </thead> <tbody> <tr each="{mc, i in filteredMentorCategory}"> <td>{i+1}</td> <td>{mc.category_name}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{mc.confirmDelete}"> <span><a class="button is-small" onclick="{edit.bind(this, mc)}" title="Edit"> <i class="fa fa-edit" aria-hidden="true"></i> </a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"> <i class="fa fa-trash" aria-hidden="true"></i> </a></span> </div> <div class="table-buttons" if="{mc.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.loading = false;
      self.role = getCookie('role')

      self.update()
      self.readCategories()
    })
    self.on("unmount", function(){
      mentorcategoryStore.off('mentor_category_changed',MentorCategoryChanged)
    })

    self.readCategories = () => {
       mentorcategoryStore.trigger('read_mentor_category')
    }

    self.getData = () =>{
      self.loading = true
      mentorcategoryStore.trigger('read_mentor_category')
    }

    self.csvExport = () => {
      mentorcategoryStore.trigger('csv_export_mentor_category')
    }

     self.add = () => {
      if(!self.refs.addMentorCategoryInput.value){
        toastr.info("Please enter Category and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          mentorcategoryStore.trigger('add_mentor_category', self.refs.addMentorCategoryInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          mentorcategoryStore.trigger('edit_mentor_category', self.refs.addMentorCategoryInput.value,self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.mentor_categories.map(mc => {
          mc.confirmDelete = false
          mc.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.mentor_categories.map(mc => {
        if(mc.category_id != e.item.mc.category_id){
          mc.confirmDelete = false
        }else{
          mc.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      mentorcategoryStore.trigger('delete_mentor_category', e.item.mc.category_id)
    }

    self.edit = (mc,e) => {
      self.title='Update'
      document.getElementById("addMentorCategoryInput").focus()
      self.refs.addMentorCategoryInput.value = mc.category_name
      self.edit_id = mc.category_id
    }

    self.filterMentorCategory = ()=>{
      self.filteredMentorCategory = self.mentor_categories.filter(c => {
        return JSON.stringify(c).toLowerCase().indexOf(self.refs.searchMentorCategory.value.toLowerCase())>=0
      })
    }

    mentorcategoryStore.on('mentor_category_changed',MentorCategoryChanged)
    function MentorCategoryChanged(mentor_categories){
      self.title='Create'
      self.refs.addMentorCategoryInput.value = ''
      self.loading = false
      self.mentor_categories = mentor_categories
      self.filteredMentorCategory = mentor_categories
      self.update()
    }

});
riot.tag2('mentor-class-wise-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered is-size-6" style="color: #ff3860;margin-bottom: 40px;">Class Wise Mentor Report <br>(Grand Total: {grand_total})<br>{Standard} {Section}</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" id="standard" onchange="{getSection}"> <option each="{standards}" riot-value="{standard_id}">{standard} </option> <option value="-1">ALL</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Section</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="section_id" id="section"> <option each="{filteredSections}" riot-value="{section_id}">{section} </option> <option value="-1">ALL</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Session</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="session_id"> <option each="{sessions}" riot-value="{session_id}">{session_name} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getData}"> GO </button> <input type="checkbox" id="checkTable" checked="{e.done}" onclick="{viewTable}" style="margin-top: 12px;"> <b>Table</b> </div> <div class="column"> <button class="button is-success has-text-weight-bold ml5 is-pulled-right" onclick="{csvExport}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <center> <div id="chart_div" show="{report_view ==\'show_graph\'}" style="width: 900px; height: 500px;"></div> </center> <div class="printOnly"> <div class="columns is-centered"> <table class="table is-striped is-hoverable is-bordered" style="margin-top:50px;width:50%;"> <thead> <tr> <th>Case</th> <th class="has-text-right">Total</th> </tr> </thead> <tbody> <tr each="{cd, i in class_wise_case_report}"> <td>{cd.category_name}</td> <td class="has-text-right">{cd.total}</td> </tr> <tr> <td class="has-text-right">Total</td> <td class="has-text-right">{grand_total}</td> </tr> </tbody> </table> </div> </div> <div class="columns is-centered no-print"> <table class="table is-striped is-hoverable is-bordered" style="width:50%;" show="{report_view ==\'show_table\'}"> <thead> <tr> <th>Case</th> <th class="has-text-right">Total</th> </tr> </thead> <tbody> <tr each="{cd, i in class_wise_case_report}"> <td>{cd.category_name}</td> <td class="has-text-right">{cd.total}</td> </tr> <tr> <td class="has-text-right">Total</td> <td class="has-text-right">{grand_total}</td> </tr> </tbody> </table> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.loading = false;
      self.readStandard()
      self.readSection()
      self.readSession()
      self.update();
    })

    self.on("unmount", function(){
      mentorReportStore.on('read_class_wise_report_changed',ReadClassWiseReportChanged)
      mentorReportStore.off('read_standard_changed',StandardChanged)
      mentorReportStore.off('read_section_changed',SectionChanged)
      mentorReportStore.off('read_session_changed',SessionChanged)
    })

    self.readStandard = () => {
       mentorReportStore.trigger('read_standard')
    }

    self.readSection = () => {
       mentorReportStore.trigger('read_section')
    }

    self.readSession = () => {
       mentorReportStore.trigger('read_session')
    }

    self.getSection = () => {
    	self.filteredSections = []
    	self.filteredSections = self.sections.filter(s => {
    		return s.standard_id == self.refs.standard_id.value
    	})
    }

    self.viewTable = () => {
    	if($('#checkTable').is(":checked")){
	        self.report_view = 'show_table'
    	}else{
	        self.report_view = 'show_graph'
    	}
    }

    self.getData = () => {
        self.loading = true
        mentorReportStore.trigger('read_class_wise_report', self.refs.standard_id.value,
        self.refs.section_id.value,self.refs.session_id.value)
        self.report_view = 'show_graph'
    }

    self.csvExport = () => {
        mentorReportStore.trigger('csv_class_wise_report', self.refs.standard_id.value,
        self.refs.section_id.value,self.refs.session_id.value)
    }

    mentorReportStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()
    }

    mentorReportStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections
      self.update()
    }

    mentorReportStore.on('read_session_changed',SessionChanged)
    function SessionChanged(sessions){
      console.log(sessions)
      self.sessions = sessions
      self.update()
    }

    mentorReportStore.on('read_class_wise_report_changed',ReadClassWiseReportChanged)
    function ReadClassWiseReportChanged(class_wise_case_report,grand_total){
      self.loading = false;
      self.class_wise_case_report = class_wise_case_report
      self.grand_total = grand_total

      self.Standard = $("#standard option:selected").text();
      self.Section = $("#section option:selected").text();

      var chartColors = ['#e3342f','#F6993F','#F2D024','#1F9D55','#2779BD','#9561E2','#B8C2CC','#e3342f','#F6993F','#F2D024','#1F9D55','#2779BD','#9561E2','#B8C2CC','#e3342f','#F6993F','#F2D024','#1F9D55','#2779BD','#9561E2','#B8C2CC'];

	    var chart_percentage = []
      	chart_percentage.push(['Head', 'Value', { role: 'style' }])
       	for (var i = self.class_wise_case_report.length - 1; i >= 0; i--) {
       		var p = 0
       		p = Number(((self.class_wise_case_report[i].total*100)/self.grand_total).toFixed(2))

       		console.log(p);
		   chart_percentage.push([self.class_wise_case_report[i].category_name,p,chartColors[i]])
		}
      	google.charts.load("current", {packages:['corechart']});
    	google.charts.setOnLoadCallback(drawChart);
    		function drawChart() {
      			var data = google.visualization.arrayToDataTable(chart_percentage);
      			var view = new google.visualization.DataView(data);
      			view.setColumns([0, 1,
                       	{ calc: "stringify",
                          sourceColumn: 1,
                          type: "string",
                          role: "annotation" },2
                ]);
      			var options = {
        				width: 600,
        				height: 400,

        				legend: { position: "none" },
        				vAxis: {
			             minValue: 0,
			             maxValue: 100,
			             format: '#\'%\''
			            }
      			};
      			var chart = new google.visualization.ColumnChart(document.getElementById("chart_div"));

      			chart.draw(view, options);

  			}
      	self.update()
    }
});
riot.tag2('mentor-date-wise-case-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered is-size-6" style="color: #ff3860;">Student Wise Mentor Case Report</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Category</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="category_id" id="CategoryName"> <option value="-1">ALL</option> <option each="{categories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="input date" ref="start_date" id="start_date" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="input date" ref="end_date" id="end_date" type="text" readonly="readonly"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getData}"> GO </button> </div> <div class="column"> <button class="button is-success has-text-weight-bold ml5 is-pulled-right" onclick="{csvExport}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <table class="table is-striped is-hoverable is-bordered is-fullwidth"> <p><center><strong>Session:{session_name} </strong></center></p> <p><center><strong>Category:{categoryName} From:{st_date} To: {en_date}</strong></center></p> <thead> <tr> <th>Sl No</th> <th>Name</th> <th>Enroll No</th> <th>Class</th> <th>Case</th> <th>Date</th> <th>Diagnosis</th> <th>Suggestion</th> </tr> </thead> <tbody> <tr each="{cd, i in date_wise_case_report}"> <td>{i+1}</td> <td>{cd.student_name}</td> <td>{cd.enroll_number}</td> <td>{cd.standard}</td> <td>{cd.case_name}</td> <td>{cd.consult_date}</td> <td>{cd.diagnosis}</td> <td>{cd.suggestion}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.loading = false;
      flatpickr(".date", {
	    allowInput: true,
        dateFormat: "d/m/Y",
  		})
      self.readCategories()
      self.update();
    })

    self.on("unmount", function(){
      mentorReportStore.off('read_date_wise_case_report_changed',ReadDateWiseCaseReportChanged)
      mentordetailStore.off('read_mentor_categories_changed',CategoriesChanged)
    })

    self.readCategories = () => {
       mentordetailStore.trigger('read_mentor_categories')
    }

    self.getData = () => {
    	var startDate = document.getElementById("start_date").value;
    	var endDate = document.getElementById("end_date").value;

    	if(!self.refs.start_date.value){
        	toastr.info("Please enter Start Date and try again")
      	}else if(!self.refs.end_date.value){
      		toastr.info("Please enter End Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
       		toastr.info("Please enter To Date Grater Than From Date")
      	}else{
    	var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          self.loading = true
          mentorReportStore.trigger('read_date_wise_case_report', obj,self.refs.category_id.value)
        }
    }
    self.csvExport = () => {
    	var startDate = document.getElementById("start_date").value;
    	var endDate = document.getElementById("end_date").value;

    	if(!self.refs.start_date.value){
        	toastr.info("Please enter Start Date and try again")
      	}else if(!self.refs.end_date.value){
      		toastr.info("Please enter End Date and try again")
      	}else if((Date.parse(startDate) >= Date.parse(endDate))){
       		toastr.info("Please enter To Date Grater Than From Date")
      	}else{
    	var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          mentorReportStore.trigger('csv_date_wise_case_report', obj,self.refs.category_id.value)
        }
    }

    mentordetailStore.on('read_mentor_categories_changed',CategoriesChanged)
    function CategoriesChanged(categories){
      console.log(categories)
      self.categories = categories
      self.update()
    }

    mentorReportStore.on('read_date_wise_case_report_changed',ReadDateWiseCaseReportChanged)
    function ReadDateWiseCaseReportChanged(date_wise_case_report,session_name){
      self.loading = false;
      self.date_wise_case_report = date_wise_case_report
      self.session_name = session_name
      console.log(self.date_wise_case_report)
      self.st_date = self.refs.start_date.value
      self.en_date = self.refs.end_date.value
      self.categoryName = $("#CategoryName option:selected").text();
      self.update()
    }
});
riot.tag2('mentor-detail', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{mentor_view ==\'show_mentor\'}"> <h2 class="title has-text-centered is-size-5" style="color: #ff3860;">Mentor Detail</h2> <div class="level box no-print"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"><label class="label">Category</label></div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="category_id" id="CategoryName" onchange="{getMentorData}"> <option value="-1">ALL</option> <option each="{categories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> </div> </div> <div class="level-right"> <div class="control"> <input class="input" ref="searchMentorDetail" onkeyup="{filterMentorDetail}" type="text" placeholder="Search By Enroll No or Name"> </div> <button class="button is-warning has-text-weight-bold ml5" onclick="{add_new_mentor}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> <button class="button is-link has-text-weight-bold ml5" onclick="{getMentorData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-success has-text-weight-bold ml5" onclick="{downloadCSV}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <a class="button is-primary has-text-weight-bold ml5" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </a> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <p><center><strong>Category:{categoryName}</strong></center></p> <thead> <tr> <th>SL No</th> <th>Referred by</th> <th>Name</th> <th>Enroll No</th> <th>Class</th> <th>Case</th> <th>Date</th> <th>Time In</th> <th>Time Out</th> <th>Diagnosis</th> <th>Suggestion</th> <th style="width: 120px;" class="no-print"></th> </tr> </thead> <tbody> <tr each="{ac, i in filteredMentorDetail}"> <td>{i + 1}</td> <td>{ac.referred_by}</td> <td>{ac.student_name}</td> <td>{ac.enroll_number}</td> <td>{ac.standard}</td> <td>{ac.case_name}</td> <td>{ac.consult_date}</td> <td>{ac.time_in}</td> <td>{ac.time_out}</td> <td>{ac.diagnosis}</td> <td>{ac.suggestion}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden " hide="{ac.confirmDelete}"> <span><a class="button is-small" onclick="{case_detail.bind(this, ac)}" title="Case Detail"> <i class="fa fa-share" aria-hidden="true"></i></a></span> <span><a class="button is-small" onclick="{edit.bind(this, ac.id)}" title="Edit"> <i class="fa fa-edit" aria-hidden="true"></i></a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"><i class="fa fa-trash" aria-hidden="true"></i></a></span> </div> <div class="table-buttons" if="{ac.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section class=" is-fluid" show="{mentor_view ==\'add_mentor\'}"> <div class="level"> <div class="level-left"> <div class="level-item"> <h2 class="title is-size-5" style="color: #ff3860;">{title} Detail</h2> </div> </div> <div class="level-right"> <button class="button is-warning has-text-weight-bold is-small" onclick="{close_new_mentor}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <div class="box"> <div class="columns"> <div class="column is-2"> <label class="label is-small" for="referredInput">Referred by</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="referredInput" id="referredInput"> <option value="Class Teacher">Class Teacher</option> <option value="School Authority">School Authority</option> <option value="Parent">Parent</option> <option value="Out Sider">Out Sider</option> <option value="Student Directly">Student Directly</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="enrollInput">Enroll No</label> </div> <div class="column is-2 "> <input class="input is-small" type="text" ref="enrollInput"> </div> <div class="column is-2"> <label class="label is-small" for="CategoryidInput">Category</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="CategoryidInput" onchange="{readCategoryCase}"> <option each="{categories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="case_id">Case</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="case_id"> <option each="{cases}" riot-value="{case_id}">{case_name} </option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="mentorDateInput">Date</label> </div> <div class="column is-2 "> <input class="input date is-small" type="text" ref="mentorDateInput" readonly> </div> <div class="column is-2"> <label class="label is-small" for="inTimeInput">Time In</label> </div> <div class="column is-2"> <input class="input is-small" ref="inTimeInput" type="time"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="outTimeInput">Time Out</label> </div> <div class="column is-2"> <input class="input is-small" ref="outTimeInput" type="time"> </div> <div class="column is-2"> <label class="label is-small" for="diagnosisInput">Diagnosis</label> </div> <div class="column is-2"> <input class="input is-small" ref="diagnosisInput" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="suggestionInput">Suggestion</label> </div> <div class="column is-2 "> <textarea class="textarea is-small" ref="suggestionInput" rows="3"></textarea> </div> </div> <div class="columns mt60"> <div class="column is-full"> <button class="button is-success has-text-weight-bold adjusted-top" onclick="{add}">Submit </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{close_new_mentor}">Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{mentor_view ==\'view_case_detail\'}"> <div class="level no-print"> <div class="level-left"> <div class="level-item"> </div> </div> <div class="level-right"> <button class="button is-warning has-text-weight-bold is-small" onclick="{add_case_detail}" title="Add Case "> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> <button class="button is-link has-text-weight-bold is-small ml10" onclick="{refress_case_detail}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-success has-text-weight-bold is-small ml5" onclick="{downloadCaseCSV}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <a class="button is-primary has-text-weight-bold is-small ml5" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </a> <button class="button is-warning has-text-weight-bold is-small ml10" onclick="{close_case_detail_view}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <p class="is-size-5 has-text-centered" style="color: #ff3860;">Case: {case_name} </p> <thead> <tr> <th>SL No</th> <th>Visitor</th> <th>Visit Date</th> <th>Time In</th> <th>Time Out</th> <th>Suggestion</th> <th>Status</th> <th style="width: 100px;" class="no-print"></th> </tr> </thead> <tbody> <tr each="{ca, i in caseDetails}"> <td>{i + 1}</td> <td>{ca.visitor}</td> <td>{ca.visit_date}</td> <td>{ca.time_in}</td> <td>{ca.time_out}</td> <td>{ca.suggestion}</td> <td>{ca.status}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ca.confirmCaseDelete}"> <span><a class="button is-small" onclick="{editCase.bind(this, ca.id)}" title="Edit"> <i class="fa fa-edit" aria-hidden="true"></i></a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small" rel="nofollow" onclick="{confirmCaseDelete}" title="Delete"><i class="fa fa-trash" aria-hidden="true"></i></a> </span> </div> <div class="table-buttons" if="{ca.confirmCaseDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{deleteCase}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelCaseOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section class=" is-fluid" show="{mentor_view ==\'add_case_detail\'}"> <div class="level"> <div class="level-left"> <div class="level-item"> <h2 class="title is-size-5" style="color: #ff3860;">{title} Case Detail</h2> </div> </div> <div class="level-right"> <button class="button is-warning has-text-weight-bold is-small" onclick="{close_add_case}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <div class="box"> <div class="columns"> <div class="column is-2"> <label class="label is-small" for="visitorInput">Visitor</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="visitorInput" id="visitorInput"> <option value="Student">Student</option> <option value="Class Teacher">Class Teacher</option> <option value="Parent">Parent</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="visitingDateInput">Visiting Date</label> </div> <div class="column is-2 "> <input class="input date is-small" type="text" ref="visitingDateInput" readonly> </div> <div class="column is-2"> <label class="label is-small" for="addCaseinTimeInput">Time In</label> </div> <div class="column is-2"> <input class="input is-small" ref="addCaseinTimeInput" type="time"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="addCaseoutTimeInput">Time Out</label> </div> <div class="column is-2"> <input class="input is-small" ref="addCaseoutTimeInput" type="time"> </div> <div class="column is-2"> <label class="label is-small" for="statusInput">Status</label> </div> <div class="column is-2 "> <input class="input is-small" ref="statusInput" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="addCasesuggestionInput">Suggestion</label> </div> <div class="column is-2"> <textarea class="textarea is-small" ref="addCasesuggestionInput" rows="3"></textarea> </div> </div> <div class="columns mt60"> <div class="column is-full"> <button class="button is-success has-text-weight-bold adjusted-top" onclick="{addCase}">Submit </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{close_add_case}">Cancel </button> </div> </div> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
    self.loading = false;
    self.title='Add'
    self.mentor_view = 'show_mentor'
    self.role = getCookie('role')
    self.update()
    flatpickr(".date", {
	   allowInput: true,
       dateFormat: "d/m/Y",
  	})
    self.readCategories()
    self.readCase()
    })

    self.on("unmount", function(){
      mentordetailStore.off('read_mentor_categories_changed',CategoriesChanged)
      mentordetailStore.off('read_case_changed',CaseChanged)
      mentordetailStore.off('read_mentor_changed',ReadMentorChanged)
      mentordetailStore.off('read_mentor_case_changed',ReadMentorCaseDetailsChanged)
      mentordetailStore.off('read_for_edit_mentor_changed',ReadMentorForEditChanged)
      mentordetailStore.off('add_case_detail_changed',AddCaseChanged)
      mentordetailStore.off('read_for_edit_case_changed',ReadCaseDetailsForEditChanged)
      mentordetailStore.off('edit_case_detail_changed',EditCaseDetailsChanged)
      mentordetailStore.off('delete_case_details_changed',DeleteCaseDetailsChanged)
    })

    self.readCategories = () =>{
      mentordetailStore.trigger('read_mentor_categories')
    }
    self.readCategoryCase = () => {
    	self.cases = []
    	self.cases = self.mentor_case.filter(c => {
          return c.category_id == self.refs.CategoryidInput.value
        })
    }

    self.readCase = () =>{
      mentordetailStore.trigger('read_case')
    }

    self.getMentorData = () =>{
      self.loading = true;
      mentordetailStore.trigger('read_mentor', self.refs.category_id.value)
    }

    self.downloadCSV = () =>{
      mentordetailStore.trigger('csv_export_mentor', self.refs.category_id.value)
    }

    self.add_new_mentor = () =>{
    	self.mentor_view='add_mentor'
    	self.title='Add'
    	self.clearForm()
    	self.update()
    }

     self.close_new_mentor = () =>{
    	self.mentor_view='show_mentor'
    	self.update()
    }

    self.add_case_detail = () => {
    	self.mentor_view='add_case_detail'
    	self.title='Add'
    	self.clearaddCaseForm()
    }

    self.close_add_case = () =>{
    	self.mentor_view='view_case_detail'
    }

    self.addCase = () => {
    	if(!self.refs.visitingDateInput.value){
       		toastr.info("Please enter Date and try again")
      	}else{
     	var obj={}
     	obj['visitor']=self.refs.visitorInput.value
     	obj['visit_date']=convertDate(self.refs.visitingDateInput.value)
     	obj['time_in']=self.refs.addCaseinTimeInput.value
     	obj['time_out']=self.refs.addCaseoutTimeInput.value
     	obj['status']=self.refs.statusInput.value
     	obj['suggestion']=self.refs.addCasesuggestionInput.value
     	obj['enroll_number']=self.enroll_number
     	obj['case_id']=self.case_id
     	console.log(obj)
     	if(self.title=='Add'){
           	mentordetailStore.trigger('add_case_detail', obj)
           	self.mentor_view='view_case_detail'
        }else if(self.title=='Update'){
            mentordetailStore.trigger('edit_case_detail', obj,self.edit_case_id)
            console.log(obj)
            self.mentor_view='view_case_detail'
          }
        }
    }

    self.edit = (c,ac) => {
      console.log(c)
      self.id = c
      mentordetailStore.trigger('read_for_edit_mentor',self.id)
      self.mentor_view='add_mentor'
      self.title='Update'

    }

    self.editCase = (c,ca) => {
      console.log(c)
      self.id = c
      mentordetailStore.trigger('read_for_edit_case',self.id)
      self.add_case_detail()
      self.title='Update'
    }
    self.cancelCaseOperation = (ca) => {
      self.caseDetails.map(c => {
          c.confirmCaseDelete = false
          c.confirmCaseEdit = false
      })
    }
    self.confirmCaseDelete = (ca) => {
      self.caseDetails.map(c => {
        if(c.id != ca.item.ca.id){
          c.confirmCaseDelete = false
        }else{
          c.confirmCaseDelete = true
        }
      })
    }

    self.deleteCase = (ca) => {
      self.loading = true
      mentordetailStore.trigger('delete_case_details', ca.item.ca.id)
    }

    self.cancelOperation = (ac) => {
      self.mentors.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }
    self.confirmDelete = (ac) => {
      self.mentors.map(c => {
        if(c.id != ac.item.ac.id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (ac) => {
      self.loading = true
      mentordetailStore.trigger('delete_mentor_detail', ac.item.ac.id)
    }

    self.add = () => {
    	if(!self.refs.enrollInput.value){
       		toastr.info("Please enter Enroll No. and try again")
      	}else if(!self.refs.CategoryidInput.value){
        	toastr.info("Please Select Category and try again")
      	}else if(!self.refs.mentorDateInput.value){
        	toastr.info("Please enter Date and try again")
      	}else{
     	var obj={}
     	obj['referred_by']=self.refs.referredInput.value
     	obj['enroll_number']=self.refs.enrollInput.value
     	obj['category_id']=self.refs.CategoryidInput.value
     	obj['case_id']=self.refs.case_id.value
     	obj['consult_date']=convertDate(self.refs.mentorDateInput.value)
     	obj['time_in']=self.refs.inTimeInput.value
     	obj['time_out']=self.refs.outTimeInput.value
     	obj['diagnosis']=self.refs.diagnosisInput.value
     	obj['suggestion']=self.refs.suggestionInput.value

     	if(self.title=='Add'){
           	mentordetailStore.trigger('add_mentor_detail', obj)
        }else if(self.title=='Update'){
            mentordetailStore.trigger('edit_mentor_detail', obj,self.edit_id)
            console.log(obj)
            self.mentor_view='show_mentor'
          }
        }
    }
    self.case_detail = (c,ac) => {
    	self.case_name = c.case_name
    	self.case_id = c.id
    	self.enroll_number = c.enroll_number
    	self.mentor_view = 'view_case_detail'
    	self.loading = true;
    	mentordetailStore.trigger('read_mentor_case', c.id,c.enroll_number)
    }

    self.refress_case_detail = () => {
    	self.loading = true;
    	mentordetailStore.trigger('read_mentor_case', self.case_id,self.enroll_number)
    }

    self.downloadCaseCSV = () => {
    	mentordetailStore.trigger('read_mentor_case_csv', self.case_id,self.enroll_number)
    }
    self.close_case_detail_view = ()=>{
    	self.mentor_view = 'show_mentor'
    }
    self.clearForm = () =>{
    	self.refs.referredInput.value = 'Class Teacher'
	    self.refs.enrollInput.value = ''
	    self.refs.mentorDateInput.value = ''
	    self.refs.inTimeInput.value = ''
	    self.refs.outTimeInput.value = ''
	    self.refs.diagnosisInput.value = ''
	    self.refs.suggestionInput.value = ''
	    self.readCategories()
	    self.readCategoryCase()
    }
    self.clearaddCaseForm = () => {
		self.refs.visitorInput.value = 'Student'
		self.refs.visitingDateInput.value = ' '
		self.refs.addCaseinTimeInput.value = ' '
		self.refs.addCaseoutTimeInput.value = ' '
		self.refs.statusInput.value = ' '
		self.refs.addCasesuggestionInput.value = ' '
    }

    self.filterMentorDetail = ()=>{
      self.filteredMentorDetail = self.mentors.filter(c => {
      	var filter_value=c.student_name + c.enroll_number;
        return JSON.stringify(filter_value).toLowerCase().indexOf(self.refs.searchMentorDetail.value.toLowerCase())>=0
      })
    }

    mentordetailStore.on('read_mentor_categories_changed',CategoriesChanged)
    function CategoriesChanged(categories){
      console.log(categories)
      self.categories = categories
      self.update()
      self.getMentorData()
    }

    mentordetailStore.on('read_case_changed',CaseChanged)
    function CaseChanged(mentor_case){
      console.log(mentor_case)
      self.mentor_case = mentor_case
      self.update()
    }

    mentordetailStore.on('add_mentor_detail_changed',MentorChanged)
    function MentorChanged(mentors){
      console.log(mentors)
      self.mentors = mentors
      self.mentor_view='show_mentor'
      self.clearForm()
      self.getMentorData()
      self.filteredMentorDetail = mentors
      self.update()
    }

    mentordetailStore.on('add_case_detail_changed',AddCaseChanged)
    function AddCaseChanged(case_details){
      console.log(case_details)
      self.case_details = case_details
      self.refress_case_detail();
      self.filteredMentorDetail = mentors
      self.update()
    }

    mentordetailStore.on('read_mentor_changed',ReadMentorChanged)
    function ReadMentorChanged(mentors){
      console.log(mentors)
      self.loading = false;
      self.mentors = mentors
      self.filteredMentorDetail = mentors
      self.categoryName = $("#CategoryName option:selected").text();
      if(self.mentors.length==0){
      	toastr.info("No Data Found")
      }
      self.update()
     }

    mentordetailStore.on('read_for_edit_mentor_changed',ReadMentorForEditChanged)
    function ReadMentorForEditChanged(mentor_details){
      console.log(mentor_details)
      self.mentor_details = mentor_details
      self.refs.referredInput.value = mentor_details[0].referred_by
      self.refs.enrollInput.value = mentor_details[0].enroll_number
      self.refs.CategoryidInput.value = mentor_details[0].category_id
      self.cases = []
	  self.cases = self.mentor_case.filter(a => {
	    return a.category_id == mentor_details[0].category_id
	  })
      self.refs.mentorDateInput.value = mentor_details[0].consult_date
      self.refs.inTimeInput.value = mentor_details[0].time_in
      self.refs.outTimeInput.value = mentor_details[0].time_out
      self.refs.diagnosisInput.value = mentor_details[0].diagnosis
      self.refs.suggestionInput.value = mentor_details[0].suggestion
      self.edit_id = mentor_details[0].id
      self.update()
      self.refs.case_id.value = mentor_details[0].case_id
      console.log(self.mentor_details)
     }

    mentordetailStore.on('edit_mentor_detail_changed',EditMentorChanged)
    function EditMentorChanged(mentors){
      console.log(mentors)
      self.mentors = mentors
      self.mentor_view='show_mentor'
      self.clearForm()
      self.getMentorData()
      self.filteredMentorDetail = mentors
      self.update()
    }

    mentordetailStore.on('read_mentor_case_changed',ReadMentorCaseDetailsChanged)
    function ReadMentorCaseDetailsChanged(mentor_case_details){
      console.log(mentor_case_details)
      self.loading = false;
      self.mentor_case_details = mentor_case_details
      self.caseDetails = []
      self.caseDetails = self.mentor_case_details
      if(self.caseDetails.length==0){
      	toastr.info("No Data Found")
      }
      self.update()
      console.log(self.caseDetails)

     }

    mentordetailStore.on('read_for_edit_case_changed',ReadCaseDetailsForEditChanged)
    function ReadCaseDetailsForEditChanged(update_case_details_for_update){
      self.update_case_details_for_update = update_case_details_for_update
      self.refs.visitorInput.value = update_case_details_for_update[0].visitor
	  self.refs.visitingDateInput.value = update_case_details_for_update[0].visit_date
	  self.refs.addCaseinTimeInput.value = update_case_details_for_update[0].time_in
	  self.refs.addCaseoutTimeInput.value = update_case_details_for_update[0].time_out
	  self.refs.statusInput.value = update_case_details_for_update[0].status
	  self.refs.addCasesuggestionInput.value = update_case_details_for_update[0].suggestion
	  self.edit_case_id = update_case_details_for_update[0].id

      self.update()

     }

    mentordetailStore.on('edit_case_detail_changed',EditCaseDetailsChanged)
    function EditCaseDetailsChanged(edit_case_details){
      console.log(edit_case_details)
      self.refress_case_detail()
      self.update()
     }

    mentordetailStore.on('delete_case_details_changed',DeleteCaseDetailsChanged)
    function DeleteCaseDetailsChanged(delete_case_details){
      console.log(delete_case_details)
      self.refress_case_detail()
      self.update()
     }

    mentordetailStore.on('delete_mentor_detail_changed',DeleteMentorDetailsChanged)
    function DeleteMentorDetailsChanged(delete_mentor_details){
      console.log(delete_mentor_details)
      self.getMentorData()

      self.update()
     }
});
riot.tag2('mentor-report', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_master == \'mentor-case-wise-report\'}" href="#/mentor-report/mentor-case-wise-report"> <span>Case Wise Report</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'mentor-class-wise-report\'}" href="#/mentor-report/mentor-class-wise-report"> <span>Class Wise Report</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'mentor-date-wise-case-report\'}" href="#/mentor-report/mentor-date-wise-case-report"> <span>Date Wise Case Report</span> </a> </p> </div> <div id="mentor-report-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_master')
    console.log(opts.selected_master)
    if(!opts.selected_master){
      self.selected_master = 'mentor-case-wise-report'
    }else{
      self.selected_master = opts.selected_master
    }
});
riot.tag2('mentor-setting', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_master == \'mentor-category\'}" href="#/mentor-setting/mentor-category"> <span>Category</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'mentor-case\'}" href="#/mentor-setting/mentor-case"> <span>Case</span> </a> </p> </div> <div id="mentor-setting-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_master')
    console.log(opts.selected_master)
    if(!opts.selected_master){
      self.selected_master = 'mentor-category'
    }else{
      self.selected_master = opts.selected_master
    }
});
riot.tag2('merit-list', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Merit List</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded ml5" onclick="{readReport}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"><label class="label">Standard</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="standardSelect" onchange="{changeSection}"> <option value="">Select Standard</option> <option each="{classes}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="sectionSelect" onchange="{readClassSubject}"> <option value="">Select Section</option> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readReport}">GO </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th style="width:100px;">Sl No</th> <th>Enroll No</th> <th>Student Name</th> <th>Roll No</th> <th>Max Marks</th> <th>Marks Obtained</th> <th>Percentage</th> <th>Rank</th> </tr> </thead> <tbody> <tr each="{c, i in reports}"> <td>{i+1}</td> <td>{c.enroll_number}</td> <td>{c.student_name}</td> <td>{c.roll_number}</td> <td>{c.max_marks}</td> <td>{c.marks_obtained}</td> <td>{c.percentage}</td> <td>{i+1}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.loading = false;
      self.update()
      self.readClass()
      self.readSection()
    })
    self.on("unmount", function(){
      marksReportStore.off('read_classes_changed',ClassesChanged)
      marksReportStore.off('read_section_changed',SectionChanged)

      marksReportStore.off('read_merit_list_changed',ReportChanged)
    })

    self.readClass = () => {
       self.loading = true;
       marksReportStore.trigger('read_classes')
    }

    self.readSection = () => {
       self.loading = true;
       marksReportStore.trigger('read_section')
    }

    self.changeSection = () => {
       if(self.refs.standardSelect.value==''){
        toastr.info("Please select standard and try again")
       }else{
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.standardSelect.value
        })
       }

       marksReportStore.trigger('read_exam_types',self.refs.standardSelect.value)
    }

    self.readReport = () => {
      let error = '';

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(self.refs.standardSelect.value==''){
        error = error + "Please select exam type, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading=true
        marksReportStore.trigger('read_merit_list',self.refs.standardSelect.value, self.refs.sectionSelect.value)
      }

    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

    marksReportStore.on('read_classes_changed',ClassesChanged)
    function ClassesChanged(classes){
      self.loading = false
      self.classes = []
      self.classes = classes
      self.update()
      console.log(self.classes)
    }

    marksReportStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      self.loading = false
      self.sections = []
      self.sections = sections
      self.update()
    }

    marksReportStore.on('read_merit_list_changed',ReportChanged)
    function ReportChanged(reports){
      self.loading = false
      self.reports = []
      self.reports = reports
      self.update()
    }

});
riot.tag2('month-wise', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="date input form-control input" id="start_date" ref="start_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="date input form-control input" id="end_date" ref="end_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{getMonthlyFees}"> GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Month Wise Fees Report</p> <p class="has-text-centered">Session: {sessionName}</p> <p class="has-text-centered">{fromSelectedDate} - {toSelectedDate}</p> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th>Month</th> <th>Fees</th> <th>Fine</th> <th>Scholarship</th> <th>Total</th> </tr> </thead> <tbody> <tr each="{cd, i in monthlyData}"> <td>{cd.month}</td> <td class="has-text-right amount">{cd.fees}</td> <td class="has-text-right amount">{cd.fine}</td> <td class="has-text-right amount">{cd.scholarship}</td> <td class="has-text-right amount">{cd.total}</td> </tr> <tr> <th class="has-text-right">Total</th> <th class="has-text-right amount">{totalFees}</th> <th class="has-text-right amount">{totalFine}</th> <th class="has-text-right amount">{totalScholarship}</th> <th class="has-text-right amount">{totalGrandTotal}</th> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
	self.fromSelectedDate = ''
	self.toSelectedDate = ''
    self.on("mount", function(){
      flatpickr(".date", {
        allowInput: true,
        dateFormat: "d/m/Y",
      })
      self.update();
    })

    self.on("unmount", function(){
      feesReportStore.off('read_monthly_fees_changed',ReadMonthlyFeesChanged)
    })

    self.getMonthlyFees = () => {
    	var startDate = document.getElementById("start_date").value
    	var endDate = document.getElementById("end_date").value
    	if(!self.refs.start_date.value){
    		toastr.info("Pleae enter From Date and try again")
    	}else if(!self.refs.end_date.value){
    		toastr.info("Pleae enter End Date and try again")
    	}else if((Date.parse(startDate)> Date.parse(endDate))){
           toastr.info("From date can't be greater")
    	}else{
    	var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          self.loading = true
          feesReportStore.trigger('read_monthly_fees', obj)
         }
    }

    feesReportStore.on('read_monthly_fees_changed',ReadMonthlyFeesChanged)
    function ReadMonthlyFeesChanged(monthlyData, session_name){
      self.totalFees = 0
      self.totalFine = 0
      self.totalScholarship = 0
      self.totalGrandTotal = 0
      console.log(monthlyData)
      self.monthlyData = []
      self.monthlyData = monthlyData
       self.monthlyData.map(c => {
          self.totalFees +=Number(c.fees)
          self.totalFine +=Number(c.fine)
          self.totalScholarship +=Number(c.scholarship)
          self.totalGrandTotal +=Number(c.total)
      })
       self.sessionName = session_name
       self.fromSelectedDate = self.refs.start_date.value
       self.toSelectedDate = self.refs.end_date.value
       self.loading = false

      self.update()
    }
});
riot.tag2('monthly-attendance', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Monthly Attendance Report</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" id="standard_id" onchange="{readStandardSection}"> <option></option> <option each="{standards}" riot-value="{standard_id}">{standard} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Section</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="section_id" id="section_id" onchange="{getMonthlyAttendanceData}"> <option each="{filteredSections}" riot-value="{section_id}">{section} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Month</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="monthList" id="monthList"> <option value="1">January</option> <option value="2">February</option> <option value="3">March</option> <option value="4">April</option> <option value="5">May</option> <option value="6">June</option> <option value="7">July</option> <option value="8">August</option> <option value="9">September</option> <option value="10">October</option> <option value="11">November</option> <option value="12">December</option> </select> </div> </div> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{getMonthlyAttendanceData}"> GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th>Teacher</th> <th>Standard</th> <th>Section</th> <th>Present</th> <th>Absent</th> <th>Time</th> </th> </tr> </thead> <tbody> <tr each="{st, i in dailyAttendanceData}"> <td>{i+1}</td> <td>{st.teacher_name}</td> <td>{st.standard} </td> <td>{st.section} </td> <td>{st.pr} </td> <td>{st.ab} </td> <td>{st.time} </td> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.role = getCookie('role')
        flatpickr(".date", {
    	allowInput: true,
        dateFormat: "d/m/Y",
  		})
  		self.readSection()
	    self.readStandard()
	    self.update();
    })

    self.on("unmount", function(){
       applyPlanStore.off('read_standard_changed',StandardChanged)
       applyPlanStore.off('read_section_changed',SectionChanged)

       attendanceStore.off('read_monthly_attendance_data_changed',ReadMonthlyAttendanceDataChanged)
    })

   self.readStandard = () => {
       applyPlanStore.trigger('read_standards')
    }
    self.readSection = () => {
       applyPlanStore.trigger('read_sections')

    }

    self.readStandardSection = () => {

       console.log('filter')
       self.filteredSections = []
       self.filteredSections = self.sections.filter(s => {
       	return s.standard_id == self.refs.standard_id.value
       })
    }

    applyPlanStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()

    }
    applyPlanStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections
      self.section_id = sections[0].section_id

      self.update()
    }

    self.getMonthlyAttendanceData = () =>{
      var obj={}
	  obj.standard_id = self.refs.standard_id.value
	  obj.section_id = self.refs.section_id.value
      obj.month_id = self.refs.monthList.value

      attendanceStore.trigger('read_monthly_attendance_data', obj)
    }

    attendanceStore.on('read_monthly_attendance_data_changed',ReadMonthlyAttendanceDataChanged)
    function ReadMonthlyAttendanceDataChanged(monthlyAttendanceData){

      self.loading = false
      self.monthlyAttendanceData = monthlyAttendanceData
      self.update()
    }

});
riot.tag2('new-admission-category-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h4 class="title has-text-centered" style="color: #ff3860;">New Admission Class wise Category strength({session_name})</h4> <div class="box no-print"> <div class="columns"> <div class=" column"> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i></span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readNewStudentCategoryReport}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th>Standard</th> <th>General</th> <th>ST</th> <th>SC</th> <th>OBC</th> </tr> </thead> <tbody> <tr each="{st, i in newStudentCategoryReports}"> <td>{i+1}</td> <td>{st.standard}</td> <td>{st.General}</td> <td>{st.ST}</td> <td>{st.SC}</td> <td>{st.OBC}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.readNewStudentCategoryReport()
    	self.role = getCookie('role')
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){

      adminReportStore.off('read_new_student_category_report_changed',ReadNewStudentCategoryReportChanged)
    })

    self.readNewStudentCategoryReport = () => {
    	self.loading=true
       adminReportStore.trigger('read_new_student_category_report')
    }

    adminReportStore.on('read_new_student_category_report_changed',ReadNewStudentCategoryReportChanged)
    function ReadNewStudentCategoryReportChanged(newStudentCategoryReports,session_name){
      self.title='Create'
      self.loading = false
      console.log(session_name)
      self.session_name = session_name
      self.newStudentCategoryReports = newStudentCategoryReports
      self.update()

    }

});
riot.tag2('new-admission-list-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h4 class="title has-text-centered" style="color: #ff3860;">New Student For Admission ({session_name})</h4> <div class="box no-print"> <div class="columns"> <div class=" column"> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i></span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{ReadNewStudentListReports}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th>Enroll No</th> <th>Student Name</th> <th>Category Name</th> <th>DOB</th> <th>Blood Group</th> <th>Religion</th> <th>Withdrawn</th> </tr> </thead> <tbody> <tr each="{st, i in newStudentListReports}"> <td>{i+1}</td> <td>{st.enroll_number}</td> <td>{st.student_name}</td> <td>{st.category_name}</td> <td>{st.dob}</td> <td>{st.blood_group}</td> <td>{st.religion}</td> <td>{st.withdraw}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.ReadNewStudentListReports()
    	self.role = getCookie('role')
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){

      adminReportStore.off('read_new_student_list_report_changed',ReadNewStudentListReportChanged)
    })

    self.ReadNewStudentListReports = () => {
    	self.loading=true
       adminReportStore.trigger('read_new_student_list_report')
    }

    adminReportStore.on('read_new_student_list_report_changed',ReadNewStudentListReportChanged)
    function ReadNewStudentListReportChanged(newStudentListReports,session_name){

      self.title='Create'
      self.loading = false
      self.session_name = session_name
      self.newStudentListReports = newStudentListReports
      self.update()

    }

});
riot.tag2('new-admission-report', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_new_admission_report == \'new-admission-category-report\'}" href="#/admin-report/new-admission-report/new-admission-category-report"> <span>New Admission Category</span> </a> </p> <p class="control"> <a class="button {is-active: selected_new_admission_report == \'new-admission-list-report\'}" href="#/admin-report/new-admission-report/new-admission-list-report"> <span>New Admission List</span> </a> </p> </div> <div id="new-admission-report-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_new_admission_report')
    console.log(opts.selected_new_admission_report)
    if(!opts.selected_new_admission_report){
      self.selected_new_admission_report = 'new-admission-category-report'
    }else{
      self.selected_new_admission_report = opts.selected_new_admission_report
    }
});



riot.tag2('new-event', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid" show="{event_view ==\'show_event\'}"> <div class="" style="margin-bottom:10px"> <div class="columns"> <div class="column"> <span class="title has-text-centered" style="color: #ff3860;"> Events</span> <button class="button is-primary has-text-weight-bold is-pulled-right no-print" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right no-print" onclick="{readNewEvent}" style="margin-right:5px;margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-info is-rounded is-pulled-right no-print" onclick="{add_new_event}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th>#</th> <th>Event Type</th> <th>Event Name</th> <th>Start Date</th> <th>End Date</th> <th>Holiday</th> <th>Detail</th> <th>Action</th> </tr> </thead> <tbody> <tr each="{st, i in newEvents}"> <td>{i+1}</td> <td>{st.event_type}</td> <td>{st.event_name}</td> <td>{st.s_date}</td> <td>{st.e_date}</td> <td>{st.holiday}</td> <td>{st.description}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{st.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, st)}">Edit</a></span> <span> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{st.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section class="is-fluid" show="{event_view ==\'add_new_event\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} Event</h2> </div> <div class="level-right"> <button class="button" onclick="{close_new_event}">Back</button> </div> </div> <div class="box"> <div class="columns is-variable is-1 is-multiline"> <div class="column is-one-third"> <label class="label" for="student_course">Event Type</label> <div class="control"> <div class="select is-fullwidth"> <select ref="event_type_id"> <option each="{eventTypes}" riot-value="{event_type_id}">{event_type} </option> </select> </div> </div> </div> <div class="column is-one-third"> <label class="label">Event Name</label> <input class="input" ref="event_name" placeholder="" type="text"> </div> <div class="column is-one-third"> <label class="label">Date From</label> <input class="input date flatpickr-input form-control input" ref="start_date" placeholder="" tabindex="0" type="text"> </div> <div class="column is-one-third"> <label class="label">Date To</label> <input class="input date flatpickr-input form-control input" ref="end_date" placeholder="" tabindex="0" type="text"> </div> <div class="column is-one-third"> <label class="label">Description</label> <textarea class="input" ref="detail" rows="2" type="text"></textarea> </div> <div class="column is-one-third"> <label class="label">Holiday</label> <input type="checkbox" id="holiday_check_box"> </div> <div class="column is-full"> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{add}">{title}</button> </div> </div> </div> </section>', '', '', function(opts) {
   var self = this
     self.on("mount", function(){
       self.title='Create'
       self.role = getCookie('role')
       self.update()
       self.readEventType()
       self.readNewEvent()
       self.event_view='show_event'
       flatpickr(".date", {
         allowInput: true,
         altFormat: "d/m/Y",
         dateFormat: "Y-m-d",
       })
     })
     self.on("unmount", function(){
       neweventStore.off('add_new_event_changed', AddNewEventChanged)
       neweventStore.off('read_new_event_changed', ReadNewEventChanged)
       neweventStore.off('read_event_type_changed',EventTypeChanged)
       neweventStore.off('edit_new_event_changed',EditEventTypeChanged)
       neweventStore.off('delete_new_event_changed',DeleteEventChanged)
     })

     self.readEventType = () => {
        neweventStore.trigger('read_event_type')
     }

     self.add_new_event = () => {
        self.event_view='add_new_event'
     }
    self.close_new_event = () => {
        self.event_view='show_event'
        self.readNewEvent()
    }

     self.readNewEvent = () => {
      self.loading=true
        neweventStore.trigger('read_new_event')
     }

      self.add = () => {
          if($('#holiday_check_box').is(":checked")){
          self.holiday='Y';
        }else{
          self.holiday='N';
        }
       if(!self.refs.event_name.value){
         toastr.info("Please enter Event and try again")
       }else{
         self.loading = true
         if(self.title=='Create'){
           console.log('create')
           neweventStore.trigger('add_new_event', self.refs.event_type_id.value,
            self.refs.event_name.value,self.refs.start_date.value,self.refs.end_date.value,self.refs.detail.value,self.holiday)
         }else if(self.title=='Update'){
           console.log('update')
           neweventStore.trigger('edit_new_event', self.refs.event_type_id.value,
            self.refs.event_name.value,self.refs.start_date.value,self.refs.end_date.value,self.refs.detail.value ,self.holiday,self.edit_id)
         }
       }
     }

     self.addEnter = (e) => {
       if(e.which == 13){
         self.add()
       }
     }

      self.editEnter = (e) => {
       if(e.which == 13){
         self.edit(e)
       }
     }

    self.cancelOperation = (e) => {
       self.newEvents.map(ev => {
           ev.confirmDelete = false
           ev.confirmEdit = false
       })
     }

     self.confirmDelete = (e) => {
     	console.log(e.item.st.event_id)
     	console.log("+++++++++++++")
       self.newEvents.map(ev => {
       	console.log(ev.event_id)
         if(ev.event_id != e.item.st.event_id){
           ev.confirmDelete = false
         }else{
           ev.confirmDelete = true
         }
       })
     }

     self.delete = (e) => {
       self.loading = true
       neweventStore.trigger('delete_new_event', e.item.st.event_id)
     }

     self.edit = (ev,e) => {
       console.log(ev)
       self.title='Update'
        flatpickr(".date", {
         allowInput: true,
         altFormat: "d/m/Y",
         dateFormat: "Y-m-d",
       })
       self.event_view='add_new_event'
       self.refs.event_name.value = ev.event_name
       self.refs.start_date.value = ev.start_date
       self.refs.end_date.value = ev.end_date
       self.refs.detail.value = ev.description
       self.refs.event_type_id.value = ev.event_type_id
        console.log(ev.holiday);
       if(ev.holiday=='Y'){
         $('#holiday_check_box').prop('checked',true)
       }else{
         $('#holiday_check_box').prop('checked',false)
       }
       self.edit_id = ev.event_id
     }

     neweventStore.on('add_new_event_changed',AddNewEventChanged)
     function AddNewEventChanged(newEvents){
       console.log(newEvents)
       self.title='Create'
       self.refs.event_name.value =''
       self.refs.start_date.value =''
       self.refs.end_date.value =''
       self.refs.detail.value =''
       self.refs.event_type_id.value =''
       self.loading = false
       self.newEvents = newEvents
       self.update()
       self.readNewEvent()
       console.log(self.newEvents)
     }

     neweventStore.on('edit_new_event_changed',EditNewEventChanged)
     function EditNewEventChanged(newEvents){
       console.log(newEvents)
       self.title='Create'
       self.refs.event_name.value =''
       self.refs.start_date.value =''
       self.refs.end_date.value =''
       self.refs.detail.value =''
       self.refs.event_type_id.value =''
       self.loading = false
       self.newEvents = newEvents
       self.update()
       self.readNewEvent()
       console.log(self.empsectionsloye_roles)
     }

     neweventStore.on('delete_new_event_changed',DeleteNewEventChanged)
     function DeleteNewEventChanged(newEvents){
       console.log(newEvents)
       self.title='Create'
       self.refs.event_name.value =''
       self.refs.start_date.value =''
       self.refs.end_date.value =''
       self.refs.detail.value =''
       self.refs.event_type_id.value =''
       self.loading = false
       self.newEvents = newEvents
       self.update()
       self.readNewEvent()
       console.log(self.newEvents)
     }

     neweventStore.on('read_new_event_changed',ReadNewEventChanged)
     function ReadNewEventChanged(newEvents){
       console.log(newEvents)
       self.title='Create'
       self.refs.start_date.value =''
       self.refs.end_date.value =''
       self.refs.detail.value =''
       self.refs.event_type_id.value =''
       self.loading = false
       self.newEvents = newEvents
       self.update()
       console.log(self.newEvents)
     }

     neweventStore.on('read_event_type_changed',EventTypeChanged)
     function EventTypeChanged(eventTypes){
       console.log(eventTypes)
       self.eventTypes = eventTypes
       self.update()
       console.log(self.eventTypes)
     }

});
riot.tag2('occupation-report', '<section class=" is-fluid"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Occupation Report</h2> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="occupation" onchange="{getOccupationReportData}"> <option>Choose Occupation</option> <option each="{parentOccupations}" riot-value="{occupation}">{occupation} </option> </select> </div> </div> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th>Enroll No</th> <th>Class</th> <th>Student Name</th> <th>Relation</th> <th>Father/Mother/Guardian</th> <th>Mobile</th> <th>Email</th> <th>Address</th> </tr> </thead> <tbody> <tr each="{st, i in occupationReports}"> <td>{i+1}</td> <td>{st.enroll_number}</td> <td>{st.standard}</td> <td>{st.first_name} {st.middle_name} {st.last_name}</td> <td>{st.relation}</td> <td>{st.name}</td> <td>{st.mobile}</td> <td>{st.email}</td> <td>{st.add_line1} ,{st.add_line2}, {st.city}, {st.state}-{st.zip}, {st.country}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.readOccupation()
    	self.role = getCookie('role')
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
      adminReportStore.off('read_occupation_changed',OccupationChanged)
      adminReportStore.off('read_occupation_report_change',ReadOccupationReportChanged)
    })

	self.readOccupation = () => {
       adminReportStore.trigger('read_occupation')
    }

    self.getOccupationReportData = () => {
       adminReportStore.trigger('read_occupation_report',self.refs.occupation.value)
    }

   adminReportStore.on('read_occupation_changed',OccupationChanged)
    function OccupationChanged(parentOccupations){
      console.log(parentOccupations)
      self.parentOccupations = parentOccupations
      self.update()
    }

    adminReportStore.on('read_occupation_report_change',ReadOccupationReportChanged)
    function ReadOccupationReportChanged(occupationReports){
      console.log(occupationReports)
      self.occupationReports = occupationReports
      self.update()
    }

});
riot.tag2('outstanding-fees-class', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" id="standard_id" onchange="{readStandardSection}"> <option></option> <option each="{standards}" riot-value="{standard_id}">{standard} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Section</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="section_id" id="section_id" onchange="{getStudentData}"> <option each="{filteredSections}" riot-value="{section_id}">{section} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Month</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="monthList" id="monthList"> <option value="1">January</option> <option value="2">February</option> <option value="3">March</option> <option value="4">April</option> <option value="5">May</option> <option value="6">June</option> <option value="7">July</option> <option value="8">August</option> <option value="9">September</option> <option value="10">October</option> <option value="11">November</option> <option value="12">December</option> </select> </div> </div> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{getDueByClass}"> GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Outstanding Fees Report</p> <p class="has-text-centered">Session: {sessionName}</p> <p class="has-text-centered">Class:{selectedClass} Month:{selectedMonth}</p> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th class="slNo">#</th> <th>Enrol No</th> <th>Student\'s Name</th> <th>Class</th> <th>Father\'s Name</th> <th>Mobile</th> <th>SMS No</th> <th>Fees</th> </tr> </thead> <tbody> <tr each="{cd, i in outstandingFees}"> <td>{i + 1}</td> <td>{cd.enroll_number}</td> <td>{cd.student_name}</td> <td>{cd.standard}</td> <td>{cd.f_name}</td> <td>{cd.f_mobile}</td> <td>{cd.sms}</td> <td class="has-text-right">{cd.fees}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      flatpickr(".date", {
    	allowInput: true,
        dateFormat: "d/m/Y",
  		})
      self.readSection()
      self.readStandard()
      self.update();
    })

    self.on("unmount", function(){
      applyPlanStore.off('read_standard_changed',StandardChanged)
      applyPlanStore.off('read_section_changed',SectionChanged)
      feesReportStore.off('read_outstanding_classwise_changed',ReadOutStandingClasswiseChanged)
    })

   self.readStandard = () => {
       applyPlanStore.trigger('read_standards')
    }
    self.readSection = () => {
       applyPlanStore.trigger('read_sections')

    }

    self.readStandardSection = () => {

       console.log('filter')
       self.filteredSections = []
       self.filteredSections = self.sections.filter(s => {
       	return s.standard_id == self.refs.standard_id.value
       })
    }

    applyPlanStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()

    }
    applyPlanStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections
      self.section_id = sections[0].section_id

      self.update()
    }
    self.getDueByClass = () => {
    	var obj={}
    	  obj.standard_id = self.refs.standard_id.value
    	  obj.section_id = self.refs.section_id.value
          obj.month_id = self.refs.monthList.value
          self.loading = true
          feesReportStore.trigger('read_outstanding_classwise', obj)
    }

    feesReportStore.on('read_outstanding_classwise_changed',ReadOutStandingClasswiseChanged)
    function ReadOutStandingClasswiseChanged(outstandingFees, session_name){
      	self.grand_total = 0
      	self.outstandingFees = []
      	self.outstandingFees = outstandingFees
        self.loading = false
        self.sessionName = session_name
        self.selectedClass = $("#standard_id option:selected").text() + '-' + $("#section_id option:selected").text()
        self.selectedMonth = $("#monthList option:selected").text()
      self.update()
    }
});
riot.tag2('outstanding-fees', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="date input" id="start_date" ref="start_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="date input" id="end_date" ref="end_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{getOutstandingFees}"> GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Month Wise Fees Report</p> <p class="has-text-centered">Session: {sessionName}</p> <p class="has-text-centered">Class:{selectedClass} Month:{selectedMonth}</p> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th class="slNo">#</th> <th>Enrol No</th> <th>Class/student\'s Name</th> <th>Mobile (F)</th> <th>SMS No.</th> <th>Month</th> <th>Fees</th> </tr> </thead> <tbody> <tr each="{cd, i in outstandingData}"> <td>{cd.slNo}</td> <td>{cd.enroll_number}</td> <td>{cd.student_name}</td> <td>{cd.f_mobile}</td> <td>{cd.mobile}</td> <td>{cd.fee_slip_name}</td> <td class="has-text-right amount">{cd.fees}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      flatpickr(".date", {
    	 allowInput: true,
        dateFormat: "d/m/Y",
  		})
      self.update();
    })

    self.on("unmount", function(){
      feesReportStore.off('read_outstanding_fees_changed',ReadOutstandingFeesChanged)
    })

    self.getOutstandingFees = () => {
    	var startDate = document.getElementById("start_date").value
    	var endDate = document.getElementById("end_date").value
    	if(!self.refs.start_date.value){
    		toastr.info("Pleae enter From Date and try again")
    	}else if(!self.refs.end_date.value){
    		toastr.info("Pleae enter End Date and try again")
    	}else if((Date.parse(startDate)> Date.parse(endDate))){
           toastr.info("From date can't be greater")
    	}else{
    	var obj={}
          obj['start_date']=convertDate(self.refs.start_date.value)
          obj['end_date']=convertDate(self.refs.end_date.value)
          self.loading = true
          feesReportStore.trigger('read_outstanding_fees', obj)
          }
    }

    feesReportStore.on('read_outstanding_fees_changed',ReadOutstandingFeesChanged)
    function ReadOutstandingFeesChanged(outstandingData, session_name){
      self.outstandingData = []
      self.outstandingData = outstandingData

      self.sessionName = session_name
      self.fromSelectedDate = self.refs.start_date.value
      self.toSelectedDate = self.refs.end_date.value
      self.loading = false
      self.update()
    }
});
riot.tag2('parentgroup', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Parent Group Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Group Name</label> </div> <div class="column is-narrow"> <div class="control"> <div class="control"> <input class=" input" ref="addPGNameInput" type="text" onkeyup="{addEnter}"> </div> </div> </div> <div class="column is-narrow"> <label class="label">Detail</label> </div> <div class="column is-narrow"> <div class="control"> <textarea class=" input" ref="addPGDetailInput" type="text" onkeyup="{addEnter}"></textarea> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readParentGroup}" style="margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Group Name</th> <th>Detail</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in parentGroups}"> <td>{i+1}</td> <td>{ev.pgroup_name}</td> <td>{ev.pgroup_detail}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ev.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, ev)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readParentGroup()
    })
    self.on("unmount", function(){
      parentgroupStore.off('add_parentgroup_changed', AddParentGroupChanged)
      parentgroupStore.off('read_parentgroup_changed', ReadParentGroupChanged)
      parentgroupStore.off('edit_parentgroup_changed',EditParentGroupChanged)
      parentgroupStore.off('delete_parentgroup_changed',DeleteParentGroupChanged)
    })

    self.readParentGroup = () => {
      self.loading=true
       parentgroupStore.trigger('read_parentgroup')
    }

     self.add = () => {
      if(!self.refs.addPGNameInput.value){
        toastr.info("Please enter ParentGroup and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          parentgroupStore.trigger('add_parentgroup', self.refs.addPGNameInput.value,
          self.refs.addPGDetailInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          parentgroupStore.trigger('edit_parentgroup', self.refs.addPGNameInput.value,
          self.refs.addPGDetailInput.value,self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.parentGroups.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.parentGroups.map(ev => {
        if(ev.pgroup_id != e.item.ev.pgroup_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      parentgroupStore.trigger('delete_parentgroup', e.item.ev.pgroup_id)
    }

    self.edit = (ev,e) => {
      console.log(ev)
      self.title='Update'
      self.refs.addPGNameInput.value = ev.pgroup_name
      self.refs.addPGDetailInput.value = ev.pgroup_detail
      self.edit_id = ev.pgroup_id
    }

    parentgroupStore.on('add_parentgroup_changed',AddParentGroupChanged)
    function AddParentGroupChanged(parentGroups){
      console.log(parentGroups)
      self.title='Create'
       self.refs.addPGNameInput.value =''
      self.refs.addPGDetailInput.value =''
      self.loading = false
      self.parentGroups = parentGroups
      self.update()
      self.readParentGroup()
      console.log(self.parentGroups)
    }

    parentgroupStore.on('edit_parentgroup_changed',EditParentGroupChanged)
    function EditParentGroupChanged(parentGroups){
      console.log(parentGroups)
      self.title='Update'
      self.refs.addPGNameInput.value =''
      self.refs.addPGDetailInput.value =''
      self.loading = false
      self.parentGroups = parentGroups
      self.update()
      self.readParentGroup()

    }

    parentgroupStore.on('delete_parentgroup_changed',DeleteParentGroupChanged)
    function DeleteParentGroupChanged(parentGroups){
      console.log(parentGroups)
      self.title='Create'
      self.refs.addPGNameInput.value =''
      self.refs.addPGDetailInput.value =''
      self.loading = false
      self.parentGroups = parentGroups
      self.update()
      self.readParentGroup()
      console.log(self.parentGroups)
    }

    parentgroupStore.on('read_parentgroup_changed',ReadParentGroupChanged)
    function ReadParentGroupChanged(parentGroups){
      console.log(parentGroups)
      self.title='Create'
     self.refs.addPGNameInput.value =''
      self.refs.addPGDetailInput.value =''
      self.loading = false
      self.parentGroups = parentGroups
      self.update()
      console.log(self.parentGroups)
    }

});
riot.tag2('physical-fitness', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{view==\'physical_fitness\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Physical Fitness <span style="font-weight:normal" show="{action==\'PhysicalFitnessForm\'}">({details})({title})</span> </h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{closePhysicalFitnessForm}" show="{action==\'PhysicalFitnessForm\'}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-warning is-rounded ml5" onclick="{readPhysicalFitnessStudents}" hide="{action==\'PhysicalFitnessForm\'}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-warning is-rounded ml5" onclick="{viewAllDetails}" hide="{action==\'PhysicalFitnessForm\'}"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"><label class="label">Standard</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="standardSelect" onchange="{changeSection}" id="standard"> <option value="">Select Standard</option> <option each="{classes}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="sectionSelect" onchange="{readClassSubject}" id="section"> <option value="">Select Section</option> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Exam Term</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="examTermSelect"> <option value="">Select Exam Term</option> <option value="First">First</option> <option value="Final">Final</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readPhysicalFitnessStudents}" hide="{action==\'PhysicalFitnessForm\'}">GO </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable" hide="{action==\'PhysicalFitnessForm\'}"> <thead> <tr> <th class="slno">SL</th> <th>Enroll No</th> <th>Name</th> <th>Status</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in physicalFitness}"> <td>{i+1}</td> <td>{c.enroll_number}</td> <td>{c.student_name}</td> <td>{c.exam_term}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span show="{c.exam_term==\'N\'}"><a class="button is-small" onclick="{openPhysicalFitnessForm.bind(this, c)}" title="Add"><i class="fa fa-plus-circle" aria-hidden="true"></i></a></span> <span><a class="button is-small" onclick="{viewDetails.bind(this, c)}" title="View"><i class="fa fa-eye" aria-hidden="true"></i></a></span> <span><a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"><i class="fa fa-trash" aria-hidden="true"></i></a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> <section class=" is-fluid" show="{action==\'PhysicalFitnessForm\'}"> <div class="columns" if="{first_form}"> <div class="column"> <div class="field"> <label class="label" for="role">Running</label> <div class="control"> <div class="select is-fullwidth"> <select ref="first_skill" id="first_skill"> <option value="EXCELLENT">A</option> <option value="VERY GOOD">B</option> <option value="GOOD">C</option> <option value="AVERAGE">D</option> <option value="NEEDS IMPROVEMENT">E</option> </select> </div> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Hopping</label> <div class="control"> <div class="select is-fullwidth"> <select ref="second_skill" id="second_skill"> <option value="EXCELLENT">A</option> <option value="VERY GOOD">B</option> <option value="GOOD">C</option> <option value="AVERAGE">D</option> <option value="NEEDS IMPROVEMENT">E</option> </select> </div> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Jumping</label> <div class="control"> <div class="select is-fullwidth"> <select ref="third_skill" id="third_skill"> <option value="EXCELLENT">A</option> <option value="VERY GOOD">B</option> <option value="GOOD">C</option> <option value="AVERAGE">D</option> <option value="NEEDS IMPROVEMENT">E</option> </select> </div> </div> </div> </div> </div> <div class="columns" if="{first_form}"> <div class="column"> <div class="field"> <label class="label" for="role">Catching</label> <div class="control"> <div class="select is-fullwidth"> <select ref="fourth_skill" id="fourth_skill"> <option value="EXCELLENT">A</option> <option value="VERY GOOD">B</option> <option value="GOOD">C</option> <option value="AVERAGE">D</option> <option value="NEEDS IMPROVEMENT">E</option> </select> </div> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Throwing</label> <div class="control"> <div class="select is-fullwidth"> <select ref="fifth_skill" id="fifth_skill"> <option value="EXCELLENT">A</option> <option value="VERY GOOD">B</option> <option value="GOOD">C</option> <option value="AVERAGE">D</option> <option value="NEEDS IMPROVEMENT">E</option> </select> </div> </div> </div> </div> <div class="column"> </div> </div> <div class="columns" if="{second_form}"> <div class="column"> <div class="field"> <label class="label" for="role">Aerobic Capacity</label> <div class="control"> <div class="select is-fullwidth"> <select ref="first_skill" id="first_skill"> <option value="NEEDS IMPROVEMENT">0</option> <option value="NEEDS IMPROVEMENT">1</option> <option value="NEEDS IMPROVEMENT">2</option> <option value="AVERAGE">3</option> <option value="AVERAGE">4</option> <option value="GOOD">5</option> <option value="GOOD">6</option> <option value="VERY GOOD">7</option> <option value="VERY GOOD">8</option> <option value="EXCELLENT">9</option> <option value="EXCELLENT">10</option> </select> </div> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Agility</label> <div class="control"> <div class="select is-fullwidth"> <select ref="second_skill" id="second_skill"> <option value="NEEDS IMPROVEMENT">0</option> <option value="NEEDS IMPROVEMENT">1</option> <option value="NEEDS IMPROVEMENT">2</option> <option value="AVERAGE">3</option> <option value="AVERAGE">4</option> <option value="GOOD">5</option> <option value="GOOD">6</option> <option value="VERY GOOD">7</option> <option value="VERY GOOD">8</option> <option value="EXCELLENT">9</option> <option value="EXCELLENT">10</option> </select> </div> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Explosive Strength</label> <div class="control"> <div class="select is-fullwidth"> <select ref="third_skill" id="third_skill"> <option value="NEEDS IMPROVEMENT">0</option> <option value="NEEDS IMPROVEMENT">1</option> <option value="NEEDS IMPROVEMENT">2</option> <option value="AVERAGE">3</option> <option value="AVERAGE">4</option> <option value="GOOD">5</option> <option value="GOOD">6</option> <option value="VERY GOOD">7</option> <option value="VERY GOOD">8</option> <option value="EXCELLENT">9</option> <option value="EXCELLENT">10</option> </select> </div> </div> </div> </div> </div> <div class="columns" if="{second_form}"> <div class="column"> <div class="field"> <label class="label" for="role">Abdominal Strength</label> <div class="control"> <div class="select is-fullwidth"> <select ref="fourth_skill" id="fourth_skill"> <option value="NEEDS IMPROVEMENT">0</option> <option value="NEEDS IMPROVEMENT">1</option> <option value="NEEDS IMPROVEMENT">2</option> <option value="AVERAGE">3</option> <option value="AVERAGE">4</option> <option value="GOOD">5</option> <option value="GOOD">6</option> <option value="VERY GOOD">7</option> <option value="VERY GOOD">8</option> <option value="EXCELLENT">9</option> <option value="EXCELLENT">10</option> </select> </div> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Flexibility</label> <div class="control"> <div class="select is-fullwidth"> <select ref="fifth_skill" id="fifth_skill"> <option value="NEEDS IMPROVEMENT">0</option> <option value="NEEDS IMPROVEMENT">1</option> <option value="NEEDS IMPROVEMENT">2</option> <option value="AVERAGE">3</option> <option value="AVERAGE">4</option> <option value="GOOD">5</option> <option value="GOOD">6</option> <option value="VERY GOOD">7</option> <option value="VERY GOOD">8</option> <option value="EXCELLENT">9</option> <option value="EXCELLENT">10</option> </select> </div> </div> </div> </div> <div class="column"> </div> </div> <div class="level"> <div class="level-left"> </div> <div class="level-right"> <button class="button is-danger" onclick="{add}">{title}</button> <button class="button ml5" onclick="{closePhysicalFitnessForm}">Cancel</button> </div> </div> </section> </section> <section class="is-fluid" show="{view==\'details\'}"> <div class="level no-print"> <div class="level-left"> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{closeDetails}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <center> <h6 class="title is-size-5">Physical Fitness view for Class {student_info.standard} </h6> </center> <table class="table is-fullwidth is-striped is-hoverable"> <tbody> <tr each="{c, i in physicalFitnessDetails}"> <td> <table class="table is-fullwidth is-striped is-hoverable"> <tr> <td>Name: {c.student_name}</td> <td colspan="2">Enrol Number: {c.enroll_number}</td> </tr> <tr> <th><span show="{senior}">Parameters Measured</span><span show="{junior}">Skill</span></th> <th><span show="{senior}">Obtained Marks (10)</span><span show="{junior}">Grade</span></th> <th>Description</th> </tr> <tr> <td><span show="{senior}"> Aerobic Capacity</span><span show="{junior}"> Running</span></td> <td>{c.first_skill}</td> <td>{c.first_description}</td> </tr> <tr> <td><span show="{senior}"> Agility</span><span show="{junior}"> Hopping</span></td> <td>{c.second_skill}</td> <td>{c.second_description}</td> </tr> <tr> <td><span show="{senior}"> Explosive Strength</span><span show="{junior}">Jumping </span></td> <td>{c.third_skill}</td> <td>{c.third_description}</td> </tr> <tr> <td><span show="{senior}"> Abdominal Strength</span><span show="{junior}">Catching </span></td> <td>{c.fourth_skill}</td> <td>{c.fourth_description}</td> </tr> <tr> <td><span show="{senior}"> Flexibility</span><span show="{junior}">Throwing </span></td> <td>{c.fifth_skill}</td> <td>{c.fifth_description}</td> </tr> </table> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
  self.physicalFitnessDetails= []
  self.second_form=false
  self.first_form=false
  self.senior = false
  self.junior = false
  self.student_info = {'student_name':'','enroll_number':'','term':'','standard':''}
    self.on("mount", function(){
      self.title = ''
      self.view = 'physical_fitness'
      self.action = ''
      self.details = ''
      self.loading = false;
      self.tempSections = []
      self.update()
      flatpickr(".date", {
        allowInput: true,
        dateFormat: "d/m/Y",
      })
      self.readClass()
      self.readSection()
    })
    self.on("unmount", function(){
      physicalFitnessStore.off('read_classes_changed',ClassesChanged)
      physicalFitnessStore.off('read_section_changed',SectionChanged)
      physicalFitnessStore.off('add_physical_fitness_changed',AddPhysicalFitnessChanged)
      physicalFitnessStore.off('delete_physical_fitness_changed',DeletePhysicalFitnessChanged)
      physicalFitnessStore.off('read_physical_fitness_details_changed',PhysicalFitnessDetailsChanged)
    })

    self.readClass = () => {
       self.loading = true;
       physicalFitnessStore.trigger('read_classes')
    }

    self.readSection = () => {
       self.loading = true;
       physicalFitnessStore.trigger('read_section')
    }

    self.changeSection = () => {
       if(self.refs.standardSelect.value==''){
        toastr.info("Please select standard and try again")
       }else{
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.standardSelect.value
        })
       }

       physicalFitnessStore.trigger('read_exam_types',self.refs.standardSelect.value)
    }

    self.readPhysicalFitnessStudents = () => {
      let error = '';

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(self.refs.examTermSelect.value==''){
        error = error + "Please select exam type "
      }

      console.log(self.refs.examTermSelect.value)
      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading=true
        physicalFitnessStore.trigger('read_physical_fitness_students',self.refs.sectionSelect.value, self.refs.examTermSelect.value)
      }

    }

    self.openPhysicalFitnessForm = (c,e) => {
      if (c.standard_id>=8) {
        self.second_form=true
        self.first_form=false
      }else if (c.standard_id >= 4 && c.standard_id < 8) {
        self.second_form=false
        self.first_form=true
      }else{
        toastr.error("Physical Fitness is not applicable for selected class");
      }
      self.title='Add'
      self.action='PhysicalFitnessForm'
      self.details=c.student_name + ',' + 'Enroll No: ' + c.enroll_number
      self.student_id=c.student_id
      self.update()
    }

    self.closePhysicalFitnessForm = () => {
      self.title=''
      self.action=''
    }

    self.selectIncludeInGrandTotal = () => {
      console.log(self.refs.markingTypeSelect.value)
      if(self.refs.markingTypeSelect.value=='G'){
        self.refs.includeInGrandTotalSelect.value='N'
      }else{
        self.refs.includeInGrandTotalSelect.value='Y'
      }

    }

    self.add = () => {
      let error = '';
      var obj = {}
      obj['student_id']=self.student_id
      obj['section_id']=self.refs.sectionSelect.value
      obj['exam_term']=self.refs.examTermSelect.value
      obj['first_skill']= $("#first_skill option:selected").text()
      obj['first_description']=self.refs.first_skill.value
      obj['second_skill']=$("#second_skill option:selected").text()
      obj['second_description']=self.refs.second_skill.value
      obj['third_skill']= $("#third_skill option:selected").text()
      obj['third_description']=self.refs.third_skill.value
      obj['fourth_skill']= $("#fourth_skill option:selected").text()
      obj['fourth_description']=self.refs.fourth_skill.value
      obj['fifth_skill']=$("#fifth_skill option:selected").text()
      obj['fifth_description']=self.refs.fifth_skill.value

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading = true
        physicalFitnessStore.trigger('add_physical_fitness', obj)
      }

    }

    self.viewAllDetails = () => {
      let error = '';

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(self.refs.examTermSelect.value==''){
        error = error + "Please select exam type "
      }

      console.log(self.refs.examTermSelect.value)
      if(error.length!=0){
        toastr.error(error)
        return
      }else{

        self.student_info.standard= $("#standard option:selected").text() + '-' + $("#section option:selected").text()
        if(self.refs.standardSelect.value>=8){
          self.senior = true
          self.junior = false
        }else{
          self.senior = false
          self.junior = true
        }

        self.loading=true
        physicalFitnessStore.trigger('read_physical_fitness_all_details', self.refs.sectionSelect.value, self.refs.examTermSelect.value)
      }
    }

    self.viewDetails = (c,e) => {
      self.student_info=c
      self.student_info.term=self.refs.examTermSelect.value
      if(self.refs.standardSelect.value>=8){
        self.senior = true
        self.junior = false
      }else{
        self.senior = false
        self.junior = true
      }

      self.loading=true
      physicalFitnessStore.trigger('read_physical_fitness_details',c.student_id, self.refs.examTermSelect.value)
    }

    self.closeDetails = (c,e) => {
      self.view='physical_fitness'
      self.update()
    }

   self.cancelOperation = (e) => {
      self.physicalFitness.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.physicalFitness.map(c => {
        if(c.student_id != e.item.c.student_id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      physicalFitnessStore.trigger('delete_physical_fitness', e.item.c.student_id,self.refs.examTermSelect.value)
    }

    physicalFitnessStore.on('read_classes_changed',ClassesChanged)
    function ClassesChanged(classes){
      self.loading = false
      self.classes = []
      self.classes = classes
      self.update()
      console.log(self.classes)
    }

    physicalFitnessStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      self.loading = false
      self.sections = []
      self.sections = sections
      self.update()
    }

    physicalFitnessStore.on('physical_fitness_students_changed',PhysicalFitnessChanged)
    function PhysicalFitnessChanged(physicalFitness){
      self.loading = false
      self.physicalFitness = []
      self.physicalFitness = physicalFitness
      self.update()
    }

    physicalFitnessStore.on('read_physical_fitness_details_changed',PhysicalFitnessDetailsChanged)
    function PhysicalFitnessDetailsChanged(details){

      self.loading=false
      if(details.length>0){
        self.view='details'
        self.physicalFitnessDetails= []
        self.physicalFitnessDetails= details
        self.update()
      }else{
        toastr.error('Please Add Physical Fitness Details')
        self.update()
      }
    }

    physicalFitnessStore.on('add_physical_fitness_changed',AddPhysicalFitnessChanged)
    function AddPhysicalFitnessChanged(physicalFitness){
      self.closePhysicalFitnessForm()
      self.loading = false
      self.update()
      self.readPhysicalFitnessStudents()
    }

    physicalFitnessStore.on('delete_physical_fitness_changed',DeletePhysicalFitnessChanged)
    function DeletePhysicalFitnessChanged(physicalFitness){
      self.loading = false
      self.physicalFitness.map(c => {
        c.confirmDelete = false
      })
      self.update()
      self.readPhysicalFitnessStudents()
    }

});
riot.tag2('print-header', '<div class="printOnly"> <center> <table class=" table is-fullwidth" style="border-style:none;"> <tr style="border-style:none;"> <td style="padding-left:5px;border:none;width:100px"><img src="/img/school_logo.png" height="60"></td> <td class="has-text-centered" style="border-style:none"> <p class="title" style="color: #ff3860; margin:5px">M. C. Kejriwal Vidyapeeth</p> <p style="text-align:center; font-size:12px;">243 G. T. Road(N) Liluah, Howrah - 711204, West Bengal, India <br> PHONE - (033) 2654-3387/89 - EMAIL - info@mckvie.edu.in - WEB - http://www.mckv.edu.in</p> </td> <td style="padding-right:5px;border:none;width:100px"> <img src="/img/group_logo.jpg" height="60"> </td> </tr> </table> </center> <div> <hr style="border:none;border-top:solid #dd0000 2px;margin:2px 0;width:100%"> <div> <div style="text-align:left;"> Printed on:{print_date} </div> </div> </div> </div>', '', '', function(opts) {
    var today = new Date();
    var dd = today.getDate();
    var mm = today.getMonth()+1;
    var yyyy = today.getFullYear();
    if(dd<10){
        dd='0'+dd;
    }
    if(mm<10){
        mm='0'+mm;
    }
    var today = dd+'/'+mm+'/'+yyyy;
    self.print_date = today
});
riot.tag2('promote', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="level"> <div class="level-item"> <h2 class="title has-text-centered" style="color: #ff3860; ">Promote Student Console</h2> </div> </div> <div class="columns is-multiline is-mobile"> <div class="column"> <div class="columns"> <div class="column is-narrow"><label class="label">Standard</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="standardSelect" onchange="{changeSection}"> <option each="{classes}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="sectionSelect" onchange="{readFreeStudents}"> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column"> <button class="button is-warning is-rounded ml5" style="margin-bottom:12px;" onclick="{readFreeStudents}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="slno">Roll</th> <th>Enroll No</th> <th>Free Students</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in freeStudents}"> <td>{c.roll_number}</td> <td>{c.enroll_number}</td> <td>{c.name}</td> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'freeSubjectCheckBox\'+c.student_id}" onclick="{selectFreeStudents.bind(this,c)}"> </td> </tr> </tbody> </table> </div> <div class="column is-vertical-center is-narrow has-text-centered is-multiline"> <table> <tr> <td> <button class="button" onclick="{assignStudents}" style="margin-top:20px;">Assign students <span style="margin-left:10px" class="fas fa-angle-double-right"></span> </button> </td> </tr> <tr> <td> <button class="button" onclick="{freeUpStudents}" style="margin-top:20px;"><span style="margin-right:10px;" class="fas fa-angle-double-left"></span> Free up students</button> </td> </tr> </table> </div> <div class="column"> <div class="columns"> <div class="column is-narrow"><label class="label">Standard</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="assignedStandard" id="StandardAssign" onchange="{changeAssignedSection}"> <option each="{classes}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="assignedSection" onchange="{readPromotedStudents}"> <option each="{tempAssignedSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column"> <button class="button is-warning is-rounded ml5" style="margin-bottom:12px;" onclick="{readPromotedStudents}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-success is-rounded ml5" style="margin-bottom:12px;" onclick="{openReShuffleModal}" title="Re-Shuffle"> <span class="icon"> <i class="fa fa-random" aria-hidden="true"></i> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th></th> <th class="slno">Roll No</th> <th>Enroll No</th> <th>Assigned Students</th> </tr> </thead> <tbody> <tr each="{c, i in promotedStudents}"> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'assignedSubjectCheckBox\'+c.student_id}" onclick="{selectAssigndStudents.bind(this,c)}"> </td> <td>{c.roll_number}</td> <td>{c.enroll_number}</td> <td>{c.name}</td> </tr> </tbody> </table> </div> </div> </section> <div id="reShuffleModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title"> Class: {StandardName} </p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="assignedSectionForReShuffle" onchange="{readPromotedStudents}"> <option each="{tempAssignedSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-danger" onclick="{add}">Submit</button> <button class="button" id="item-modal-close" onclick="{closeReShuffleModal}">Cancel</button> </footer> </div> </div>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.title='Add'
      self.role = getCookie('role')
      self.loading = false;
      self.st = [];
      self.update()
      flatpickr(".date", {
        allowInput: true,
        dateFormat: "d/m/Y",
      })
      self.readClass()
      self.readSection()
    })

    self.on("unmount", function(){

      activityStore.off('read_classes_changed',ClassesChanged)
      activityStore.off('read_section_changed',SectionChanged)
      promoteStore.off('read_students_changed',ReadStudentsChanged)
      promoteStore.off('read_promoted_student_changed',ReadPromotedStudentsChanged)
      promoteStore.off('assign_students_changed',AssignStudentChanged)
      promoteStore.off('free_students_changed',FreeStudentChanged)
      promoteStore.off('re_shuffle_student_changed',ReShuffleStudentChanged)
    })
    self.readClass = () => {
       self.loading = true;
       activityStore.trigger('read_classes')
    }
    self.readSection = () => {
       self.loading = true;
       activityStore.trigger('read_section')
    }

     self.changeSection = () => {
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.standardSelect.value
        })
        self.update()
       }

    self.changeAssignedSection = () => {
        self.tempAssignedSections = []
        self.tempAssignedSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.assignedStandard.value
        })
        self.update()
       }

  self.readFreeStudents = () =>{
        self.loading = true
        promoteStore.trigger('read_students',self.refs.standardSelect.value, self.refs.sectionSelect.value)
    }

  self.readPromotedStudents = () =>{
        self.loading = true
        promoteStore.trigger('read_promoted',self.refs.assignedStandard.value, self.refs.assignedSection.value)
    }

    self.selectFreeStudents = (student,e) => {
        self.freeStudents.map(i=>{
          if(student.student_id==i.student_id){
            i.selected=!i.selected
          }
        })
    }

    self.selectAssigndStudents = (student,e) => {
        self.promotedStudents.map(i=>{
          if(student.student_id==i.student_id){
            i.selected=!i.selected
            self.student_id = student.student_id;
          }
        })

    }

    self.assignStudents = () =>{
      let students_to_assign = self.freeStudents.filter(c=>{
        return c.selected == true
      })
      console.log(self.student_id)
      console.log(students_to_assign)

      if(students_to_assign.length==0){
        toastr.error('Please Select Student To Assign House.')
        return
      }else{
        self.loading = true
        promoteStore.trigger('assign_students', self.refs.assignedSection.value, students_to_assign)
      }
    }

    self.freeUpStudents = () =>{
      let students_to_free = self.promotedStudents.filter(c=>{
        return c.selected == true
      })
      console.log("students_to_free")
      console.log(students_to_free)

      if(students_to_free.length==0){
        toastr.error('Please select students to free from house .')
        return
      }else{
        self.loading = true
        promoteStore.trigger('free_up_student',self.refs.assignedSection.value, students_to_free)
      }
    }

    self.openReShuffleModal = () => {
      var student_id='';
       self.promotedStudents.map( q => {
          if(q.selected){
            var ob ={}
            ob.student_id=q.student_id
            self.st.push(ob)
          }
        })
       console.log(self.st);
       console.log(self.refs.assignedSectionForReShuffle.value);
        if(self.st.length==0){
          toastr.info('Please select at least one Student and try again')
        }else{
          self.StandardName = $("#StandardAssign option:selected").text();
          $("#reShuffleModal").addClass("is-active");
        }
    }

    self.closeReShuffleModal = () => {
      $("#reShuffleModal").removeClass("is-active");
      self.st=[];
    }

    self.add = () =>{
      self.loading = true
      promoteStore.trigger('re_shuffle_student', self.st,self.refs.assignedSectionForReShuffle.value)
    }

    activityStore.on('read_classes_changed',ClassesChanged)
    function ClassesChanged(classes){
      self.loading = false
      self.classes = []
      self.classes = classes
      self.update()
      self.readSection()
      console.log(self.classes)
    }

    activityStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      self.loading = false
      self.sections = []
      self.sections = sections
      self.update()
      self.changeSection()
      self.changeAssignedSection()
      self.readPromotedStudents()
      self.readFreeStudents()

    }

    promoteStore.on('read_students_changed',ReadStudentsChanged)
    function ReadStudentsChanged(freeStudents){
      console.log("reading free students")
      self.loading = false
      self.freeStudents = []
      if(freeStudents.length>0){
      self.freeStudents = freeStudents
      self.freeStudents.map(c => {
          c.selected=false
      })
     }else{
      toastr.info("All students has been promoted from select class")
     }
      self.update()
    }
   promoteStore.on('read_promoted_student_changed',ReadPromotedStudentsChanged)
    function ReadPromotedStudentsChanged(promotedStudents){
      console.log("reading promoted students")
      console.log(promotedStudents)
      self.loading = false
      self.promotedStudents = []
      if(promotedStudents.length>0){
      self.promotedStudents = promotedStudents
      self.promotedStudents.map(c => {
          c.selected=false
      })
     }else{
      toastr.info("No students has been promoted Yet!")
     }
      self.update()
    }

    promoteStore.on('free_students_changed',FreeStudentChanged)
    function FreeStudentChanged(students_assigned,error_msg){

      if(error_msg != ""){
        toastr.info("You Can't delete this student. His fees has been received in this session ")
      }
      self.loading = false
      self.update()

      self.readFreeStudents()

    }

    promoteStore.on('assign_students_changed',AssignStudentChanged)
    function AssignStudentChanged(students_assigned,error_msg){

      self.loading = false
      self.update()
      self.readPromotedStudents()

    }

    promoteStore.on('re_shuffle_student_changed',ReShuffleStudentChanged)
    function ReShuffleStudentChanged(){

      self.loading = false
      $("#reShuffleModal").removeClass("is-active");
      self.readPromotedStudents()
      self.readFreeStudents()
      self.update()

    }

});
riot.tag2('raw', '<span></span>', '', '', function(opts) {

  this.root.innerHTML = opts.content
});
riot.tag2('receive-fees', '<loading-bar if="{loading}"></loading-bar> <section class="is-fluid" show="{fees_view ==\'ReceiveFees\'}"> <div class="columns"> <div class="column is-three-fifths is-multiline"> <div class="box"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="enrolNumberText" type="text" placeholder="Enrol Number"> </div> </div> <div class="column"> <button class="button is-danger" onclick="{getStudentDetail}">Go</button> </div> </div> <div class="columns"> <div class="column is-one-quarter"> <img id="student_image" width="90" height="90"> </div> <div class="column"> <p class="label"><span style="color: #ff3860;">{student_name} </span>({standard})</p> <p class="label">Father: {f_name}</p> <p class="label">Mother: {m_name}</p> <h4 class="title" style="color: #ff3860; font-size: 1.5rem;">{student_plan}</h4> </div> </div> <div class="field has-addons"> <p class="control"> <button class="button is-primary" onclick="{getStudentTransactions}">Transactions</button> </p> <p class="control"> <button class="button is-link" onclick="{openSearchModal}"> <span>Search By Receipt No.</span> </button> </p> <p class="control"> <button class="button is-warning" onclick="{selectStudent}"> <span>Select Student</span> </button> </p> </div> </div> <div class="box" show="{DueFeeSlips}"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th width="50"></th> <th>Fee Slip Name</th> <th style="width:120px">Due Date</th> <th class="has-text-right" style="width:110px">Amount</th> <th class="has-text-right" style="width:100px">Scholarship</th> <th></th> </tr> </thead> <tbody> <tr each="{r, i in feeSlips}"> <td class="has-text-right"> <input type="checkbox" class="id_check_box" checked="{r.done}" id="{\'feeslipId\' + r.fee_slip_id}" onclick="{calculateFees.bind(this,r)}"> </td> <td>{r.fee_slip_name}</td> <td>{r.last_date}</td> <td class="has-text-right">{r.amount}</td> <td class="has-text-right">{r.scholorship_amount}</td> <td> <span> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{feeSlip.bind(this, r)}">View Slip</a></span> </td> </tr> </tbody> </table> </div> <div class="box" show="{PaidFeeSlips}"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th width="50">Rcpt No.</th> <th>Fee Slip </th> <th style="width:100px">Mode</th> <th style="width:120px">Paid On</th> <th class="has-text-right" style="width:110px">Fees</th> <th class="has-text-right" style="width:110px">Fine</th> <th class="has-text-right" style="width:100px">Scholarship</th> <th><span> <a class="button is-danger is-small has-text-weight-bold is-rounded" onclick="{hideTransaction}" title="Close Transaction">Close</a></span></th> </tr> </thead> <tbody> <tr each="{r, i in transactions}"> <td class="has-text-right"> {r.receipt_id} </td> <td>{r.fee_slip_name}</td> <td>{r.mode}</td> <td>{r.receipt_date}</td> <td class="has-text-right">{r.amount_due}</td> <td class="has-text-right">{r.fine_recevied}</td> <td class="has-text-right">{r.scholorship_amount}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{r.confirmDelete}"> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{r.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </div> </div> <div class="column"> <div class="box"> <table class="fees-table" style="border-spacing:10px !important"> <tr> <th class="fieldLabel">Fees Due</th> <td><input class="input textWidth" ref="feesDueText" readonly style="margin-bottom:8px" type="number"></td> <th class="fieldLabel">Date</th> <td><input class="input textWidth date" type="text" ref="feesReceiveDate" onchange="{fineCalculation}"></td> </tr> <tr> <th class="fieldLabel">Fees Paid</th> <td><input class="input textWidth" id="feesPaidText" ref="feesPaidText" onkeyup="{adjustedChangeHandler}" type="number"></td> <th class="fieldLabel">Scholarship</th> <td><input class="input textWidth " type="text" ref="scholorshipText" readonly></td> <th colspan="2"></th> </tr> <tr> <th class="fieldLabel">Fine Due</th> <td><input class="input textWidth" ref="fineDueText" readonly type="number"></td> <th class="fieldLabel">Fine Paid</th> <td><input class="input textWidth" ref="finePaidText" onkeyup="{fineAdjustedChangeHandler}" type="number"></td> </tr> <tr> <th class="fieldLabel">Fine Adjust</th> <td><input class="input textWidth " type="text" ref="fineAdjustedText" readonly></td> <th class="fieldLabel">Amount Due</th> <td><input class="input textWidth " type="text" ref="amountDueText" readonly></td> </tr> <tr> <th class="fieldLabel">Remarks</th> <td colspan="3"> <textarea class="textarea" rows="2" type="text" ref="remarksText"></textarea></td> </tr> <tr> <th class="fieldLabel">Mode</th> <td colspan="3"> <div class="control"> <label class="radio"><input type="radio" name="modeRadioGroup" value="Cash" onclick="{getRadioValue}" checked>Cash</label> <label class="radio"><input type="radio" name="modeRadioGroup" value="Cheque" onclick="{getRadioValue}">Cheque</label> <label class="radio"><input type="radio" name="modeRadioGroup" value="Bank" onclick="{getRadioValue}">Bank</label> <label class="radio"><input type="radio" name="modeRadioGroup" value="Draft" onclick="{getRadioValue}">Draft</label> </div> </td> </tr> <tr> <th class="fieldLabel">Drawn On</th> <td colspan="3"><input class="input" type="text" id="drawnOnText" ref="drawnOnText"></td> </tr> <tr> <th class="fieldLabel">Number</th> <td><input class="input textWidth " type="text" id="itemNumberText" ref="itemNumberText"></td> <th class="fieldLabel">Dated</th> <td><input class="input textWidth date" type="text" id="itemDate" ref="itemDate"></td> </tr> <tr> <th class="fieldLabel">Received In</th> <td colspan="3" class="select is-fullwidth"> <select id="bankNameList" ref="bankNameList"> <option class="fieldLabel">Select Bank</option> <option each="{banks}" riot-value="{bank_account_no}">{bank_name}</option> </select> </td> <td><button class="button is-danger" onclick="{submitFees}">Submit</button></td> <td> <input type="checkbox" id="checkTable" checked="{e.done}" onclick="{tutionFeesOnly}" style="margin-top: 12px;"> If Only Tution Fees </td> </tr> </table> </div> <div class="box" show="{FeeSlipHead}"> <h4>status: {FeeSlipHead}</h4> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>Head</th> <th style="width:120px">Amount</th> </tr> </thead> <tbody> <tr each="{r, i in feeSlipHeads}"> <td>{r.head}</td> <td class="has-text-right">{r.amount}</td> </tr> </tbody> </table> </div> </div> </div> </section> <section class=" is-fluid" show="{fees_view ==\'show_student_list\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Students</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{closeStudentlist}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" onchange="{getSection}"> <option>Choose Section</option> <option each="{standards}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="section_id"> <option>Choose Class</option> <option each="{filteredSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getStudentData}">GO </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>Roll no</th> <th>Student Name</th> <th>Enroll No</th> <th>Registration No</th> <th>SMS</th> <th>Father\'s Name</th> <th></th> </tr> </thead> <tbody> <tr each="{st, i in studentList}"> <td>{st.roll_number}</td> <td>{st.name}</td> <td>{st.enroll_number}</td> <td>{st.reg_number}</td> <td>{st.mobile}</td> <td>{st.f_name}</td> <td class="has-text-right"> <span><a class="button is-small is-rounded " onclick="{addStudent.bind(this, st.enroll_number)}">Select</a></span> </td> </tr> </tbody> </table> </section> <div id="SearchModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Search By Receipt Number</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role">Receipt Number</label> <div class="control"> <input class="input" ref="receiptNumberInput" id="receiptNumberInput" type="number"> </div> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-danger" onclick="{searchByReceiptNo}">Search</button> <button class="button" id="item-modal-close" onclick="{closeSearchModal}">Cancel</button> </footer> </div> </div>', '', '', function(opts) {
 var self = this
    self.on("mount", function(){
      document.getElementById("drawnOnText").disabled=true
      document.getElementById("itemNumberText").disabled=true
      document.getElementById("itemDate").disabled=true
      document.getElementById("bankNameList").disabled=true
      document.getElementById("feesPaidText").readOnly = true

      self.fees_view = 'ReceiveFees'
      self.PaidFeeSlips = false
      self.DueFeeSlips = true
      self.FeeSlipHead = false
      self.role = getCookie('role')
      self.readStandard()
      self.readSection()
      self.payment_mode = 'Cash'
      self.loading = false
      self.update()
      flatpickr(".date", {
        allowInput: true,
        dateFormat: "d/m/Y",
      })

      self.refs.scholorshipText.value = 0;
      self.readBank()
      self.readFine()
    })
    self.on("unmount", function(){
      bankStore.off('read_bank_changed', ReadBankChanged)
      feeReceivedStore.off('read_fine_changed', ReadFineChanged)

      feeReceivedStore.off('read_student_changed', ReadStudentChanged)
      feeReceivedStore.off('read_transaction_changed', ReadTransactionChanged)
      feeReceivedStore.off('read_slip_head_changed', ReadSlipHeadChanged)
      feeReceivedStore.off('add_fees_changed', AddFeesChanged)
      feeReceivedStore.off('delete_transaction_changed',DeleteTransactionChanged)

      feeReceivedStore.off('read_feeslip_changed', ReadFeeSlipChanged)
      feeReceivedStore.off('read_fee_plan_changed', ReadFeePlanChanged)
      feeReceivedStore.off('read_student_by_receipt_no_changed',ReadStudentReceiptNoChanged)

    })

    self.readStandard = () => {
       feeReceivedStore.trigger('read_standard')
    }

    self.readSection = () => {
       feeReceivedStore.trigger('read_section')
    }

    self.getSection = () => {
      self.filteredSections = []
      self.filteredSections = self.sections.filter(s => {
        return s.standard_id == self.refs.standard_id.value
      })
    }

    self.getStudentData = () =>{
      self.students = []

      feeReceivedStore.trigger('read_student_list', self.refs.standard_id.value,self.refs.section_id.value)

    }

    self.selectStudent = () =>{
      self.fees_view ='show_student_list'
    }

    self.closeStudentlist = () =>{
      self.fees_view ='ReceiveFees'
    }

    self.openSearchModal = () => {
      $("#SearchModal").addClass("is-active");
      document.getElementById("receiptNumberInput").focus()
    }

    self.closeSearchModal = () => {
      $("#SearchModal").removeClass("is-active");
    }
    self.searchByReceiptNo = () =>{
      console.log("Hello");
      feeReceivedStore.trigger('read_student_by_receipt_no', self.refs.receiptNumberInput.value)
      self.closeSearchModal();
    }

    self.addStudent = (c,st) => {
      self.enroll_number = c
      console.log(self.enroll_number)
      self.refs.enrolNumberText.value = self.enroll_number
      feeReceivedStore.trigger('read_student', self.enroll_number)
      self.fees_view ='ReceiveFees'
    }

    self.cancelOperation = (r) => {
      self.transactions.map(c => {
          c.confirmDelete = false
      })
    }

    self.confirmDelete = (r) => {
      console.log("------------delete---------")
      console.log(e)
      self.transactions.map(c => {
        if(c.receipt_id != r.item.r.receipt_id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (r) => {
      self.loading = true
      feeReceivedStore.trigger('delete_transaction', r.item.r.receipt_id)
    }

    self.getRadioValue = (e) =>{
      self.payment_mode = e.target.value;
      if(self.payment_mode=='Cash'){
        document.getElementById("drawnOnText").disabled=true
        document.getElementById("itemNumberText").disabled=true
        document.getElementById("itemDate").disabled=true
        document.getElementById("bankNameList").disabled=true
      }else if(self.payment_mode=='Bank'){
        document.getElementById("drawnOnText").disabled=true
        document.getElementById("itemNumberText").disabled=true
        document.getElementById("itemDate").disabled=true
        document.getElementById("bankNameList").disabled=false

      }else{
        document.getElementById("drawnOnText").disabled=false
        document.getElementById("itemNumberText").disabled=false
        document.getElementById("itemDate").disabled=false
        document.getElementById("bankNameList").disabled=false
      }
      self.update()
      console.log(self.payment_mode )
    }
    self.tutionFeesOnly = () =>{
      if($('#checkTable').is(":checked")){
        console.log("checked")
        document.getElementById("feesPaidText").readOnly = false

      }else{
        console.log("un-checked")

         document.getElementById("feesPaidText").readOnly = true
      }

    }

    self.calculateFees = (slip,event) => {
      console.log("item")
      console.log(slip);
        var total_fees = 0;
        var total_concession = 0;
        var total_scholorship = 0;

      self.feeSlips.map(i=>{
          if(slip.fee_slip_id==i.fee_slip_id){
            i.selected=!i.selected
          }
          if(i.selected==true){
            console.log("-----------")
            console.log(i);
            console.log("-----------")
            if(i.amount != null) total_fees = Number(total_fees) + Number(i.amount)
            if (i.scholorship_amount != null) total_scholorship += Number(i.scholorship_amount)
          }
        })

       self.refs.feesDueText.value = total_fees
       self.refs.feesPaidText.value = total_fees
       self.refs.scholorshipText.value = total_scholorship
       self.fineCalculation();

    }

  self.fineCalculation = () =>{
    self.refs.finePaidText.value = 0;
      var total_fine = 0;
        var feeDate = new Date(convertDate(self.refs.feesReceiveDate.value));
        var fine = 0;
        console.log("=========fine========")
        console.log(self.feeSlips)
        self.feeSlips.map(o=>{

          if(o.selected==true){

             var fineStart =  new Date(convertDate(o.last_date));
             var diff  = new Date(feeDate - fineStart);
             var fineDays =  Math.round(diff/1000/60/60/24);
            if (self.fine_type == 'Daily') {
              if (fineDays < self.fine_grace_preiod) {

                  fine = Number(fine_days) * Number(self.fine_amount);

                  o['fine'] = fine
                  }else{
                    fine = 0;
                    o['fine'] = fine
                  }
                 total_fine = total_fine + fine;
              }else if(self.fine_type == 'Slab'){
                if(fineStart >= feeDate){
                  o['fine'] = fine
                  total_fine = 0;
                }else{
                    var due_dt = o.last_date.split('/');
                    var l_day = due_dt[0];
                    var l_month = due_dt[1];
                    var l_year = due_dt[2];
                    var payment_date = self.refs.feesReceiveDate.value;
                    var f_dt = payment_date.split('/');

                    var p_day = f_dt[0]
                    var p_month = f_dt[1]
                    var p_year = f_dt[2]
                    var monthCount = 0;
                if (p_month < l_month) {
                  if (p_year > l_year) {

                    monthCount = Number((12 - l_month) + Number(p_month));
                  }
                }else if (p_month > l_month) {
                  if (p_year > l_year) {
                    monthCount = Number((12 - l_month) + Number(p_month));
                  }else if(p_year == l_year){
                    monthCount = Number(p_month - l_month);
                  }
                }else if (p_month == l_month) {
                  if (p_year > l_year) {
                    monthCount = Number((12 - l_month) + Number(p_month));
                  }else if (p_year == l_year) {
                    monthCount = 0;
                  }
                }
                 console.log("fine = "+ self.fine_amount)
                 fine = Number(monthCount * 50) + Number(self.fine_amount);
                 total_fine = total_fine + (monthCount*50) + self.fine_amount;
                 o['fine'] = fine
              }

            }
          }
      })
        self.refs.fineDueText.value = total_fine;
        self.refs.finePaidText.value = self.refs.fineDueText.value;
        self.fineAdjustedChangeHandler();
  }
  self.fineAdjustedChangeHandler =()=>{
    console.log("after  fee slip")
    if(Number(self.refs.finePaidText.value) <= 0){
      self.refs.fineAdjustedText.value = self.refs.fineDueText.value;
      return
    }
    self.refs.fineAdjustedText.value = Number(self.refs.fineDueText.value) - Number(self.refs.finePaidText.value);
      self.refs.amountDueText.value = Number(self.refs.feesDueText.value) - Number(self.refs.scholorshipText.value) + Number(self.refs.finePaidText.value);
  }
  self.adjustedChangeHandler = () =>{
    self.refs.feesDueText.value = self.refs.feesPaidText.value;
    self.refs.amountDueText.value = Number(self.refs.feesDueText.value) - Number(self.refs.scholorshipText.value) + Number(self.refs.finePaidText.value);
  }

    self.readBank = () => {
       bankStore.trigger('read_bank')
    }
    self.readFine = () =>{
     feeReceivedStore.trigger('read_fine')
    }

    self.getStudentDetail = () =>{
      self.FeeSlipHead = false;
      var enrol = self.refs.enrolNumberText.value
      if(enrol.length==0){
        toastr.info("Please enter an enrol numbar")
        return
      }else if(enrol.length<8){
        toastr.info("Please enter an valid enrol numbar")
        return
      }else{
        self.loading = true
        feeReceivedStore.trigger('read_student', self.refs.enrolNumberText.value)
      }
    }

    self.feeSlip = (c, r) =>{
      console.log("clicked to view")
      console.log(c);
      self.fee_slip_id = c.fee_slip_id
      self.fee_plan_id = c.fee_plan_id
      feeReceivedStore.trigger('read_fee_slip_head', self.studentId, self.fee_slip_id, self.fee_plan_id)
    }
    self.getStudentTransactions = () =>{
      self.PaidFeeSlips = true
      self.DueFeeSlips = false
      feeReceivedStore.trigger('read_transaction', self.studentId)

    }
    self.hideTransaction = () => {
      self.PaidFeeSlips = false
      self.DueFeeSlips = true
    }

    self.readPlanBYEnrollNumber = () =>{
      feeReceivedStore.trigger('read_fee_plan', self.studentId)
    }

    self.readFeeSlipBYEnrollNumber = () =>{
      feeReceivedStore.trigger('read_fee_slip', self.studentId)
    }

    self.submitFees = () =>{
     var msg='';
      if ( self.payment_mode == "Bank" || self.payment_mode== "Cheque" || self.payment_mode== "Draft") {
        if (self.refs.bankNameList.value == 'Select Bank') msg = msg + "\n" + "Select Bank Name specified.";
      }
      if (msg != "") {
        Alert.show("Following errors have occured - \n" + msg, "Input Error");
        return;
      }
      var obj = {};

      console.log("mode")
      console.log(self.payment_mode)
      obj.mode = self.payment_mode;
      obj.item_no = self.refs.itemNumberText.value ='' ? self.refs.itemNumberText.value : null;
      obj.drawn_on = self.refs.drawnOnText.length ='' ? self.refs.drawnOnText.value : null;
      obj.amounting_to = self.refs.amountDueText.value > 0 ? self.refs.amountDueText.value : null;
      var converted_date = ''
      if(self.refs.itemDate.value!=''){
         converted_date = convertDate(self.refs.itemDate.value)
      }
      if(converted_date==''){
        obj.dated = null
      }else{
        obj.dated = converted_date
      }

      obj.bank_id = self.refs.bankNameList.value != 'Select Bank' ? self.refs.bankNameList.value : null;
      obj.receipt_date = convertDate(self.refs.feesReceiveDate.value)
      obj.remarks = self.refs.remarksText.value;

      obj.amount_due = self.refs.amountDueText.value
      obj.fine_due = self.refs.fineDueText.value
      obj.fine_recevied = self.refs.finePaidText.value
      obj.fine_adjusted = self.refs.fineAdjustedText.value
      if($('#checkTable').is(":checked")){
      obj.tuition_fee_only = 'Y'
    }else{
      obj.tuition_fee_only = 'N'
    }

      obj.fee_plan_id = self.student_plan_id
      obj.student_id = self.studentId

      self.selectedfeeSlips = [];
      self.feeSlips.map(o=>{
        if(o.selected==true){
          var i = {}
          i.fee_slip_id = o.fee_slip_id
          if(obj.tuition_fee_only == 'Y'){
            i.a_due = self.refs.feesPaidText.value
          }else{
            i.a_due = o.amount
          }
          i.fine_by_slip = o.fine
          i.totalFineRemaining = 0
          self.selectedfeeSlips.push(i)
        }
      });
      obj.feeSlips = self.selectedfeeSlips

        self.loading = true
        feeReceivedStore.trigger('add_fees', obj)
    }

    bankStore.on('read_bank_changed',ReadBankChanged)
    function ReadBankChanged(banks){
      console.log(banks)
      self.banks = banks
      self.update()
      console.log(self.banks)
    }

    feeReceivedStore.on('read_fine_changed',ReadFineChanged)
    function ReadFineChanged(fines){
      self.fines = fines
      self.fine_type = self.fines[0].fine_type;
      self.fine_amount = self.fines[0].fine_amount;
      self.fine_grace_preiod = self.fines[0].fine_grace_preiod;
      console.log("fine amt"+ self.fine_amount)
      self.update()
    }

    feeReceivedStore.on('add_fees_changed',AddFeesChanged)
    function AddFeesChanged(){

      self.loading = false
      self.refs.feesDueText.value=''
      self.refs.scholorshipText.value=''
      self.refs.fineDueText.value=''
      self.refs.finePaidText.value=''
      self.refs.fineAdjustedText.value=''
      self.refs.amountDueText.value=''
      self.refs.remarksText.value=''
      self.refs.drawnOnText.value=''
      self.refs.itemNumberText.value=''
      self.refs.itemDate.value=''
      self.refs.itemDate.value=''
      self.payment_mode='Cash'
      self.getStudentDetail()

      self.update()

    }

   feeReceivedStore.on('read_student_changed',ReadStudentChanged)
    function ReadStudentChanged(students, session_id){
      console.log(students)
      self.loading = false
      self.students = []
      if(students.length>0){
      self.students = students
      self.enroll_number = self.students[0].enroll_number;
      self.student_name = self.students[0].student_name;
      self.standard = self.students[0].standard;
      self.f_name = self.students[0].f_name;
      self.m_name = self.students[0].m_name;
      self.studentId = self.students[0].student_id;
      self.session_id = session_id

      document.getElementById('student_image').src = '/images/'+self.session_id+'/studentImages/'+self.studentId+'.jpg';

      self.readPlanBYEnrollNumber()
      self.readFeeSlipBYEnrollNumber()
    }else{
      toastr.info("Invalid Enrol Number")
      self.enroll_number =''
      self.student_name = ''
      self.standard = ''
      self.f_name = ''
      self.m_name = ''
      self.studentId = ''
      self.feeSlips = []
    }
    self.update()
    }

    feeReceivedStore.on('read_student_by_receipt_no_changed',ReadStudentReceiptNoChanged)
    function ReadStudentReceiptNoChanged(students){
      console.log(students)
      self.students = []
      self.students = students
      self.enroll_number = self.students[0].enroll_number;
      self.student_name = self.students[0].student_name;
      self.standard = self.students[0].standard;
      self.f_name = self.students[0].f_name;
      self.m_name = self.students[0].m_name;
      self.studentId = self.students[0].student_id;

      self.update()
      self.refs.enrolNumberText.value = self.enroll_number
      self.readPlanBYEnrollNumber()
      self.readFeeSlipBYEnrollNumber()

    }

    feeReceivedStore.on('read_transaction_changed',ReadTransactionChanged)
    function ReadTransactionChanged(transactions){

      self.transactions = []
      self.transactions = transactions
      console.log("------read transacrions----")
      console.log(self.transactions)

      if(length.transactions>0){
        console.log("transactions");
      }
     self.update()
     self.PaidFeeSlips = true
     self.DueFeeSlips = false

      console.log(self.students)
    }
    feeReceivedStore.on('read_slip_head_changed',ReadSlipHeadChanged)
    function ReadSlipHeadChanged(feeSlipHeads){
      self.feeSlipHeads = []
      self.feeSlipHeads = feeSlipHeads
      self.FeeSlipHead =true;
      self.update()
    }

    feeReceivedStore.on('read_fee_plan_changed',ReadFeePlanChanged)
    function ReadFeePlanChanged(fee_plans){
      console.log(fee_plans)
      self.student_plan = ''
      self.fee_plans = []
      self.fee_plans = fee_plans
      console.log("fee_plans")
      self.student_plan = self.fee_plans[0].fee_plan_name
      self.student_plan_id = self.fee_plans[0].fee_plan_id
      console.log(self.fee_plans)
      self.update()
    }
    feeReceivedStore.on('read_feeslip_changed',ReadFeeSlipChanged)
    function ReadFeeSlipChanged(feeSlips){
      console.log(feeSlips)
      self.feeSlips = []
      self.feeSlips = feeSlips

      self.feeSlips.map(c => {
          c.selected=false
      })
      console.log("fee_slips")
      console.log(self.feeSlips)
      self.update()

    }

    feeReceivedStore.on('delete_transaction_changed',DeleteTransactionChanged)
    function DeleteTransactionChanged(transactions){
      console.log(transactions)
      self.transactions = transactions
      self.loading = false
      self.update()
    }

    feeReceivedStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()
    }

    feeReceivedStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections
      self.update()
      self.getSection()
    }
    feeReceivedStore.on('read_student_list_changed',StudentListChanged)
    function StudentListChanged(students){
      self.studentList = students

      self.FeeSlipHead = false;
      self.update()
    }

});
riot.tag2('religion', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Religion Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Religion</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="ReligionInput" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readReligion}" style="margin-left :5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>#</th> <th>Religion</th> <th></th> </tr> </thead> <tbody> <tr each="{d, i in religions}"> <td>{i + 1}</td> <td>{d.religion}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{d.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, d)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{d.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.loading=false
      self.update()
      self.readReligion()
    })

     self.on("unmount", function(){
      religionStore.off('religion_changed', ReligionChanged)
    })

    self.readReligion = () => {
      self.loading=true
       religionStore.trigger('read_religion')
    }

     self.add = () => {
      if(!self.refs.ReligionInput.value){
        toastr.info("Please enter religion and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          religionStore.trigger('add_religion', self.refs.ReligionInput.value)
          self.readReligion()
        }else if(self.title=='Update'){
          console.log('update')
          religionStore.trigger('edit_religion', self.refs.ReligionInput.value,
            self.edit_id)
          self.readReligion()
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.religions.map(d => {
          d.confirmDelete = false
          d.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.religions.map(d => {
        if(d.religion != e.item.d.religion){
          d.confirmDelete = false
        }else{
          d.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      religionStore.trigger('delete_religion', e.item.d.religion_id)
    }

    self.edit = (d,e) => {
      console.log(d)
      self.title='Update'
      self.refs.ReligionInput.value = d.religion
      self.edit_id = d.religion_id
    }

    religionStore.on('religion_changed',ReligionChanged)
    function ReligionChanged(religions){
      console.log('religion_changed1')
      console.log(religions)
      self.title='Create'
      self.refs.ReligionInput.value = ''
      self.loading = false
      self.religions = religions
      self.update()
    }

});
riot.tag2('remark', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Remarks List</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Remark</label> </div> <div class="column is-narrow"> <div class="control"> <div class="control"> <input class=" input" ref="addRemarkInput" type="text" onkeyup="{addEnter}"> </div> </div> </div> <div class="column is-narrow"> <label class="label">Short Reamrk</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addShortRemarkInput" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readRemark}" style="margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Remark</th> <th>Short Remark</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in remarks}"> <td>{i+1}</td> <td>{ev.remark}</td> <td>{ev.short_remark}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ev.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, ev)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readRemark()
    })
    self.on("unmount", function(){
      remarkStore.off('add_remark_changed', AddRemarkChanged)
      remarkStore.off('read_remark_changed', ReadRemarkChanged)
      remarkStore.off('edit_remark_changed',EditRemarkChanged)
      remarkStore.off('delete_remark_changed',DeleteRemarkChanged)
    })

    self.readRemark = () => {
      self.loading=true
       remarkStore.trigger('read_remark')
    }

     self.add = () => {
      if(!self.refs.addRemarkInput.value){
        toastr.info("Please enter Remark and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          remarkStore.trigger('add_remark', self.refs.addRemarkInput.value,
          self.refs.addShortRemarkInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          remarkStore.trigger('edit_remark', self.refs.addRemarkInput.value,
          self.refs.addShortRemarkInput.value,self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.remarks.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.remarks.map(ev => {
        if(ev.remark_id != e.item.ev.remark_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      remarkStore.trigger('delete_remark', e.item.ev.remark_id)
    }

    self.edit = (ev,e) => {
      console.log(ev)
      self.title='Update'
      self.refs.addRemarkInput.value = ev.remark
      self.refs.addShortRemarkInput.value = ev.short_remark
      self.edit_id = ev.remark_id
    }

    remarkStore.on('add_remark_changed',AddRemarkChanged)
    function AddRemarkChanged(remarks){
      console.log(remarks)
      self.title='Create'
      self.refs.addRemarkInput.value =''
      self.refs.addShortRemarkInput.value =''
      self.loading = false
      self.remarks = remarks
      self.update()
      self.readRemark()
      console.log(self.remarks)
    }

    remarkStore.on('edit_remark_changed',EditRemarkChanged)
    function EditRemarkChanged(remarks){
      console.log(remarks)
      self.title='Update'
      self.refs.addRemarkInput.value =''
      self.refs.addShortRemarkInput.value =''
      self.loading = false
      self.remarks = remarks
      self.update()
      self.readRemark()

    }

    remarkStore.on('delete_remark_changed',DeleteRemarkChanged)
    function DeleteRemarkChanged(remarks){
      console.log(remarks)
      self.title='Create'
      self.refs.addRemarkInput.value =''
      self.refs.addShortRemarkInput.value =''
      self.loading = false
      self.remarks = remarks
      self.update()
      self.readRemark()
      console.log(self.remarks)
    }

    remarkStore.on('read_remark_changed',ReadRemarkChanged)
    function ReadRemarkChanged(remarks){
      console.log(remarks)
      self.title='Create'
      self.refs.addRemarkInput.value =''
      self.refs.addShortRemarkInput.value =''
      self.loading = false
      self.remarks = remarks
      self.update()
      console.log(self.remarks)
    }

});
riot.tag2('result-activation', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Result Activation </h2> </div> <div class="level-right"> <div class="control"> <input class="input" ref="searchClasses" onkeyup="{filterClasses}" type="text" placeholder="Search Here"> </div> <button class="button is-success has-text-weight-bold ml5" onclick="{allowBlock}">Allow/Block</button> <button class="button is-warning is-rounded ml5" onclick="{readResultActivation}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <thead> <tr> <th class="slno">SL</th> <th>Standard</th> <th>Section</th> <th>Active</th> <th class="has-text-centered"> <input type="checkbox" id="checkSection" onclick="{selectAll}"> </th> </tr> </thead> <tbody> <tr each="{c, i in filteredClasses}"> <td>{i+1}</td> <td>{c.standard}</td> <td>{c.section}</td> <td>{c.active_section}</td> <td class="has-text-centered"> <input type="checkbox" class="id_check_box" checked="{c.done}" id="{\'SectiondId\' + c.section_id}" onclick="{selectStudent.bind(this,c)}"> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this

    self.on("mount", function(){
      self.title = ''
      self.loading = false;
      self.readResultActivation()
    })
    self.on("unmount", function(){
      resultActivationStore.off('read_result_activation_changed',ClassesChanged)
      resultActivationStore.off('result_activation_update_changed',UpdateChanged)
    })

    self.readResultActivation = () => {
      self.loading = true;
      resultActivationStore.trigger('read_result_activation')
    }

    self.selectAll = () => {

      if($('#checkSection').is(":checked")){
        self.classes.map(c=>{
          c.done = true;
          $('SectiondId'+c.section_id).prop('checked', true);
        })
      }else{
        self.classes.map(c=>{
          c.done = false;
          $('SectiondId'+c.section_id).prop('checked', false);
          self.section_id = c.section_id;
        })
      }
    }

    self.selectStudent = (item,event) => {
      item.done=!event.item.c.done
        self.section_id = item.section_id;
    }

    self.allowBlock = () =>{
      let section_id='';
      var active_section = 'No'
      var st = []
       self.classes.map( q => {
          if(q.done){
            var ob ={}
            ob.section_id=q.section_id

            if(q.active_section=='Yes'){
              ob.active_section='No'
            }else{
              ob.active_section='Yes'
            }
            st.push(ob)
          }
        })
        if(st.length==0){
          toastr.info('Please select at least one Class and try again')
        }else{
          self.loading = true
          resultActivationStore.trigger('result_activation_update', st)
      }
    }

    self.filterClasses = ()=>{
      self.filteredClasses = self.classes.filter(c => {
        return JSON.stringify(c).toLowerCase().indexOf(self.refs.searchClasses.value.toLowerCase())>=0
      })
    }

    resultActivationStore.on('read_result_activation_changed',ClassesChanged)
    function ClassesChanged(classes){
      self.loading = false
      self.classes = []
      self.classes = classes
      self.filteredClasses = classes
      self.classes.map(c => {
        c.done=false
      })
      $("#checkSection").prop("checked", false);
      self.update()
      console.log(self.classes)
    }

    resultActivationStore.on('result_activation_update_changed',UpdateChanged)
    function UpdateChanged(){
      self.loading=false
      self.readResultActivation()
    }

});
riot.tag2('role', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Employee Role Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Employee</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="employee_id"> <option each="{employees}" riot-value="{employee_id}">{name} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Role</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="addEmployeeRoleInput"> <option value="Activity">Activity</option> <option value="Mentor">Mentor</option> <option value="Infirmary">Infirmary</option> <option value="Store">Store</option> <option value="Time Table">Time Table</option> <option value="Discipline">Discipline</option> <option value="Career">Career</option> <option value="Admission">Admission</option> <option value="Fees">Fees</option> <option value="Certificate">Certificate</option> </select> </div> </div> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Employee ID</th> <th>Employee</th> <th>Role</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in employeeRoles}"> <td>{i+1}</td> <td>{ev.employee_id}</td> <td>{ev.employee_name}</td> <td>{ev.role}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ev.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, ev)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readEmployees()
      self.readEmployeeRoles()
    })
    self.on("unmount", function(){
      employeeRoleStore.off('add_employee_role_changed', AddEmployeeRolesChanged)
      employeeRoleStore.off('read_employee_role_changed', ReadEmployeeRolesChanged)
      employeeRoleStore.off('read_employee_changed',EmployeesChanged)
      employeeRoleStore.off('edit_employee_role_changed',EditEmployeeRolesChanged)
      employeeRoleStore.off('delete_employee_role_changed',DeleteEmployeeRolesChanged)
    })

    self.readEmployees = () => {
        self.loading=true
       employeeRoleStore.trigger('read_employees')
    }

    self.readEmployeeRoles = () => {
      self.loading=true
       employeeRoleStore.trigger('read_employee_roles')
    }

     self.add = () => {
      if(!self.refs.addEmployeeRoleInput.value){
        toastr.info("Please enter Event and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          employeeRoleStore.trigger('add_employee_role', self.refs.addEmployeeRoleInput.value,
           self.refs.employee_id.value)
        }else if(self.title=='Update'){
          console.log('update')
          employeeRoleStore.trigger('edit_employee_role', self.refs.addEmployeeRoleInput.value,
            self.refs.employee_id.value, self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.employeeRoles.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.employeeRoles.map(ev => {
        if(ev.role_id != e.item.ev.role_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      employeeRoleStore.trigger('delete_employee_role', e.item.ev.role_id)
    }

    self.edit = (ev,e) => {
      console.log(ev)
      self.title='Update'
      self.refs.addEmployeeRoleInput.value = ev.role
      self.refs.employee_id.value = ev.employee_id
      self.edit_id = ev.role_id
    }

    employeeRoleStore.on('add_employee_role_changed',AddEmployeeRolesChanged)
    function AddEmployeeRolesChanged(employeeRoles){
      console.log(employeeRoles)
      self.title='Create'
      self.refs.addEmployeeRoleInput.value = ''
      self.refs.employee_id.value = ''
      self.loading = false
      self.employeeRoles = employeeRoles
      self.update()
      self.readEmployeeRoles()
      console.log(self.employeeRoles)
    }

    employeeRoleStore.on('edit_employee_role_changed',EditEmployeeRolesChanged)
    function EditEmployeeRolesChanged(employeeRoles){
      console.log(employeeRoles)
      self.title='Create'
      self.refs.addEmployeeRoleInput.value = ''
      self.refs.employee_id.value = ''
      self.loading = false
      self.employeeRoles = employeeRoles
      self.update()
      self.readEmployeeRoles()

    }

    employeeRoleStore.on('delete_employee_role_changed',DeleteEmployeeRolesChanged)
    function DeleteEmployeeRolesChanged(employeeRoles){
      console.log(employeeRoles)
      self.title='Create'
      self.refs.addEmployeeRoleInput.value = ''
      self.refs.employee_id.value = ''
      self.loading = false
      self.employeeRoles = employeeRoles
      self.update()
      self.readEmployeeRoles()
      console.log(self.employeeRoles)
    }

    employeeRoleStore.on('read_employee_role_changed',ReadEmployeeRolesChanged)
    function ReadEmployeeRolesChanged(employeeRoles){
      console.log(employeeRoles)
      self.title='Create'
      self.refs.addEmployeeRoleInput.value = ''
      self.loading = false
      self.employeeRoles = employeeRoles
      self.update()
      console.log(self.employeeRoles)
    }

    employeeRoleStore.on('read_employees_changed',EmployeesChanged)
    function EmployeesChanged(employees){
      console.log(employees)
      self.employees = employees
      self.loading=false
      self.update()
      console.log(self.employees)
    }

});
riot.tag2('scholarship-list', '<header></header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">From Date</label> </div> <div class="column is-narrow"> <input class="date input" id="start_date" ref="start_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column is-narrow"> <label class="label">To Date</label> </div> <div class="column is-narrow"> <input class="date input" id="end_date" ref="end_date" tabindex="0" type="text" readonly="readonly"> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{getScholarshipList}"> GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <p class="has-text-centered" style="color: #ff3860;font-weight:bold">Scholarship List</p> <p class="has-text-centered">Session: {sessionName}</p> <p class="has-text-centered">{fromSelectedDate} - {toSelectedDate}</p> <table class="table is-fullwidth is-striped is-hoverable is-bordered"> <thead> <tr> <th class="slNo">#</th> <th>Enrol No.</th> <th>Student\'s Name</th> <th>Class</th> <th>Fee Slip Name</th> <th>Scholarship</th> </tr> </thead> <tbody> <tr each="{cd, i in scholarships}"> <td>{i + 1}</td> <td>{cd.enroll_number}</td> <td>{cd.name}</td> <td>{cd.standard}</td> <td>{cd.fee_slip_name}</td> <td class="has-text-right amount">{cd.scholorship_amount}</td> </tr> <tr> <th class="has-text-right" colspan="5">Grand Total</th> <th class="has-text-right amount">{grand_total}</th> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      flatpickr(".date", {
    	allowInput: true,
    	altFormat: "Y-m-d",
  		})
      self.update();
    })

    self.on("unmount", function(){
      feesReportStore.off('read_scholarship_list_changed',ReadScholarshipListChanged)
    })

    self.getScholarshipList = () => {
    	var startDate = document.getElementById("start_date").value
    	var endDate = document.getElementById("end_date").value
    	if(!self.refs.start_date.value){
    		toastr.info("Pleae enter From Date and try again")
    	}else if(!self.refs.end_date.value){
    		toastr.info("Pleae enter End Date and try again")
    	}else if((Date.parse(startDate)> Date.parse(endDate))){
           toastr.info("From date can't be greater")
    	}else{
    	var obj={}
          obj['start_date']=self.refs.start_date.value
          obj['end_date']=self.refs.end_date.value
          self.loading = true
          feesReportStore.trigger('read_scholarship_list', obj)
         }
    }

    feesReportStore.on('read_scholarship_list_changed',ReadScholarshipListChanged)
    function ReadScholarshipListChanged(scholarships, session_name){
      self.grand_total = 0
      self.scholarships = []
      self.scholarships = scholarships
       self.scholarships.map(c => {

          self.grand_total +=Number(c.scholorship_amount)
      })
       self.sessionName = session_name
       self.fromSelectedDate = self.refs.start_date.value
       self.toSelectedDate = self.refs.end_date.value
       self.loading = false
      self.update()
    }
});
riot.tag2('scholarship', '<section class="container is-fluid" show="{scholar_ship_view ==\'scholarStudent\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Scholarship Assigned Students</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{assign_scholar_ship}"> <span class="icon"> <span class="fas fa-plus"></span> </span> <span>Add/Update</span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Enrol No.</th> <th>Standard</th> <th>Student</th> <th>Fee Slip</th> <th>Scholarship</th> <th>Scholarship</th> <th>Remarks</th> </tr> </thead> <tbody> <tr each="{s, i in ScholarStudents}"> <td>{i+1}</td> <td>{s.enroll_number}</td> <td>{s.standard}</td> <td>{s.student_name}</td> <td>{s.student_name}</td> <td>{s.fee_slip_name}</td> <td>{s.scholorship_amount}</td> <td>{s.scholorship_remarks}</td> </tr> </tbody> </table> </section> <section class="container is-fluid" show="{scholar_ship_view ==\'scholarshipAdd\'}"> <div class="level"> <div class="level-left"> <div class="level-item"> <h2 class="title" style="color: #ff3860;">Add/Edit Scholarship</h2> </div> </div> <div class="level-right"> <a class="button" onclick="{close_scholarship_view}">Back</a> </div> </div> <div class="columns"> <div class="column box is-one-quarter is-multiline"> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="enrolNumberText" type="text" placeholder="Enrol Number"> </div> </div> <div class="column"> <div class="select is-fullwidth"> <select ref="scholarshipType"> <option value="amount">Amount</option> <option value="percentage">Percentage</option> </select> </div> </div> <div class="column"> <input class=" input" ref="amountText" placeholder="Amount" type="number"> </div> <div class="column"> <button class="button is-danger" onclick="{getStudentDetail}">Go</button> </div> <div class="column"> <div class="pp-box"> <img src="https://bulma.io/images/placeholders/128x128.png"> </div> </div> <div class="control"> <div class="column"> <p class="title">{student_name}</p> <p class="title">{standard}</p> </div> </div> </div> <div class="column is-three-quarter"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th width="50">#</th> <th>Fee Slip Name</th> <th class="has-text-right" style="width:100px">Amount</th> </tr> </thead> <tbody> <tr each="{r, i in slips}"> <td>{i + 1}</td> <td>{r.fee_slip_name}</td> <td class="has-text-right"><input class="input" id="head_amount{r.fee_slip_id}" type="text" riot-value="{r.amount}" onkeyup="{getTotal}"></td> </tr> </tbody> <thead> <tr> <th class="has-text-right" colspan="2">Total</th> <th>{grandTotal}</th> </tr> </thead> </table> <div class="column is-full"> <input class=" input" ref="remarksText" type="text" placeholder="Remarks"> </div> <div class="column is-full"> <button class="button is-danger" style="float:right" onclick="{submitScholarship}">Submit</button> </div> </div> </div> </section>', '', '', function(opts) {
 var self = this
    self.on("mount", function(){
      self.role = getCookie('role')
      self.scholar_ship_view ='scholarStudent'
      self.update()
      self.readScholarStudent()
    })
    self.on("unmount", function(){
      scholarshipStore.off('read_scholar_student_changed', ReadScholarStudentChanged)
      scholarshipStore.off('read_student_changed', ReadStudentChanged)
      scholarshipStore.off('read_scholar_feeslip_changed', ReadScholarFeeSlipChanged)
      scholarshipStore.off('add_scholarship_head_changed', AddScholarshipHeadChanged)

    })

    self.getStudentDetail = () =>{
      console.log('get')
      scholarshipStore.trigger('read_student', self.refs.enrolNumberText.value)
    }

    self.getScholarshipByStudent = ()=>{
      scholarshipStore.trigger('read_scholarship_slip', self.studentId)

    }

    self.readScholarStudent = () => {
       scholarshipStore.trigger('read_scholar_student')
    }
    self.close_scholarship_view = () =>{
    	self.scholar_ship_view ='scholarStudent'
    }
    self.assign_scholar_ship = () =>{
    	self.scholar_ship_view ='scholarshipAdd'
    }

    self.submitScholarship = () =>{
      var assigned_slips = []
      for(var i=0; i<self.slips.length; i++){
          var o ={}
          o.fee_slip_id = self.slips[i].fee_slip_id;

          var sid = "#head_amount"+self.slips[i].fee_slip_id
          o.amount = $(sid).val()
          console.log("amount at " + sid + " = "+ o.amount)
          if(Number($(sid).val())>0){
          assigned_slips.push(o);
        }
      }

        var obj = {}
        obj['scholorship_remarks'] = self.refs.remarksText.value
        obj['student_id'] = self.studentId
        obj['fee'] = assigned_slips
        self.loading = true
        scholarshipStore.trigger('add_scholarship_amount', obj)
    }

   scholarshipStore.on('read_scholar_student_changed',ReadScholarStudentChanged)
    function ReadScholarStudentChanged(students){
      console.log(students)
      self.ScholarStudents = students
      self.update()
      console.log(self.students)
    }

    scholarshipStore.on('add_scholarship_head_changed',AddScholarshipHeadChanged)
    function AddScholarshipHeadChanged(scholarships){
      console.log("under scholarship changed")
      self.loading = false

      self.update()

    }

   scholarshipStore.on('read_student_changed',ReadStudentChanged)
    function ReadStudentChanged(scholarStudent){
      console.log(scholarStudent)
      self.student = []
      self.slips = []
      self.student_name = ''
      self.standard = ''
      self.studentId = ''
      if(scholarStudent.length>0){

      self.student = scholarStudent

      self.student_name = self.student[0].student_name;
      self.standard = self.student[0].standard;
      self.studentId = self.student[0].student_id;
      self.getScholarshipByStudent()
    }else{
      console.log("-------")
      showToast("No data found. Please try again.")
    }
      self.update()

    }
    scholarshipStore.on('read_scholar_feeslip_changed',ReadScholarFeeSlipChanged)
    function ReadScholarFeeSlipChanged(scholarSlips){
      console.log(scholarSlips)
      self.scholarSlips = []
      self.scholarSlips = scholarSlips
      self.slips= []
      for(var i=0; i<scholarSlips.length; i++){

        var obj = {};
        obj.fee_slip_id = scholarSlips[i].fee_slip_id;
        obj.fee_slip_name = scholarSlips[i].fee_slip_name;
        obj.scholorship_remarks = scholarSlips[i].scholorship_remarks;

        if(self.refs.scholarshipType.value=='amount'){
          if(scholarSlips[i].scholorship_amount !=null){
            obj.amount = scholarSlips[i].scholorship_amount;
          }else if (scholarSlips[i].scholorship_amount == null){
                obj.amount = self.refs.amountText.value;
          }
          if (scholarSlips[i].scholorship_amount == null && i==11 && self.refs.amountText.value!=""){
             obj.amount = 2*Number(self.refs.amountText.value);
          }

        }else if (self.refs.scholarshipType.value == 'percentage') {
          if(scholarSlips[i].scholorship_amount !=null){
            obj.amount = scholarSlips[i].scholorship_amount;
          }else if (scholarSlips[i].scholorship_amount == null) {
            if (self.refs.amountText.value == ""){
              obj.amount = scholarSlips[i].total_amount;
            }else
            obj.amount =( scholarSlips[i].total_amount * (Number(self.refs.amountText.value) * 0.01));
          }
        }
            self.slips.push(obj);
      }

      self.update()
      console.log(self.scholarSlips)
    }

});
riot.tag2('section-master', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Section Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" onkeyup="{addEnter}"> <option each="{standards}" riot-value="{standard_id}">{standard} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Section</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addSectionInput" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readSection}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Standard</th> <th>Section</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in sections}"> <td>{i+1}</td> <td>{ev.standard}</td> <td>{ev.section}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ev.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, ev)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readStandard()
      self.readSection()
    })
    self.on("unmount", function(){
      sectionStore.off('add_section_changed', AddSectionChanged)
      sectionStore.off('read_section_changed', ReadSectionChanged)
      sectionStore.off('read_standard_changed',StandardChanged)
      sectionStore.off('edit_section_changed',EditSectionChanged)
      sectionStore.off('delete_section_changed',DeleteSectionChanged)
    })

    self.readStandard = () => {
       sectionStore.trigger('read_standard')
    }

    self.readSection = () => {
      self.loading=true
       sectionStore.trigger('read_section')
    }

     self.add = () => {
      if(!self.refs.addSectionInput.value){
        toastr.info("Please enter Event and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          sectionStore.trigger('add_section', self.refs.addSectionInput.value,
           self.refs.standard_id.value)
        }else if(self.title=='Update'){
          console.log('update')
          sectionStore.trigger('edit_section', self.refs.addSectionInput.value,
            self.refs.standard_id.value, self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.sections.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.sections.map(ev => {
        if(ev.section_id != e.item.ev.section_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      sectionStore.trigger('delete_section', e.item.ev.section_id)
    }

    self.edit = (ev,e) => {
      console.log(ev)
      self.title='Update'
      self.refs.addSectionInput.value = ev.section
      self.refs.standard_id.value = ev.standard_id
      self.edit_id = ev.section_id
    }

    sectionStore.on('add_section_changed',AddSectionChanged)
    function AddSectionChanged(sections){
      console.log(sections)
      self.title='Create'
      self.refs.addSectionInput.value = ''
      self.refs.standard_id.value = ''
      self.loading = false
      self.sections = sections
      self.update()
      self.readSection()
      console.log(self.sections)
    }

    sectionStore.on('edit_section_changed',EditSectionChanged)
    function EditSectionChanged(sections){
      console.log(sections)
      self.title='Create'
      self.refs.addSectionInput.value = ''
      self.refs.standard_id.value = ''
      self.loading = false
      self.sections = sections
      self.update()
      self.readSection()

    }

    sectionStore.on('delete_section_changed',DeleteSectionChanged)
    function DeleteSectionChanged(sections){
      console.log(sections)
      self.title='Create'
      self.refs.addSectionInput.value = ''
      self.refs.standard_id.value = ''
      self.loading = false
      self.sections = sections
      self.update()
      self.readSection()
      console.log(self.sections)
    }

    sectionStore.on('read_section_changed',ReadSectionChanged)
    function ReadSectionChanged(sections){
      console.log(sections)
      self.title='Create'
      self.refs.addSectionInput.value = ''
      self.loading = false
      self.sections = sections
      self.update()
      console.log(self.sections)
    }

    sectionStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()
      console.log(self.standards)
    }

});
riot.tag2('session-setting', '<section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Fee Session Management</h2> <div class="flex items-center mt-2 mb-6 no-print"> <div class="bg-green py-1 rounded w-10"> <div class="bg-grey h-px flex-auto"></div> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"> <label class="label">Session Name</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addSessionInput" type="text"> </div> </div> <div class="column is-narrow"> <label class="label">Start Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="date input flatpickr-input form-control input" ref="sessionStartDateInput" placeholder="" tabindex="0" type="text" readonly="readonly"> </div> </div> <div class="column is-narrow"> <label class="label">End Date</label> </div> <div class="column is-narrow"> <div class="control"> <input class="date input flatpickr-input form-control input" ref="sessionEndDateInput" placeholder="" tabindex="0" type="text" readonly="readonly"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Session Name</th> <th>Session Start Date</th> <th>Session End Date</th> <th>Current Session</th> <th></th> </tr> </thead> <tbody> <tr each="{s, i in sessions}"> <td>{i+1}</td> <td>{s.session_name}</td> <td>{s.session_start_date}</td> <td>{s.session_end_date}</td> <td>{s.is_current}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{s.confirmDelete || s.confirmCurrent}"> <span if="{role==\'ADMIN\'}"> <a class="button is-small is-rounded" rel="nofollow" onclick="{confirmCurrentSession}">Mark Current Session</a></span> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, s)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{s.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> <div class="table-buttons" if="{s.confirmCurrent}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{markCurrent}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      flatpickr(".date", {

    	allowInput: true,
    	altFormat: "d/m/Y",
    	dateFormat: "Y-m-d",
  		})
      self.readSession()
    })
    self.on("unmount", function(){
      sessionStore.off('read_session_changed', ReadSessionChanged)
      sessionStore.off('add_session_changed',AddSessionChanged)
      sessionStore.off('edit_session_changed',EditSessionChanged)
      sessionStore.off('delete_event_changed',DeleteSessionChanged)
    })

    self.readSession = () => {
       sessionStore.trigger('read_session')
    }

     self.add = () => {
      if(!self.refs.addSessionInput.value){
        toastr.info("Please enter Event and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          sessionStore.trigger('add_session', self.refs.addSessionInput.value,
           self.refs.sessionStartDateInput.value , self.refs.sessionEndDateInput.value)
           self.readSession()
        }else if(self.title=='Update'){
          console.log('update')
          sessionStore.trigger('edit_session',  self.refs.addSessionInput.value,
          self.refs.sessionStartDateInput.value ,
          self.refs.sessionEndDateInput.value, self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.sessions.map(s => {
          s.confirmDelete = false
          s.confirmEdit = false
          s.confirmCurrent = false
      })
    }

    self.confirmDelete = (e) => {
      self.sessions.map(s => {
        if(s.session_id != e.item.s.session_id){
          s.confirmDelete = false
        }else{
          s.confirmDelete = true
        }
      })
    }
    self.confirmCurrentSession = (e) =>{
      self.sessions.map(s => {
        if(s.session_id != e.item.s.session_id){
          s.confirmCurrent = false
        }else{
          s.confirmCurrent = true
        }
      })
    }
    self.markCurrent = (e) => {
      self.loading = true
      sessionStore.trigger('current_session', e.item.s.session_id)
    }

    self.delete = (e) => {
      self.loading = true
      sessionStore.trigger('delete_session', e.item.s.session_id)
    }

    self.edit = (s,e) => {
      console.log(s)
      self.title='Update'
      flatpickr(".date", {
    	allowInput: true,
    	altFormat: "d/m/Y",
    	dateFormat: "Y-m-d",
  		})
      self.refs.addSessionInput.value = s.session_name
      self.refs.sessionStartDateInput.value = s.u_session_start_date
      self.refs.sessionEndDateInput.value = s.u_session_end_date
      self.edit_id = s.session_id
    }

    sessionStore.on('read_session_changed',ReadSessionChanged)
    function ReadSessionChanged(sessions){
      console.log(sessions)
      self.title='Create'
      self.loading = false
      self.sessions = sessions
      self.update()
      console.log(self.sessions)
    }

    sessionStore.on('add_session_changed',AddSessionChanged)
    function AddSessionChanged(sessions){
      console.log(sessions)
      self.title='Create'
      self.loading = false
      self.sessions = sessions
      self.update()
      console.log(self.sessions)
    }

    sessionStore.on('edit_session_changed',EditSessionChanged)
    function EditSessionChanged(sessions){
      console.log(sessions)
      self.title='Create'
      self.loading = false
      self.sessions = sessions
      self.refs.addSessionInput.value = ''
      self.refs.sessionStartDateInput.value = ''
      self.refs.sessionEndDateInput.value = ''
      self.update()
      console.log(self.sessions)
    }
    sessionStore.on('delete_event_changed',DeleteSessionChanged)
    function DeleteSessionChanged(sessions){
      console.log(sessions)
      self.title='Create'
      self.sessions = sessions
      self.update()
    }

    sessionStore.on('marked_event_changed',MarkedSessionChanged)
    function MarkedSessionChanged(sessions){
      console.log(sessions)
      self.title='Create'
      self.sessions = sessions
      self.update()
    }

});
riot.tag2('setting', '<div class="field has-addons"> <p class="control"> <a class="button {is-active: selected_master == \'item\'}" href="#/setting/item"> <span>Item</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'event\'}" href="#/setting/event"> <span>Event</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'category\'}" href="#/setting/category"> <span>Category</span> </a> </p> <p class="control"> <a class="button {is-active: selected_master == \'class-teacher\'}" href="#/setting/class-teacher"> <span>Class Teacher</span> </a> </p> </div> <div id="setting-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_master')
    console.log(opts.selected_master)
    if(!opts.selected_master){
      self.selected_master = 'item'
    }else{
      self.selected_master = opts.selected_master
    }
});
riot.tag2('staff-gender-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Staff BY Gender<br> Grand Total <span style="color:#000">: {grand_total}</span></h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="emp_type_id" onchange="{readEmployeeGenderReport}"> <option>Choose Type</option> <option value="-1">All</option> <option each="{employeeTypes}" riot-value="{emp_type_id}">{emp_type} </option> </select> </div> </div> </div> <div class="column"> <input type="checkbox" id="checkTable" checked="{e.done}" onclick="{viewTable}" style="margin-top: 12px;"> Table <button class="button is-primary has-text-weight-bold is-pulled-right is-small" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right is-small" onclick="{readEmployeeGenderReport}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <center> <div id="piechart" style="width: 900px; height: 500px;" show="{report_view ==\'show_graph\'}"></div> </center> <table class="table is-fullwidth is-striped is-hoverable is-narrow" show="{report_view ==\'show_table\'}"> <thead> <tr> <th>#</th> <th>Gender</th> <th>Strength</th> </tr> </thead> <tbody> <tr each="{st, i in employeeGenderReports}"> <td>{i+1}</td> <td>{st.gender}</td> <td>{st.total}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.report_view ='show_graph'
    	self.readEmployeeTypes()
    	self.readEmployeeGenderReport()
    	self.role = getCookie('role')
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
    	employeeTypeStore.off('employeeTypes_changed', EmployeeTypesChanged)
      staffStore.off('read_employee_gender_report_change',ReadEmployeeGenderReportChanged)
    })

     self.viewTable = () => {
    	if($('#checkTable').is(":checked")){
	        self.report_view = 'show_table'
    	}else{
	        self.report_view = 'show_graph'
    	}
    }

    self.readEmployeeTypes = () => {
       self.loading = true;
       employeeTypeStore.trigger('read_employeeTypes')
    }

     employeeTypeStore.on('employeeTypes_changed',EmployeeTypesChanged)
    function EmployeeTypesChanged(employeeTypes){
      console.log(employeeTypes)
      self.employeeTypes = employeeTypes
        self.loading = false;
      self.update()
      console.log(self.employeeTypes)
    }

    self.readEmployeeGenderReport = () => {
    	self.loading=true
       staffStore.trigger('read_employee_gender_report',self.refs.emp_type_id.value)
    }

    staffStore.on('read_employee_gender_report_change',ReadEmployeeGenderReportChanged)
    function ReadEmployeeGenderReportChanged(employeeGenderReports,grandTotal){
    	self.title='Create'
    	self.loading = false
    	self.employeeGenderReports = employeeGenderReports
       	self.grand_total = grandTotal

		var labels = []
		var chart_percentage = []
        var backgroundColor = []

        chart_percentage.push(['Task', 'Hours per Day'])
        for (var i = self.employeeGenderReports.length - 1; i >= 0; i--) {
		   chart_percentage.push([self.employeeGenderReports[i].gender,self.employeeGenderReports[i].total])
		}
		google.charts.load("current", {packages:["corechart"]});
      	google.charts.setOnLoadCallback(drawChart);
      	function drawChart() {
        	var data = google.visualization.arrayToDataTable(chart_percentage);
        	var options = {
          		is3D: true,
          		legend:{position: 'labeled',
                		textStyle: {bold: true} },
          		pieSliceText: 'value'
        	};

        	var chart = new google.visualization.PieChart(document.getElementById('piechart'));
        	chart.draw(data, options);
      	}
      	self.update()
    }

});
riot.tag2('staff-profile', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{staff_view ==\'add_staff\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} Staff</h2> </div> <div class="level-right"></div> </div> <div class="box"> <div class="columns is-multiline"> <div class="column is-one-fifth"> <div id="pp_box" class="pp-box" onclick="{trigger_file_input.bind(this,\'staff_picture\')}"> <div class="icon has-text-danger" onclick="{remove_picture.bind(this, \'pp_box\',\'staff_picture\')}"><i class="fas fa-trash"></i> </div> </div> <input accept="image/*" class="is-hidden" id="staff_picture" name="staff_picture" onchange="{loadFile.bind(this, \'pp_box\')}" type="file"> </div> <div class="column "> <div class="columns "> <div class="column is-2"> <label class="label is-small" for="title">Title</label> </div> <div class="column is-10"> <input class="input is-small" id="title" ref="title" type="text"> </div> </div> <div class="columns "> <div class="column is-2"> <label class="label is-small" for="first_name">First Name</label> </div> <div class="column is-2"> <input class="input is-small" id="first_name" ref="first_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="middle_name">Middle Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="middle_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="last_name">Last Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="last_name" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="last_name">Short Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="short_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="gender">Gender</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select id="gender" ref="gender"> <option value="M">Male</option> <option value="F">Female</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="">Identification Marks</label> </div> <div class="column is-2"> <input class="input is-small" ref="id_mark" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="blood_group">Blood Group</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select id="blood_group" ref="blood_group"> <option value="A+">A+</option> <option value="A-">A-</option> <option value="AB+">AB+</option> <option value="AB-">AB-</option> <option value="B+">B+</option> <option value="B-">B-</option> <option value="O+">O+</option> <option value="O-">O-</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="dob">Place of Birth</label> </div> <div class="column is-2"> <input class="input is-small" ref="place_of_birth" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="dob">Nationality</label> </div> <div class="column is-2"> <input class="input is-small" ref="nationality" type="text"> </div> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="religion_id">Religion</label> </div> <div class="column is-2"> <div class="control"> <div class="select is-fullwidth is-small"> <select id="religion_id" ref="religion_id"> <option each="{religion}" riot-value="{religion_id}">{religion} </option> </select> </div> </div> </div> <div class="column is-2"> <label class="label is-small" for="">Language</label> </div> <div class="column is-2"> <input class="input is-small" ref="language" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="category_id">Cast Category</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="category_id"> <option each="{cast}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="dob">DOB</label> </div> <div class="column is-2"> <input class="input date is-small" ref="dob" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="residence_phone">Phone(R)</label> </div> <div class="column is-2"> <input class="input is-small" ref="residence_phone" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="Office_phone">Phone(O)</label> </div> <div class="column is-2"> <input class="input is-small" ref="office_phone" type="number"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="Employee ID">Employee ID</label> </div> <div class="column is-2"> <input class="input is-small" ref="employee_id" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="Moble">Mobile</label> </div> <div class="column is-2"> <input class="input is-small" ref="mobile" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="Office_phone">Email</label> </div> <div class="column is-2"> <input class="input is-small" ref="email" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Contact Information(Permanent Address)</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="add_l1">Address Line 1</label> </div> <div class="column is-2"> <input class="input is-small" ref="add_l1" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="add_l2">Address Line 2</label> </div> <div class="column is-2"> <input class="input is-small" ref="add_l2" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="city">City</label> </div> <div class="column is-2"> <input class="input is-small" ref="city" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="zip">Zip</label> </div> <div class="column is-2"> <input class="input is-small" ref="zip" maxlength="6" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="state">State</label> </div> <div class="column is-2"> <input class="input is-small" ref="state" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="country">Country</label> </div> <div class="column is-2"> <input class="input is-small" ref="country" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link"> Check if Correspondence Address is same as Permanent Address <input type="checkbox" id="correspondenceCheckbox" name="correspondenceCheckbox" onclick="{copyAddress.bind(this)}"> </h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="c_add_l1">Address Line 1</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_add_l1" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="c_add_l2">Address Line 2</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_add_l2" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="c_city">City</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_city" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="c_zip">Zip</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_zip" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="c_state">State</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_state" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="c_country">Country</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_country" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-info has-text-weight-bold adjusted-top" onclick="{addFamilyInformation}"> Next >> </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_family_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} Family</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="marital_status">Marital Status</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select id="marital_status" ref="marital_status"> <option value="S">Single</option> <option value="M">Married</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="f_occupation">Father Name</label> </div> <div class="column is-2 "> <input class="input is-small" id="father_name" ref="father_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Father Occupation</label> </div> <div class="column is-2"> <input class="input is-small" id="father_occupation" ref="father_occupation" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Spouse\'s Name</label> </div> <div class="column is-2"> <input class="input is-small" id="" ref="spouse" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Spouse\'s Occupation</label> </div> <div class="column is-2 "> <input class="input is-small" id="" ref="spouse_occupation" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f_organisation_name">Anniversary</label> </div> <div class="column is-2"> <input class="input date is-small" ref="anniversary" type="date"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Child1</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="child1_first_name">First Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="child1_first_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Last Name</label> </div> <div class="column is-2 "> <input class="input is-small" ref="child1_last_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="gender">Gender</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select id="sex" ref="child1_sex"> <option value="M">Male</option> <option value="F">Female</option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Dob</label> </div> <div class="column is-2"> <input class="input date is-small" ref="child1_dob" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">School</label> </div> <div class="column is-2 "> <input class="input is-small" ref="child1_school" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Child2</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="child2_first_name">First Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="child2_first_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Last Name</label> </div> <div class="column is-2 "> <input class="input is-small" ref="child2_last_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="gender">Gender</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select id="sex" ref="child2_sex"> <option value="M">Male</option> <option value="F">Female</option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Dob</label> </div> <div class="column is-2"> <input class="input date is-small" ref="child2_dob" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">School</label> </div> <div class="column is-2 "> <input class="input is-small" ref="child2_school" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Child3</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="child3_first_name">First Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="child3_first_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Last Name</label> </div> <div class="column is-2 "> <input class="input is-small" ref="child3_last_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="gender">Gender</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select id="sex" ref="child3_sex"> <option value="M">Male</option> <option value="F">Female</option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Dob</label> </div> <div class="column is-2"> <input class="input date is-small" ref="child3_dob" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">School</label> </div> <div class="column is-2 "> <input class="input is-small" ref="child3_school" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-primary has-text-weight-bold adjusted-top" onclick="{closeFamilyInformation}"> Previous </button> <button class="button is-info has-text-weight-bold adjusted-top" onclick="{addQualificationInformation}"> Next >> </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_qualification_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} Qualification</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Academic Qualification</h3> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-8 has-text-link">X information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="x_subject">X Subject </label> </div> <div class="column is-2"> <input class="input is-small" ref="x_subject" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">X Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="x_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">X Board</label> </div> <div class="column is-2"> <input class="input is-small" ref="x_board" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">X YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="x_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">X Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="x_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">X Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="x_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-8 has-text-link">XII information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="xii_subject">XII Subject </label> </div> <div class="column is-2"> <input class="input is-small" ref="xii_subject" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">XII Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="xii_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">XII Board</label> </div> <div class="column is-2"> <input class="input is-small" ref="xii_board" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">XII YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="xii_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">XII Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="xii_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">XII Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="xii_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Professional Qualification</h3> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-8 has-text-link">UG information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="ug_course">UG Course </label> </div> <div class="column is-2"> <input class="input is-small" ref="ug_course" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">UG Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="ug_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">UG University</label> </div> <div class="column is-2"> <input class="input is-small" ref="ug_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">UG YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="ug_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">UG Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="ug_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">UG Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="ug_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-8 has-text-link">PG information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="pg_course">PG Course </label> </div> <div class="column is-2"> <input class="input is-small" ref="pg_course" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">PG Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="pg_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">PG University</label> </div> <div class="column is-2"> <input class="input is-small" ref="pg_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">PG YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="pg_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">PG Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="pg_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">PG Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="pg_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-primary has-text-weight-bold adjusted-top" onclick="{closeQualificationInformation}"> Previous </button> <button class="button is-info has-text-weight-bold adjusted-top" onclick="{addProfessionalCourseInformation}"> Next >> </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_professional_course_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} New Employee</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">B.Ed. information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="bed_stream">B.Ed. stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="bed_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.Ed. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bed_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.Ed. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="bed_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">B.Ed. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="bed_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.Ed. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bed_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.Ed. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="bed_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">B.T. information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="bt_stream">B.T. Stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="bt_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.T. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bt_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.T. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="bt_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">B.T. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="bt_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.T. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bt_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.T. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="bt_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">B.P.Ed. information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="bped_stream">B.P.Ed. stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="bped_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.P.Ed. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bped_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.P.Ed. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="bped_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">B.P.Ed. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="bped_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.P.Ed. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bped_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.P.Ed. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="bped_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">D.P.Ed. information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="dped_stream">D.P.Ed. stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="dped_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">D.P.Ed. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="dped_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">D.P.Ed. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="dped_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">D.P.Ed. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="dped_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">D.P.Ed. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="dped_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">D.P.Ed. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="dped_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-primary has-text-weight-bold adjusted-top" onclick="{closeProfessionalCourseInformation}"> Previous </button> <button class="button is-info has-text-weight-bold adjusted-top" onclick="{addProfessionalMasterCourseInformation}"> Next >> </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_professional_master_course_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} New Employee</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">M.P.Ed. information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="mped_stream">M.P.Ed. stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="mped_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.P.Ed. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="mped_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.P.Ed. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="mped_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">M.P.Ed. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="mped_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.P.Ed. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="mped_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.P.Ed. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="mped_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">M.Ed. information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="med_stream">M.Ed. Stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="med_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Ed. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="med_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Ed. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="med_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">M.Ed. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="med_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Ed. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="med_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Ed. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="med_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">M.Phil information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="mphil_stream">M.Phil stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="mphil_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Phil Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="mphil_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Phil University</label> </div> <div class="column is-2"> <input class="input is-small" ref="mphil_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">M.Phil YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="mphil_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Phil Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="mphil_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Phil Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="mphil_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Phd. information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="phd_stream">Phd. Stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="phd_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Phd. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="phd_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Phd. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="phd_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Phd. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="phd_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Phd. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="phd_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Phd. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="phd_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Other information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="other_stream">Other Stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="other_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Other Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="other_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Other University</label> </div> <div class="column is-2"> <input class="input is-small" ref="other_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Other YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="other_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Other Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="other_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Other Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="other_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-primary has-text-weight-bold adjusted-top" onclick="{closeProfessionalMasterCourseInformation}"> Previous </button> <button class="button is-info has-text-weight-bold adjusted-top" onclick="{addExtraActivityInformation}"> Next >> </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_extra_activity_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} New Employee</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Other information</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="details_scholarship">Scholarship Detail </label> </div> <div class="column is-2"> <input class="input is-small" ref="details_scholarship" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Awards/Honours Detail</label> </div> <div class="column is-2 "> <input class="input is-small" ref="details_honours" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Publication Detail</label> </div> <div class="column is-2"> <input class="input is-small" ref="details_publication" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Curricular Activities Detail</label> </div> <div class="column is-2"> <input class="input is-small" ref="details_curricular_activities" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Sports Detail</label> </div> <div class="column is-2 "> <input class="input is-small" ref="details_sport" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Work Experience</h3> </div> </div> <div each="{st, i in workExperienceArray}" style="margin-bottom:20px;margin-top:20px"> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="work_instituition">Instituition </label> </div> <div class="column is-2"> <input class="input is-small" ref="work_instituition" id="work_instituition{i}" riot-value="{st.institution}" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">DOJ</label> </div> <div class="column is-2 "> <input class="input date is-small" id="work_doj{i}" type="text" riot-value="{st.date_of_joining}"> </div> <div class="column is-2"> <label class="label is-small" for="">DOL</label> </div> <div class="column is-2"> <input class="input date is-small" id="work_dol{i}" type="text" riot-value="{st.date_of_leaving}"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Position</label> </div> <div class="column is-2"> <input class="input is-small" ref="work_position" id="work_position{i}" type="text" riot-value="{st.position}"> </div> <div class="column is-2"> <label class="label is-small" for="">Subjects</label> </div> <div class="column is-2 "> <input class="input is-small" ref="work_subject" id="work_subject{i}" type="text" riot-value="{st.subjects_taught}"> </div> <div class="column is-2"> <button class="button is-small is-primary is-rounded ml5 " onclick="{add_more_work_exp}"> <span class="icon"><span class="fas fa-plus"></span></span> </button> <button class="button is-info is-rounded ml5 is-small" onclick="{remove.bind(this, i)}"> <span class="icon"><span class="fas fa-minus"></span></span> </button> </div> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-primary has-text-weight-bold adjusted-top" onclick="{closeExtraActivityInformation}"> Previous </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{addPrevoiusJob}"> Next </button> <button class="button is-info has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_previous_job_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} New Employee</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Particulars of Previous Job</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Organization Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="organization_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Address Line 1</label> </div> <div class="column is-2 "> <input class="input is-small" ref="add_l1_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Address Line 2</label> </div> <div class="column is-2"> <input class="input is-small" ref="add_l2_of_previous_job" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">City</label> </div> <div class="column is-2"> <input class="input is-small" ref="city_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Zip</label> </div> <div class="column is-2 "> <input class="input is-small" ref="zip_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">State</label> </div> <div class="column is-2"> <input class="input is-small" ref="state_of_previous_job" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Country</label> </div> <div class="column is-2"> <input class="input is-small" ref="country_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Designation</label> </div> <div class="column is-2 "> <input class="input is-small" ref="designation_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Date of Joining</label> </div> <div class="column is-2"> <input class="input date is-small" ref="doj_of_previous_job" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Salary</label> </div> <div class="column is-2"> <input class="input is-small" ref="salary_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Basic</label> </div> <div class="column is-2 "> <input class="input is-small" ref="basic_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Allowances</label> </div> <div class="column is-2"> <input class="input is-small" ref="allowances_of_previous_job" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Other Benefits</label> </div> <div class="column is-2"> <input class="input is-small" ref="other_benefits_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Bond Details</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bond_details_of_previous_job" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link">Work Profile</h3> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Qualification</label> </div> <div class="column is-2"> <input class="input is-small" ref="qualification" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="doj">Date of Joining</label> </div> <div class="column is-2 "> <input class="input date is-small" ref="doj" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="subject_id">Specialization</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="subject_id"> <option each="{subjects}" riot-value="{subject_id}">{subject_name} </option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Employee Type</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="emp_type_id"> <option each="{employeeTypes}" riot-value="{emp_type_id}">{emp_type} </option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="">Designation</label> </div> <div class="column is-2 "> <div class="select is-fullwidth is-small"> <select ref="designation_id"> <option each="{designations}" riot-value="{designation_id}">{designation} </option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="">Department</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="department_id"> <option each="{departments}" riot-value="{department_id}">{department_name} </option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-primary has-text-weight-bold adjusted-top" onclick="{closePreviousJob}"> << Previous </button> <button class="button is-info has-text-weight-bold adjusted-top" onclick="{addInformation}"> Submit </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <div id="statusModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Update Status</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role">Leaving Date</label> <div class="control"> <input class="input date" type="text" ref="leaving_date"> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Remarks</label> <div class="control"> <textarea class="input" type="text" ref="remark" rows="3"></textarea> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-danger" onclick="{updateEmployeeStatus}">{title}</button> <button class="button" id="item-modal-close" onclick="{closeStatusUpdateModal}">Cancel</button> </footer> </div> </div> <section class=" is-fluid" show="{staff_view ==\'staff_profile\'}"> <div class="level"> <div class="level-left"> <h2 class="title">Profile of {first_name} {middle_name} {last_name}</h2> </div> <div class="level-right"> <a class="button no-print" onclick="{close_staff_profile}">Back</a> </div> </div> <table class="table is-fullwidth is-bordered"> <tr> <td rowspan="4" colspan="2"> <img id="pp_box1" width="90" height="90"> </td> <td colspan="2" style="background-color:#efefef"><b>Login ID</b></td> <td colspan="3">{employee_id}</td> </tr> <tr> <th>Name</th> <td>{first_name} {middle_name} {last_name}</td> <th>Short Name</th> <td colspan="2">{st.short_name}</td> </tr> <tr> <th>Gender</th> <td>{gender} </td> <th>Blood Group</th> <td colspan="2">{blood_group}</td> </tr> <tr> <th>Category</th> <td colspan="2">{category_name}</td> <th>Date of Birth</th> <td>{dob}</td> </tr> <tr> <th>Marital Status</th> <td>{marital_status}</td> <th>Date of Marriage</th> <td>{dom}</td> <th colspan="2">Husband/Wife Name</th> <td>{spouse}</td> </tr> <tr> <th colspan="2">Permanent Address</th> <td colspan="5">{add_l1} , {add_l2}, {city} , {state}-{zip}, {country}</td> </tr> <tr> <th colspan="2">Correspondence Address</th> <td colspan="5">{c_add_l1} , {c_add_l2}, {c_city} , {c_state}-{c_zip}, {c_country}</td> </tr> <tr> <th colspan="2">Phone(O)</th> <td>{office_phoe}</td> <th colspan="2">Mobile</th> <td>{mobile}</td> </tr> <tr> <th colspan="2">Email</th> <td colspan="5">{email}</td> </tr> </table> <table class="table is-fullwidth is-bordered"> <tr> <th colspan="7">Work Profile</th> </tr> <tr> <th colspan="2">Phone(O)</th> <td>{office_phoe}</td> <th colspan="2">Mobile</th> <td>{mobile}</td> </tr> <tr> <th>Qulaification</th> <td colspan="2">{qualification}</td> <th colspan="2">Date of Joining</th> <td>{doj}</td> </tr> <tr> <th colspan="2">Specialization</th> <td>{specialization}</td> <th colspan="2">Employee Type</th> <td>{emp_type}</td> </tr> <tr> <th colspan="2">Designation</th> <td>{designation}</td> <th colspan="2">Department</th> <td>{department_name}</td> </tr> <tr> <th colspan="2">Level</th> <td>{level_name}</td> <th colspan="2">Employment Status</th> <td>{employment_status}</td> </tr> </table> <table class="table is-fullwidth is-bordered"> <tr> <th colspan="7"><b>Academic Qualification</b></th> </tr> <tr><th colspan="7">X Infrmation</th></tr> <tr> <th>Subject</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{x_subject}</td> <td>{x_institution}</td> <td>{x_board}</td> <td>{x_yop}</td> <td>{x_marks}</td> <td>{x_div}</td> </tr> <tr><th colspan="7">XII Infrmation</th></tr> <tr> <th>Subject</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{xii_subject}</td> <td>{xii_institution}</td> <td>{xii_board}</td> <td>{xii_yop}</td> <td>{xii_marks}</td> <td>{xii_div}</td> </tr> <tr><th colspan="7">UG Infrmation</th></tr> <tr> <th>Course</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{ug_course}</td> <td>{ug_institution}</td> <td>{ug_board}</td> <td>{ug_yop}</td> <td>{ug_marks}</td> <td>{ug_div}</td> </tr> <tr><th colspan="7">PG Infrmation</th></tr> <tr> <th>Course</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{pg_course}</td> <td>{pg_institution}</td> <td>{pg_board}</td> <td>{pg_yop}</td> <td>{pg_marks}</td> <td>{pg_div}</td> </tr> <tr><th colspan="7">B.Ed Infrmation</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{bed_stream}</td> <td>{bed_institution}</td> <td>{bed_board}</td> <td>{bed_yop}</td> <td>{bed_marks}</td> <td>{bed_div}</td> </tr> <tr><th colspan="7">B.T Infrmation</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{bt_stream}</td> <td>{bt_institution}</td> <td>{bt_board}</td> <td>{bt_yop}</td> <td>{bt_marks}</td> <td>{bt_div}</td> </tr> <tr><th colspan="7">B. P. Ed. Information</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{bped_stream}</td> <td>{bped_institution}</td> <td>{bped_board}</td> <td>{bped_yop}</td> <td>{bped_marks}</td> <td>{bped_div}</td> </tr> <tr><th colspan="7">D.P.Ed. Information</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{dped_stream}</td> <td>{dped_institution}</td> <td>{dped_board}</td> <td>{dped_yop}</td> <td>{dped_marks}</td> <td>{dped_div}</td> </tr> <tr><th colspan="7">M.P.Ed. Information</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{mped_stream}</td> <td>{mped_institution}</td> <td>{mped_board}</td> <td>{mped_yop}</td> <td>{mped_marks}</td> <td>{mped_div}</td> </tr> <tr><th colspan="7">M.Ed. Information</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{med_stream}</td> <td>{med_institution}</td> <td>{med_board}</td> <td>{med_yop}</td> <td>{med_marks}</td> <td>{med_div}</td> </tr> <tr><th colspan="7">M.Phil. Information</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{mphil_stream}</td> <td>{mphil_institution}</td> <td>{mphil_board}</td> <td>{mphil_yop}</td> <td>{mphil_marks}</td> <td>{mphil_div}</td> </tr> <tr><th colspan="7">Phd. Information</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{phd_stream}</td> <td>{phd_institution}</td> <td>{phd_board}</td> <td>{phd_yop}</td> <td>{phd_marks}</td> <td>{phd_div}</td> </tr> <tr><th colspan="7">Other Qualification</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{other_stream}</td> <td>{other_institution}</td> <td>{other_board}</td> <td>{other_yop}</td> <td>{other_marks}</td> <td>{other_div}</td> </tr> </table> <table class="table is-fullwidth is-bordered"> <tr> <th colspan="7">Extra Activities</th> </tr> <tr> <th colspan="2">Scholarship Details</th> <td colspan="2">{details_scholarship}</td> <th colspan="2">Awards/honours Details</th> <td>{details_honours}</td> </tr> <tr> <th colspan="2">Publication Details</th> <td>{details_publication}</td> <th colspan="3">Curricular Activities Details</th> <td>{details_curricular_activities}</td> </tr> <tr> <th colspan="3">Sports Detail</th> <td colspan="4">{details_sport}</td> </tr> </table> <table class="table is-fullwidth is-bordered"> <tr> <th colspan="7">Working Experience</th> </tr> <tr> <th>Institution</th> <th>DOJ</th> <th>DOL</th> <th>Position</th> <th>Subject Taught</th> </tr> <tr> <td>{work_institution}</td> <td>{doj}</td> <td>{dol}</td> <td>{position}</td> <td>{subject_taught}</td> </tr> </table> </section> <section class=" is-fluid" show="{staff_view ==\'show_staff_fast_edit\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Fast Edit</h2> </div> <div class="level-right"> <div> <button class="button is-warning is-rounded" onclick="{backToStaff}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="fast_edit_value" onchange="{showFastEdit}"> <option>Select Field</option> <option value="short_name">Short Name</option> <option value="gender">Gender</option> <option value="father_name">Father Name</option> <option value="blood_group">Blood Group</option> <option value="mobile">Mobile</option> <option value="phone_r">Phone Residence </option> <option value="phone_o">Phone Office</option> <option value="city">City</option> <option value="employee_id">Employee ID</option> </select> </div> </div> </div> </div> </div> <div class="level-right"><button class="button is-danger" onclick="{fastUpdateStaff}">Update</button></div> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th>EmpId</th> <th>Ttitle</th> <th>Name</th> <th show="{view_field==\'show_f_short_name\'}">short_name</th> <th show="{view_field==\'show_f_gender\'}">Gender</th> <th show="{view_field==\'show_f_father_name\'}">Father Name</th> <th show="{view_field==\'show_f_blood_group\'}">Blood Group</th> <th show="{view_field==\'show_f_mobile\'}">Mobile</th> <th show="{view_field==\'show_f_phone_r\'}">Phone Residence</th> <th show="{view_field==\'show_f_phone_o\'}">Phone Office </th> <th show="{view_field==\'show_f_picture\'}">Picture</th> <th show="{view_field==\'show_f_city\'}">City</th> <th show="{view_field==\'show_f_employee_id\'}">Employee Id</th> </tr> </thead> <tbody> <tr each="{st, i in staffs}"> <td>{i+1}</td> <td>{st.employee_id}</td> <td>{st.title}</td> <td>{st.first_name} {st.middle_name} {st.last_name}</td> <td show="{view_field==\'show_f_short_name\'}"> <input type="text" class="input is-small" id="{\'short_name\' + st.emp_id}" riot-value="{st.short_name}"></td> <td show="{view_field==\'show_f_gender\'}"> <select id="{\'gender\' + st.emp_id}" riot-value="{st.gender}"> <option value="M">Male</option> <option value="F">Female</option> </select> </td> <td show="{view_field==\'show_f_father_name\'}"> <input type="text" class="input is-small" id="{\'father_name\' + st.emp_id}" riot-value="{st.father_name}"></td> <td show="{view_field==\'show_f_blood_group\'}"> <select id="{\'blood_group\' + st.emp_id}" riot-value="{st.blood_group}"> <option value="A+">A+</option> <option value="A-">A-</option> <option value="AB+">AB+</option> <option value="AB-">AB-</option> <option value="B+">B+</option> <option value="B-">B-</option> <option value="O+">O+</option> <option value="O-">O-</option> </select> </td> <td show="{view_field==\'show_f_mobile\'}"> <input type="text" class="input is-small" id="{\'mobile\' + st.emp_id}" riot-value="{st.mobile}"> </td> <td show="{view_field==\'show_f_phone_r\'}"> <input type="text" class="input is-small" id="{\'phone_r\' + st.emp_id}" riot-value="{st.residence_phone}"></td> <td show="{view_field==\'show_f_phone_o\'}"> <input type="text" class="input is-small" id="{\'phone_o\' + st.emp_id}" riot-value="{st.office_phone}"></td> <td show="{view_field==\'show_f_city\'}"> <input type="text" class="input is-small" id="{\'city\' + st.emp_id}" riot-value="{st.city}"></td> <td show="{view_field==\'show_f_employee_id\'}"> <input type="text" class="input is-small" id="{\'employee_id\' + st.emp_id}" riot-value="{st.employee_id}"> </td> </tr> </tbody> </table> <div class="level-right"> <button class="button is-danger" onclick="{fastUpdateStaff}">Update</button> <button class="button" onclick="{backToStaff}">Cancel</button> </div> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
        self.title='Update'
    	self.staff_view = 'add_staff'
    	self.is_staff_picture=false
    	self.staff_picture=false
    	self.loading=false
    	self.role = getCookie('role')
    	self.readEmployeeTypes()
    	self.readDesignations()
    	self.readDepartment()
    	self.readLevel()
    	self.readReligion()
    	self.readCategory()
    	self.readSubject()
    	self.readEmploymentStatus()
    	self.staff_name = true
    	self.editProfile()
    	self.workExperienceArray =[]
         let obj = {}
             obj.work_institution=''

        self.workExperienceArray.push(obj)

        self.update()

        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
  		self.update()
    })

    self.on("unmount", function(){
      employmentStatusStore.off('employment_status_changed', EmploymentStatusChanged)
      subjectStore.off('read_subject_changed',ReadSubjectChanged)
      studentStore.off('read_cast_changed',CastChanged)
      studentStore.off('read_religion_changed',ReligionChanged)
      employeeTypeStore.off('employeeTypes_changed', EmployeeTypesChanged)
      designationStore.off('designations_changed', DesignationsChanged)
      levelStore.off('level_changed', LevelChanged)
      staffStore.off('department_changed', DepartmentChanged)
      staffStore.off('read_staff_changed',StaffChanged)
      staffStore.off('add_staff_changed',AddStaffChanged)
      staffStore.off('read_for_edit_staff_changed',ReadForEditStaffChanged)
      staffStore.off('upload_staff_image_changed',UploadStaffImage)
      staffStore.off('edit_staff_changed',EditStaffChanged)
      staffStore.off('update_staff_status_changed',UpdateStaffStatusChanged)
      staffStore.off('delete_staff_changed',DeleteStaffChanged)
      staffStore.off('allow_block_staff_changed',AllowBlockStaffChanged)
      staffStore.off('reset_staff_password_changed',ResetStaffPasswordChanged)
      staffStore.off('update_staff_fast_edit_changed',readStaffFastEditChanged)
    })

    self.add_more_work_exp=()=>{
	    let obj = {}
        obj.work_institution=''
        self.workExperienceArray.push(obj)

          let work_doj_id='#work_doj'+ (self.workExperienceArray.length-1).toString()
          let work_dol_id='#work_dol'+ (self.workExperienceArray.length-1).toString()

			  console.log(work_dol_id)
		      setTimeout(function(){

		        flatpickr(work_doj_id, {
			    	allowInput: true,
		        	dateFormat: "d/m/Y",
		  		})

		        flatpickr(work_dol_id, {
			    	allowInput: true,
		        	dateFormat: "d/m/Y",
			  	})

			}, 1000);

    }

    self.remove = (index,e) => {
      console.log(index)
       self.workExperienceArray.splice(index,1);
    }

     self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

    self.showFastEditModal = () =>{
       self.staff_view ='show_staff_fast_edit'
    }
     self.backToStaff = () =>{
       self.staff_view ='show_staff'
    }

     self.showFastEdit= () =>{
        if(self.refs.fast_edit_value.value=='gender'){
       	 self.view_field='show_f_gender'
        }
        if(self.refs.fast_edit_value.value=='short_name'){
       	 self.view_field='show_f_short_name'
        }
        if(self.refs.fast_edit_value.value=='father_name'){
       	 self.view_field='show_f_father_name'
        }
        if(self.refs.fast_edit_value.value=='blood_group'){
       	 self.view_field='show_f_blood_group'
        }
        if(self.refs.fast_edit_value.value=='city'){
       	 self.view_field='show_f_city'
        }
        if(self.refs.fast_edit_value.value=='employee_id'){
       	 self.view_field='show_f_employee_id'
        }
         if(self.refs.fast_edit_value.value=='mobile'){
       	 self.view_field='show_f_mobile'
        }
         if(self.refs.fast_edit_value.value=='phone_o'){
       	 self.view_field='show_f_phone_o'
        }
         if(self.refs.fast_edit_value.value=='phone_r'){
       	 self.view_field='show_f_phone_r'
        }
    }

    self.fastUpdateStaff=()=>{
    	var editValues = []
	    console.log(self.staffs)
	   	self.staffs.map( q => {
	   	var obj={}
	     	obj['emp_id'] = q.emp_id
		    if(self.refs.fast_edit_value.value=='gender'){
	       	  obj['value'] = $('#gender'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	        if(self.refs.fast_edit_value.value=='short_name'){
	       	 obj['value'] = $('#short_name'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	        if(self.refs.fast_edit_value.value=='father_name'){
	       	 obj['value'] = $('#father_name'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	        if(self.refs.fast_edit_value.value=='blood_group'){
	       	 obj['value'] = $('#blood_group'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	        if(self.refs.fast_edit_value.value=='city'){
	       	 obj['value'] = $('#city'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	        if(self.refs.fast_edit_value.value=='employee_id'){
	       	 obj['value'] = $('#employee_id'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	         if(self.refs.fast_edit_value.value=='mobile'){
	       	 obj['value'] = $('#mobile'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	         if(self.refs.fast_edit_value.value=='phone_o'){
	       	 obj['value'] = $('#phone_o'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	         if(self.refs.fast_edit_value.value=='phone_r'){
	       	 obj['value'] = $('#phone_r'+q.emp_id).val();
	   	      editValues.push(obj);
	        }

	   	})
	   	console.log(editValues)
	     staffStore.trigger('fast_edit_staff',editValues,self.refs.fast_edit_value.value)
    }

    self.closeFastEditModal=()=>{
    	 $("#columnSetting").removeClass("is-active");
    }

     self.showFastEditTable = () =>{
       $("#fastEditTable").addClass("is-active")

    }

    self.closeFastEditTable=()=>{
    	 $("#fastEditTable").removeClass("is-active");
    }

    self.close_staff_profile=()=>{
    	self.staff_view='show_staff'
    	self.title='Add';
    }
    self.updateEmployeeStatus=()=>{
    	self.leaving_date=convertDate(self.refs.leaving_date.value)
    	staffStore.trigger('update_staff_status',self.emp_id,self.leaving_date,self.refs.remark.value)
    }
    self.allowBlockStaff=()=>{
    	if(self.is_active=='Y'){
    		 var active='N'
    		staffStore.trigger('allow_block_staff',self.emp_id, active)
    		console.log(is_active)
    	}else{
    		var active='Y'
    		console.log(active)
    		staffStore.trigger('allow_block_staff',self.emp_id, active)
    	}
    }
     self.resetStaffPassword=()=>{

    	staffStore.trigger('reset_staff_password',self.emp_id)
    }
    self.readEmployeeTypes = () => {
       employeeTypeStore.trigger('read_employeeTypes')
    }
    self.readDesignations = () => {
       designationStore.trigger('read_designations')
    }
    self.readLevel = () => {
       levelStore.trigger('read_level')
    }

    self.readDepartment = () => {
       staffStore.trigger('read_department')
    }

    self.getStaffData = () =>{

    		self.loading=true
    		staffStore.trigger('read_staff', self.refs.r_emp_type_id.value,self.refs.r_department_id.value,self.refs.r_designation_id.value,self.refs.r_level_id.value)

    }

    self.add_new_staff = () =>{
    	if(self.title=='Add' || self.title=='Update'){
    		self.staff_view='add_staff'
    	}else{
    	  self.staff_view='staff_profile'
    	}
    	self.update()
    	document.getElementById("first_name").focus()
    }

    self.selectStaff = (item,event) => {
      item.done=!event.item.st.done
      console.log(item.done)
      if(event.item.st.done==true){
        self.emp_id=item.emp_id
        self.is_active=item.is_active
        console.log(self.emp_id)
        console.log(self.is_active)
       }
     }

    self.update_staff_status = () => {

        self.title = 'Add'
        $("#statusModal").addClass("is-active");
    }

    self.closeStatusUpdateModal = () => {
      $("#statusModal").removeClass("is-active");
       self.staffs.map(i=>{
          i.done = false;
          $('EmpId'+i.emp_id).prop('checked', false);
       })
    }

    self.close = () =>{
    	self.staff_view = 'add_staff'
    	self.clearForm();
    	self.editProfile()
    }

    self.cancelOperation = (e) => {
      self.staffs.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.staffs.map(ev => {
        if(ev.emp_id != e.item.st.emp_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      staffStore.trigger('delete_staff', e.item.st.emp_id)
    }

    self.addFamilyInformation = () =>{

      self.staff_view='add_family_information'
      self.update()
    }
    self.closeFamilyInformation = () =>{
    	self.staff_view = 'add_staff'
    	self.update()
    }
    self.addQualificationInformation = () =>{

    		self.staff_view='add_qualification_information'
    		self.update()

    }
    self.closeQualificationInformation = () =>{
    	self.staff_view = 'add_family_information'
    	self.update()
    }

    self.addProfessionalCourseInformation = () =>{

    		self.staff_view='add_professional_course_information'
    		self.update()

    }
    self.closeProfessionalCourseInformation = () =>{
    	self.staff_view = 'add_qualification_information'
    }
    self.addProfessionalMasterCourseInformation = () =>{

    		self.staff_view='add_professional_master_course_information'
    		self.update()

    }
    self.closeProfessionalMasterCourseInformation = () =>{
    	self.staff_view = 'add_professional_course_information'
    }

    self.addExtraActivityInformation = () =>{

    		self.staff_view='add_extra_activity_information'
    		self.update()

    }
    self.closeExtraActivityInformation = () =>{
    	self.staff_view = 'add_professional_master_course_information'
    }

    self.addPrevoiusJob = () =>{
    		self.staff_view='add_previous_job_information'
    		self.update()
    }
    self.closePreviousJob= () =>{
    	self.staff_view='add_extra_activity_information'
    	self.update()
    }
    self.readSubject = () => {
       subjectStore.trigger('read_subject')
    }
    self.readEmploymentStatus = () => {
       employmentStatusStore.trigger('read_employment_status')
    }

    subjectStore.on('read_subject_changed',ReadSubjectChanged)
    function ReadSubjectChanged(subjects){
      console.log(subjects)
      self.subjects = subjects
      self.update()
      console.log(self.subjects)
    }

     employmentStatusStore.on('employment_status_changed',EmploymentStatusChanged)
    function EmploymentStatusChanged(employmentStatus){
      console.log('employment_status_changed1')
      console.log(employmentStatus)
      self.loading = false
      self.employmentStatus = employmentStatus
      self.update()
    }

    self.copyAddress = (e) => {
    	let cbox = '#correspondenceCheckbox'
    	if($(cbox).prop('checked') == true){
    		console.log("true")
    		self.refs.c_add_l1.value=self.refs.add_l1.value
    		self.refs.c_add_l2.value=self.refs.add_l2.value
    		self.refs.c_city.value=self.refs.city.value
    		self.refs.c_zip.value=self.refs.zip.value
    		self.refs.c_state.value=self.refs.state.value
    		self.refs.c_country.value=self.refs.country.value
    		self.update()
    	}else{
    		console.log("false")
    		self.refs.c_add_l1.value=''
    		self.refs.c_add_l2.value=''
    		self.refs.c_city.value=''
    		self.refs.c_zip.value=''
    		self.refs.c_state.value=''
    		self.refs.c_country.value=''
    	}
    }

	self.remove_picture = (item1, item2, e) => {
		console.log('item1'+item1)
		console.log('item2'+item2)
		var pp_box = document.getElementById(item1);
		pp_box.style.backgroundImage = "";
		document.getElementById(item2).value = ""
		event.stopPropagation();
	}

	self.trigger_file_input = (item,e) => {
		document.getElementById(item).click();
	}

     self.loadFile = (item,event) => {
		var reader = new FileReader();
		reader.onload = function (e) {
			console.log(item)
			document.getElementById(item).style.backgroundImage = 'url(' + e.target.result + ')';
			console.log(e.target.result)
			self.is_staff_image=true
		};
		reader.readAsDataURL(event.target.files[0]);

		console.log(event.target.files[0])
		self.staff_picture = event.target.files[0]
	}

	self.uploadStaffImage = (staff_id) => {
		if(self.is_staff_image == true){
    		staffStore.trigger('upload_staff_image', self.staff_picture,staff_id)
		}
    }

    self.readCategory = () => {
       studentStore.trigger('read_cast')
    }

    self.readReligion = () => {
       studentStore.trigger('read_religion')
    }

    self.addInformation = () =>{
    	console.log("addInformation")
    	var obj={}

        var staff={};

    	console.log( self.workExperienceArray)
    	 self.workExperienceArray.map((x, index) => {
          let work_institution_id='#work_instituition'+index
          let work_doj_id='#work_doj'+index
          let work_dol_id='#work_dol'+index
          let work_position_id='#work_position'+index
          let work_subject_id='#work_subject'+index

           x.institution =  $(work_institution_id).val()
           x.date_of_joining = convertDate($(work_doj_id).val())
           x.date_of_leaving = convertDate($(work_dol_id).val())
           x.position = $(work_position_id).val()
           x.subjects_taught = $(work_subject_id).val()
        });

        var work_experience={}

        obj['workExperienceArray']=self.workExperienceArray

    	staff['title']=self.refs.title.value
    	staff['emp_id']=self.emp_id
    	staff['first_name']=self.refs.first_name.value
    	staff['middle_name']=self.refs.middle_name.value
    	staff['last_name']=self.refs.last_name.value
    	staff['employee_id']=self.refs.employee_id.value
    	if(self.refs.short_name.value==''){
    		staff['short_name']=null
    	}else{
    	    staff['short_name']=self.refs.short_name.value
    	}

    	if(self.refs.marital_status.value==''){
    		staff['marital_status']=null
    	}else{
    	    staff['marital_status']=self.refs.marital_status.value
    	}

    	staff['father_name']=self.refs.father_name.value
    	staff['father_occupation']=self.refs.father_occupation.value
    	staff['spouse']=self.refs.spouse.value
    	staff['spouse_occupation']=self.refs.spouse_occupation.value
    	staff['anniversary']=convertDate(self.refs.anniversary.value)
    	staff['id_mark']=self.refs.id_mark.value

    	if(self.refs.blood_group.value==''){
    		staff['blood_group']=null
    	}else{
    	    staff['blood_group']=self.refs.blood_group.value
    	}

    	if(self.refs.religion_id.value==''){
    		staff['religion_id']=null
    	}else{
    	    staff['religion_id']=self.refs.religion_id.value
    	}

    	staff['language']=self.refs.language.value

    	if(self.refs.emp_type_id.value==''){
    		staff['emp_type_id']=null
    	}else{
    	    staff['emp_type_id']=self.refs.emp_type_id.value
    	}

    	if(self.refs.department_id.value==''){
    		staff['department_id']=null
    	}else{
    	    staff['department_id']=self.refs.department_id.value
    	}

    	if(self.refs.designation_id.value==''){
    		staff['designation_id']=null
    	}else{
    	    staff['designation_id']=self.refs.designation_id.value
    	}

        if(self.refs.subject_id.value==''){
    		staff['subject_id']=null
    	}else{
    	    staff['subject_id']=self.refs.subject_id.value
    	}

    	 if(self.refs.category_id.value==''){
    		staff['category_id']=null
    	}else{
    	    staff['category_id']=self.refs.category_id.value
    	}

    	staff['language']=self.refs.language.value

    	staff['qualification']=self.refs.qualification.value
    	staff['doj']=convertDate(self.refs.doj.value)
    	staff['place_of_birth']=self.refs.place_of_birth.value

    	staff['dob']=convertDate(self.refs.dob.value)

    	staff['add_l1']=self.refs.add_l1.value
    	staff['add_l2']=self.refs.add_l2.value
    	staff['city']=self.refs.city.value
    	staff['zip']=self.refs.zip.value
    	staff['state']=self.refs.state.value
    	staff['country']=self.refs.country.value
    	if($('#correspondenceCheckbox').prop('checked') == true){
    		staff['same_as_p_add'] = 1
    	}else{
    		staff['same_as_p_add'] = 0
    	}

    	staff['c_add_l1']=self.refs.c_add_l1.value
    	staff['c_add_l2']=self.refs.c_add_l2.value
    	staff['c_city']=self.refs.c_city.value
    	staff['c_zip']=self.refs.c_zip.value
    	staff['c_state']=self.refs.c_state.value
    	staff['c_country']=self.refs.c_country.value
    	staff['residence_phone']=self.refs.residence_phone.value
    	staff['office_phone']=self.refs.office_phone.value
    	staff['mobile']=self.refs.mobile.value
    	staff['email']=self.refs.email.value
    	staff['nationality']=self.refs.nationality.value

        obj['staff']=staff;
        var staff_login={}
    	staff_login['employee_id']=self.refs.employee_id.value
    	staff_login['password']=self.refs.dob.value
    	if(self.title=='Add'){
    		obj['staff_login'] = staff_login
    	}else if(self.title=='Update'){
    		obj['staff_login']=""
    	}

        var family={};

    	family['child1_first_name']=self.refs.child1_first_name.value
    	family['child1_last_name']=self.refs.child1_last_name.value
    	if(self.refs.child1_sex.value==''){
    		family['child1_sex']=null
    	}else{
    	    family['child1_sex']=self.refs.child1_sex.value
    	}
    	family['child1_dob']=convertDate(self.refs.child1_dob.value)
    	family['child1_school']=self.refs.child1_school.value
    	family['child2_first_name']=self.refs.child2_first_name.value
    	family['child2_last_name']=self.refs.child2_last_name.value
    	if(self.refs.child2_sex.value==''){
    		family['child2_sex']=null
    	}else{
    	    family['child2_sex']=self.refs.child2_sex.value
    	}

    	family['child2_dob']=convertDate(self.refs.child2_dob.value)
    	family['child2_school']=self.refs.child2_school.value
    	family['child3_first_name']=self.refs.child3_first_name.value
    	family['child3_last_name']=self.refs.child3_last_name.value
    	if(self.refs.child3_sex.value==''){
    		family['child3_sex']=null
    	}else{
    	    family['child3_sex']=self.refs.child3_sex.value
    	}

    	family['child3_dob']=convertDate(self.refs.child3_dob.value)
    	family['child3_school']=self.refs.child3_school.value

       obj['family']=family

    	var qualification={};
    	qualification['x_subject']=self.refs.x_subject.value
    	qualification['x_institution']=self.refs.x_institution.value
    	qualification['x_board']=self.refs.x_board.value
    	if(self.refs.x_yop.value==''){
    		qualification['x_yop']=null
    	}else{
    	    qualification['x_yop']=self.refs.x_yop.value
    	}
    	qualification['x_marks']=self.refs.x_marks.value
    	qualification['x_div']=self.refs.x_div.value
    	qualification['xii_subject']=self.refs.xii_subject.value
    	qualification['xii_institution']=self.refs.xii_institution.value
    	qualification['xii_board']=self.refs.xii_board.value

    	if(self.refs.xii_yop.value==''){
    		qualification['xii_yop']=null
    	}else{
    	    qualification['xii_yop']=self.refs.xii_yop.value
    	}

    	qualification['xii_marks']=self.refs.xii_marks.value
    	qualification['xii_div']=self.refs.xii_div.value
    	qualification['ug_course']=self.refs.ug_course.value
    	qualification['ug_institution']=self.refs.ug_institution.value
    	qualification['ug_university']=self.refs.ug_university.value

    	if(self.refs.ug_yop.value==''){
    		qualification['ug_yop']=null
    	}else{
    	    qualification['ug_yop']=self.refs.ug_yop.value
    	}

    	qualification['ug_marks']=self.refs.ug_marks.value
    	qualification['ug_div']=self.refs.ug_div.value
    	qualification['pg_course']=self.refs.pg_course.value
    	qualification['pg_institution']=self.refs.pg_institution.value
    	qualification['pg_university']=self.refs.pg_university.value

    	if(self.refs.pg_yop.value==''){
    		qualification['pg_yop']=null
    	}else{
    	    qualification['pg_yop']=self.refs.pg_yop.value
    	}

    	qualification['pg_marks']=self.refs.pg_marks.value
    	qualification['pg_div']=self.refs.pg_div.value
    	qualification['bed_stream']=self.refs.bed_stream.value
    	qualification['bed_institution']=self.refs.bed_institution.value
    	qualification['bed_university']=self.refs.bed_university.value

    	if(self.refs.bed_yop.value==''){
    		qualification['bed_yop']=null
    	}else{
    	    qualification['bed_yop']=self.refs.bed_yop.value
    	}

    	qualification['bed_marks']=self.refs.bed_marks.value
    	qualification['bed_div']=self.refs.bed_div.value

    	qualification['bt_stream']=self.refs.bt_stream.value
    	qualification['bt_institution']=self.refs.bt_institution.value
    	qualification['bt_university']=self.refs.bt_university.value

    	if(self.refs.bt_yop.value==''){
    		qualification['bt_yop']=null
    	}else{
    	    qualification['bt_yop']=self.refs.bt_yop.value
    	}

    	qualification['bt_marks']=self.refs.bt_marks.value
    	qualification['bt_div']=self.refs.bt_div.value

    	qualification['bped_stream']=self.refs.bped_stream.value
    	qualification['bped_institution']=self.refs.bped_institution.value
    	qualification['bped_university']=self.refs.bped_university.value

    	if(self.refs.bped_yop.value==''){
    		qualification['bped_yop']=null
    	}else{
    	    qualification['bped_yop']=self.refs.bped_yop.value
    	}

    	qualification['bped_marks']=self.refs.bped_marks.value
    	qualification['bped_div']=self.refs.bped_div.value

    	qualification['dped_stream']=self.refs.dped_stream.value
    	qualification['dped_institution']=self.refs.dped_institution.value
    	qualification['dped_university']=self.refs.dped_university.value

    	if(self.refs.dped_yop.value==''){
    		qualification['dped_yop']=null
    	}else{
    	    qualification['dped_yop']=self.refs.dped_yop.value
    	}

    	qualification['dped_marks']=self.refs.dped_marks.value
    	qualification['dped_div']=self.refs.dped_div.value

    	qualification['mped_stream']=self.refs.mped_stream.value
    	qualification['mped_institution']=self.refs.mped_institution.value
    	qualification['mped_university']=self.refs.mped_university.value

    	if(self.refs.mped_yop.value==''){
    		qualification['mped_yop']=null
    	}else{
    	    qualification['mped_yop']=self.refs.mped_yop.value
    	}

    	qualification['mped_marks']=self.refs.mped_marks.value
    	qualification['mped_div']=self.refs.mped_div.value

    	qualification['med_stream']=self.refs.med_stream.value
    	qualification['med_institution']=self.refs.med_institution.value
    	qualification['med_university']=self.refs.med_university.value

    	if(self.refs.med_yop.value==''){
    		qualification['med_yop']=null
    	}else{
    	    qualification['med_yop']=self.refs.med_yop.value
    	}

    	qualification['med_marks']=self.refs.med_marks.value
    	qualification['med_div']=self.refs.med_div.value

    	qualification['mphil_stream']=self.refs.mphil_stream.value
    	qualification['mphil_institution']=self.refs.mphil_institution.value
    	qualification['mphil_university']=self.refs.mphil_university.value

    	if(self.refs.mphil_yop.value==''){
    		qualification['mphil_yop']=null
    	}else{
    	    qualification['mphil_yop']=self.refs.mphil_yop.value
    	}

    	qualification['mphil_marks']=self.refs.mphil_marks.value
    	qualification['mphil_div']=self.refs.mphil_div.value

    	qualification['phd_stream']=self.refs.phd_stream.value
    	qualification['phd_institution']=self.refs.phd_institution.value
    	qualification['phd_university']=self.refs.phd_university.value

    	if(self.refs.phd_yop.value==''){
    		qualification['phd_yop']=null
    	}else{
    	    qualification['phd_yop']=self.refs.phd_yop.value
    	}

    	qualification['phd_marks']=self.refs.phd_marks.value
    	qualification['phd_div']=self.refs.phd_div.value

    	qualification['other_stream']=self.refs.other_stream.value
    	qualification['other_institution']=self.refs.other_institution.value
    	qualification['other_university']=self.refs.other_university.value

    	if(self.refs.other_yop.value==''){
    		qualification['other_yop']=null
    	}else{
    	    qualification['other_yop']=self.refs.other_yop.value
    	}

    	qualification['other_marks']=self.refs.other_marks.value
    	qualification['other_div']=self.refs.other_div.value

    	qualification['details_scholarship']=self.refs.details_scholarship.value

    	qualification['details_honours']=self.refs.details_honours.value
    	qualification['details_publication']=self.refs.details_publication.value
    	qualification['details_curricular_activities']=self.refs.details_curricular_activities.value
    	qualification['details_sport']=self.refs.details_sport.value

    	obj['qualification']=qualification
    	var previous_job={}

    	previous_job['organization_of_previous_job']=self.refs.organization_of_previous_job.value
    	previous_job['add_l1_of_previous_job']=self.refs.add_l1_of_previous_job.value
    	previous_job['add_l2_of_previous_job']=self.refs.add_l2_of_previous_job.value
    	previous_job['city_of_previous_job']=self.refs.city_of_previous_job.value
    	previous_job['zip_of_previous_job']=self.refs.zip_of_previous_job.value
    	previous_job['state_of_previous_job']=self.refs.state_of_previous_job.value
    	previous_job['country_of_previous_job']=self.refs.country_of_previous_job.value
    	previous_job['designation_of_previous_job']=self.refs.designation_of_previous_job.value
    	previous_job['doj_of_previous_job']=convertDate(self.refs.doj_of_previous_job.value)
    	previous_job['salary_of_previous_job']=self.refs.salary_of_previous_job.value
    	previous_job['basic_of_previous_job']=self.refs.basic_of_previous_job.value
    	previous_job['allowances_of_previous_job']=self.refs.allowances_of_previous_job.value
    	previous_job['other_benefits_of_previous_job']=self.refs.other_benefits_of_previous_job.value
    	previous_job['bond_details_of_previous_job']=self.refs.bond_details_of_previous_job.value
		obj['previous_job']=previous_job

    	if(self.title=='Add'){
          staffStore.trigger('add_staff', obj)
        }else if(self.title=='Update'){
          staffStore.trigger('edit_staff', obj,self.emp_id,self.editType)
        }
    }

    self.editProfile = () => {
      self.editType='tempEditProfile'
        self.workExperienceArray=[{}]
      flatpickr(".date", {
	    allowInput: true,
        dateFormat: "d/m/Y",
  		})
      var emp_id=getCookie('emp_id')
      self.emp_id=getCookie('emp_id')
      staffStore.trigger('read_for_edit_staff',emp_id)
      document.getElementById('pp_box').style.backgroundImage = 'url(/images/empImages/'+emp_id+'.jpg)';
      self.title='Update'
      self.add_new_staff()

    }

    self.clearForm = () => {
    	pp_box.style.backgroundImage = "";
    	self.refs.title.value=''
    	self.refs.first_name.value=''
    	self.refs.middle_name.value=''
    	self.refs.last_name.value=''
    	self.refs.employee_id.value=''
    	self.refs.short_name.value=''
    	self.refs.marital_status.value=''
    	self.refs.father_name.value=''
    	self.refs.father_occupation.value=''
    	self.refs.spouse.value=''
    	self.refs.spouse_occupation.value=''
    	self.refs.anniversary.value=''
    	self.refs.id_mark.value=''
    	self.refs.blood_group.value=''
    	self.refs.religion_id.value=''
    	self.refs.language.value=''
    	self.refs.emp_type_id.value=''
    	self.refs.department_id.value=''

    	self.refs.subject_id.value=''
    	self.refs.designation_id.value=''
    	self.refs.qualification.value=''
    	self.refs.qualification.value=''
    	self.refs.doj.value=''
    	self.refs.place_of_birth.value=''
    	self.refs.category_id.value=''
    	self.refs.dob.value=''
    	self.refs.blood_group.value=''
    	self.refs.add_l1.value=''
    	self.refs.add_l2.value=''
    	self.refs.city.value=''
    	self.refs.zip.value=''
    	self.refs.state.value=''
    	self.refs.country.value=''

    	self.refs.c_add_l1.value=''
    	self.refs.c_add_l2.value=''
    	self.refs.c_city.value=''
    	self.refs.c_zip.value=''
    	self.refs.c_state.value=''
    	self.refs.c_country.value=''
    	self.refs.residence_phone.value=''
    	self.refs.office_phone.value=''
    	self.refs.mobile.value=''
    	self.refs.email.value=''

    	self.refs.child1_first_name.value=''
    	self.refs.child1_last_name.value=''
    	self.refs.child1_sex.value=''
    	self.refs.child1_dob.value=''
    	self.refs.child1_school.value=''
    	self.refs.child2_first_name.value=''
    	self.refs.child2_last_name.value=''
    	self.refs.child2_sex.value=''
    	self.refs.child2_dob.value=''
    	self.refs.child2_school.value=''
    	self.refs.child3_first_name.value=''
    	self.refs.child3_last_name.value=''
    	self.refs.child3_sex.value=''
    	self.refs.child3_dob.value=''
    	self.refs.child3_school.value=''

    	self.refs.x_subject.value=''
    	self.refs.x_institution.value=''
    	self.refs.x_board.value=''
    	self.refs.x_yop.value=''
    	self.refs.x_marks.value=''
    	self.refs.x_div.value=''
    	self.refs.xii_subject.value=''
    	self.refs.xii_institution.value=''
    	self.refs.xii_board.value=''
    	self.refs.xii_yop.value=''
    	self.refs.xii_marks.value=''
    	self.refs.xii_div.value=''
    	self.refs.ug_course.value=''
    	self.refs.ug_institution.value=''
    	self.refs.ug_university.value=''
    	self.refs.ug_yop.value=''
    	self.refs.ug_marks.value=''
    	self.refs.ug_div.value=''
    	self.refs.pg_course.value=''
    	self.refs.pg_institution.value=''
    	self.refs.pg_university.value=''
    	self.refs.pg_yop.value=''
    	self.refs.pg_marks.value=''
    	self.refs.pg_div.value=''
    	self.refs.bed_stream.value=''
    	self.refs.bed_institution.value=''
    	self.refs.bed_university.value=''
    	self.refs.bed_yop.value=''
    	self.refs.bed_marks.value=''
    	self.refs.bed_div.value=''

    	self.refs.bt_stream.value=''
    	self.refs.bt_institution.value=''
    	self.refs.bt_university.value=''
    	self.refs.bt_yop.value=''
    	self.refs.bt_marks.value=''
    	self.refs.bt_div.value=''

    	self.refs.bped_stream.value=''
    	self.refs.bped_institution.value=''
    	self.refs.bped_university.value=''
    	self.refs.bped_yop.value=''
    	self.refs.bped_marks.value=''
    	self.refs.bped_div.value=''

    	self.refs.dped_stream.value=''
    	self.refs.dped_institution.value=''
    	self.refs.dped_university.value=''
    	self.refs.dped_yop.value=''
    	self.refs.dped_marks.value=''
    	self.refs.dped_div.value=''

    	self.refs.mped_stream.value=''
    	self.refs.mped_institution.value=''
    	self.refs.mped_university.value=''
    	self.refs.mped_yop.value=''
    	self.refs.mped_marks.value=''
    	self.refs.mped_div.value=''

    	self.refs.med_stream.value=''
    	self.refs.med_institution.value=''
    	self.refs.med_university.value=''
    	self.refs.med_yop.value=''
    	self.refs.med_marks.value=''
    	self.refs.med_div.value=''

    	self.refs.mphil_stream.value=''
    	self.refs.mphil_institution.value=''
    	self.refs.mphil_university.value=''
    	self.refs.mphil_yop.value=''
    	self.refs.mphil_marks.value=''
    	self.refs.mphil_div.value=''

    	self.refs.phd_stream.value=''
    	self.refs.phd_institution.value=''
    	self.refs.phd_university.value=''
    	self.refs.phd_yop.value=''
    	self.refs.phd_marks.value=''
    	self.refs.phd_div.value=''

    	self.refs.other_stream.value=''
    	self.refs.other_institution.value=''
    	self.refs.other_university.value=''
    	self.refs.other_yop.value=''
    	self.refs.other_marks.value=''
    	self.refs.other_div.value=''

    	self.refs.details_scholarship.value=''

    	self.refs.details_honours.value=''
    	self.refs.details_publication.value=''
    	self.refs.details_curricular_activities.value=''
    	self.refs.details_sport.value=''
    	  self.workExperienceArray=[{}]
    }

    studentStore.on('read_cast_changed',CastChanged)
    function CastChanged(cast){
      console.log(cast)
      self.cast = cast
      self.update()
    }

    studentStore.on('read_religion_changed',ReligionChanged)
    function ReligionChanged(religion){
      console.log(religion)
      self.religion = religion
      self.update()
    }

    staffStore.on('read_staff_changed',StaffChanged)
    function StaffChanged(staffs){
      console.log(staffs)
      self.staffs = staffs
      self.loading=false
        self.staffs.map(i=>{
         if(i.emp_id==null){
              i.done = false;
               self.emp_id=i.emp_id
         }else{
          i.done = false;
          $('EmpId'+i.emp_id).prop('checked', false);
         }
       })
      self.update()
    }

    staffStore.on('add_staff_changed',AddStaffChanged)
    function AddStaffChanged(staffs,staff_id){
      console.log(staffs)
      self.staffs = staffs
      self.uploadStaffImage(staff_id)
      self.update()
    }

  staffStore.on('edit_staff_changed',EditStaffChanged)
    function EditStaffChanged(staffs){
      console.log(staffs)
      self.staffs = staffs
      console.log(self.emp_id)
      self.uploadStaffImage(self.emp_id)
      self.clearForm()
      self.update()
    }
    staffStore.on('update_staff_status_changed',UpdateStaffStatusChanged)
    function UpdateStaffStatusChanged(){
      self.refs.leaving_date.value=''
      self.refs.remark.value='';
      self.closeStatusUpdateModal()
      self.getStaffData();
      self.update()
    }

    staffStore.on('allow_block_staff_changed',AllowBlockStaffChanged)
    function AllowBlockStaffChanged(){
      self.closeStatusUpdateModal()
      self.getStaffData();
      self.update()
    }
    staffStore.on('delete_staff_changed',DeleteStaffChanged)
    function DeleteStaffChanged(){
      self.getStaffData();
      self.update()
    }
    staffStore.on('reset_staff_password_changed',ResetStaffPasswordChanged)
    function ResetStaffPasswordChanged(){

      self.update()
    }

    staffStore.on('update_staff_fast_edit_changed',readStaffFastEditChanged)
    function readStaffFastEditChanged(){

      self.update()
    }

    staffStore.on('read_for_edit_staff_changed',ReadForEditStaffChanged)
    function ReadForEditStaffChanged(staff_details,workArray){
    	console.log("edit Profile")
    		 flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
  	    self.workExperienceArray =[{}]
        self.workExperienceArray=workArray
     	self.staff_details=staff_details

     		console.log("staff Edit")
         self.refs.title.value=staff_details[0].title
    	self.refs.first_name.value=staff_details[0].first_name
    	self.refs.middle_name.value=staff_details[0].middle_name
    	self.refs.last_name.value=staff_details[0].last_name
    	self.refs.gender.value=staff_details[0].gender
    	self.refs.employee_id.value=staff_details[0].employee_id
    	self.refs.short_name.value=staff_details[0].short_name
    	self.refs.marital_status.value=staff_details[0].marital_status
    	self.refs.father_name.value=staff_details[0].father_name
    	self.refs.father_occupation.value=staff_details[0].father_occupation
    	self.refs.spouse.value=staff_details[0].spouse
    	self.refs.spouse_occupation.value=staff_details[0].spouse_occupation
    	self.refs.anniversary.value=staff_details[0].anniversary
    	self.refs.id_mark.value=staff_details[0].id_mark
    	self.refs.blood_group.value=staff_details[0].blood_group
    	self.refs.religion_id.value=staff_details[0].religion_id
    	self.refs.language.value=staff_details[0].language
    	self.refs.emp_type_id.value=staff_details[0].emp_type_id
    	self.refs.department_id.value=staff_details[0].department_id

    	self.refs.subject_id.value=staff_details[0].subject_id
    	self.refs.designation_id.value=staff_details[0].designation_id
    	self.refs.qualification.value=staff_details[0].qualification
    	self.refs.doj.value=staff_details[0].doj
    	self.refs.category_id.value=staff_details[0].category_id

    	console.log(self.refs.category_id.value)
    	self.refs.place_of_birth.value=staff_details[0].place_of_birth
    	self.refs.dob.value=staff_details[0].dob
    	self.refs.blood_group.value=staff_details[0].blood_group
    	self.refs.add_l1.value=staff_details[0].add_l1
    	self.refs.add_l2.value=staff_details[0].add_l2
    	self.refs.city.value=staff_details[0].city
    	self.refs.zip.value=staff_details[0].zip
    	self.refs.state.value=staff_details[0].state
    	self.refs.country.value=staff_details[0].country
    	if(staff_details[0].same_as_p_add == 1){
			$('#correspondenceCheckbox').prop('checked', true)
		}else{
			$('#correspondenceCheckbox').prop('checked', false)
		}
    	self.refs.c_add_l1.value=staff_details[0].c_add_l1
    	self.refs.c_add_l2.value=staff_details[0].c_add_l2
    	self.refs.c_city.value=staff_details[0].c_city
    	self.refs.c_zip.value=staff_details[0].c_zip
    	self.refs.c_state.value=staff_details[0].c_state
    	self.refs.c_country.value=staff_details[0].c_country
    	self.refs.residence_phone.value=staff_details[0].residence_phone
    	self.refs.office_phone.value=staff_details[0].office_phone
    	self.refs.mobile.value=staff_details[0].mobile
    	self.refs.email.value=staff_details[0].email

    	self.refs.child1_first_name.value=staff_details[0].child1_first_name
    	self.refs.child1_last_name.value=staff_details[0].child1_last_name
    	self.refs.child1_sex.value=staff_details[0].child1_sex
    	self.refs.child1_dob.value=staff_details[0].child1_dob
    	self.refs.child1_school.value=staff_details[0].child1_school
    	self.refs.child2_first_name.value=staff_details[0].child2_first_name
    	self.refs.child2_last_name.value=staff_details[0].child2_last_name
    	self.refs.child2_sex.value=staff_details[0].child2_sex
    	self.refs.child2_dob.value=staff_details[0].child2_dob
    	self.refs.child2_school.value=staff_details[0].child2_school
    	self.refs.child3_first_name.value=staff_details[0].child3_first_name
    	self.refs.child3_last_name.value=staff_details[0].child3_last_name
    	self.refs.child3_sex.value=staff_details[0].child3_sex
    	self.refs.child3_dob.value=staff_details[0].child3_dob
    	self.refs.child3_school.value=staff_details[0].child3_school

    	self.refs.x_subject.value=staff_details[0].x_subject
    	self.refs.x_institution.value=staff_details[0].x_institution
    	self.refs.x_board.value=staff_details[0].x_board
    	self.refs.x_yop.value=staff_details[0].x_yop
    	self.refs.x_marks.value=staff_details[0].x_marks
    	self.refs.x_div.value=staff_details[0].x_div
    	self.refs.xii_subject.value=staff_details[0].xii_subject
    	self.refs.xii_institution.value=staff_details[0].xii_institution
    	self.refs.xii_board.value=staff_details[0].xii_board
    	self.refs.xii_yop.value=staff_details[0].xii_yop
    	self.refs.xii_marks.value=staff_details[0].xii_marks
    	self.refs.xii_div.value=staff_details[0].xii_div
    	self.refs.ug_course.value=staff_details[0].ug_course
    	self.refs.ug_institution.value=staff_details[0].ug_institution
    	self.refs.ug_university.value=staff_details[0].ug_university
    	self.refs.ug_yop.value=staff_details[0].ug_yop
    	self.refs.ug_marks.value=staff_details[0].ug_marks
    	self.refs.ug_div.value=staff_details[0].ug_div
    	self.refs.pg_course.value=staff_details[0].pg_course
    	self.refs.pg_institution.value=staff_details[0].pg_institution
    	self.refs.pg_university.value=staff_details[0].pg_university
    	self.refs.pg_yop.value=staff_details[0].pg_yop
    	self.refs.pg_marks.value=staff_details[0].pg_marks
    	self.refs.pg_div.value=staff_details[0].pg_div
    	self.refs.bed_stream.value=staff_details[0].bed_stream
    	self.refs.bed_institution.value=staff_details[0].bed_institution
    	self.refs.bed_university.value=staff_details[0].bed_university
    	self.refs.bed_yop.value=staff_details[0].bed_yop
    	self.refs.bed_marks.value=staff_details[0].bed_marks
    	self.refs.bed_div.value=staff_details[0].bed_div

    	self.refs.bt_stream.value=staff_details[0].bt_stream
    	self.refs.bt_institution.value=staff_details[0].bt_institution
    	self.refs.bt_university.value=staff_details[0].bt_university
    	self.refs.bt_yop.value=staff_details[0].bt_yop
    	self.refs.bt_marks.value=staff_details[0].bt_marks
    	self.refs.bt_div.value=staff_details[0].bt_div

    	self.refs.bped_stream.value=staff_details[0].bped_stream
    	self.refs.bped_institution.value=staff_details[0].bped_institution
    	self.refs.bped_university.value=staff_details[0].bped_university
    	self.refs.bped_yop.value=staff_details[0].bped_yop
    	self.refs.bped_marks.value=staff_details[0].bped_marks
    	self.refs.bped_div.value=staff_details[0].bped_div

    	self.refs.dped_stream.value=staff_details[0].dped_stream
    	self.refs.dped_institution.value=staff_details[0].dped_institution
    	self.refs.dped_university.value=staff_details[0].dped_university
    	self.refs.dped_yop.value=staff_details[0].dped_yop
    	self.refs.dped_marks.value=staff_details[0].dped_marks
    	self.refs.dped_div.value=staff_details[0].dped_div

    	self.refs.mped_stream.value=staff_details[0].mped_stream
    	self.refs.mped_institution.value=staff_details[0].mped_institution
    	self.refs.mped_university.value=staff_details[0].mped_university
    	self.refs.mped_yop.value=staff_details[0].mped_yop
    	self.refs.mped_marks.value=staff_details[0].mped_marks
    	self.refs.mped_div.value=staff_details[0].mped_div

    	self.refs.med_stream.value=staff_details[0].med_stream
    	self.refs.med_institution.value=staff_details[0].med_institution
    	self.refs.med_university.value=staff_details[0].med_university
    	self.refs.med_yop.value=staff_details[0].med_yop
    	self.refs.med_marks.value=staff_details[0].med_marks
    	self.refs.med_div.value=staff_details[0].med_div

    	self.refs.mphil_stream.value=staff_details[0].mphil_stream
    	self.refs.mphil_institution.value=staff_details[0].mphil_institution
    	self.refs.mphil_university.value=staff_details[0].mphil_university
    	self.refs.mphil_yop.value=staff_details[0].mphil_yop
    	self.refs.mphil_marks.value=staff_details[0].mphil_marks
    	self.refs.mphil_div.value=staff_details[0].mphil_div

    	self.refs.phd_stream.value=staff_details[0].phd_stream
    	self.refs.phd_institution.value=staff_details[0].phd_institution
    	self.refs.phd_university.value=staff_details[0].phd_university
    	self.refs.phd_yop.value=staff_details[0].phd_yop
    	self.refs.phd_marks.value=staff_details[0].phd_marks
    	self.refs.phd_div.value=staff_details[0].phd_div

    	self.refs.other_stream.value=staff_details[0].other_stream
    	self.refs.other_institution.value=staff_details[0].other_institution
    	self.refs.other_university.value=staff_details[0].other_university
    	self.refs.other_yop.value=staff_details[0].other_yop
    	self.refs.other_marks.value=staff_details[0].other_marks
    	self.refs.other_div.value=staff_details[0].other_div

    	self.refs.details_scholarship.value=staff_details[0].details_scholarship

    	self.refs.details_honours.value=staff_details[0].details_honours
    	self.refs.details_publication.value=staff_details[0].details_publication
    	self.refs.details_curricular_activities.value=staff_details[0].details_curricular_activities
    	self.refs.details_sport.value=staff_details[0].details_sport

    }

    staffStore.on('upload_staff_image_changed',UploadStaffImage)
    function UploadStaffImage(image_name){
      console.log(image_name)
      self.staff_profile_picture = image_name
    }

    levelStore.on('level_changed',LevelChanged)
    function LevelChanged(levels){

      self.loading = false
      self.levels = levels
      self.update()
    }
    designationStore.on('designations_changed',DesignationsChanged)
    function DesignationsChanged(designations){

      self.loading = false
      self.designations = designations
      self.update()

    }
    employeeTypeStore.on('employeeTypes_changed',EmployeeTypesChanged)
    function EmployeeTypesChanged(employeeTypes,emp_id){

      self.loading = false
      self.employeeTypes = employeeTypes
      self.emp_id=emp_id
      console.log(self.emp_id)
      self.update()

    }
    staffStore.on('department_changed',DepartmentChanged)
    function DepartmentChanged(departments){

      self.loading = false
      self.departments = departments
      self.update()

    }

});
riot.tag2('staff-report', '<div class="field has-addons"> <p class="control"> <a class="button {is-active: selected_staff_report == \'staff-gender-report\'}" href="#/staff-report/staff-gender-report"> <span>Staff By Gender</span> </a> </p> <p class="control"> <a class="button {is-active: selected_staff_report == \'staff-type-report\'}" href="#/staff-report/staff-type-report"> <span>Staff By Type</span> </a> </p> </div> <div id="staff-report-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_staff_report')
    console.log(opts.selected_staff_report)
    if(!opts.selected_staff_report){
      self.selected_staff_report = 'staff-gender-report'
    }else{
      self.selected_staff_report = opts.selected_staff_report
    }
});



riot.tag2('staff-type-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Staff By Type <br> Grand Total <span style="color:#000">: {grand_total}</span></h2> <div class="box no-print"> <div class="columns"> <div class="column"> <input type="checkbox" id="checkTable" checked="{e.done}" onclick="{viewTable}" style="margin-top: 12px;"> Table <button class="button is-primary has-text-weight-bold is-pulled-right is-small" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right is-small" onclick="{getEmployeeTypeReport}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <center> <div id="piechart" style="width: 900px; height: 500px;" show="{report_view ==\'show_graph\'}"></div> </center> <table class="table is-fullwidth is-striped is-hoverable is-narrow" show="{report_view ==\'show_table\'}"> <thead> <tr> <th>#</th> <th>Type</th> <th>Strength</th> </tr> </thead> <tbody> <tr each="{st, i in employeeTypeReports}"> <td>{i+1}</td> <td>{st.emp_type}</td> <td>{st.total}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.report_view ='show_graph'

    	self.getEmployeeTypeReport()
    	self.role = getCookie('role')
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
      employeeTypeStore.off('employeeTypes_changed', EmployeeTypesChanged)
      staffStore.off('read_employee_type_report_change',ReadEmployeeTypeReportChanged)
    })

     self.viewTable = () => {
    	if($('#checkTable').is(":checked")){
	        self.report_view = 'show_table'
    	}else{
	        self.report_view = 'show_graph'
    	}
    }

	self.readEmployeeTypes = () => {
       self.loading = true;
       employeeTypeStore.trigger('read_employeeTypes')
    }

    self.getEmployeeTypeReport = () => {
    	self.loading=true
       staffStore.trigger('read_employee_type_report')
    }

    employeeTypeStore.on('employeeTypes_changed',EmployeeTypesChanged)
    function EmployeeTypesChanged(employeeTypes){
      console.log(employeeTypes)
      self.employeeTypes = employeeTypes
      self.update()
      console.log(self.employeeTypes)
    }
    staffStore.on('read_employee_type_report_change',ReadEmployeeTypeReportChanged)
    function ReadEmployeeTypeReportChanged(employeeTypeReports,grandTotal){

    	self.title='Create'
      	self.loading = false
      	self.employeeTypeReports = employeeTypeReports
       	self.grand_total = grandTotal

		var labels = []
		var chart_percentage = []
        var backgroundColor = []

        chart_percentage.push(['Task', 'Hours per Day'])
        for (var i = self.employeeTypeReports.length - 1; i >= 0; i--) {
		   chart_percentage.push([self.employeeTypeReports[i].emp_type,self.employeeTypeReports[i].total])
		}
		google.charts.load("current", {packages:["corechart"]});
      	google.charts.setOnLoadCallback(drawChart);
      	function drawChart() {
        	var data = google.visualization.arrayToDataTable(chart_percentage);
        	var options = {
          		is3D: true,
          		legend:{position: 'labeled',
                		textStyle: {bold: true} },
          		pieSliceText: 'value'
        	};

        	var chart = new google.visualization.PieChart(document.getElementById('piechart'));
        	chart.draw(data, options);
      	}
      	self.update()
    }

});
riot.tag2('staff', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{staff_view ==\'show_staff\'}"> <h2 class="title has-text-centered printOnly_t" style="color: #ff3860; font-size:14px">Employee Details <br> Type: <span style="color:#000">{type}</span> Designation: <span style="color:#000">{designation}</span> Level: <span style="color:#000">{level}</span> Department: <span style="color:#000">{department}</span> </h2> <div class="level no-print"> <div class="level-left"> <h2 class="title no-print" style="color: #ff3860;">Employee Details</h2> </div> <div class="level-right"> <div> <button class="button is-small is-primary is-rounded" onclick="{add_new_staff}"> <span class="icon"> <span class="fas fa-plus"></span> </span> <span>New Staff</span> </button> </div> <div> <button class="button is-small is-rounded ml10" onclick="{update_staff_status}"> Leaving Status </button> </div> <div> <button class="button is-small is-warning is-rounded ml10" onclick="{allowBlockStaff}"> Allow/Block </button> </div> <div> <button class="button is-small is-info is-rounded ml10" onclick="{showFastEditModal}"> Fast Edit </button> </div> <div> <button class="button is-small is-rounded ml10" onclick="{id_card_print_preview}"> Prind ID Card </button> </div> </div> </div> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="r_emp_type_id" id="r_emp_type_id"> <option riot-value="{-2}">Type</option> <option riot-value="{-1}">All</option> <option each="{employeeTypes}" riot-value="{emp_type_id}">{emp_type} </option> </select> </div> </div> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="r_designation_id" id="r_designation_id"> <option riot-value="{-2}">Designation</option> <option riot-value="{-1}">All</option> <option each="{designations}" riot-value="{designation_id}">{designation} </option> </select> </div> </div> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="r_level_id" id="r_level_id"> <option riot-value="{-2}">Level</option> <option riot-value="{-1}">All</option> <option each="{levels}" riot-value="{level_id}">{level} </option> </select> </div> </div> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="r_department_id" id="r_department_id"> <option riot-value="{-2}">Department</option> <option riot-value="{-1}">All</option> <option each="{departments}" riot-value="{department_id}">{department_name} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getStaffData}">GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right is-small" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right is-small" onclick="{getStaffData}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <thead> <tr> <th class="no-print"><input type="checkbox" id="checkStaff" onclick="{selectAll}"></th> <th>Emp ID</th> <th>Name</th> <th>Department</th> <th>Designation</th> <th>Mobile</th> <th>Status</th> <th>Email</th> <th>Active</th> <th class=" no-print"></th> </tr> </thead> <tbody> <tr each="{st, i in staffs}"> <td class="no-print"><input type="checkbox" checked="{st.done}" class="id_check_box" id="{\'StaffId\' + st.emp_id}" onclick="{selectStaff.bind(this,st)}"> </td> <td>{st.employee_id}</td> <td>{st.first_name} {st.middle_name} {st.last_name}</td> <td>{st.department_name}</td> <td>{st.designation}</td> <td>{st.mobile}</td> <td>{st.employment_status}</td> <td>{st.email}</td> <td>{st.is_active}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{st.confirmDelete}"> <span><a class="button is-small" onclick="{printProfile.bind(this, st.emp_id)}" title="View Profile"> <i class="fa fa-eye" aria-hidden="true"></i> </a></span> <span><a class="button is-small" onclick="{edit.bind(this, st.emp_id)}" title="Edit"> <i class="fa fa-edit" aria-hidden="true"></i> </a></span> <span> <a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"> <i class="fa fa-trash" aria-hidden="true"></i> </a></span> <span> <a class="button is-small" rel="nofollow" onclick="{resetStaffPassword}" title="Reset Password"> <i class="fa fa-undo" aria-hidden="true"></i> </a></span> </div> <div class="table-buttons" if="{st.confirmDelete}"> <span disabled="{loading}" class="button is-small is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section class="container is-fluid " show="{staff_view ==\'show_staff_print_view\'}"> <div class="level no-print"> <div class="level-left"></div> <div class="level-right" style="margin-bottom: 5px;"> <button class="button is-warning has-text-weight-bold" onclick="{close_print_view}" style="margin-right: 5px;"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-primary has-text-weight-bold" onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> </div> </div> <div each="{st, i in staff_id_card_details}" style="font-size: 0.9rem; font-family: \'Open Sans\', sans-serif;"> <center> <div class="card-staff-id schoolbg-staff"> <div style="padding:4px"><image src="../images/staffIdHeader.png" width="194"></div> <div class="schoolInformation"><p>Boys School Affiliated to CISCE, New Delhi</p> <p>243, G.T.Road (N), Liluah, Howrah-711204</p> <p>Tel.:(033)2654-3326/87</p> </div> <hr class="staff-hr-print" style="border-color:#ff0000;margin-top:-2px"> <div style=""><img style="border:solid Black 1px;height: 85px;" riot-src="../images/empImages/{st.emp_id}.jpg" height="85"></div> <div> <div padding: 4px><span class="barcode">*{st.employee_id}*</span></div> <div class="staffTitle">{st.staff_name}</div> <table class="staff" style="margin-left:15px;"> <tr> <td class="print-designation">Designation: {st.designation}</td> </tr> <tr> <td>Employee ID: {st.employee_id}</td> </tr> <tr> <td>Blood Group: {st.blood_group}</td> </tr> </table> <div class="staffPrincipal"> <p><image class="staff-id-signature" riot-src="images/signatureImages/{image_type}.jpg" height="16"></p> <p>{image_type}</p> </div> </div> </div> </center> <div class="page-break"></div> <center> <div class="card_lower"> <p class="top">INSTRUCTIONS</p> <div class="instruction"> <ol> <li>This Identity-Library-Attendance Card must be carried/ displayed while on duty and produced on demand.</li> <li>Loss of this card must be immediately reported to the police & to the School Administration in writing & a new card be obtained.</li> <li>Replacement of card will be on actual cost basis and on production of the police diary.</li> <li>This card should be returned to the School on cessation of employment. </li> <li>This card is valid upto 31-03-2020.</li> </ol> </div> <div> <h6 class="staffAdd" style="text-decoration:underline;"> Residential Address :</h6> <table class="address" style="margin-left:14px;"> <tr> <td>{st.staff_name}<td> </tr> <tr> <td>{st.c_add_l1}<td> </tr> <tr> <td>{st.c_add_l2}<td> </tr> <tr><td>{st.c_city} - {st.c_zip}</td></tr> <tr><td>{st.c_state} - {st.c_country}</td></tr> <tr><td>Phone no (Resi): {st.residence_phone}</td></tr> <tr><td>Mobile No.:{st.mobile}</td></tr> </table> </div> </div> </center> <div class="" style="margin-top:100px;"></div> <div class="page-break w-full flex-auto"></div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_staff\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} Staff</h2> </div> <div class="level-right"></div> </div> <div class="box"> <div class="columns is-multiline"> <div class="column is-one-fifth"> <div id="pp_box" class="pp-box" onclick="{trigger_file_input.bind(this,\'staff_picture\')}"> <div class="icon has-text-danger" onclick="{remove_picture.bind(this, \'pp_box\',\'staff_picture\')}"><i class="fas fa-trash"></i> </div> </div> <input accept="image/*" class="is-hidden" id="staff_picture" name="staff_picture" onchange="{loadFile.bind(this, \'pp_box\')}" type="file"> </div> <div class="column "> <div class="columns "> <div class="column is-2"> <label class="label is-small" for="title">Title</label> </div> <div class="column is-10"> <input class="input is-small" id="title" ref="title" type="text"> </div> </div> <div class="columns "> <div class="column is-2"> <label class="label is-small" for="first_name">First Name</label> </div> <div class="column is-2"> <input class="input is-small" id="first_name" ref="first_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="middle_name">Middle Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="middle_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="last_name">Last Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="last_name" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="last_name">Short Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="short_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="gender">Gender</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select id="gender" ref="gender"> <option value="M">Male</option> <option value="F">Female</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="">Identification Marks</label> </div> <div class="column is-2"> <input class="input is-small" ref="id_mark" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="blood_group">Blood Group</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select id="blood_group" ref="blood_group"> <option value="A+">A+</option> <option value="A-">A-</option> <option value="AB+">AB+</option> <option value="AB-">AB-</option> <option value="B+">B+</option> <option value="B-">B-</option> <option value="O+">O+</option> <option value="O-">O-</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="dob">Place of Birth</label> </div> <div class="column is-2"> <input class="input is-small" ref="place_of_birth" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="dob">Nationality</label> </div> <div class="column is-2"> <input class="input is-small" ref="nationality" type="text"> </div> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="religion_id">Religion</label> </div> <div class="column is-2"> <div class="control"> <div class="select is-fullwidth is-small"> <select id="religion_id" ref="religion_id"> <option each="{religion}" riot-value="{religion_id}">{religion} </option> </select> </div> </div> </div> <div class="column is-2"> <label class="label is-small" for="">Language</label> </div> <div class="column is-2"> <input class="input is-small" ref="language" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="category_id">Cast Category</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="category_id"> <option each="{cast}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="dob">DOB</label> </div> <div class="column is-2"> <input class="input date is-small" ref="dob" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="residence_phone">Phone(R)</label> </div> <div class="column is-2"> <input class="input is-small" ref="residence_phone" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="Office_phone">Phone(O)</label> </div> <div class="column is-2"> <input class="input is-small" ref="office_phone" type="number"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="Employee ID">Employee ID</label> </div> <div class="column is-2"> <input class="input is-small" ref="employee_id" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="Moble">Mobile</label> </div> <div class="column is-2"> <input class="input is-small" ref="mobile" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="Office_phone">Email</label> </div> <div class="column is-2"> <input class="input is-small" ref="email" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">Contact Information(Permanent Address)</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="add_l1">Address Line 1</label> </div> <div class="column is-2"> <input class="input is-small" ref="add_l1" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="add_l2">Address Line 2</label> </div> <div class="column is-2"> <input class="input is-small" ref="add_l2" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="city">City</label> </div> <div class="column is-2"> <input class="input is-small" ref="city" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="zip">Zip</label> </div> <div class="column is-2"> <input class="input is-small" ref="zip" maxlength="6" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="state">State</label> </div> <div class="column is-2"> <input class="input is-small" ref="state" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="country">Country</label> </div> <div class="column is-2"> <input class="input is-small" ref="country" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3"> Check if Correspondence Address is same as Permanent Address <input type="checkbox" id="correspondenceCheckbox" name="correspondenceCheckbox" onclick="{copyAddress.bind(this)}"> </h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="c_add_l1">Address Line 1</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_add_l1" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="c_add_l2">Address Line 2</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_add_l2" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="c_city">City</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_city" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="c_zip">Zip</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_zip" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="c_state">State</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_state" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="c_country">Country</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_country" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-small is-info has-text-weight-bold adjusted-top" onclick="{addFamilyInformation}"> Next >> </button> <button class="button is-small is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_family_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} Family</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns"> <div class="column is-2"> <label class="label is-small" for="marital_status">Marital Status</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select id="marital_status" ref="marital_status"> <option value="S">Single</option> <option value="M">Married</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="f_occupation">Father Name</label> </div> <div class="column is-2 "> <input class="input is-small" id="father_name" ref="father_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Father Occupation</label> </div> <div class="column is-2"> <input class="input is-small" id="father_occupation" ref="father_occupation" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Spouse\'s Name</label> </div> <div class="column is-2"> <input class="input is-small" id="" ref="spouse" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Spouse\'s Occupation</label> </div> <div class="column is-2 "> <input class="input is-small" id="" ref="spouse_occupation" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f_organisation_name">Anniversary</label> </div> <div class="column is-2"> <input class="input date is-small" ref="anniversary" type="date"> </div> </div> <div class="columns"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">Child1</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="child1_first_name">First Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="child1_first_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Last Name</label> </div> <div class="column is-2 "> <input class="input is-small" ref="child1_last_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="gender">Gender</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select id="sex" ref="child1_sex"> <option value="M">Male</option> <option value="F">Female</option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Dob</label> </div> <div class="column is-2"> <input class="input date is-small" ref="child1_dob" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">School</label> </div> <div class="column is-2 "> <input class="input is-small" ref="child1_school" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">Child2</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="child2_first_name">First Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="child2_first_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Last Name</label> </div> <div class="column is-2 "> <input class="input is-small" ref="child2_last_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="gender">Gender</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select id="sex" ref="child2_sex"> <option value="M">Male</option> <option value="F">Female</option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Dob</label> </div> <div class="column is-2"> <input class="input date is-small" ref="child2_dob" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">School</label> </div> <div class="column is-2 "> <input class="input is-small" ref="child2_school" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">Child3</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="child3_first_name">First Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="child3_first_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Last Name</label> </div> <div class="column is-2 "> <input class="input is-small" ref="child3_last_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="gender">Gender</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select id="sex" ref="child3_sex"> <option value="M">Male</option> <option value="F">Female</option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Dob</label> </div> <div class="column is-2"> <input class="input date is-small" ref="child3_dob" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">School</label> </div> <div class="column is-2 "> <input class="input is-small" ref="child3_school" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-small is-primary has-text-weight-bold adjusted-top" onclick="{closeFamilyInformation}"> Previous </button> <button class="button is-small is-info has-text-weight-bold adjusted-top" onclick="{addQualificationInformation}"> Next >> </button> <button class="button is-small is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_qualification_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} Qualification</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns mt20"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">Academic Qualification</h3> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-8 has-text-link staff-h3">X information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="x_subject">X Subject </label> </div> <div class="column is-2"> <input class="input is-small" ref="x_subject" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">X Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="x_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">X Board</label> </div> <div class="column is-2"> <input class="input is-small" ref="x_board" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">X YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="x_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">X Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="x_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">X Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="x_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-8 has-text-link staff-h3">XII information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns"> <div class="column is-2"> <label class="label is-small" for="xii_subject">XII Subject </label> </div> <div class="column is-2"> <input class="input is-small" ref="xii_subject" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">XII Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="xii_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">XII Board</label> </div> <div class="column is-2"> <input class="input is-small" ref="xii_board" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">XII YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="xii_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">XII Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="xii_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">XII Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="xii_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">Professional Qualification</h3> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-8 has-text-link staff-h3">UG information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="ug_course">UG Course </label> </div> <div class="column is-2"> <input class="input is-small" ref="ug_course" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">UG Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="ug_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">UG University</label> </div> <div class="column is-2"> <input class="input is-small" ref="ug_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">UG YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="ug_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">UG Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="ug_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">UG Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="ug_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-8 has-text-link staff-h3">PG information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="pg_course">PG Course </label> </div> <div class="column is-2"> <input class="input is-small" ref="pg_course" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">PG Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="pg_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">PG University</label> </div> <div class="column is-2"> <input class="input is-small" ref="pg_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">PG YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="pg_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">PG Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="pg_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">PG Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="pg_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-small is-primary has-text-weight-bold adjusted-top" onclick="{closeQualificationInformation}"> Previous </button> <button class="button is-small is-info has-text-weight-bold adjusted-top" onclick="{addProfessionalCourseInformation}"> Next >> </button> <button class="button is-small is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_professional_course_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} New Employee</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">B.Ed. information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="bed_stream">B.Ed. stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="bed_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.Ed. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bed_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.Ed. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="bed_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">B.Ed. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="bed_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.Ed. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bed_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.Ed. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="bed_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">B.T. information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="bt_stream">B.T. Stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="bt_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.T. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bt_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.T. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="bt_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">B.T. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="bt_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.T. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bt_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.T. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="bt_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">B.P.Ed. information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="bped_stream">B.P.Ed. stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="bped_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.P.Ed. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bped_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.P.Ed. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="bped_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">B.P.Ed. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="bped_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.P.Ed. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bped_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">B.P.Ed. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="bped_div" type="text"> </div> </div> <div class="columns"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">D.P.Ed. information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="dped_stream">D.P.Ed. stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="dped_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">D.P.Ed. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="dped_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">D.P.Ed. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="dped_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">D.P.Ed. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="dped_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">D.P.Ed. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="dped_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">D.P.Ed. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="dped_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-small is-primary has-text-weight-bold adjusted-top" onclick="{closeProfessionalCourseInformation}"> Previous </button> <button class="button is-small is-info has-text-weight-bold adjusted-top" onclick="{addProfessionalMasterCourseInformation}"> Next >> </button> <button class="button is-small is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_professional_master_course_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} New Employee</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">M.P.Ed. information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="mped_stream">M.P.Ed. stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="mped_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.P.Ed. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="mped_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.P.Ed. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="mped_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">M.P.Ed. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="mped_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.P.Ed. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="mped_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.P.Ed. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="mped_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">M.Ed. information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="med_stream">M.Ed. Stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="med_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Ed. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="med_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Ed. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="med_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">M.Ed. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="med_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Ed. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="med_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Ed. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="med_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">M.Phil information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="mphil_stream">M.Phil stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="mphil_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Phil Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="mphil_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Phil University</label> </div> <div class="column is-2"> <input class="input is-small" ref="mphil_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">M.Phil YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="mphil_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Phil Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="mphil_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">M.Phil Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="mphil_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">Phd. information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns"> <div class="column is-2"> <label class="label is-small" for="phd_stream">Phd. Stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="phd_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Phd. Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="phd_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Phd. University</label> </div> <div class="column is-2"> <input class="input is-small" ref="phd_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Phd. YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="phd_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Phd. Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="phd_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Phd. Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="phd_div" type="text"> </div> </div> <div class="columns"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">Other information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="other_stream">Other Stream </label> </div> <div class="column is-2"> <input class="input is-small" ref="other_stream" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Other Instituition</label> </div> <div class="column is-2 "> <input class="input is-small" ref="other_institution" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Other University</label> </div> <div class="column is-2"> <input class="input is-small" ref="other_university" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Other YOP</label> </div> <div class="column is-2"> <input class="input is-small" ref="other_yop" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Other Marks</label> </div> <div class="column is-2 "> <input class="input is-small" ref="other_marks" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Other Division</label> </div> <div class="column is-2"> <input class="input is-small" ref="other_div" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-small is-primary has-text-weight-bold adjusted-top" onclick="{closeProfessionalMasterCourseInformation}"> Previous </button> <button class="button is-small is-info has-text-weight-bold adjusted-top" onclick="{addExtraActivityInformation}"> Next >> </button> <button class="button is-small is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_extra_activity_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} New Employee</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">Other information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="details_scholarship">Scholarship Detail </label> </div> <div class="column is-2"> <input class="input is-small" ref="details_scholarship" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Awards/Honours Detail</label> </div> <div class="column is-2 "> <input class="input is-small" ref="details_honours" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Publication Detail</label> </div> <div class="column is-2"> <input class="input is-small" ref="details_publication" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Curricular Activities Detail</label> </div> <div class="column is-2"> <input class="input is-small" ref="details_curricular_activities" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Sports Detail</label> </div> <div class="column is-2 "> <input class="input is-small" ref="details_sport" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">Work Experience</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div each="{st, i in workExperienceArray}" style="margin-bottom:20px;margin-top:20px"> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="work_instituition">Instituition </label> </div> <div class="column is-2"> <input class="input is-small" ref="work_instituition" id="work_instituition{i}" riot-value="{st.institution}" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">DOJ</label> </div> <div class="column is-2 "> <input class="input date is-small" id="work_doj{i}" type="text" riot-value="{st.date_of_joining}"> </div> <div class="column is-2"> <label class="label is-small" for="">DOL</label> </div> <div class="column is-2"> <input class="input date is-small" id="work_dol{i}" type="text" riot-value="{st.date_of_leaving}"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Position</label> </div> <div class="column is-2"> <input class="input is-small" ref="work_position" id="work_position{i}" type="text" riot-value="{st.position}"> </div> <div class="column is-2"> <label class="label is-small" for="">Subjects</label> </div> <div class="column is-2 "> <input class="input is-small" ref="work_subject" id="work_subject{i}" type="text" riot-value="{st.subjects_taught}"> </div> <div class="column is-2"> <button class="button is-small is-primary is-rounded ml5 " onclick="{add_more_work_exp}"> <span class="icon"><span class="fas fa-plus"></span></span> </button> <button class="button is-info is-rounded ml5 is-small" onclick="{remove.bind(this, i)}"> <span class="icon"><span class="fas fa-minus"></span></span> </button> </div> </div> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-small is-primary has-text-weight-bold adjusted-top" onclick="{closeExtraActivityInformation}"> Previous </button> <button class="button is-small is-danger has-text-weight-bold adjusted-top" onclick="{addPrevoiusJob}"> Next </button> <button class="button is-small is-info has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{staff_view ==\'add_previous_job_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">{title} New Employee</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">Particulars of Previous Job</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Organization Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="organization_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Address Line 1</label> </div> <div class="column is-2 "> <input class="input is-small" ref="add_l1_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Address Line 2</label> </div> <div class="column is-2"> <input class="input is-small" ref="add_l2_of_previous_job" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">City</label> </div> <div class="column is-2"> <input class="input is-small" ref="city_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Zip</label> </div> <div class="column is-2 "> <input class="input is-small" ref="zip_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">State</label> </div> <div class="column is-2"> <input class="input is-small" ref="state_of_previous_job" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Country</label> </div> <div class="column is-2"> <input class="input is-small" ref="country_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Designation</label> </div> <div class="column is-2 "> <input class="input is-small" ref="designation_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Date of Joining</label> </div> <div class="column is-2"> <input class="input date is-small" ref="doj_of_previous_job" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Salary</label> </div> <div class="column is-2"> <input class="input is-small" ref="salary_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Basic</label> </div> <div class="column is-2 "> <input class="input is-small" ref="basic_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Allowances</label> </div> <div class="column is-2"> <input class="input is-small" ref="allowances_of_previous_job" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Other Benefits</label> </div> <div class="column is-2"> <input class="input is-small" ref="other_benefits_of_previous_job" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="">Bond Details</label> </div> <div class="column is-2 "> <input class="input is-small" ref="bond_details_of_previous_job" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link staff-h3">Work Profile</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="staff-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Qualification</label> </div> <div class="column is-2"> <input class="input is-small" ref="qualification" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="doj">Date of Joining</label> </div> <div class="column is-2 "> <input class="input date is-small" ref="doj" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="subject_id">Specialization</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="subject_id"> <option each="{subjects}" riot-value="{subject_id}">{subject_name} </option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="">Employee Type</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="emp_type_id"> <option each="{employeeTypes}" riot-value="{emp_type_id}">{emp_type} </option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="">Designation</label> </div> <div class="column is-2 "> <div class="select is-fullwidth is-small"> <select ref="designation_id"> <option each="{designations}" riot-value="{designation_id}">{designation} </option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="">Department</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="department_id"> <option each="{departments}" riot-value="{department_id}">{department_name} </option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="level_id">Level</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="level_id"> <option each="{levels}" riot-value="{level_id}">{level} </option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="">Employment Status</label> </div> <div class="column is-2 "> <div class="select is-fullwidth is-small"> <select ref="employment_status_id"> <option each="{employmentStatus}" riot-value="{employment_status_id}">{employment_status} </option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-small is-primary has-text-weight-bold adjusted-top" onclick="{closePreviousJob}"> << Previous </button> <button class="button is-small is-info has-text-weight-bold adjusted-top" onclick="{addInformation}"> Submit </button> <button class="button is-small is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <div id="statusModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Update Status</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role">Leaving Date</label> <div class="control"> <input class="input date" type="text" ref="leaving_date"> </div> </div> </div> <div class="column"> <div class="field"> <label class="label" for="role">Remarks</label> <div class="control"> <textarea class="input" type="text" ref="remark" rows="3"></textarea> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-small is-danger" onclick="{updateEmployeeStatus}">{title}</button> <button class="button is-small" id="item-modal-close" onclick="{closeStatusUpdateModal}">Cancel</button> </footer> </div> </div> <section class=" is-fluid" show="{staff_view ==\'staff_profile\'}"> <div class="level"> <div class="level-left"> <h2 class="title">Profile of {first_name} {middle_name} {last_name}</h2> </div> <div class="level-right"> <a class="button is-small no-print" onclick="{close_staff_profile}">Back</a> </div> </div> <table class="table is-fullwidth is-bordered"> <tr> <td rowspan="4" colspan="2"> <img id="pp_box1" width="90" height="90"> </td> <td colspan="2" style="background-color:#efefef"><b>Login ID</b></td> <td colspan="3">{employee_id}</td> </tr> <tr> <th>Name</th> <td>{first_name} {middle_name} {last_name}</td> <th>Short Name</th> <td colspan="2">{st.short_name}</td> </tr> <tr> <th>Gender</th> <td>{gender} </td> <th>Blood Group</th> <td colspan="2">{blood_group}</td> </tr> <tr> <th>Category</th> <td colspan="2">{category_name}</td> <th>Date of Birth</th> <td>{dob}</td> </tr> <tr> <th>Marital Status</th> <td>{marital_status}</td> <th>Date of Marriage</th> <td>{dom}</td> <th colspan="2">Husband/Wife Name</th> <td>{spouse}</td> </tr> <tr> <th colspan="2">Permanent Address</th> <td colspan="5">{add_l1} , {add_l2}, {city} , {state}-{zip}, {country}</td> </tr> <tr> <th colspan="2">Correspondence Address</th> <td colspan="5">{c_add_l1} , {c_add_l2}, {c_city} , {c_state}-{c_zip}, {c_country}</td> </tr> <tr> <th colspan="2">Phone(R)</th> <td>{residence_phone}</td> <th colspan="2">Mobile</th> <td>{mobile}</td> </tr> <tr> <th colspan="2">Email</th> <td colspan="5">{email}</td> </tr> </table> <table class="table is-fullwidth is-bordered"> <tr> <th colspan="7">Work Profile</th> </tr> <tr> <th colspan="2">Phone(O)</th> <td>{office_phone}</td> <th colspan="2">Mobile</th> <td>{mobile}</td> </tr> <tr> <th>Qulaification</th> <td colspan="2">{qualification}</td> <th colspan="2">Date of Joining</th> <td>{doj}</td> </tr> <tr> <th colspan="2">Specialization</th> <td>{subject_name}</td> <th colspan="2">Employee Type</th> <td>{emp_type}</td> </tr> <tr> <th colspan="2">Designation</th> <td>{designation}</td> <th colspan="2">Department</th> <td>{department_name}</td> </tr> <tr> <th colspan="2">Level</th> <td>{level}</td> <th colspan="2">Employment Status</th> <td>{employment_status}</td> </tr> </table> <table class="table is-fullwidth is-bordered"> <tr> <th colspan="7"><b>Academic Qualification</b></th> </tr> <tr><th colspan="7">X Infrmation</th></tr> <tr> <th>Subject</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{x_subject}</td> <td>{x_institution}</td> <td>{x_board}</td> <td>{x_yop}</td> <td>{x_marks}</td> <td>{x_div}</td> </tr> <tr><th colspan="7">XII Infrmation</th></tr> <tr> <th>Subject</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{xii_subject}</td> <td>{xii_institution}</td> <td>{xii_board}</td> <td>{xii_yop}</td> <td>{xii_marks}</td> <td>{xii_div}</td> </tr> <tr><th colspan="7">UG Infrmation</th></tr> <tr> <th>Course</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{ug_course}</td> <td>{ug_institution}</td> <td>{ug_board}</td> <td>{ug_yop}</td> <td>{ug_marks}</td> <td>{ug_div}</td> </tr> <tr><th colspan="7">PG Infrmation</th></tr> <tr> <th>Course</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{pg_course}</td> <td>{pg_institution}</td> <td>{pg_board}</td> <td>{pg_yop}</td> <td>{pg_marks}</td> <td>{pg_div}</td> </tr> <tr><th colspan="7">B.Ed Infrmation</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{bed_stream}</td> <td>{bed_institution}</td> <td>{bed_board}</td> <td>{bed_yop}</td> <td>{bed_marks}</td> <td>{bed_div}</td> </tr> <tr><th colspan="7">B.T Infrmation</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{bt_stream}</td> <td>{bt_institution}</td> <td>{bt_board}</td> <td>{bt_yop}</td> <td>{bt_marks}</td> <td>{bt_div}</td> </tr> <tr><th colspan="7">B. P. Ed. Information</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{bped_stream}</td> <td>{bped_institution}</td> <td>{bped_board}</td> <td>{bped_yop}</td> <td>{bped_marks}</td> <td>{bped_div}</td> </tr> <tr><th colspan="7">D.P.Ed. Information</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{dped_stream}</td> <td>{dped_institution}</td> <td>{dped_board}</td> <td>{dped_yop}</td> <td>{dped_marks}</td> <td>{dped_div}</td> </tr> <tr><th colspan="7">M.P.Ed. Information</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{mped_stream}</td> <td>{mped_institution}</td> <td>{mped_board}</td> <td>{mped_yop}</td> <td>{mped_marks}</td> <td>{mped_div}</td> </tr> <tr><th colspan="7">M.Ed. Information</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{med_stream}</td> <td>{med_institution}</td> <td>{med_board}</td> <td>{med_yop}</td> <td>{med_marks}</td> <td>{med_div}</td> </tr> <tr><th colspan="7">M.Phil. Information</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{mphil_stream}</td> <td>{mphil_institution}</td> <td>{mphil_board}</td> <td>{mphil_yop}</td> <td>{mphil_marks}</td> <td>{mphil_div}</td> </tr> <tr><th colspan="7">Phd. Information</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{phd_stream}</td> <td>{phd_institution}</td> <td>{phd_board}</td> <td>{phd_yop}</td> <td>{phd_marks}</td> <td>{phd_div}</td> </tr> <tr><th colspan="7">Other Qualification</th></tr> <tr> <th>Stream</th> <th>Institution</th> <th>Board</th> <th>YOP</th> <th>Marks</th> <th>Division</th> </tr> <tr> <td>{other_stream}</td> <td>{other_institution}</td> <td>{other_board}</td> <td>{other_yop}</td> <td>{other_marks}</td> <td>{other_div}</td> </tr> </table> <table class="table is-fullwidth is-bordered"> <tr> <th colspan="7">Extra Activities</th> </tr> <tr> <th colspan="2">Scholarship Details</th> <td colspan="2">{details_scholarship}</td> <th colspan="2">Awards/honours Details</th> <td>{details_honours}</td> </tr> <tr> <th colspan="2">Publication Details</th> <td>{details_publication}</td> <th colspan="3">Curricular Activities Details</th> <td>{details_curricular_activities}</td> </tr> <tr> <th colspan="3">Sports Detail</th> <td colspan="4">{details_sport}</td> </tr> </table> <table class="table is-fullwidth is-bordered"> <tr> <th colspan="7">Working Experience</th> </tr> <tr> <th>Institution</th> <th>DOJ</th> <th>DOL</th> <th>Position</th> <th>Subject Taught</th> </tr> <tr> <td>{work_institution}</td> <td>{doj}</td> <td>{dol}</td> <td>{position}</td> <td>{subject_taught}</td> </tr> </table> </section> <section class=" is-fluid" show="{staff_view ==\'show_staff_fast_edit\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Fast Edit</h2> </div> <div class="level-right"> <div> <button class="button is-small is-warning is-rounded" onclick="{backToStaff}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="fast_edit_value" onchange="{showFastEdit}"> <option>Select Field</option> <option value="short_name">Short Name</option> <option value="gender">Gender</option> <option value="father_name">Father Name</option> <option value="blood_group">Blood Group</option> <option value="mobile">Mobile</option> <option value="phone_r">Phone Residence </option> <option value="phone_o">Phone Office</option> <option value="city">City</option> <option value="employee_id">Employee ID</option> </select> </div> </div> </div> </div> </div> <div class="level-right"><button class="button is-small is-danger" onclick="{fastUpdateStaff}">Update</button></div> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th>EmpId</th> <th>Ttitle</th> <th>Name</th> <th show="{view_field==\'show_f_short_name\'}">short_name</th> <th show="{view_field==\'show_f_gender\'}">Gender</th> <th show="{view_field==\'show_f_father_name\'}">Father Name</th> <th show="{view_field==\'show_f_blood_group\'}">Blood Group</th> <th show="{view_field==\'show_f_mobile\'}">Mobile</th> <th show="{view_field==\'show_f_phone_r\'}">Phone Residence</th> <th show="{view_field==\'show_f_phone_o\'}">Phone Office </th> <th show="{view_field==\'show_f_picture\'}">Picture</th> <th show="{view_field==\'show_f_city\'}">City</th> <th show="{view_field==\'show_f_employee_id\'}">Employee Id</th> </tr> </thead> <tbody> <tr each="{st, i in staffs}"> <td>{i+1}</td> <td>{st.employee_id}</td> <td>{st.title}</td> <td>{st.first_name} {st.middle_name} {st.last_name}</td> <td show="{view_field==\'show_f_short_name\'}"> <input type="text" class="input is-small" id="{\'short_name\' + st.emp_id}" riot-value="{st.short_name}"></td> <td show="{view_field==\'show_f_gender\'}"> <select id="{\'gender\' + st.emp_id}" riot-value="{st.gender}"> <option value="M">Male</option> <option value="F">Female</option> </select> </td> <td show="{view_field==\'show_f_father_name\'}"> <input type="text" class="input is-small" id="{\'father_name\' + st.emp_id}" riot-value="{st.father_name}"></td> <td show="{view_field==\'show_f_blood_group\'}"> <select id="{\'blood_group\' + st.emp_id}" riot-value="{st.blood_group}"> <option value="A+">A+</option> <option value="A-">A-</option> <option value="AB+">AB+</option> <option value="AB-">AB-</option> <option value="B+">B+</option> <option value="B-">B-</option> <option value="O+">O+</option> <option value="O-">O-</option> </select> </td> <td show="{view_field==\'show_f_mobile\'}"> <input type="text" class="input is-small" id="{\'mobile\' + st.emp_id}" riot-value="{st.mobile}"> </td> <td show="{view_field==\'show_f_phone_r\'}"> <input type="text" class="input is-small" id="{\'phone_r\' + st.emp_id}" riot-value="{st.residence_phone}"></td> <td show="{view_field==\'show_f_phone_o\'}"> <input type="text" class="input is-small" id="{\'phone_o\' + st.emp_id}" riot-value="{st.office_phone}"></td> <td show="{view_field==\'show_f_city\'}"> <input type="text" class="input is-small" id="{\'city\' + st.emp_id}" riot-value="{st.city}"></td> <td show="{view_field==\'show_f_employee_id\'}"> <input type="text" class="input is-small" id="{\'employee_id\' + st.emp_id}" riot-value="{st.employee_id}"> </td> </tr> </tbody> </table> <div class="level-right"> <button class="button is-small is-danger" onclick="{fastUpdateStaff}">Update</button> <button class="button is-small" onclick="{backToStaff}">Cancel</button> </div> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
        self.title='Add'
        self.st={}
    	self.staff_view = 'show_staff'
    	self.is_staff_picture=false
    	self.staff_picture=false
    	self.loading=false
    	self.role = getCookie('role')
    	self.readEmployeeTypes()
    	self.readDesignations()
    	self.readDepartment()
    	self.readLevel()
    	self.readReligion()
    	self.readReligion()
    	self.readCategory()
    	self.readSubject()
    	self.readEmploymentStatus()
    	self.staff_name = true

  	    self.workExperienceArray =[]
         let obj = {}
             obj.work_institution=''

        self.workExperienceArray.push(obj)

        self.update()

        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})

    })

    self.on("unmount", function(){
      employmentStatusStore.off('employment_status_changed', EmploymentStatusChanged)
      subjectStore.off('read_subject_changed',ReadSubjectChanged)
      studentStore.off('read_cast_changed',CastChanged)
      studentStore.off('read_religion_changed',ReligionChanged)
      employeeTypeStore.off('employeeTypes_changed', EmployeeTypesChanged)
      designationStore.off('designations_changed', DesignationsChanged)
      levelStore.off('level_changed', LevelChanged)
      staffStore.off('department_changed', DepartmentChanged)
      staffStore.off('read_staff_changed',StaffChanged)
      staffStore.off('add_staff_changed',AddStaffChanged)
      staffStore.off('read_for_edit_staff_changed',ReadForEditStaffChanged)
      staffStore.off('upload_staff_image_changed',UploadStaffImage)
      staffStore.off('edit_staff_changed',EditStaffChanged)
      staffStore.off('update_staff_status_changed',UpdateStaffStatusChanged)
      staffStore.off('delete_staff_changed',DeleteStaffChanged)
      staffStore.off('allow_block_staff_changed',AllowBlockStaffChanged)
      staffStore.off('reset_staff_password_changed',ResetStaffPasswordChanged)
      staffStore.off('update_staff_fast_edit_changed',updateStaffFastEditChanged)
      staffStore.off('read_staff_id_card_changed',ReadIdCardChanged)
    })
    self.add_more_work_exp=()=>{
	    let obj = {}
        obj.work_institution=''
        self.workExperienceArray.push(obj)

          let work_doj_id='#work_doj'+ (self.workExperienceArray.length-1).toString()
          let work_dol_id='#work_dol'+ (self.workExperienceArray.length-1).toString()

			   console.log(work_dol_id)
		  	   setTimeout(function(){

		        flatpickr(work_doj_id, {
			    	allowInput: true,
		        	dateFormat: "d/m/Y",
		  		})

		        flatpickr(work_dol_id, {
			    	allowInput: true,
		        	dateFormat: "d/m/Y",
			  	})

			}, 1000);

    }

    self.remove = (index,e) => {
      console.log(index)
       self.workExperienceArray.splice(index,1);
    }

     self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

    self.showFastEditModal = () =>{

        if(self.staffs.length ==0){
          toastr.info('Please Load Staff Data First')
          return
        }

            self.staff_view ='show_staff_fast_edit'

    }

    self.backToStaff = () =>{
       self.staff_view ='show_staff'
    }

     self.showFastEdit= () =>{
        if(self.refs.fast_edit_value.value=='gender'){
       	 self.view_field='show_f_gender'
        }
        if(self.refs.fast_edit_value.value=='short_name'){
       	 self.view_field='show_f_short_name'
        }
        if(self.refs.fast_edit_value.value=='father_name'){
       	 self.view_field='show_f_father_name'
        }
        if(self.refs.fast_edit_value.value=='blood_group'){
       	 self.view_field='show_f_blood_group'
        }
        if(self.refs.fast_edit_value.value=='city'){
       	 self.view_field='show_f_city'
        }
        if(self.refs.fast_edit_value.value=='employee_id'){
       	 self.view_field='show_f_employee_id'
        }
         if(self.refs.fast_edit_value.value=='mobile'){
       	 self.view_field='show_f_mobile'
        }
         if(self.refs.fast_edit_value.value=='phone_o'){
       	 self.view_field='show_f_phone_o'
        }
         if(self.refs.fast_edit_value.value=='phone_r'){
       	 self.view_field='show_f_phone_r'
        }
    }

    self.fastUpdateStaff=()=>{
    	var editValues = []
	    console.log(self.staffs)
	   	self.staffs.map( q => {
	   	var obj={}
	     	obj['emp_id'] = q.emp_id
		    if(self.refs.fast_edit_value.value=='gender'){
	       	  obj['value'] = $('#gender'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	        if(self.refs.fast_edit_value.value=='short_name'){
	       	 obj['value'] = $('#short_name'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	        if(self.refs.fast_edit_value.value=='father_name'){
	       	 obj['value'] = $('#father_name'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	        if(self.refs.fast_edit_value.value=='blood_group'){
	       	 obj['value'] = $('#blood_group'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	        if(self.refs.fast_edit_value.value=='city'){
	       	 obj['value'] = $('#city'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	        if(self.refs.fast_edit_value.value=='employee_id'){
	       	 obj['value'] = $('#employee_id'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	         if(self.refs.fast_edit_value.value=='mobile'){
	         	console.log("inside mobile")
	         	console.log($('#mobile'+q.emp_id).val())
	       	  obj['value'] = $('#mobile'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	         if(self.refs.fast_edit_value.value=='phone_o'){
	       	 obj['value'] = $('#phone_o'+q.emp_id).val();
	   	      editValues.push(obj);
	        }
	         if(self.refs.fast_edit_value.value=='phone_r'){
	       	  obj['value'] = $('#phone_r'+q.emp_id).val();
	   	      editValues.push(obj);
	        }

	   	 })
	   	console.log("inside fast edit")
	   	console.log(editValues)
	   	self.loading=true
	     staffStore.trigger('fast_edit_staff',editValues,self.refs.fast_edit_value.value)
    }

    self.closeFastEditModal=()=>{
    	 $("#columnSetting").removeClass("is-active");
    }

     self.showFastEditTable = () =>{
       $("#fastEditTable").addClass("is-active")

    }

    self.closeFastEditTable=()=>{
    	 $("#fastEditTable").removeClass("is-active");
    	  self.loading=false
    }

    self.close_staff_profile=()=>{
    	self.staff_view='show_staff'
    	self.title='Add';
    }
    self.updateEmployeeStatus=()=>{
    	self.leaving_date=convertDate(self.refs.leaving_date.value)
    	staffStore.trigger('update_staff_status',self.emp_id,self.leaving_date,self.refs.remark.value)
    }

    self.allowBlockStaff=()=>{
      let emp_id='';
      var is_active = 'N'
      var st = []
       self.staffs.map( q => {
          if(q.done){
            var ob ={}
            ob.emp_id=q.emp_id

            if(q.is_active=='Y'){
              ob.is_active='N'
            }else{
              ob.is_active='Y'
            }
            st.push(ob)
          }
        })
        if(st.length==0){
          toastr.info('Please select at least one Staff and try again')
        }else{
          self.loading = true
          staffStore.trigger('allow_block_staff', st)
      }
    }
    self.resetStaffPassword=()=>{

    	staffStore.trigger('reset_staff_password',self.emp_id)

    }

    self.readEmployeeTypes = () => {
       employeeTypeStore.trigger('read_employeeTypes')
    }
    self.readDesignations = () => {
       designationStore.trigger('read_designations')
    }
    self.readLevel = () => {
       levelStore.trigger('read_level')
    }

    self.readDepartment = () => {
       staffStore.trigger('read_department')
    }

    self.getStaffData = () =>{
    	    self.type = $("#r_emp_type_id option:selected").text();
    	    self.department = $("#r_department_id option:selected").text();
    	    self.designation = $("#r_designation_id option:selected").text();
    	    self.level = $("#r_level_id option:selected").text();
    		self.loading=true
    		staffStore.trigger('read_staff', self.refs.r_emp_type_id.value,self.refs.r_department_id.value,self.refs.r_designation_id.value,self.refs.r_level_id.value)

    }

    self.add_new_staff = () =>{
    	if(self.title=='Add' || self.title=='Update'){
    		self.staff_view='add_staff'
    	}else{
    	  self.staff_view='staff_profile'
    	}
    	self.update()
    	document.getElementById("first_name").focus()
    	 self.clearForm()
    }

    self.selectStaff = (item,event) =>{
      item.done=!event.item.st.done
      console.log(item.done)
      if(event.item.st.done==true){
        self.emp_id=item.emp_id
        self.is_active=item.is_active
        console.log(self.emp_id)
        console.log(self.is_active)
       }
    }
    self.selectAll = () => {

    	if($('#checkStaff').is(":checked")){
    		self.staffs.map(i=>{
	          i.done = true;
	          $('StaffId'+i.emp_id).prop('checked', true);

	        })
    	}else{
    		self.staffs.map(i=>{
	          i.done = false;
	          $('StaffId'+i.emp_id).prop('checked', false);
	          self.emp_id = i.emp_id;
            console.log(self.emp_id)
	        })
    	}
    }

    self.id_card_print_preview = () => {

    	let emp_id='';
    	var st = []
	    self.staffs.map( q => {
	        if(q.done){
	        	var ob ={}
	        	ob.emp_id=q.emp_id
              	ob.is_active=q.is_active
            	st.push(ob)
	        }
	    })
      	if(st.length==0){
        	toastr.info('Please select at least one Staff and try again')
        }else if(self.is_active=="N"){
        	toastr.info('Please select Active Staff and try again')
        }else{
          	self.staff_view	= 'show_staff_print_view'
        	staffStore.trigger('read_staff_id_card',st)
      	}
    }

    self.close_print_view = () => {
      self.staff_view = 'show_staff'
    }

    self.update_staff_status = () => {
        self.title = 'Add'
        var st=[]
         self.staffs.map( q => {
          if(q.done){
            var ob ={}
            ob.emp_id=q.emp_id
            st.push(ob)
          }
        })
        if(st.length > 1){
          toastr.info('Please select only one Staff and try again')
          return
        }

        if(self.emp_id=='' || self.emp_id==undefined){
          toastr.info('Please select only one Staff and try again')
          return;
        }else{
          self.loading = true
            $("#statusModal").addClass("is-active");
        }
    }

    self.closeStatusUpdateModal = () => {
      $("#statusModal").removeClass("is-active");
       self.staffs.map(i=>{
          i.done = false;
          $('EmpId'+i.emp_id).prop('checked', false);
       })
        self.loading = false
    }

    self.close = () =>{
    	self.staff_view = 'show_staff'
    	self.clearForm();
    }

    self.cancelOperation = (e) => {
      self.staffs.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.staffs.map(ev => {
        if(ev.emp_id != e.item.st.emp_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      staffStore.trigger('delete_staff', e.item.st.emp_id)
    }

    self.addFamilyInformation = () =>{

      self.staff_view='add_family_information'
      self.update()
    }
    self.closeFamilyInformation = () =>{
    	self.staff_view = 'add_staff'
    	self.update()
    }
    self.addQualificationInformation = () =>{

    		self.staff_view='add_qualification_information'
    		self.update()

    }
    self.closeQualificationInformation = () =>{
    	self.staff_view = 'add_family_information'
    	self.update()
    }

    self.addProfessionalCourseInformation = () =>{

    		self.staff_view='add_professional_course_information'
    		self.update()

    }
    self.closeProfessionalCourseInformation = () =>{
    	self.staff_view = 'add_qualification_information'
    }
    self.addProfessionalMasterCourseInformation = () =>{

    		self.staff_view='add_professional_master_course_information'
    		self.update()

    }
    self.closeProfessionalMasterCourseInformation = () =>{
    	self.staff_view = 'add_professional_course_information'
    }

    self.addExtraActivityInformation = () =>{
    	self.staff_view='add_extra_activity_information'
    		console.log("add_extra_activity_information");
    		console.log(self.workExperienceArray);
    		if(self.workExperienceArray.length==0){
    			console.log("inside")
		  	    self.workExperienceArray =[]
		         let obj = {}
		             obj.work_institution=''
		        self.workExperienceArray.push(obj)
	        }

    	    let work_doj_id='#work_doj'+ (self.workExperienceArray.length-1).toString()
            let work_dol_id='#work_dol'+ (self.workExperienceArray.length-1).toString()

			   console.log(work_dol_id)
		  	   setTimeout(function(){

		        flatpickr(work_doj_id, {
			    	allowInput: true,
		        	dateFormat: "d/m/Y",
		  		})

		        flatpickr(work_dol_id, {
			    	allowInput: true,
		        	dateFormat: "d/m/Y",
			  	})

			}, 1000);

	    self.update()

    }
    self.closeExtraActivityInformation = () =>{
    	self.staff_view = 'add_professional_master_course_information'
    }

    self.addPrevoiusJob = () =>{
    		self.staff_view='add_previous_job_information'
    		self.update()
    }
    self.closePreviousJob= () =>{
    	self.staff_view='add_extra_activity_information'
    	self.update()
    }
    self.readSubject = () => {
       subjectStore.trigger('read_subject')
    }
    self.readEmploymentStatus = () => {
       employmentStatusStore.trigger('read_employment_status')
    }

    subjectStore.on('read_subject_changed',ReadSubjectChanged)
    function ReadSubjectChanged(subjects){
      console.log(subjects)
      self.subjects = subjects
      self.update()
      console.log(self.subjects)
    }

     employmentStatusStore.on('employment_status_changed',EmploymentStatusChanged)
    function EmploymentStatusChanged(employmentStatus){
      console.log('employment_status_changed1')
      console.log(employmentStatus)
      self.loading = false
      self.employmentStatus = employmentStatus
      self.update()
    }

    self.copyAddress = (e) => {
    	let cbox = '#correspondenceCheckbox'
    	if($(cbox).prop('checked') == true){
    		console.log("true")
    		self.refs.c_add_l1.value=self.refs.add_l1.value
    		self.refs.c_add_l2.value=self.refs.add_l2.value
    		self.refs.c_city.value=self.refs.city.value
    		self.refs.c_zip.value=self.refs.zip.value
    		self.refs.c_state.value=self.refs.state.value
    		self.refs.c_country.value=self.refs.country.value
    		self.update()
    	}else{
    		console.log("false")
    		self.refs.c_add_l1.value=''
    		self.refs.c_add_l2.value=''
    		self.refs.c_city.value=''
    		self.refs.c_zip.value=''
    		self.refs.c_state.value=''
    		self.refs.c_country.value=''
    	}
    }

	self.remove_picture = (item1, item2, e) => {
		console.log('item1'+item1)
		console.log('item2'+item2)
		var pp_box = document.getElementById(item1);
		pp_box.style.backgroundImage = "";
		document.getElementById(item2).value = ""
		event.stopPropagation();
	}

	self.trigger_file_input = (item,e) => {
		document.getElementById(item).click();
	}

     self.loadFile = (item,event) => {
		var reader = new FileReader();
		reader.onload = function (e) {
			console.log(item)
			document.getElementById(item).style.backgroundImage = 'url(' + e.target.result + ')';
			console.log(e.target.result)
			self.is_staff_image=true
		};
		reader.readAsDataURL(event.target.files[0]);

		console.log(event.target.files[0])
		self.staff_picture = event.target.files[0]
	}

	self.uploadStaffImage = (staff_id) => {
		if(self.is_staff_image == true){
    		staffStore.trigger('upload_staff_image', self.staff_picture,staff_id)
		}
    }

    self.readCategory = () => {
       studentStore.trigger('read_cast')
    }

    self.readReligion = () => {
       studentStore.trigger('read_religion')
    }

    self.addInformation = () =>{
    	console.log("addInformation")
    	var obj={}

        var staff={};

        self.workExperienceArray.map((x, index) => {
          let work_institution_id='#work_instituition'+index
          let work_doj_id='#work_doj'+index
          let work_dol_id='#work_dol'+index
          let work_position_id='#work_position'+index
          let work_subject_id='#work_subject'+index

           x.institution =  $(work_institution_id).val()
           x.date_of_joining = convertDate($(work_doj_id).val())
           x.date_of_leaving = convertDate($(work_dol_id).val())
           x.position = $(work_position_id).val()
           x.subjects_taught = $(work_subject_id).val()
        });

        var work_experience={}

        obj['workExperienceArray']=self.workExperienceArray

    	staff['title']=self.refs.title.value
    	staff['first_name']=self.refs.first_name.value
    	staff['middle_name']=self.refs.middle_name.value
    	staff['last_name']=self.refs.last_name.value
    	staff['employee_id']=self.refs.employee_id.value

    	if(self.refs.short_name.value==''){
    		staff['short_name']=null
    	}else{
    	    staff['short_name']=self.refs.short_name.value
    	}

    	if(self.refs.marital_status.value==''){
    		staff['marital_status']=null
    	}else{
    	    staff['marital_status']=self.refs.marital_status.value
    	}
    	staff['father_name']=self.refs.father_name.value
    	staff['father_occupation']=self.refs.father_occupation.value
    	staff['spouse']=self.refs.spouse.value
    	staff['spouse_occupation']=self.refs.spouse_occupation.value
    	staff['anniversary']=convertDate(self.refs.anniversary.value)
    	staff['id_mark']=self.refs.id_mark.value

    	if(self.refs.blood_group.value==''){
    		staff['blood_group']=null
    	}else{
    	    staff['blood_group']=self.refs.blood_group.value
    	}

    	if(self.refs.religion_id.value==''){
    		staff['religion_id']=null
    	}else{
    	    staff['religion_id']=self.refs.religion_id.value
    	}

    	staff['language']=self.refs.language.value

    	if(self.refs.emp_type_id.value==''){
    		staff['emp_type_id']=null
    	}else{
    	    staff['emp_type_id']=self.refs.emp_type_id.value
    	}

    	if(self.refs.department_id.value==''){
    		staff['department_id']=null
    	}else{
    	    staff['department_id']=self.refs.department_id.value
    	}

    	if(self.refs.level_id.value==''){
    		staff['level_id']=null
    	}else{
    	    staff['level_id']=self.refs.level_id.value
    	}

    	if(self.refs.designation_id.value==''){
    		staff['designation_id']=null
    	}else{
    	    staff['designation_id']=self.refs.designation_id.value
    	}

    	if(self.refs.employment_status_id.value==''){
    		staff['employment_status_id']=null
    	}else{
    	    staff['employment_status_id']=self.refs.employment_status_id.value
    	}
        if(self.refs.subject_id.value==''){
    		staff['subject_id']=null
    	}else{
    	    staff['subject_id']=self.refs.subject_id.value
    	}

    	 if(self.refs.category_id.value==''){
    		staff['category_id']=null
    	}else{
    	    staff['category_id']=self.refs.category_id.value
    	}

    	staff['qualification']=self.refs.qualification.value
    	staff['doj']=convertDate(self.refs.doj.value)
    	staff['place_of_birth']=self.refs.place_of_birth.value

    	staff['dob']=convertDate(self.refs.dob.value)

    	staff['add_l1']=self.refs.add_l1.value
    	staff['add_l2']=self.refs.add_l2.value
    	staff['city']=self.refs.city.value
    	staff['zip']=self.refs.zip.value
    	staff['state']=self.refs.state.value
    	staff['country']=self.refs.country.value
    	if($('#correspondenceCheckbox').prop('checked') == true){
    		staff['same_as_p_add'] = 1
    	}else{
    		staff['same_as_p_add'] = 0
    	}

    	staff['c_add_l1']=self.refs.c_add_l1.value
    	staff['c_add_l2']=self.refs.c_add_l2.value
    	staff['c_city']=self.refs.c_city.value
    	staff['c_zip']=self.refs.c_zip.value
    	staff['c_state']=self.refs.c_state.value
    	staff['c_country']=self.refs.c_country.value
    	staff['residence_phone']=self.refs.residence_phone.value
    	staff['office_phone']=self.refs.office_phone.value
    	staff['mobile']=self.refs.mobile.value
    	staff['email']=self.refs.email.value
    	staff['nationality']=self.refs.nationality.value

        obj['staff']=staff;
        var staff_login={}
    	staff_login['employee_id']=self.refs.employee_id.value
    	staff_login['password']=self.refs.dob.value
    	if(self.title=='Add'){
    		obj['staff_login'] = staff_login
    	}else if(self.title=='Update'){
    		obj['staff_login']=""
    	}

        var family={};

        family['child1_first_name']=self.refs.child1_first_name.value
    	family['child1_last_name']=self.refs.child1_last_name.value
    	if(self.refs.child1_sex.value==''){
    		family['child1_sex']=null
    	}else{
    	    family['child1_sex']=self.refs.child1_sex.value
    	}
    	family['child1_dob']=convertDate(self.refs.child1_dob.value)
    	family['child1_school']=self.refs.child1_school.value
    	family['child2_first_name']=self.refs.child2_first_name.value
    	family['child2_last_name']=self.refs.child2_last_name.value
    	if(self.refs.child2_sex.value==''){
    		family['child2_sex']=null
    	}else{
    	    family['child2_sex']=self.refs.child2_sex.value
    	}

    	family['child2_dob']=convertDate(self.refs.child2_dob.value)
    	family['child2_school']=self.refs.child2_school.value
    	family['child3_first_name']=self.refs.child3_first_name.value
    	family['child3_last_name']=self.refs.child3_last_name.value
    	if(self.refs.child3_sex.value==''){
    		family['child3_sex']=null
    	}else{
    	    family['child3_sex']=self.refs.child3_sex.value
    	}

    	family['child3_dob']=convertDate(self.refs.child3_dob.value)
    	family['child3_school']=self.refs.child3_school.value

        obj['family']=family

    	var qualification={};
    	qualification['x_subject']=self.refs.x_subject.value
    	qualification['x_institution']=self.refs.x_institution.value
    	qualification['x_board']=self.refs.x_board.value
    	if(self.refs.x_yop.value==''){
    		qualification['x_yop']=null
    	}else{
    	    qualification['x_yop']=self.refs.x_yop.value
    	}
    	qualification['x_marks']=self.refs.x_marks.value
    	qualification['x_div']=self.refs.x_div.value
    	qualification['xii_subject']=self.refs.xii_subject.value
    	qualification['xii_institution']=self.refs.xii_institution.value
    	qualification['xii_board']=self.refs.xii_board.value

    	if(self.refs.xii_yop.value==''){
    		qualification['xii_yop']=null
    	}else{
    	    qualification['xii_yop']=self.refs.xii_yop.value
    	}

    	qualification['xii_marks']=self.refs.xii_marks.value
    	qualification['xii_div']=self.refs.xii_div.value
    	qualification['ug_course']=self.refs.ug_course.value
    	qualification['ug_institution']=self.refs.ug_institution.value
    	qualification['ug_university']=self.refs.ug_university.value

    	if(self.refs.ug_yop.value==''){
    		qualification['ug_yop']=null
    	}else{
    	    qualification['ug_yop']=self.refs.ug_yop.value
    	}

    	qualification['ug_marks']=self.refs.ug_marks.value
    	qualification['ug_div']=self.refs.ug_div.value
    	qualification['pg_course']=self.refs.pg_course.value
    	qualification['pg_institution']=self.refs.pg_institution.value
    	qualification['pg_university']=self.refs.pg_university.value

    	if(self.refs.pg_yop.value==''){
    		qualification['pg_yop']=null
    	}else{
    	    qualification['pg_yop']=self.refs.pg_yop.value
    	}

    	qualification['pg_marks']=self.refs.pg_marks.value
    	qualification['pg_div']=self.refs.pg_div.value
    	qualification['bed_stream']=self.refs.bed_stream.value
    	qualification['bed_institution']=self.refs.bed_institution.value
    	qualification['bed_university']=self.refs.bed_university.value

    	if(self.refs.bed_yop.value==''){
    		qualification['bed_yop']=null
    	}else{
    	    qualification['bed_yop']=self.refs.bed_yop.value
    	}

    	qualification['bed_marks']=self.refs.bed_marks.value
    	qualification['bed_div']=self.refs.bed_div.value

    	qualification['bt_stream']=self.refs.bt_stream.value
    	qualification['bt_institution']=self.refs.bt_institution.value
    	qualification['bt_university']=self.refs.bt_university.value

    	if(self.refs.bt_yop.value==''){
    		qualification['bt_yop']=null
    	}else{
    	    qualification['bt_yop']=self.refs.bt_yop.value
    	}

    	qualification['bt_marks']=self.refs.bt_marks.value
    	qualification['bt_div']=self.refs.bt_div.value

    	qualification['bped_stream']=self.refs.bped_stream.value
    	qualification['bped_institution']=self.refs.bped_institution.value
    	qualification['bped_university']=self.refs.bped_university.value

    	if(self.refs.bped_yop.value==''){
    		qualification['bped_yop']=null
    	}else{
    	    qualification['bped_yop']=self.refs.bped_yop.value
    	}

    	qualification['bped_marks']=self.refs.bped_marks.value
    	qualification['bped_div']=self.refs.bped_div.value

    	qualification['dped_stream']=self.refs.dped_stream.value
    	qualification['dped_institution']=self.refs.dped_institution.value
    	qualification['dped_university']=self.refs.dped_university.value

    	if(self.refs.dped_yop.value==''){
    		qualification['dped_yop']=null
    	}else{
    	    qualification['dped_yop']=self.refs.dped_yop.value
    	}

    	qualification['dped_marks']=self.refs.dped_marks.value
    	qualification['dped_div']=self.refs.dped_div.value

    	qualification['mped_stream']=self.refs.mped_stream.value
    	qualification['mped_institution']=self.refs.mped_institution.value
    	qualification['mped_university']=self.refs.mped_university.value

    	if(self.refs.mped_yop.value==''){
    		qualification['mped_yop']=null
    	}else{
    	    qualification['mped_yop']=self.refs.mped_yop.value
    	}

    	qualification['mped_marks']=self.refs.mped_marks.value
    	qualification['mped_div']=self.refs.mped_div.value

    	qualification['med_stream']=self.refs.med_stream.value
    	qualification['med_institution']=self.refs.med_institution.value
    	qualification['med_university']=self.refs.med_university.value

    	if(self.refs.med_yop.value==''){
    		qualification['med_yop']=null
    	}else{
    	    qualification['med_yop']=self.refs.med_yop.value
    	}

    	qualification['med_marks']=self.refs.med_marks.value
    	qualification['med_div']=self.refs.med_div.value

    	qualification['mphil_stream']=self.refs.mphil_stream.value
    	qualification['mphil_institution']=self.refs.mphil_institution.value
    	qualification['mphil_university']=self.refs.mphil_university.value

    	if(self.refs.mphil_yop.value==''){
    		qualification['mphil_yop']=null
    	}else{
    	    qualification['mphil_yop']=self.refs.mphil_yop.value
    	}

    	qualification['mphil_marks']=self.refs.mphil_marks.value
    	qualification['mphil_div']=self.refs.mphil_div.value

    	qualification['phd_stream']=self.refs.phd_stream.value
    	qualification['phd_institution']=self.refs.phd_institution.value
    	qualification['phd_university']=self.refs.phd_university.value

    	if(self.refs.phd_yop.value==''){
    		qualification['phd_yop']=null
    	}else{
    	    qualification['phd_yop']=self.refs.phd_yop.value
    	}

    	qualification['phd_marks']=self.refs.phd_marks.value
    	qualification['phd_div']=self.refs.phd_div.value

    	qualification['other_stream']=self.refs.other_stream.value
    	qualification['other_institution']=self.refs.other_institution.value
    	qualification['other_university']=self.refs.other_university.value

    	if(self.refs.other_yop.value==''){
    		qualification['other_yop']=null
    	}else{
    	    qualification['other_yop']=self.refs.other_yop.value
    	}

    	qualification['other_marks']=self.refs.other_marks.value
    	qualification['other_div']=self.refs.other_div.value

    	qualification['details_scholarship']=self.refs.details_scholarship.value

    	qualification['details_honours']=self.refs.details_honours.value
    	qualification['details_publication']=self.refs.details_publication.value
    	qualification['details_curricular_activities']=self.refs.details_curricular_activities.value
    	qualification['details_sport']=self.refs.details_sport.value

    	obj['qualification']=qualification
    	var previous_job={}

    	previous_job['organization_of_previous_job']=self.refs.organization_of_previous_job.value
    	previous_job['add_l1_of_previous_job']=self.refs.add_l1_of_previous_job.value
    	previous_job['add_l2_of_previous_job']=self.refs.add_l2_of_previous_job.value
    	previous_job['city_of_previous_job']=self.refs.city_of_previous_job.value
    	previous_job['zip_of_previous_job']=self.refs.zip_of_previous_job.value
    	previous_job['state_of_previous_job']=self.refs.state_of_previous_job.value
    	previous_job['country_of_previous_job']=self.refs.country_of_previous_job.value
    	previous_job['designation_of_previous_job']=self.refs.designation_of_previous_job.value
    	previous_job['doj_of_previous_job']=convertDate(self.refs.doj_of_previous_job.value)
    	previous_job['salary_of_previous_job']=self.refs.salary_of_previous_job.value
    	previous_job['basic_of_previous_job']=self.refs.basic_of_previous_job.value
    	previous_job['allowances_of_previous_job']=self.refs.allowances_of_previous_job.value
    	previous_job['other_benefits_of_previous_job']=self.refs.other_benefits_of_previous_job.value
    	previous_job['bond_details_of_previous_job']=self.refs.bond_details_of_previous_job.value
		obj['previous_job']=previous_job

    	if(self.title=='Add'){
          staffStore.trigger('add_staff', obj)
        }else if(self.title=='Update'){
        	self.editType='normalEdit'
          staffStore.trigger('edit_staff', obj,self.emp_id,self.editType)
        }
    }

    self.edit = (c,st) => {
      console.log(c)
      self.emp_id = c

      flatpickr(".date", {
	    allowInput: true,
        dateFormat: "d/m/Y",
  		})
      staffStore.trigger('read_for_edit_staff',self.emp_id)
      document.getElementById('pp_box').style.backgroundImage = 'url(/images/empImages/'+c+'.jpg)';
      self.title='Update'

      self.staff_view='add_staff'

    }
    self.printProfile = (c,st) => {
      console.log(c)
      self.emp_id = c
      staffStore.trigger('read_for_edit_staff',self.emp_id)
      document.getElementById('pp_box1').src= '/images/empImages/'+c+'.jpg';
      self.title='printProfile'
      self.add_new_staff()
    }

    self.clearForm = () => {
    	pp_box.style.backgroundImage = "";
    	self.refs.title.value=''
    	self.refs.first_name.value=''
    	self.refs.middle_name.value=''
    	self.refs.last_name.value=''
    	self.refs.employee_id.value=''
    	self.refs.short_name.value=''

    	self.refs.father_name.value=''
    	self.refs.father_occupation.value=''
    	self.refs.spouse.value=''
    	self.refs.spouse_occupation.value=''
    	self.refs.anniversary.value=''
    	self.refs.id_mark.value=''

    	self.refs.language.value=''
    	self.refs.emp_type_id.value=''
    	self.refs.department_id.value=''
    	self.refs.level_id.value=''
    	self.refs.employment_status_id.value=''
    	self.refs.subject_id.value=''
    	self.refs.designation_id.value=''
    	self.refs.qualification.value=''
    	self.refs.qualification.value=''
    	self.refs.doj.value=''
    	self.refs.place_of_birth.value=''
    	self.refs.category_id.value=''
    	self.refs.dob.value=''

    	self.refs.add_l1.value=''
    	self.refs.add_l2.value=''
    	self.refs.city.value=''
    	self.refs.zip.value=''
    	self.refs.state.value=''
    	self.refs.country.value=''

    	self.refs.c_add_l1.value=''
    	self.refs.c_add_l2.value=''
    	self.refs.c_city.value=''
    	self.refs.c_zip.value=''
    	self.refs.c_state.value=''
    	self.refs.c_country.value=''
    	self.refs.residence_phone.value=''
    	self.refs.office_phone.value=''
    	self.refs.mobile.value=''
    	self.refs.email.value=''

  	    self.workExperienceArray =[]
         let obj = {}
             obj.work_institution=''

        self.workExperienceArray.push(obj)

    	self.refs.child1_first_name.value=''
    	self.refs.child1_last_name.value=''
    	self.refs.child1_sex.value=''
    	self.refs.child1_dob.value=''
    	self.refs.child1_school.value=''
    	self.refs.child2_first_name.value=''
    	self.refs.child2_last_name.value=''
    	self.refs.child2_sex.value=''
    	self.refs.child2_dob.value=''
    	self.refs.child2_school.value=''
    	self.refs.child3_first_name.value=''
    	self.refs.child3_last_name.value=''
    	self.refs.child3_sex.value=''
    	self.refs.child3_dob.value=''
    	self.refs.child3_school.value=''

    	self.refs.x_subject.value=''
    	self.refs.x_institution.value=''
    	self.refs.x_board.value=''
    	self.refs.x_yop.value=''
    	self.refs.x_marks.value=''
    	self.refs.x_div.value=''
    	self.refs.xii_subject.value=''
    	self.refs.xii_institution.value=''
    	self.refs.xii_board.value=''
    	self.refs.xii_yop.value=''
    	self.refs.xii_marks.value=''
    	self.refs.xii_div.value=''
    	self.refs.ug_course.value=''
    	self.refs.ug_institution.value=''
    	self.refs.ug_university.value=''
    	self.refs.ug_yop.value=''
    	self.refs.ug_marks.value=''
    	self.refs.ug_div.value=''
    	self.refs.pg_course.value=''
    	self.refs.pg_institution.value=''
    	self.refs.pg_university.value=''
    	self.refs.pg_yop.value=''
    	self.refs.pg_marks.value=''
    	self.refs.pg_div.value=''
    	self.refs.bed_stream.value=''
    	self.refs.bed_institution.value=''
    	self.refs.bed_university.value=''
    	self.refs.bed_yop.value=''
    	self.refs.bed_marks.value=''
    	self.refs.bed_div.value=''

    	self.refs.bt_stream.value=''
    	self.refs.bt_institution.value=''
    	self.refs.bt_university.value=''
    	self.refs.bt_yop.value=''
    	self.refs.bt_marks.value=''
    	self.refs.bt_div.value=''

    	self.refs.bped_stream.value=''
    	self.refs.bped_institution.value=''
    	self.refs.bped_university.value=''
    	self.refs.bped_yop.value=''
    	self.refs.bped_marks.value=''
    	self.refs.bped_div.value=''

    	self.refs.dped_stream.value=''
    	self.refs.dped_institution.value=''
    	self.refs.dped_university.value=''
    	self.refs.dped_yop.value=''
    	self.refs.dped_marks.value=''
    	self.refs.dped_div.value=''

    	self.refs.mped_stream.value=''
    	self.refs.mped_institution.value=''
    	self.refs.mped_university.value=''
    	self.refs.mped_yop.value=''
    	self.refs.mped_marks.value=''
    	self.refs.mped_div.value=''

    	self.refs.med_stream.value=''
    	self.refs.med_institution.value=''
    	self.refs.med_university.value=''
    	self.refs.med_yop.value=''
    	self.refs.med_marks.value=''
    	self.refs.med_div.value=''

    	self.refs.mphil_stream.value=''
    	self.refs.mphil_institution.value=''
    	self.refs.mphil_university.value=''
    	self.refs.mphil_yop.value=''
    	self.refs.mphil_marks.value=''
    	self.refs.mphil_div.value=''

    	self.refs.phd_stream.value=''
    	self.refs.phd_institution.value=''
    	self.refs.phd_university.value=''
    	self.refs.phd_yop.value=''
    	self.refs.phd_marks.value=''
    	self.refs.phd_div.value=''

    	self.refs.other_stream.value=''
    	self.refs.other_institution.value=''
    	self.refs.other_university.value=''
    	self.refs.other_yop.value=''
    	self.refs.other_marks.value=''
    	self.refs.other_div.value=''

    	self.refs.details_scholarship.value=''

    	self.refs.details_honours.value=''
    	self.refs.details_publication.value=''
    	self.refs.details_curricular_activities.value=''
    	self.refs.details_sport.value=''
    }

    studentStore.on('read_cast_changed',CastChanged)
    function CastChanged(cast){
      console.log(cast)
      self.cast = cast
      self.update()
    }

    studentStore.on('read_religion_changed',ReligionChanged)
    function ReligionChanged(religion){
      console.log(religion)
      self.religion = religion
      self.update()
    }

    staffStore.on('read_staff_changed',StaffChanged)
    function StaffChanged(staffs){
      console.log(staffs)
      self.staffs = staffs
      self.loading=false
        self.staffs.map(i=>{
         if(i.emp_id==null){
              i.done = false;
               self.emp_id=i.emp_id
         }else{
          i.done = false;
          $('EmpId'+i.emp_id).prop('checked', false);
         }
       })
      self.update()
    }

    staffStore.on('add_staff_changed',AddStaffChanged)
    function AddStaffChanged(staffs,staff_id){
      console.log(staffs)
      self.staffs = staffs
      self.uploadStaffImage(staff_id)
      self.close();
      self.update()
    }

  staffStore.on('edit_staff_changed',EditStaffChanged)
    function EditStaffChanged(staffs){
      console.log(staffs)
      self.staffs = staffs
      console.log(self.emp_id)
      self.uploadStaffImage(self.emp_id)
      self.close();
      self.clearForm()
      self.update()
    }
    staffStore.on('update_staff_status_changed',UpdateStaffStatusChanged)
    function UpdateStaffStatusChanged(){
      self.refs.leaving_date.value=''
      self.refs.remark.value='';
      self.closeStatusUpdateModal()
      self.getStaffData();
      self.update()
    }

    staffStore.on('allow_block_staff_changed',AllowBlockStaffChanged)
    function AllowBlockStaffChanged(){
      self.closeStatusUpdateModal()
      self.getStaffData();
      self.update()
    }
    staffStore.on('delete_staff_changed',DeleteStaffChanged)
    function DeleteStaffChanged(){
      self.getStaffData();
      self.update()
    }
    staffStore.on('reset_staff_password_changed',ResetStaffPasswordChanged)
    function ResetStaffPasswordChanged(){

      self.update()
    }

    staffStore.on('update_staff_fast_edit_changed',updateStaffFastEditChanged)
    function updateStaffFastEditChanged(){
    self.loading=false
      self.update()
    }

    staffStore.on('read_for_edit_staff_changed',ReadForEditStaffChanged)
    function ReadForEditStaffChanged(staff_details, workExperienceArray){

     	 flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
  	    self.workExperienceArray =[{}]
        self.workExperienceArray=workExperienceArray
     	self.staff_details=staff_details
     	if(self.title=='Update'){
         self.refs.title.value=staff_details[0].title
    	self.refs.first_name.value=staff_details[0].first_name
    	self.refs.middle_name.value=staff_details[0].middle_name
    	self.refs.last_name.value=staff_details[0].last_name
    	self.refs.gender.value=staff_details[0].gender
    	self.refs.employee_id.value=staff_details[0].employee_id
    	self.refs.short_name.value=staff_details[0].short_name

    	self.refs.marital_status.value=staff_details[0].marital_status
    	self.refs.father_name.value=staff_details[0].father_name
    	self.refs.father_occupation.value=staff_details[0].father_occupation
    	self.refs.spouse.value=staff_details[0].spouse
    	self.refs.spouse_occupation.value=staff_details[0].spouse_occupation
    	self.refs.anniversary.value=staff_details[0].anniversary
    	self.refs.id_mark.value=staff_details[0].id_mark
    	self.refs.blood_group.value=staff_details[0].blood_group

    	self.refs.religion_id.value=staff_details[0].religion_id
    	self.refs.language.value=staff_details[0].language
    	self.refs.emp_type_id.value=staff_details[0].emp_type_id
    	self.refs.department_id.value=staff_details[0].department_id
    	self.refs.level_id.value=staff_details[0].level_id
    	self.refs.employment_status_id.value=staff_details[0].employment_status_id
    	self.refs.subject_id.value=staff_details[0].subject_id
    	self.refs.designation_id.value=staff_details[0].designation_id
    	self.refs.qualification.value=staff_details[0].qualification
    	self.refs.doj.value=staff_details[0].doj
    	self.refs.category_id.value=staff_details[0].category_id

    	console.log(self.refs.category_id.value)
    	self.refs.place_of_birth.value=staff_details[0].place_of_birth
    	self.refs.dob.value=staff_details[0].dob
    	self.refs.blood_group.value=staff_details[0].blood_group
    	self.refs.add_l1.value=staff_details[0].add_l1
    	self.refs.add_l2.value=staff_details[0].add_l2
    	self.refs.city.value=staff_details[0].city
    	self.refs.zip.value=staff_details[0].zip
    	self.refs.state.value=staff_details[0].state
    	self.refs.country.value=staff_details[0].country
    	if(staff_details[0].same_as_p_add == 1){
			$('#correspondenceCheckbox').prop('checked', true)
		}else{
			$('#correspondenceCheckbox').prop('checked', false)
		}
    	self.refs.c_add_l1.value=staff_details[0].c_add_l1
    	self.refs.c_add_l2.value=staff_details[0].c_add_l2
    	self.refs.c_city.value=staff_details[0].c_city
    	self.refs.c_zip.value=staff_details[0].c_zip
    	self.refs.c_state.value=staff_details[0].c_state
    	self.refs.c_country.value=staff_details[0].c_country
    	self.refs.residence_phone.value=staff_details[0].residence_phone
    	self.refs.office_phone.value=staff_details[0].office_phone
    	self.refs.mobile.value=staff_details[0].mobile
    	self.refs.email.value=staff_details[0].email

    	self.refs.child1_first_name.value=staff_details[0].child1_first_name
    	self.refs.child1_last_name.value=staff_details[0].child1_last_name
    	self.refs.child1_sex.value=staff_details[0].child1_sex
    	self.refs.child1_dob.value=staff_details[0].child1_dob
    	self.refs.child1_school.value=staff_details[0].child1_school
    	self.refs.child2_first_name.value=staff_details[0].child2_first_name
    	self.refs.child2_last_name.value=staff_details[0].child2_last_name
    	self.refs.child2_sex.value=staff_details[0].child2_sex
    	self.refs.child2_dob.value=staff_details[0].child2_dob
    	self.refs.child2_school.value=staff_details[0].child2_school
    	self.refs.child3_first_name.value=staff_details[0].child3_first_name
    	self.refs.child3_last_name.value=staff_details[0].child3_last_name
    	self.refs.child3_sex.value=staff_details[0].child3_sex
    	self.refs.child3_dob.value=staff_details[0].child3_dob
    	self.refs.child3_school.value=staff_details[0].child3_school

    	self.refs.x_subject.value=staff_details[0].x_subject
    	self.refs.x_institution.value=staff_details[0].x_institution
    	self.refs.x_board.value=staff_details[0].x_board
    	self.refs.x_yop.value=staff_details[0].x_yop
    	self.refs.x_marks.value=staff_details[0].x_marks
    	self.refs.x_div.value=staff_details[0].x_div
    	self.refs.xii_subject.value=staff_details[0].xii_subject
    	self.refs.xii_institution.value=staff_details[0].xii_institution
    	self.refs.xii_board.value=staff_details[0].xii_board
    	self.refs.xii_yop.value=staff_details[0].xii_yop
    	self.refs.xii_marks.value=staff_details[0].xii_marks
    	self.refs.xii_div.value=staff_details[0].xii_div
    	self.refs.ug_course.value=staff_details[0].ug_course
    	self.refs.ug_institution.value=staff_details[0].ug_institution
    	self.refs.ug_university.value=staff_details[0].ug_university
    	self.refs.ug_yop.value=staff_details[0].ug_yop
    	self.refs.ug_marks.value=staff_details[0].ug_marks
    	self.refs.ug_div.value=staff_details[0].ug_div
    	self.refs.pg_course.value=staff_details[0].pg_course
    	self.refs.pg_institution.value=staff_details[0].pg_institution
    	self.refs.pg_university.value=staff_details[0].pg_university
    	self.refs.pg_yop.value=staff_details[0].pg_yop
    	self.refs.pg_marks.value=staff_details[0].pg_marks
    	self.refs.pg_div.value=staff_details[0].pg_div
    	self.refs.bed_stream.value=staff_details[0].bed_stream
    	self.refs.bed_institution.value=staff_details[0].bed_institution
    	self.refs.bed_university.value=staff_details[0].bed_university
    	self.refs.bed_yop.value=staff_details[0].bed_yop
    	self.refs.bed_marks.value=staff_details[0].bed_marks
    	self.refs.bed_div.value=staff_details[0].bed_div

    	self.refs.bt_stream.value=staff_details[0].bt_stream
    	self.refs.bt_institution.value=staff_details[0].bt_institution
    	self.refs.bt_university.value=staff_details[0].bt_university
    	self.refs.bt_yop.value=staff_details[0].bt_yop
    	self.refs.bt_marks.value=staff_details[0].bt_marks
    	self.refs.bt_div.value=staff_details[0].bt_div

    	self.refs.bped_stream.value=staff_details[0].bped_stream
    	self.refs.bped_institution.value=staff_details[0].bped_institution
    	self.refs.bped_university.value=staff_details[0].bped_university
    	self.refs.bped_yop.value=staff_details[0].bped_yop
    	self.refs.bped_marks.value=staff_details[0].bped_marks
    	self.refs.bped_div.value=staff_details[0].bped_div

    	self.refs.dped_stream.value=staff_details[0].dped_stream
    	self.refs.dped_institution.value=staff_details[0].dped_institution
    	self.refs.dped_university.value=staff_details[0].dped_university
    	self.refs.dped_yop.value=staff_details[0].dped_yop
    	self.refs.dped_marks.value=staff_details[0].dped_marks
    	self.refs.dped_div.value=staff_details[0].dped_div

    	self.refs.mped_stream.value=staff_details[0].mped_stream
    	self.refs.mped_institution.value=staff_details[0].mped_institution
    	self.refs.mped_university.value=staff_details[0].mped_university
    	self.refs.mped_yop.value=staff_details[0].mped_yop
    	self.refs.mped_marks.value=staff_details[0].mped_marks
    	self.refs.mped_div.value=staff_details[0].mped_div

    	self.refs.med_stream.value=staff_details[0].med_stream
    	self.refs.med_institution.value=staff_details[0].med_institution
    	self.refs.med_university.value=staff_details[0].med_university
    	self.refs.med_yop.value=staff_details[0].med_yop
    	self.refs.med_marks.value=staff_details[0].med_marks
    	self.refs.med_div.value=staff_details[0].med_div

    	self.refs.mphil_stream.value=staff_details[0].mphil_stream
    	self.refs.mphil_institution.value=staff_details[0].mphil_institution
    	self.refs.mphil_university.value=staff_details[0].mphil_university
    	self.refs.mphil_yop.value=staff_details[0].mphil_yop
    	self.refs.mphil_marks.value=staff_details[0].mphil_marks
    	self.refs.mphil_div.value=staff_details[0].mphil_div

    	self.refs.phd_stream.value=staff_details[0].phd_stream
    	self.refs.phd_institution.value=staff_details[0].phd_institution
    	self.refs.phd_university.value=staff_details[0].phd_university
    	self.refs.phd_yop.value=staff_details[0].phd_yop
    	self.refs.phd_marks.value=staff_details[0].phd_marks
    	self.refs.phd_div.value=staff_details[0].phd_div

    	self.refs.other_stream.value=staff_details[0].other_stream
    	self.refs.other_institution.value=staff_details[0].other_institution
    	self.refs.other_university.value=staff_details[0].other_university
    	self.refs.other_yop.value=staff_details[0].other_yop
    	self.refs.other_marks.value=staff_details[0].other_marks
    	self.refs.other_div.value=staff_details[0].other_div

    	self.refs.details_scholarship.value=staff_details[0].details_scholarship

    	self.refs.details_honours.value=staff_details[0].details_honours
    	self.refs.details_publication.value=staff_details[0].details_publication
    	self.refs.details_curricular_activities.value=staff_details[0].details_curricular_activities
    	self.refs.details_sport.value=staff_details[0].details_sport

    	self.update()
     }else{
     	console.log("inside else")
     	console.log(staff_details[0].first_name)

     	self.gender=staff_details[0].gender
     	self.title=staff_details[0].title
    	self.first_name=staff_details[0].first_name
    	self.middle_name=staff_details[0].middle_name
    	self.last_name=staff_details[0].last_name
    	self.employee_id=staff_details[0].employee_id
    	self.short_name=staff_details[0].short_name
    	self.marital_status=staff_details[0].marital_status
    	self.father_name=staff_details[0].father_name
    	self.father_occupation=staff_details[0].father_occupation
    	self.spouse=staff_details[0].spouse
    	self.spouse_occupation=staff_details[0].spouse_occupation
    	self.anniversary=staff_details[0].anniversary
    	self.id_mark=staff_details[0].id_mark
    	self.blood_group=staff_details[0].blood_group
    	self.religion_id=staff_details[0].religion_id
    	self.language=staff_details[0].language
    	self.emp_type_id=staff_details[0].emp_type_id
    	self.emp_type=staff_details[0].emp_type
    	self.department_id=staff_details[0].department_id
    	self.department_name=staff_details[0].department_name
    	self.level_id=staff_details[0].level_id
    	self.level=staff_details[0].level

    	self.employment_status_id=staff_details[0].employment_status_id
    	self.subject_id=staff_details[0].subject_id
    	self.designation_id=staff_details[0].designation_id
    	self.designation=staff_details[0].designation
    	self.qualification=staff_details[0].qualification
    	self.category_id=staff_details[0].category_id
    	self.category_name=staff_details[0].category_name

    	self.place_of_birth=staff_details[0].place_of_birth
    	self.dob=staff_details[0].dob
    	self.blood_group=staff_details[0].blood_group
    	self.add_l1=staff_details[0].add_l1
    	self.add_l2=staff_details[0].add_l2
    	self.city=staff_details[0].city
    	self.zip=staff_details[0].zip
    	self.state=staff_details[0].state
    	self.country=staff_details[0].country
    	if(staff_details[0].same_as_p_add == 1){
			$('#correspondenceCheckbox').prop('checked', true)
		}else{
			$('#correspondenceCheckbox').prop('checked', false)
		}
    	self.c_add_l1=staff_details[0].c_add_l1
    	self.c_add_l2=staff_details[0].c_add_l2
    	self.c_city=staff_details[0].c_city
    	self.c_zip=staff_details[0].c_zip
    	self.c_state=staff_details[0].c_state
    	self.c_country=staff_details[0].c_country
    	self.residence_phone=staff_details[0].residence_phone
    	self.office_phone=staff_details[0].office_phone
    	self.mobile=staff_details[0].mobile
    	self.email=staff_details[0].email

    	self.child1_first_name=staff_details[0].child1_first_name
    	self.child1_last_name=staff_details[0].child1_last_name
    	self.child1_sex=staff_details[0].child1_sex
    	self.child1_dob=staff_details[0].child1_dob
    	self.child1_school=staff_details[0].child1_school
    	self.child2_first_name=staff_details[0].child2_first_name
    	self.child2_last_name=staff_details[0].child2_last_name
    	self.child2_sex=staff_details[0].child2_sex
    	self.child2_dob=staff_details[0].child2_dob
    	self.child2_school=staff_details[0].child2_school
    	self.child3_first_name=staff_details[0].child3_first_name
    	self.child3_last_name=staff_details[0].child3_last_name
    	self.child3_sex=staff_details[0].child3_sex
    	self.child3_dob=staff_details[0].child3_dob
    	self.child3_school=staff_details[0].child3_school

    	self.x_subject=staff_details[0].x_subject
    	self.x_institution=staff_details[0].x_institution
    	self.x_board=staff_details[0].x_board
    	self.x_yop=staff_details[0].x_yop
    	self.x_marks=staff_details[0].x_marks
    	self.x_div=staff_details[0].x_div
    	self.xii_subject=staff_details[0].xii_subject
    	self.xii_institution=staff_details[0].xii_institution
    	self.xii_board=staff_details[0].xii_board
    	self.xii_yop=staff_details[0].xii_yop
    	self.xii_marks=staff_details[0].xii_marks
    	self.xii_div=staff_details[0].xii_div
    	self.ug_course=staff_details[0].ug_course
    	self.ug_institution=staff_details[0].ug_institution
    	self.ug_university=staff_details[0].ug_university
    	self.ug_yop=staff_details[0].ug_yop
    	self.ug_marks=staff_details[0].ug_marks
    	self.ug_div=staff_details[0].ug_div
    	self.pg_course=staff_details[0].pg_course
    	self.pg_institution=staff_details[0].pg_institution
    	self.pg_university=staff_details[0].pg_university
    	self.pg_yop=staff_details[0].pg_yop
    	self.pg_marks=staff_details[0].pg_marks
    	self.pg_div=staff_details[0].pg_div
    	self.bed_stream=staff_details[0].bed_stream
    	self.bed_institution=staff_details[0].bed_institution
    	self.bed_university=staff_details[0].bed_university
    	self.bed_yop=staff_details[0].bed_yop
    	self.bed_marks=staff_details[0].bed_marks
    	self.bed_div=staff_details[0].bed_div

    	self.bt_stream=staff_details[0].bt_stream
    	self.bt_institution=staff_details[0].bt_institution
    	self.bt_university=staff_details[0].bt_university
    	self.bt_yop=staff_details[0].bt_yop
    	self.bt_marks=staff_details[0].bt_marks
    	self.bt_div=staff_details[0].bt_div

    	self.bped_stream=staff_details[0].bped_stream
    	self.bped_institution=staff_details[0].bped_institution
    	self.bped_university=staff_details[0].bped_university
    	self.bped_yop=staff_details[0].bped_yop
    	self.bped_marks=staff_details[0].bped_marks
    	self.bped_div=staff_details[0].bped_div

    	self.dped_stream=staff_details[0].dped_stream
    	self.dped_institution=staff_details[0].dped_institution
    	self.dped_university=staff_details[0].dped_university
    	self.dped_yop=staff_details[0].dped_yop
    	self.dped_marks=staff_details[0].dped_marks
    	self.dped_div=staff_details[0].dped_div

    	self.mped_stream=staff_details[0].mped_stream
    	self.mped_institution=staff_details[0].mped_institution
    	self.mped_university=staff_details[0].mped_university
    	self.mped_yop=staff_details[0].mped_yop
    	self.mped_marks=staff_details[0].mped_marks
    	self.mped_div=staff_details[0].mped_div

    	self.med_stream=staff_details[0].med_stream
    	self.med_institution=staff_details[0].med_institution
    	self.med_university=staff_details[0].med_university
    	self.med_yop=staff_details[0].med_yop
    	self.med_marks=staff_details[0].med_marks
    	self.med_div=staff_details[0].med_div

    	self.mphil_stream=staff_details[0].mphil_stream
    	self.mphil_institution=staff_details[0].mphil_institution
    	self.mphil_university=staff_details[0].mphil_university
    	self.mphil_yop=staff_details[0].mphil_yop
    	self.mphil_marks=staff_details[0].mphil_marks
    	self.mphil_div=staff_details[0].mphil_div

    	self.phd_stream=staff_details[0].phd_stream
    	self.phd_institution=staff_details[0].phd_institution
    	self.phd_university=staff_details[0].phd_university
    	self.phd_yop=staff_details[0].phd_yop
    	self.phd_marks=staff_details[0].phd_marks
    	self.phd_div=staff_details[0].phd_div

    	self.other_stream=staff_details[0].other_stream
    	self.other_institution=staff_details[0].other_institution
    	self.other_university=staff_details[0].other_university
    	self.other_yop=staff_details[0].other_yop
    	self.other_marks=staff_details[0].other_marks
    	self.other_div=staff_details[0].other_div

    	self.details_scholarship=staff_details[0].details_scholarship

    	self.details_honours=staff_details[0].details_honours
    	self.details_publication=staff_details[0].details_publication
    	self.details_curricular_activities=staff_details[0].details_curricular_activities
    	self.details_sport=staff_details[0].details_sport

    	self.update()
     }

    }

    staffStore.on('upload_staff_image_changed',UploadStaffImage)
    function UploadStaffImage(image_name){
      console.log(image_name)
      self.staff_profile_picture = image_name
    }

    levelStore.on('level_changed',LevelChanged)
    function LevelChanged(levels){

      self.title='Add'
      self.loading = false
      self.levels = levels
      self.update()
    }
    designationStore.on('designations_changed',DesignationsChanged)
    function DesignationsChanged(designations){

      self.title='Add'
      self.loading = false
      self.designations = designations
      self.update()

    }
    employeeTypeStore.on('employeeTypes_changed',EmployeeTypesChanged)
    function EmployeeTypesChanged(employeeTypes){

      self.title='Add'
      self.loading = false
      self.employeeTypes = employeeTypes
      self.update()

    }
    staffStore.on('department_changed',DepartmentChanged)
    function DepartmentChanged(departments){

      self.title='Add'
      self.loading = false
      self.departments = departments
      self.update()

    }

    staffStore.on('read_staff_id_card_changed',ReadIdCardChanged)
    function ReadIdCardChanged(staff_id_card_details,image_type){
      console.log(staff_id_card_details)
      self.staff_id_card_details = []
      self.image_type = image_type['type']
      console.log(self.image_type)
      self.staff_id_card_details = staff_id_card_details
      self.update()
    }

});
riot.tag2('standard', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Standard Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addStandardInput" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column"> <button disabled="{loading}" class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readStandard}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>#</th> <th>Standard</th> <th></th> </tr> </thead> <tbody> <tr each="{d, i in standards}"> <td>{i + 1}</td> <td>{d.standard}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{d.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, d)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{d.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readStandard()
    })

     self.on("unmount", function(){
      standardStore.off('standard_changed', StandardChanged)
    })

    self.readStandard = () => {
      self.loading=true
       standardStore.trigger('read_standard')
    }

     self.add = () => {
      if(!self.refs.addStandardInput.value){
        toastr.info("Please enter standard and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          standardStore.trigger('add_standard', self.refs.addStandardInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          standardStore.trigger('edit_standard', self.refs.addStandardInput.value,
            self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.standards.map(d => {
          d.confirmDelete = false
          d.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.standards.map(d => {
        if(d.standard != e.item.d.standard){
          d.confirmDelete = false
        }else{
          d.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      standardStore.trigger('delete_standard', e.item.d.standard_id)
    }

    self.edit = (d,e) => {
      console.log(d)
      self.title='Update'
      self.refs.addStandardInput.value = d.standard
      console.log(d.standard_id);
      self.edit_id = d.standard_id
    }

    standardStore.on('standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log('standard_changed1')
      console.log(standards)
      self.title='Create'
      self.refs.addStandardInput.value = ''
      self.loading = false
      self.standards = standards
      self.update()
    }

});
riot.tag2('state', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">State Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">State</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addStateInput" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readState}" style="margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>#</th> <th>State</th> <th></th> </tr> </thead> <tbody> <tr each="{d, i in states}"> <td>{i + 1}</td> <td>{d.state}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{d.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, d)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{d.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.update()
      self.readState()
    })

     self.on("unmount", function(){
      stateStore.off('state_changed', StateChanged)
    })

    self.readState = () => {
      self.loading=true
       stateStore.trigger('read_state')
    }

     self.add = () => {
      if(!self.refs.addStateInput.value){
        toastr.info("Please enter state and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          stateStore.trigger('add_state', self.refs.addStateInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          stateStore.trigger('edit_state', self.refs.addStateInput.value,
            self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.levels.map(d => {
          d.confirmDelete = false
          d.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.states.map(d => {
        if(d.state != e.item.d.state){
          d.confirmDelete = false
        }else{
          d.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      stateStore.trigger('delete_state', e.item.d.state)
    }

    self.edit = (d,e) => {
      console.log(d)
      self.title='Update'
      self.refs.addStateInput.value = d.state
      self.edit_id = d.state
    }

    stateStore.on('state_changed',StateChanged)
    function StateChanged(states){
      console.log('state_changed1')
      console.log(states)
      self.title='Create'
      self.refs.addStateInput.value = ''
      self.loading = false
      self.states = states
      self.update()
    }

});
riot.tag2('student-assign-house', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{view==\'student-assign-houses\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">House</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{openHouseModal}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> <button class="button is-warning is-rounded" onclick="{readAssignHouse}" style="margin-left:2px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="slno">SL</th> <th>House</th> <th>Captain</th> <th>Vice-Captain</th> <th>No of Students</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in houses}"> <td>{i+1}</td> <td>{c.house_name}</td> <td>{c.captain_name}</td> <td>{c.vice_captain_name}</td> <td>{c.number_of_students}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, c)}">Edit</a></span> <span><a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> <span><a class="button is-small is-rounded" onclick="{assignStudentsFrom.bind(this, c)}">Students</a></span> <span><a class="button is-small is-rounded" onclick="{openCaptainFrom.bind(this, c)}">Captain</a></span> <span><a class="button is-small is-rounded" onclick="{details.bind(this, c)}">Details</a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <div id="houseModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">{title} House</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role">House</label> <div class="control"> <input class="input" type="text" ref="houseInput"> </div> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-danger" onclick="{add}">{title}</button> <button class="button" id="item-modal-close" onclick="{closeHouseModal}">Cancel</button> </footer> </div> </div> <section class=" is-fluid" show="{view==\'students\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Students Under : {house}</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{backToAssignHouse}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-warning is-rounded ml5" onclick="{refreshStudents}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"><label class="label">Standard</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="standardSelect" onchange="{changeSection}"> <option value="">Select Standard</option> <option each="{classes}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="sectionSelect"> <option value="">Select Section</option> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{refreshStudents}">GO </button> </div> </div> </div> <div class="columns is-multiline is-mobile"> <div class="column"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="slno">Roll</th> <th>Enroll No</th> <th>Free Students</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in freeStudents}"> <td>{c.roll_number}</td> <td>{c.enroll_number}</td> <td>{c.first_name} {c.middle_name} {c.last_name}</td> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'freeSubjectCheckBox\'+c.house_id}" onclick="{selectFreeSubject.bind(this,c)}"> </td> </tr> </tbody> </table> </div> <div class="column is-vertical-center is-narrow has-text-centered is-multiline"> <table> <tr> <td> <button class="button" onclick="{assignStudents}" style="margin-top:20px;">Assign students <span style="margin-left:10px" class="fas fa-angle-double-right"></span> </button> </td> </tr> <tr> <td> <button class="button" onclick="{freeUpStandard}" style="margin-top:20px;"><span style="margin-right:10px;" class="fas fa-angle-double-left"></span> Free up students</button> </td> </tr> </table> </div> <div class="column"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th></th> <th class="slno">Roll No</th> <th>Enroll No</th> <th>Assigned Students</th> </tr> </thead> <tbody> <tr each="{c, i in assignedStudents}"> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'assignedSubjectCheckBox\'+c.house_id}" onclick="{selectAssigndSubject.bind(this,c)}"> </td> <td>{c.roll_number}</td> <td>{c.enroll_number}</td> <td>{c.first_name} {c.middle_name} {c.last_name}</td> </tr> </tbody> </table> </div> </div> </section> <div id="captainModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Captain & Vice-Captain of {house_for_captain}</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role">Captain</label> <div class="control"> <div class="select is-fullwidth"> <select ref="captainSelect"> <option value="">Select Captain</option> <option each="{studentsCaptains}" riot-value="{student_id}">{first_name}{middle_name}{last_name}</option> </select> </div> </div> </div> <div class="field"> <label class="label" for="role">Vice-Captain</label> <div class="control"> <div class="select is-fullwidth"> <select ref="viceCaptainSelect"> <option value="">Select Vice-Captain</option> <option each="{studentsCaptains}" riot-value="{student_id}">{first_name}{middle_name}{last_name}</option> </select> </div> </div> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-danger" onclick="{updateCaptain}">Submit</button> <button class="button" id="item-modal-close" onclick="{closeCaptainForm}">Cancel</button> </footer> </div> </div> <section class="is-fluid" show="{view==\'details\'}"> <div class="level no-print"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">House: {house_for_captain}</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{backToAssignHouse}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <center> <h6 class="title">House: {house_for_captain}</h6> </center> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="slno">SL</th> <th>Enroll No</th> <th>Class</th> <th>Student\'s Name</th> <th>Father\'s Name</th> <th>SMS</th> </tr> </thead> <tbody> <tr each="{c, i in studentsDetails}"> <td>{i+1}</td> <td>{c.enroll_number}</td> <td>{c.standard}</td> <td>{c.name}</td> <td>{c.f_name}</td> <td>{c.mobile}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title = 'Add'
      self.title_exams = 'Add'
      self.view = 'student-assign-houses'
      self.loading = false;
      self.update()
      flatpickr(".date", {
        allowInput: true,
        dateFormat: "d/m/Y",
      })
      self.readAssignHouse()
      self.readClass()
      self.readSection()
    })
    self.on("unmount", function(){
      studentAssignHouseStore.off('house_changed', AssignHouseChanged)
      studentAssignHouseStore.off('add_house_changed',AddAssignHouseChanged)
      studentAssignHouseStore.off('delete_house_changed',DeleteAssignHouseChanged)

      studentAssignHouseStore.off('read_classes_changed',ClassesChanged)
      studentAssignHouseStore.off('read_section_changed',SectionChanged)

      studentAssignHouseStore.off('read_students_changed',ReadStudentsChanged)
      studentAssignHouseStore.off('assign_students_changed',AssignStandardChanged)

      studentAssignHouseStore.off('read_student_by_house_changed',ReadStudentsByHouseChanged)
      studentAssignHouseStore.off('update_house_captain_changed',UpdateHouseCaptainChanged)
      studentAssignHouseStore.off('read_student_by_house_details_changed',ReadStudentsByHouseDetailsChanged)
    })

    self.readClass = () => {
       self.loading = true;
       studentAssignHouseStore.trigger('read_classes')
    }

    self.readSection = () => {
       self.loading = true;
       studentAssignHouseStore.trigger('read_section')
    }

    self.changeSection = () => {
       if(self.refs.standardSelect.value==''){
        toastr.info("Please select standard and try again")
       }else{
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.standardSelect.value
        })
       }
    }

    self.readAssignHouse = () => {
       self.loading = true;
       studentAssignHouseStore.trigger('read_houses')
    }

    self.openHouseModal = () => {
      self.title = 'Add'
      $("#houseModal").addClass("is-active");
    }

    self.closeHouseModal = () => {
      $("#houseModal").removeClass("is-active");
    }

    self.add = () => {
      if(!self.refs.houseInput.value){
        toastr.info("Please enter House and try again")
      }else{
        self.loading = true
        if(self.title=='Add'){
          studentAssignHouseStore.trigger('add_house', self.refs.houseInput.value)
        }else if(self.title=='Update'){
          studentAssignHouseStore.trigger('update_house', self.refs.houseInput.value,self.edit_id)
        }
      }
    }

    self.edit = (c,e) => {
      console.log(c)
      self.title='Update'
      $("#houseModal").addClass("is-active");
      self.refs.houseInput.value = c.house_name
      self.edit_id = c.house_id
    }

    self.cancelOperation = (e) => {
      self.houses.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.houses.map(c => {
        if(c.house_id != e.item.c.house_id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      studentAssignHouseStore.trigger('delete_house', e.item.c.house_id)
    }

    self.assignStudentsFrom = (c) => {
      self.house = c.house_name
      self.house_id = c.house_id
      self.view='students'
    }

    self.refreshStudents = () =>{

      let error = '';

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading = true
        studentAssignHouseStore.trigger('read_students', self.house_id, self.refs.standardSelect.value, self.refs.sectionSelect.value)
      }

    }

    self.selectFreeSubject = (student,e) => {
        self.freeStudents.map(i=>{
          if(student.student_id==i.student_id){
            i.selected=!i.selected
          }
        })
    }

    self.selectAssigndSubject = (student,e) => {
        self.assignedStudents.map(i=>{
          if(student.student_id==i.student_id){
            i.selected=!i.selected
          }
        })
        console.log(self.assignedStudents)
    }

    self.assignStudents = () =>{
      let students_to_assign = self.freeStudents.filter(c=>{
        return c.selected == true
      })
      console.log(self.house_id)
      console.log(students_to_assign)

      if(students_to_assign.length==0){
        toastr.error('Please Select Student To Assign House.')
        return
      }else{
        self.loading = true
        studentAssignHouseStore.trigger('assign_students', self.house_id, students_to_assign)
      }
    }

    self.freeUpStandard = () =>{
      let students_to_free = self.assignedStudents.filter(c=>{
        return c.selected == true
      })

      if(students_to_free.length==0){
        toastr.error('Please select students to free from house .')
        return
      }else{
        self.loading = true
        studentAssignHouseStore.trigger('free_up_student', self.house_id, students_to_free)
      }
    }

    self.backToAssignHouse = () =>{
      self.view='student-assign-houses'
    }

    self.details = (c,e) => {
      self.house_for_captain = c.house_name
      self.view = 'details'
      studentAssignHouseStore.trigger('read_student_by_house_details', c.house_id)
    }

    self.openCaptainFrom = (c,e) => {
      self.house_for_captain = c.house_name
      self.house_id_captain = c.house_id
      self.captain_id = c.captain_id
      self.vice_captain_id = c.vice_captain_id
      studentAssignHouseStore.trigger('read_student_by_house', c.house_id)
    }

    self.closeCaptainForm = () => {
      $("#captainModal").removeClass("is-active");
    }

    self.updateCaptain = () => {

      let error = '';

      if(self.refs.captainSelect.value==''){
        error = error + "Please select Captain, "
      }

      if(self.refs.viceCaptainSelect.value==''){
        error = error + "Please select vice captain, "
      }

      if(self.refs.viceCaptainSelect.value==self.refs.captainSelect.value){
        error = error + "captain and vice captain can't be same, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading = true
        studentAssignHouseStore.trigger('update_house_captain', self.house_id_captain, self.refs.captainSelect.value, self.refs.viceCaptainSelect.value)
      }

    }

    studentAssignHouseStore.on('house_changed',AssignHouseChanged)
    function AssignHouseChanged(houses){
      console.log(houses)
      self.loading = false
      self.houses = []
      self.houses = houses
      self.update()
      console.log(self.houses)
    }

    studentAssignHouseStore.on('add_house_changed',AddAssignHouseChanged)
    function AddAssignHouseChanged(houses){
      self.refs.houseInput.value=''
      self.closeHouseModal()
      self.loading = false
      self.houses = []
      self.houses = houses
      self.update()
      console.log(self.houses)
    }

    studentAssignHouseStore.on('delete_house_changed',DeleteAssignHouseChanged)
    function DeleteAssignHouseChanged(houses){
      self.loading = false
      self.houses = []
      self.houses = houses
      self.update()
      console.log(self.houses)
    }

   studentAssignHouseStore.on('read_classes_changed',ClassesChanged)
    function ClassesChanged(classes){
      self.loading = false
      self.classes = []
      self.classes = classes
      self.update()
      console.log(self.classes)
    }

    studentAssignHouseStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      self.loading = false
      self.sections = []
      self.sections = sections
      self.update()
    }

    studentAssignHouseStore.on('read_students_changed',ReadStudentsChanged)
    function ReadStudentsChanged(freeStudents,assignedStudents){
      self.loading = false
      self.freeStudents = []
      self.freeStudents = freeStudents
      self.freeStudents.map(c => {
          c.selected=false
      })
      console.log(freeStudents)
      self.assignedStudents = []
      self.assignedStudents = assignedStudents
      self.assignedStudents.map(c => {
          c.selected=false
      })
      self.view='students'
      self.update()
    }

    studentAssignHouseStore.on('assign_students_changed',AssignStandardChanged)
    function AssignStandardChanged(students_assigned){
      self.loading = false

      self.refreshStudents()

    }

    studentAssignHouseStore.on('read_student_by_house_changed',ReadStudentsByHouseChanged)
    function ReadStudentsByHouseChanged(students){
      self.loading = false
      self.studentsCaptains = []
      self.studentsCaptains = students
      $("#captainModal").addClass("is-active");
      self.update()
      self.refs.captainSelect.value=self.captain_id
      self.refs.viceCaptainSelect.value=self.vice_captain_id
    }

    studentAssignHouseStore.on('update_house_captain_changed',UpdateHouseCaptainChanged)
    function UpdateHouseCaptainChanged(students){
       $("#captainModal").removeClass("is-active");
       self.readAssignHouse()
    }

    studentAssignHouseStore.on('read_student_by_house_details_changed',ReadStudentsByHouseDetailsChanged)
    function ReadStudentsByHouseDetailsChanged(students){
      self.loading = false
      self.studentsDetails = []
      self.studentsDetails = students
      self.update()
    }

});
riot.tag2('student-assign-section', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Assign Sections</h2> </div> <div class="level-right"> </div> </div> <div class="columns is-multiline is-mobile"> <div class="column"> <div class="box"> <div class="columns"> <div class="column is-narrow"><label class="label">Standard</label></div> <div class="column is-narrow" style="width:150px"> <div class="control"> <div class="select is-fullwidth"> <select ref="standardSelect" id="standard" onchange="{changeSection}"> <option value="">Select Standard</option> <option each="{classes}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column is-narrow" style="width:150px"> <div class="control"> <div class="select is-fullwidth"> <select ref="sectionSelect" id="section"> <option value="">Select Section</option> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{refreshStudents}">GO </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>Roll No</th> <th>Enroll No</th> <th>Student Name</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in freeStudents}"> <td>{c.roll_number}</td> <td>{c.enroll_number}</td> <td>{c.first_name} {c.middle_name} {c.last_name}</td> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'freeSubjectCheckBox\'+c.student_id}" onclick="{selectFreeStudent.bind(this,c)}"> </td> </tr> </tbody> </table> </div> <div class="column is-vertical-center is-narrow has-text-centered is-multiline" style="margin-top:125px;"> <table> <tr> <td> <button class="button" onclick="{assignStudents}" style="margin-top:20px;">Assign section <span style="margin-left:10px" class="fas fa-angle-double-right"></span> </button> </td> </tr> <tr> <td> <button class="button" onclick="{freeUpStudent}" style="margin-top:20px;"><span style="margin-right:10px;" class="fas fa-angle-double-left"></span> Free up section</button> </td> </tr> </table> </div> <div class="column"> <div class="box"> <div class="columns"> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="sectionSelectSecond" id="section" onchange="{refreshStudents}"> <option value="">Select Section</option> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th></th> <th>Roll No</th> <th>Enroll Number</th> <th>Student Name</th> </tr> </thead> <tbody> <tr each="{c, i in assignedStudents}"> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'assignedSubjectCheckBox\'+c.student_id}" onclick="{selectAssigndStudent.bind(this,c)}"> </td> <td>{c.roll_number}</td> <td>{c.enroll_number}</td> <td>{c.first_name} {c.middle_name} {c.last_name}</td> </tr> </tbody> </table> </div> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title = 'Add'
      self.title_exams = 'Add'
      self.view = 'student-assign-sections'
      self.loading = false;
      self.update()

      self.readClass()
      self.readSection()
    })
    self.on("unmount", function(){
      studentAssignSectionStore.off('read_classes_changed',ClassesChanged)
      studentAssignSectionStore.off('read_section_changed',SectionChanged)
      studentAssignSectionStore.off('read_students_changed',ReadSectionsChanged)
      studentAssignSectionStore.off('assign_students_changed',AssignSectionsChanged)
    })

    self.readClass = () => {
       self.loading = true;
       studentAssignSectionStore.trigger('read_classes')
    }

    self.readSection = () => {
       self.loading = true;
       studentAssignSectionStore.trigger('read_section')
    }

    self.changeSection = () => {
       if(self.refs.standardSelect.value==''){
        toastr.info("Please select standard and try again")
       }else{
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.standardSelect.value
        })
       }
    }

    self.refreshStudents = () =>{

      let error = '';

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section of student, "
      }

      if(self.refs.sectionSelectSecond.value==''){
        error = error + "Please select section to transfer, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading = true
        studentAssignSectionStore.trigger('read_students', self.refs.standardSelect.value, self.refs.sectionSelect.value, self.refs.sectionSelectSecond.value)
      }

    }

    self.selectFreeStudent = (student,e) => {
        self.freeStudents.map(i=>{
          if(student.student_id==i.student_id){
            i.selected=!i.selected
          }
        })
    }

    self.selectAssigndStudent = (student,e) => {
        self.assignedStudents.map(i=>{
          if(student.student_id==i.student_id){
            i.selected=!i.selected
          }
        })
        console.log(self.assignedStudents)
    }

    self.assignStudents = () =>{
      let subjects_to_assign = self.freeStudents.filter(c=>{
        return c.selected == true
      })
      console.log(subjects_to_assign)

      if(subjects_to_assign.length==0){
        toastr.error('Please select student to assign.')
        return
      }else{
        self.loading = true
        studentAssignSectionStore.trigger('assign_students', self.refs.sectionSelectSecond.value, subjects_to_assign)
      }
    }

    self.freeUpStudent = () =>{
      let subjects_to_free = self.assignedStudents.filter(c=>{
        return c.selected == true
      })

      if(subjects_to_free.length==0){
        toastr.error('Please select student to free .')
        return
      }else{
        self.loading = true
        studentAssignSectionStore.trigger('free_up_students', self.refs.sectionSelect.value, subjects_to_free)
      }
    }

    studentAssignSectionStore.on('read_classes_changed',ClassesChanged)
    function ClassesChanged(classes){
      self.loading = false
      self.classes = []
      self.classes = classes
      self.update()
      console.log(self.classes)
    }

    studentAssignSectionStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      self.loading = false
      self.sections = []
      self.sections = sections
      self.update()
    }

    studentAssignSectionStore.on('read_students_changed',ReadSectionsChanged)
    function ReadSectionsChanged(freeStudents,assignedStudents){
      self.loading = false
      self.freeStudents = []
      self.freeStudents = freeStudents
      self.freeStudents.map(c => {
          c.selected=false
      })
      console.log(freeStudents)
      self.assignedStudents = []
      self.assignedStudents = assignedStudents
      self.assignedStudents.map(c => {
          c.selected=false
      })
      self.update()
    }

    studentAssignSectionStore.on('assign_students_changed',AssignSectionsChanged)
    function AssignSectionsChanged(subjects_assigned){
      self.loading = false

      self.refreshStudents()

    }

});
riot.tag2('student-assign-subject', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Assign Subjects</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"><label class="label">Standard</label></div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="standardSelect" id="standard"> <option value="">Select Standard</option> <option each="{classes}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{refreshSubjects}">GO </button> </div> </div> </div> <div class="columns is-multiline is-mobile"> <div class="column"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>Free Subjects</th> <th>Subjects Short Name</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in freeSubjects}"> <td>{c.subject_name}</td> <td>{c.subject_short_name}</td> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'freeSubjectCheckBox\'+c.subject_id}" onclick="{selectFreeSubject.bind(this,c)}"> </td> </tr> </tbody> </table> </div> <div class="column is-vertical-center is-narrow has-text-centered is-multiline"> <table> <tr> <td> <button class="button" onclick="{assignSubjects}" style="margin-top:20px;">Assign subjects <span style="margin-left:10px" class="fas fa-angle-double-right"></span> </button> </td> </tr> <tr> <td> <button class="button" onclick="{freeUpSubject}" style="margin-top:20px;"><span style="margin-right:10px;" class="fas fa-angle-double-left"></span> Free up subjects</button> </td> </tr> </table> </div> <div class="column"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th></th> <th>Assigned Subjects</th> <th>Subjects Short Name</th> </tr> </thead> <tbody> <tr each="{c, i in assignedSubjects}"> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'assignedSubjectCheckBox\'+c.id}" onclick="{selectAssigndSubject.bind(this,c)}"> </td> <td>{c.subject_name}</td> <td>{c.subject_short_name}</td> </tr> </tbody> </table> </div> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title = 'Add'
      self.title_exams = 'Add'
      self.view = 'student-assign-subjects'
      self.loading = false;
      self.update()

      self.readClass()
    })
    self.on("unmount", function(){
      studentAssignSubjectStore.off('read_classes_changed',ClassesChanged)
      studentAssignSubjectStore.off('read_subjects_changed',ReadSubjectsChanged)
      studentAssignSubjectStore.off('assign_subjects_changed',AssignSubjectsChanged)
    })

    self.readClass = () => {
       self.loading = true;
       studentAssignSubjectStore.trigger('read_classes')
    }

    self.refreshSubjects = () =>{

      let error = '';

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading = true
        studentAssignSubjectStore.trigger('read_subjects', self.refs.standardSelect.value)
      }

    }

    self.selectFreeSubject = (subject,e) => {
        self.freeSubjects.map(i=>{
          if(subject.subject_id==i.subject_id){
            i.selected=!i.selected
          }
        })
    }

    self.selectAssigndSubject = (subject,e) => {
        self.assignedSubjects.map(i=>{
          if(subject.id==i.id){
            i.selected=!i.selected
          }
        })
        console.log(self.assignedSubjects)
    }

    self.assignSubjects = () =>{
      let subjects_to_assign = self.freeSubjects.filter(c=>{
        return c.selected == true
      })
      console.log(subjects_to_assign)

      if(subjects_to_assign.length==0){
        toastr.error('Please select subject to assign.')
        return
      }else{
        self.loading = true
        studentAssignSubjectStore.trigger('assign_subjects', self.refs.standardSelect.value, subjects_to_assign)
      }
    }

    self.freeUpSubject = () =>{
      let subjects_to_free = self.assignedSubjects.filter(c=>{
        return c.selected == true
      })

      if(subjects_to_free.length==0){
        toastr.error('Please select subjects to free .')
        return
      }else{
        self.loading = true
        studentAssignSubjectStore.trigger('free_up_subject', self.refs.standardSelect.value, subjects_to_free)
      }
    }

    studentAssignSubjectStore.on('read_classes_changed',ClassesChanged)
    function ClassesChanged(classes){
      self.loading = false
      self.classes = []
      self.classes = classes
      self.update()
      console.log(self.classes)
    }

    studentAssignSubjectStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      self.loading = false
      self.sections = []
      self.sections = sections
      self.update()
    }

    studentAssignSubjectStore.on('read_subjects_changed',ReadSubjectsChanged)
    function ReadSubjectsChanged(freeSubjects,assignedSubjects){
      self.loading = false
      self.freeSubjects = []
      self.freeSubjects = freeSubjects
      self.freeSubjects.map(c => {
          c.selected=false
      })
      console.log(freeSubjects)
      self.assignedSubjects = []
      self.assignedSubjects = assignedSubjects
      self.assignedSubjects.map(c => {
          c.selected=false
      })
      self.view='subjects'
      self.update()
    }

    studentAssignSubjectStore.on('assign_subjects_changed',AssignSubjectsChanged)
    function AssignSubjectsChanged(subjects_assigned){
      self.loading = false

      self.refreshSubjects()

    }

});
riot.tag2('student-blood-group-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h4 class="title has-text-centered" style="color: #ff3860;">Class Wise Blood Group ({session_name})</h4> <div class="box no-print"> <div class="columns"> <div class=" column"> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i></span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readStudentBloodGroupListingReport}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th>Standard</th> <th>A+</th> <th>A-</th> <th>AB+</th> <th>AB-</th> <th>B+</th> <th>B-</th> <th>O+</th> <th>O-</th> </tr> </thead> <tbody> <tr each="{st, i in studentBloodGroupListingReports}" if="{st.standard!=\'Total\'}"> <td>{i+1}</td> <td>{st.standard}</td> <td>{st[\'A+\']}</td> <td>{st[\'A-\']}</td> <td>{st[\'AB+\']}</td> <td>{st[\'AB-\']}</td> <td>{st[\'B+\']}</td> <td>{st[\'B-\']}</td> <td>{st[\'O+\']}</td> <td>{st[\'O-\']}</td> </tr> <tr> <td colspan="2" class="has-text-centered" style="font-size:18px">Total</td> <td style="font-size:18px">{total_A_plus}</td> <td style="font-size:18px">{total_A_min}</td> <td style="font-size:18px">{total_AB_plus}</td> <td style="font-size:18px">{total_AB_min}</td> <td style="font-size:18px">{total_B_plus}</td> <td style="font-size:18px">{total_B_min}</td> <td style="font-size:18px">{total_O_plus}</td> <td style="font-size:18px">{total_O_min}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.role = getCookie('role')
    	self.readStudentBloodGroupListingReport()
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
      adminReportStore.off('read_student_blood_group_listing_report_changed',ReadStudentBloodGroupListingReportChanged)
    })

    self.readStudentBloodGroupListingReport = () => {
    	self.loading=true
       adminReportStore.trigger('read_student_blood_group_listing_report')
    }

    adminReportStore.on('read_student_blood_group_listing_report_changed',ReadStudentBloodGroupListingReportChanged)
    function ReadStudentBloodGroupListingReportChanged(studentBloodGroupListingReports,session_name){

      self.title='Create'
      self.loading = false
      self.session_name = session_name
      self.studentBloodGroupListingReports = studentBloodGroupListingReports

      self.total_A_plus=0
      self.total_A_min=0
      self.total_AB_plus=0
      self.total_AB_min=0
      self.total_B_plus=0
      self.total_B_min=0
      self.total_O_plus=0
      self.total_O_min=0
      self.studentBloodGroupListingReports.map(c => {
      if(c['A+']!=undefined){
       		self.total_A_plus= Number(self.total_A_plus) + Number(c['A+'])
        }
        if(c['A-']!=undefined){
          self.total_A_min= self.total_A_min + c['A-']
        }

        if(c['AB+']!=undefined){
       	  self.total_AB_plus= self.total_AB_plus + c['AB+']
        }
        if(c['AB-']!=undefined){
            self.total_AB_min= self.total_AB_min + c['AB-']
        }

        if(c['B+']!=undefined){
       	   self.total_B_plus= self.total_B_plus + c['B+']
        }
        if(c['B-']!=undefined){
            self.total_B_min= self.total_B_min + c['B-']
        }

        if(c['O+']!=undefined){
       	    self.total_O_plus= self.total_O_plus + c['O+']
        }
        if(c['O-']!=undefined){
            self.total_O_min= self.total_O_min + c['O-']
        }

      })

      self.update()

    }

});
riot.tag2('student-browser', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h4 class="title has-text-centered" style="color: #ff3860;">Students Details <span class="printOnly_t"><br> Session: <span style="color:#000">{session_name}</span></span></h4> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" onchange="{getReadSection}" onkeyup="{addEnter}"> <option each="{standards}" riot-value="{standard_id}">{standard} </option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Section</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="section_id" onkeyup="{addEnter}"> <option each="{readfilteredSections}" riot-value="{section_id}">{section} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readStudentBrowserData}">GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print" style="margin-left:5px"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning has-text-weight-bold is-pulled-right" onclick="{showStudentField}">Setting </button> </div> </div> </div> <div style="height:450px; overflow-x: scroll; overflow-y:scroll ;border:solid #000 3px;"> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th show="{roll_no_view ==\'show_roll_no\'}">Roll No</th> <th show="{enroll_no_view ==\'show_enroll_no\'}">Enroll No</th> <th show="{student_view ==\'show_student\'}">Student Name</th> <th show="{class_view ==\'show_class\'}">Class</th> <th show="{group_view ==\'show_group\'}">Group</th> <th show="{house_view ==\'show_house\'}">House</th> <th show="{reg_no_view ==\'show_reg_no\'}">Reg. No</th> <th show="{gender_view ==\'show_gender\'}">Gender</th> <th show="{category_view ==\'show_category\'}">Category</th> <th show="{dob_view ==\'show_dob\'}">DOB</th> <th show="{age_view ==\'show_age\'}">Age</th> <th show="{income_view ==\'show_income\'}">Income</th> <th show="{f_annual_income_view ==\'show_f_annual_income\'}">Father\'s AnnualIncome</th> <th show="{doa_view ==\'show_doa\'}">DOA</th> <th show="{old_doa_view ==\'show_old_doa\'}">Old DOA</th> <th show="{old_doj_view ==\'show_old_doj\'}">Old DOJ</th> <th show="{title_view ==\'show_title\'}">Title</th> <th show="{first_name_view ==\'show_first_name\'}">First Name</th> <th show="{middle_name_view ==\'show_middle_name\'}">Middle Name </th> <th show="{last_name_view ==\'show_last_name\'}">Last Name</th> <th show="{withdrawn_view ==\'show_withdrawn\'}">Withdrawn</th> <th show="{doj_view ==\'show_doj\'}">DOJ</th> <th show="{mother_tongue_view ==\'show_mother_tongue\'}">Mother Tongue</th> <th show="{last_school_view ==\'show_last_school\'}">Last School</th> <th show="{last_class_view ==\'show_last_class\'}">Last Class</th> <th show="{admission_for_view ==\'show_admission_for\'}">Admission For</th> <th show="{hobby_view ==\'show_hobby\'}">Hobby</th> <th show="{blood_group_view ==\'show_blood_group\'}">Blood Group</th> <th show="{nationality_view ==\'show_nationality\'}">Nationality</th> <th show="{cast_view ==\'show_cast\'}">Cast</th> <th show="{religion_view ==\'show_religion\'}">Religion</th> <th show="{c_add_view ==\'show_c_add\'}">C Add</th> <th show="{p_add_view ==\'show_p_add\'}">P Add</th> <th show="{sms_view ==\'show_sms\'}">SMS</th> <th show="{residence_phone_view ==\'show_residence_phone\'}">Residence Phone </th> <th show="{fax_view ==\'show_fax\'}">Emergency No.</th> <th show="{student_type_view ==\'show_student_type\'}">Student Type</th> <th show="{staff_child_view ==\'show_staff_child\'}">Staff Child</th> <th show="{staff_name_view ==\'show_staff_name\'}">Staff Name</th> <th show="{student_email_view ==\'show_student_email\'}">Student Email</th> <th show="{f_title_view ==\'show_f_title\'}">Father Title</th> <th show="{f_name_view ==\'show_f_name\'}">Father\'s Name</th> <th show="{f_school_name_view ==\'show_f_school_name\'}">Father\'s School Name</th> <th show="{f_school_exam__view ==\'show_f_school_exam_\'}">Father\'s School Exam</th> <th show="{f_college_name_view ==\'show_f_college_name\'}">Father\'s College Name</th> <th show="{f_college_exam_view ==\'show_f_college_exam\'}">Father\'s College Exam</th> <th show="{f_occupation_view ==\'show_f_occupation\'}">Father\'s Occupation</th> <th show="{f_add_view ==\'show_f_add\'}">Father\'s Address</th> <th show="{f_phone_view ==\'show_f_phone\'}">Father\'s Phone</th> <th show="{f_mobile_view ==\'show_f_mobile\'}">Father\'s Mobile</th> <th show="{f_email_view ==\'show_f_email\'}">Father\'s Email</th> <th show="{f_organisation_type_view ==\'show_f_organisation_type\'}">Father\'s Organisation Type</th> <th show="{f_organisation_view ==\'show_f_organisation\'}">Father\'s Organisation</th> <th show="{f_designation_view ==\'show_f_designation\'}">Father\'s Designation</th> <th show="{f_department_view ==\'show_f_department\'}">Father\'s Department</th> <th show="{f_office_add_view ==\'show_f_office_add\'}">Father\'s Office Add</th> <th show="{f_office_phone_view ==\'show_f_office_phone\'}">Father\'s Office Phone</th> <th show="{f_nationality_view ==\'show_f_nationality\'}">Father\'s Nationality</th> <th show="{m_title_view ==\'show_m_title\'}">Mother Title</th> <th show="{m_name_view ==\'show_m_name\'}">Mother\'s Name</th> <th show="{m_school_exam_view ==\'show_m_school_exam\'}">Mother\'s School Name</th> <th show="{m_exam_exam_view ==\'show_m_exam_exam\'}">Mother\'s School Exam</th> <th show="{m_college_exam_view ==\'show_m_college_exam\'}">Mother\'s College Name</th> <th show="{m_college_name_view ==\'show_m_college_name\'}">Mother\'s College Exam</th> <th show="{m_occupation_view ==\'show_m_occupation\'}">Mother\'s Occupation</th> <th show="{m_add_view ==\'show_m_add\'}">Mother\'s Address</th> <th show="{m_phone_view ==\'show_m_phone\'}">Mother\'s Phone</th> <th show="{m-mobile_view ==\'show_m-mobile\'}">Mother\'s Mobile</th> <th show="{m_email_view ==\'show_m_email\'}">Mother\'s Email</th> <th show="{m_organisation_view ==\'show_m_organisation\'}">Mother\'s Organisation</th> <th show="{m_annual_income_view ==\'show_m_annual_income\'}">Mother\'s AnnualIncome</th> <th show="{m_designation_view ==\'show_m_designation\'}">Mother\'s Designation</th> <th show="{m_department_view ==\'show_m_department\'}">Mother\'s Department</th> <th show="{m_office_add_view ==\'show_m_office_add\'}">Mother\'s Office Add</th> <th show="{m_office_phone_view ==\'show_m_office_phone\'}">Mother\'s Office Phone</th> <th show="{m_nationality_view ==\'show_m_nationality\'}">Mother\'s Nationality</th> <th show="{g_name_view ==\'show_g_name\'}">Guardian\'s Name</th> <th show="{g_school_name_view ==\'show_g_school_name\'}">Guardian\'s School Name</th> <th show="{g_school_exam_view ==\'show_g_school_exam\'}">Guardian\'s School Exam</th> <th show="{g_college_name_view ==\'show_g_college_name\'}">Guardian\'s College Name</th> <th show="{g-college_exam_view ==\'show_g-college_exam\'}">Guardian\'s College Exam</th> <th show="{g_occupation_view ==\'show_g_occupation\'}">Guardian\'s Occupation</th> <th show="{g_add_view ==\'show_g_add\'}">Guardian\'s Address</th> <th show="{g_phone_view ==\'show_g_phone\'}">Guardian\'s Phone</th> <th show="{g_mobile_view ==\'show_g_mobile\'}">Guardian\'s Mobile</th> <th show="{g_email_view ==\'show_g_email\'}">Guardian\'s Email</th> <th show="{g_organisation_view ==\'show_g_organisation\'}">Guardian\'s Organisation</th> <th show="{g_annual_income_view ==\'show_g_annual_income\'}">Guardian\'s AnnualIncome</th> <th show="{g_designation_view ==\'show_g_designation\'}">Guardian\'s Designation</th> <th show="{g_department_view ==\'show_g_department\'}">Guardian\'s Department</th> <th show="{g_office_add_view ==\'show_g_office_add\'}">Guardian\'s Office Add</th> <th show="{g_office_phone_view ==\'show_g_office_phone\'}">Guardian\'s Office Phone</th> <th show="{g_nationality_view ==\'show_g_nationality\'}">Guardian\'s Nationality</th> <th show="{g_relation_view ==\'show_g_relation\'}">Guardian\'s Relation</th> <th show="{sibling_name_view ==\'show_sibling_name\'}">Sibling Name</th> <th show="{sibling_enroll_no_view ==\'show_sibling_enroll_no\'}">Sibling Enroll No</th> </tr> </thead> <tbody> <tr each="{st, i in browseStudents}"> <td>{i+1}</td> <td show="{roll_no_view ==\'show_roll_no\'}">{st.roll_number}</td> <td show="{enroll_no_view ==\'show_enroll_no\'}">{st.enroll_number}</td> <td show="{student_view ==\'show_student\'}">{st.first_name} {st.middle_name} {st.last_name}</td> <td show="{class_view ==\'show_class\'}">{st.standard}</td> <td show="{group_view ==\'show_group\'}">{st.group_name}</td> <td show="{house_view ==\'show_house\'}">{st.house_name}</td> <td show="{reg_no_view ==\'show_reg_no\'}">{st.reg_number}</td> <td show="{gender_view ==\'show_gender\'}">{st.gender}</td> <td show="{category_view ==\'show_category\'}">{st.category_name}</td> <td show="{age_view ==\'show_dob\'}">{st.dob}</td> <td show="{dob_view ==\'show_age\'}">{st.age}</td> <td show="{income_view ==\'income_age\'}">{st.f_annual_income}</td> <td show="{f_annual_income_view ==\'show_f_annual_income\'}">{st.f_annual_income}</td> <td show="{doa_view ==\'show_doa\'}">{st.doa}</td> <td show="{title_view ==\'show_title\'}">{st.title}</td> <td show="{first_name_view ==\'show_first_name\'}">{st.first_name}</td> <td show="{middle_name_view ==\'show_middle_name\'}">{st.middle_name}</td> <td show="{last_name_view ==\'show_last_name\'}">{st.last_name}</td> <td show="{withdrawn_view ==\'show_withdrawn\'}">{st.withdrawn}</td> <td show="{doj_view ==\'show_doj\'}">{st.doj}</td> <td show="{mother_tongue_view ==\'show_mother_tongue\'}">{st.mother_tongue}</td> <td show="{last_school_view ==\'show_last_school\'}">{st.last_school}</td> <td show="{last_class_view ==\'show_last_class\'}">{st.last_class}</td> <td show="{admission_for_view ==\'show_admission_for\'}">{st.admission_for_class}</td> <td show="{hobby_view ==\'show_hobby\'}">{st.hobby}</td> <td show="{blood_group_view ==\'show_blood_group\'}">{st.blood_group}</td> <td show="{nationality_view ==\'show_nationality\'}">{st.nationality}</td> <td show="{cast_view ==\'show_cast\'}">{st.cast}</td> <td show="{religion_view ==\'show_religion\'}">{st.religion}</td> <td show="{c_add_view ==\'show_c_add\'}">{st.c_add_l1} {st.c_add_l2} <br> {st.c_city}-{st.c_zip} <br>{st.c_state}, {st.c_country}</td> <td show="{p_add_view ==\'show_p_add\'}">{st.p_add_l1} {st.p_add_l2} <br> {st.p_city}-{st.p_zip} <br>{st.p_state}, {st.p_country}</td> <td show="{mobile_view ==\'show_mobile\'}">{st.mobile}</td> <td show="{residence_phone_view ==\'show_residence_phone\'}">{st.residence_phone}</td> <td show="{fax_view ==\'show_fax\'}">{st.fax}</td> <td show="{student_type_view ==\'show_student_type\'}">{st.student_type}</td> <td show="{staff_child_view ==\'show_staff_child\'}">{st.staff_child}</td> <td show="{staff_name_view ==\'show_staff_name\'}">{st.staff_name}</td> <td show="{email_view ==\'show_email\'}">{st.email}</td> <td show="{f_title_view ==\'show_f_title\'}">{st.f_title}</td> <td show="{f_name_view ==\'show_f_name\'}">{st.f_name}</td> <td show="{f_school_name_view ==\'show_f_school_name\'}">{st.f_school_name}</td> <td show="{f_school_exam_view ==\'show_f_school_exam\'}">{st.f_school_exam_passed}</td> <td show="{f_college_name_view ==\'show_f_college_name\'}">{st.f_college_name}</td> <td show="{f_college_exam ==\'show_f_college_exam\'}">{st.f_college_exam_passed}</td> <td show="{occupation_view ==\'show_occupation\'}">{f_occupation}</td> <td show="{f_add_view ==\'show_f_add\'}">{st.f_add_l1} {st.f_add_l2} <br> {st.f_city}-{st.f_zip} <br>{st.f_state}, {st.f_country}</td> <td show="{f_phone_view ==\'show_f_phone\'}">{st.f_phone}</td> <td show="{f_mobile_view ==\'show_f_mobile\'}">{st.f_mobile}</td> <td show="{f_fax_view ==\'show_f_fax\'}">{st.f_fax}</td> <td show="{f_email_view ==\'show_f_email\'}">{st.f_email}</td> <td show="{f_organisation_type_view ==\'show_f_organisation_type\'}">{st.f_organisation_type}</td> <td show="{f_organisation_view ==\'show_f_organisation\'}">{st.f_organisation_name}</td> <td show="{f_designation_view ==\'show_f_designation\'}">{st.f_designation}</td> <td show="{f_department_view ==\'show_f_department\'}">{st.f_department}</td> <td show="{f_office_add_view ==\'show_f_office_add\'}">{st.f_office_add_l1} {st.f_office_add_l2} <br> {st.f_office_city}-{st.f_office_zip} <br>{st.f_office_state}, {st.f_office_country}</td> <td show="{f_office_phone_view ==\'show_f_office_phone\'}">{st.f_office_phone}</td> <td show="{f_nationality_view ==\'show_f_nationality\'}">{st.f_nationality}</td> <td show="{m_title_view ==\'show_itle\'}">{st.m_title}</td> <td show="{m_name_view ==\'show_m_name\'}">{st.m_name}</td> <td show="{m_school_name_view ==\'show_m_school_name\'}">{st.m_school_name}</td> <td show="{m_school_exam_view ==\'show_chool_exam\'}">{st.m_school_exam_passed}</td> <td show="{m_college_name_view ==\'show_m_college_name\'}">{st.m_college_name}</td> <td show="{m_college_exam_view ==\'show_m_college_exam\'}">{st.m_college_exam_passed}</td> <td show="{occupation_view ==\'show_occupation\'}">{m_occupation}</td> <td show="{m_add_view ==\'show_m_add\'}">{st.m_add_l1} {st.m_add_l2} <br> {st.m_city}-{st.m_zip} <br>{st.m_state}, {st.m_country}</td> <td show="{m_phone_view ==\'show_m_phone\'}">{st.m_phone}</td> <td show="{m_mobile_view ==\'show_m_mobile\'}">{st.m_mobile}</td> <td show="{m_fax_view ==\'show_m_fax\'}">{st.m_fax}</td> <td show="{m_email_view ==\'show_m_email\'}">{st.m_email}</td> <td show="{m_organisation_view ==\'show_m_organisation\'}">{st.m_organisation_name}</td> <td show="{m_annual_income_view ==\'show_m_annual_income\'}">{st.m_annual_income}</td> <td show="{m_designation_view ==\'show_m_designation\'}">{st.m_designation}</td> <td show="{m_department_view ==\'show_m_department\'}">{st.m_department}</td> <td show="{m_office_add_view ==\'show_m_office_add\'}">{st.m_office_add_l1} {st.m_office_add_l2} <br> {st.m_office_city}-{st.m_office_zip} <br>{st.m_office_state}, {st.m_office_country}</td> <td show="{m_office_phone_view ==\'show_m_office_phone\'}">{st.m_office_phone}</td> <td show="{m_nationality_view ==\'show_m_nationality\'}">{st.m_nationality}</td> <td show="{g_title_view ==\'show_g_title\'}">{st.g_title}</td> <td show="{g_name_view ==\'show_g_name\'}">{st.g_name}</td> <td show="{g_school_name_view ==\'show_g_school_name\'}">{st.g_school_name}</td> <td show="{g_school_exam_view ==\'show_g_school_exam\'}">{st.g_school_exag_passed}</td> <td show="{g_college_name_view ==\'show_g_college_name\'}">{st.g_college_name}</td> <td show="{g_college_exam_view ==\'show_g_college_exam\'}">{st.g_college_exag_passed}</td> <td show="{occupation_view ==\'show_occupation\'}">{g_occupation}</td> <td show="{g_add_view ==\'show_g_add\'}">{st.g_add_l1} {st.g_add_l2} <br> {st.g_city}-{st.g_zip} <br>{st.g_state}, {st.g_country}</td> <td show="{g_phone_view ==\'show_g_phone\'}">{st.g_phone}</td> <td show="{g_mobile_view ==\'show_g_mobile\'}">{st.g_mobile}</td> <td show="{g_fax_view ==\'show_g_fax\'}">{st.g_fax}</td> <td show="{g_email_view ==\'show_g_email\'}">{st.g_email}</td> <td show="{g_organisation_view ==\'show_g_organisation\'}">{st.g_organisation_name}</td> <td show="{g_annual_income_view ==\'show_g_annual_income\'}">{st.g_annual_income}</td> <td show="{g_designation_view ==\'show_g_designation\'}">{st.g_designation}</td> <td show="{g_department_view ==\'show_g_department\'}">{st.g_department}</td> <td show="{g_office_add_view ==\'show_g_office_add\'}">{st.g_office_add_l1} {st.g_office_add_l2} <br> {st.g_office_city}-{st.g_office_zip} <br>{st.g_office_state}, {st.g_office_country}</td> <td show="{g_office_phone_view ==\'show_g_office_phone\'}">{st.g_office_phone}</td> <td show="{g_nationality_view ==\'show_g_nationality\'}">{st.g_nationality}</td> <td show="{g_relation_view ==\'show_g_relation\'}">{st.g_relation}</td> <td show="{sibling_name_view ==\'show_sibling_name\'}">{st.sibling_name}</td> <td show="{sibling_enroll_no_view ==\'show_sibling_enroll_no\'}">{st.sibling_enroll_number}</td> </tr> </tbody> </table> </div> </section> <section> <div id="columnSetting" class="modal"> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Setting Configuaration</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="field"> <div class="control" each="{st, i in fieldList}"> <input class="checkbox" type="checkbox" checked="{st.done}" id="{\'addStudentName\' + st.array_name}" onclick="{addCheckedColumn.bind(this,st)}">{st.field_name} </div> </div> </div> </div> </section> <footer class="modal-card-foot"> <div class="control"> <input type="checkbox" id="checkAllCheckBox" onclick="{selectAllCheckBox}"> All </div> <button class="button" id="item-modal-close" onclick="{closeCheckBoxModal}">Close</button> </footer> </div> </div> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	    	self.fieldList =[
			{ field_name : "Group", array_name : "Group"},
			{ field_name : "House", array_name : "House"},
			{ field_name : "Title", array_name : "Title"},
			{ field_name : "FirstName", array_name : "First Name"},
			{ field_name : "MiddleName", array_name : "Middle Name"},
			{ field_name : "LastName", array_name : "Last Name"},
			{ field_name : "FullName" , array_name : "Full Name"},
			{ field_name : "Standard" , array_name : "Class"},
			{ field_name : "Enroll" , array_name : "Enroll No"},
			{ field_name : "Roll" , array_name : "Roll No"},
			{ field_name : "Registration", array_name : "Registration No"},
			{ field_name : "Gender", array_name : "Gender"},
			{ field_name : "Category", array_name : "Category"},
			{ field_name : "DOB", array_name : "DOB"},
			{ field_name : "Age", array_name : "Age as on 1st Apr"},
			{ field_name : "Income", array_name : "Income"},
			{ field_name : "DOA", array_name : "DOA"},
			{ field_name : "DOj", array_name : "DOJ"},
			{ field_name : "Old DOA", array_name : "Old DOA"},
			{ field_name : "Old DOJ", array_name : "Old DOJ"},
			{ field_name : "MotherTongue", array_name : "Mother Tongue"},
			{ field_name : "LastSchool", array_name : "Last School"},
			{ field_name : "LastClass", array_name : "Last Class"},
			{ field_name : "AdmissionforClass", array_name : "Admission for Class"},
			{ field_name : "Hobby", array_name : "Hobby"},
			{ field_name : "BloodGroup", array_name : "Blood Group"},
			{ field_name : "Nationality", array_name : "Nationality"},
			{ field_name : "Cast", array_name : "Cast"},
			{ field_name : "Religion", array_name : "Religion"},
			{ field_name : "c_Address", array_name : "Correspondence Address"},
			{ field_name : "p_Address", array_name : "Permanent Address"},
			{ field_name : "Mobile" , array_name : "SMS"},
			{ field_name : "ResidencePhone", array_name : "Residence Phone"},
			{ field_name : "Emergency No.", array_name : "Emergency No."},
			{ field_name : "StudentType", array_name : "Student Type"},
			{ field_name : "StaffChild", array_name : "Staff Child"},
			{ field_name : "StaffName", array_name : "Staff Name"},
			{ field_name : "stdEmail" , array_name : "Student Email"},
			{ field_name : "f_Title", array_name : "Father Title"},
			{ field_name : "f_Name" , array_name :"Father Name"},
			{ field_name : "f_School" , array_name :"f_School Name"},
			{ field_name : "f_School_Exam" , array_name :"f_School Exam"},
			{ field_name : "f_College" , array_name :"f_College Name"},
			{ field_name : "f_College_Exam" , array_name :"f_College Exam"},
			{ field_name : "f_Occupation" , array_name :"f_Occupation"},
			{ field_name : "f_Address" , array_name :"f_Address"},
			{ field_name : "f_Phone" , array_name :"f_Phone"},
			{ field_name : "f_Mobile" , array_name :"f_Mobile"},
			{ field_name : "f_Fax" , array_name :"f_Fax"},
			{ field_name : "f_Email" , array_name :"f_Email"},
			{ field_name : "f_OrganisationType" , array_name :"f_Organisation Type"},
			{ field_name : "f_AnnualIncom" , array_name :"f_Annual Income"},
			{ field_name : "f_OrganisationName" , array_name :"f_Organisation Name"},
			{ field_name : "f_Designation" , array_name :"f_Designation"},
			{ field_name : "f_Department" , array_name :"f_Department"},
			{ field_name : "f_OfficeAddess" , array_name :"f_Office Address"},
			{ field_name : "f_OfficePhone" , array_name :"f_Office Phone"},
			{ field_name : "f_Nationality" , array_name :"f_Nationality"},

			{ field_name : "m_Title" , array_name :"Mother Title"},
			{ field_name : "m_Name" , array_name :"Mother Name"},
			{ field_name : "m_School" , array_name :"m_School Name"},
			{ field_name : "m_School_Exam" , array_name :"m_School Exam"},
			{ field_name : "m_College" , array_name :"m_College Name"},
			{ field_name : "m_College_Exam" , array_name :"m_College Exam"},
			{ field_name : "m_Occupation" , array_name :"m_Occupation"},
			{ field_name : "m_Address" , array_name :"m_Address"},
			{ field_name : "m_Phone" , array_name :"m_Phone"},
			{ field_name : "m_Mobile" , array_name :"m_Mobile"},
			{ field_name : "m_Fax" , array_name :"m_Fax"},
			{ field_name : "m_Email" , array_name :"m_Email"},
			{ field_name : "m_OrganisationType" , array_name :"m_Organisation Type"},
			{ field_name : "m_AnnualIncom" , array_name :"m_Annual Income"},
			{ field_name : "m_OrganisationName" , array_name :"m_Organisation Name"},
			{ field_name : "m_Designation" , array_name :"m_Designation"},
			{ field_name : "m_Department" , array_name :"m_Department"},
			{ field_name : "m_OfficeAddess" , array_name :"m_Office Address"},
			{ field_name : "m_OfficePhone" , array_name :"m_Office Phone"},
			{ field_name : "m_Nationality" , array_name :"m_Nationality"},
			{ field_name : "g_Title" , array_name :"Guardian Title"},
			{ field_name : "g_Name" , array_name :"Guardian Name"},
			{ field_name : "g_School" , array_name :"g_School Name"},
			{ field_name : "g_School_Exam" , array_name :"g_School Exam"},
			{ field_name : "g_College" , array_name :"g_College Name"},
			{ field_name : "g_College_Exam" , array_name :"g_College Exam"},
			{ field_name : "g_Occupation" , array_name :"g_Occupation"},
			{ field_name : "g_Address" , array_name :"g_Address"},
			{ field_name : "g_Phone" , array_name :"g_Phone"},
			{ field_name : "g_Mobile" , array_name :"g_Mobile"},
			{ field_name : "g_Fax" , array_name :"g_Fax"},
			{ field_name : "g_Email" , array_name :"g_Email"},
			{ field_name : "g_OrganisationType" , array_name :"g_Organisation Type"},
			{ field_name : "g_AnnualIncom" , array_name :"g_Annual Income"},
			{ field_name : "g_OrganisationName" , array_name :"g_Organisation Name"},
			{ field_name : "g_Designation" , array_name :"g_Designation"},
			{ field_name : "g_Department" , array_name :"g_Department"},
			{ field_name : "g_OfficeAddess" , array_name :"g_Office Address"},
			{ field_name : "g_OfficePhone" , array_name :"g_Office Phone"},
			{ field_name : "g_Nationality" , array_name :"g_Nationality"},
			{ field_name : "g_relation" , array_name :"g_relation" },
			{ field_name : "sibling_Name" , array_name :"Sibling Name"},
			{ field_name : "siblingEnrollNumber" , array_name :"Sibling Enrol Number"}

			  ];
    	self.sms_no_view ='show_sms_no'
		self.f_name_view ='show_f_name'
		self.m_name_view ='show_m_name'
		self.student_view ='show_student'

		self.enroll_no_view ='show_enroll_no'

		self.roll_no_view ='show_roll_no'
		self.class_view ='show_class'

    	self.readStandard()
    	self.readSection()
    	self.role = getCookie('role')
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
      studentStore.off('read_standard_changed',StandardChanged)
      studentStore.off('read_section_changed',SectionChanged)
      studentSearchStore.off('read_student_browser_change',ReadStudentBrowserChanged)
    })

	self.readStandard = () => {
       studentStore.trigger('read_standard')
    }

    self.readSection = () => {
       studentStore.trigger('read_section')
    }

    self.getReadSection = () => {
    	self.readfilteredSections = []
    	self.readfilteredSections = self.sections.filter(s => {
    		return s.standard_id == self.refs.standard_id.value
    	})
    	self.update()
    }
     self.addEnter = (e) => {
    	console.log("inside enter")
      if(e.which == 13){
        self.readStudentBrowserData()
      }
    }
    self.readStudentBrowserData = () => {
    	self.loading=true
       studentSearchStore.trigger('read_student_browser',self.refs.standard_id.value,self.refs.section_id.value)
    }

   studentStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()
    }

    studentStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections
      self.update()
      self.getReadSection()
    }
    studentSearchStore.on('read_student_browser_change',ReadStudentBrowserChanged)
    function ReadStudentBrowserChanged(browseStudents,session_name){

      self.title='Create'
      self.loading = false
      self.browseStudents = browseStudents
      self.session_name=session_name
      self.update()

    }
    self.closeCheckBoxModal=()=>{
    	 $("#columnSetting").removeClass("is-active");

    }
    self.selectAllCheckBox = () => {
    	console.log("checkAlll")
      if($('#checkAllCheckBox').is(":checked")){
        self.fieldList.map(i=>{
        	console.log(i)
          i.done = true;
          $('addStudentName'+i.array_name).prop('checked', true);
        })
      }else{
        self.fieldList.map(i=>{
          i.done = false;
          $('addStudentName'+i.array_name).prop('checked', false);
        })
      }
      	var item=''
      	var event=''
       self.addCheckedColumn(item,event)
    }

     self.addCheckedColumn = (item, event) => {
     	console.log(item)
     	if(item!=''){
    	 item.done=!event.item.st.done
     	}

        self.fieldList.map( q => {
        	console.log(q.field_name)
        	let a={}
	        if(q.done==true && q.array_name=="Group"){
	           self.group_view='show_group'
            }

			if(q.done==true && q.array_name=="House"){
				self.house_view='show_house'
			}
			if(q.done==true && q.array_name=="Title"){
				self.title_view='show_title'
			}

			if(q.done==true && q.array_name== "First Name"){
					self.first_name_view='show_first_name'
			}
			if(q.done==true && q.array_name=="Middle Name"){
					self.middle_name_view='show_middle_name'
			}
			if(q.done==true && q.array_name== "Last Name"){
					self.last_name_view='show_last_name'
			}
			if(q.done==true && q.array_name=="Full Name"){
					self.student_view='show_student'
			}

			if(q.done==true && q.array_name=="Class"){
					self.class_view='show_class'
			}
			if(q.done==true && q.array_name=="Enroll No"){
					self.enroll_no_view='show_enroll_no'
			}

			if(q.done==true && q.array_name=="Roll No"){
					self.roll_no_view='show_roll_no'
			}
			if(q.done==true && q.array_name=="Registration No"){
				self.reg_no_view='show_reg_no'
			}
			if(q.done==true && q.array_name=="Gender"){
					self.gender_view='show_gender'
			}

			if(q.done==true && q.array_name=="Category"){
					self.category_view='show_category'
			}
			if(q.done==true && q.array_name=="DOB"){
					self.dob_view='show_dob'
			}
			if(q.done==true && q.array_name=="Age as on 1st Apr"){
					self.age_view='show_age'
			}
			if(q.done==true && q.array_name=="Income"){
					self.income_view='show_income'
			}
			if(q.done==true && q.array_name=="DOA"){
					self.doa_view='show_doa'
			}
			if(q.done==true && q.array_name=="DOJ"){
					self.doj_view='show_doj'
			}
			if(q.done==true && q.array_name=="Old DOA"){
					self.old_doa_view='show_old_doa'
			}
			if(q.done==true && q.array_name=="Old DOJ"){
					self.old_doj_view='show_old_doj'
			}
			if(q.done==true && q.array_name=="Mother Tongue"){
					self.mother_tongue_view='show_mother_tongue'
			}
			if(q.done==true && q.array_name=="Last School"){
					self.last_school_view='show_last_school'
			}
			if(q.done==true && q.array_name=="Last Class"){
					self.last_class_view='show_last_class'
			}
			if(q.done==true && q.array_name=="Admission for Class"){
					self.admission_for_view='show_admission_for'
			}
			if(q.done==true && q.array_name=="Hobby"){
					self.hobby_view='show_hobby'
			}
			if(q.done==true && q.array_name=="Blood Group"){
					self.blood_group_view='show_blood_group'
			}
			if(q.done==true && q.array_name=="Nationality"){
					self.nationality_view='show_nationality'
			}
			if(q.done==true && q.array_name=="Cast"){
					self.cast_view='show_cast'
			}
			if(q.done==true && q.array_name=="Religion"){
					self.religion_view='show_religion'
			}
			if(q.done==true && q.array_name=="Correspondence Address"){
					self.c_add_view='show_c_add'
			}
			if(q.done==true && q.array_name=="Permanent Address"){
					self.p_add_view='show_p_add'
			}
			if(q.done==true && q.array_name=="SMS"){
					self.sms_no_view='show_sms_no'
			}
			if(q.done==true && q.array_name=="Residence Phone"){
					self.residence_phone_view='show_residence_phone'
			}
			if(q.done==true && q.array_name=="Fax"){
					self.fax_view='show_fax'
			}
			if(q.done==true && q.array_name=="Student Type"){
					self.student_type_view='show_student_type'
			}
			if(q.done==true && q.array_name=="Staff Child"){
					self.staff_child_view='show_staff_child'
			}
			if(q.done==true && q.array_name=="Staff Name"){
					self.staff_name_view='show_staff_name'
			}
			if(q.done==true && q.array_name=="Student Email"){
					self.student_email_view='show_student_email'
			}
			if(q.done==true && q.array_name=="Father Title"){
					self.f_title_view='show_f_title'
			}
			if(q.done==true && q.array_name=="Father Name"){
					self.f_name_view='show_f_name'
			}
			if(q.done==true && q.array_name=="f_School Name"){
					self.f_school_name_view='show_f_school_name'
			}
			if(q.done==true && q.array_name=="f_School Exam"){
					self.f_school_exam_view='show_f_school_exam'
			}
			if(q.done==true && q.array_name=="f_College Name"){
					self.f_college_name_view='show_f_college_name'
			}
			if(q.done==true && q.array_name=="f_College Exam"){
					self.f_college_exam_view='show_f_college_exam'
			}
			if(q.done==true && q.array_name=="f_Occupation"){
					self.f_occupation_view='show_f_occupation'
			}
			if(q.done==true && q.array_name=="f_Address"){
					self.f_add_view='show_f_add'
			}
			if(q.done==true && q.array_name=="f_Phone"){
					self.f_phone_view='show_f_phone'
			}
			if(q.done==true && q.array_name=="f_Mobile"){
					self.f_mobile_view='show_f_mobile'
			}
			if(q.done==true && q.array_name=="f_Fax"){
					self.f_fax_view='show_f_fax'
			}
			if(q.done==true && q.array_name=="f_Email"){
					self.f_email_view='show_f_email'
			}
			if(q.done==true && q.array_name=="f_Organisation Type"){
					self.f_organisation_type_view='show_f_organisation_type'
			}
			if(q.done==true && q.array_name=="f_Annual Income"){
					self.f_annual_income_view='show_f_annual_income'
			}
			if(q.done==true && q.array_name=="f_Organisation Name"){
					self.f_organisation_view='show_f_organisation'
			}
			if(q.done==true && q.array_name=="f_Designation"){
					self.f_designation_view='show_f_designation'
			}
			if(q.done==true && q.array_name=="f_Department"){
					self.f_department_view='show_f_department'
			}
			if(q.done==true && q.array_name=="f_Office Address"){
					self.f_office_add_view='show_f_office_add'
			}
			if(q.done==true && q.array_name=="f_Office Phone"){
					self.f_office_phone_view='show_f_office_phone'
			}
			if(q.done==true && q.array_name=="f_Nationality"){
					self.f_nationality_view='show_f_nationality'
			}

			if(q.done==true && q.array_name=="Mother Title"){
					self.m_title_view='show_m_title'
			}
			if(q.done==true && q.array_name=="Mother Name"){
					self.m_name_view='show_m_name'
			}
			if(q.done==true && q.array_name=="m_School Name"){
					self.m_school_name_view='show_m_school_name'
			}
			if(q.done==true && q.array_name=="m_School Exam"){
					self.m_school_exam_view='show_m_school_exam'
			}
			if(q.done==true && q.array_name=="m_College Name"){
					self.m_college_name_view='show_m_college_name'
			}
			if(q.done==true && q.array_name=="m_College Exam"){
					self.m_college_exam_view='show_m_college_exam'
			}
			if(q.done==true && q.array_name=="m_Occupation"){
					self.m_occupation_view='show_m_occupation'
			}
			if(q.done==true && q.array_name=="m_Address"){
					self.m_add_view='show_m_add'
			}
			if(q.done==true && q.array_name=="m_Phone"){
					self.m_phone_view='show_m_phone'
			}
			if(q.done==true && q.array_name=="m_Mobile"){
					self.m_mobile_view='show_m_mobile'
			}
			if(q.done==true && q.array_name=="m_Fax"){
					self.m_fax_view='show_m_fax'
			}
			if(q.done==true && q.array_name=="m_Email"){
					self.m_email_view='show_m_email'
			}
			if(q.done==true && q.array_name=="m_Organisation Type"){
					self.m_organisation_view='show_m_organisation'
			}
			if(q.done==true && q.array_name=="m_Annual Income"){
					self.m_annual_income_view='show_m_annual_income'
			}
			if(q.done==true && q.array_name=="m_Organisation Name"){
					self.m_organisation_view='show_m_organisation'
			}
			if(q.done==true && q.array_name=="m_Designation"){
					self.m_designation_view='show_m_designation'
			}
			if(q.done==true && q.array_name=="m_Department"){
					self.m_department_view='show_m_department'
			}
			if(q.done==true && q.array_name=="m_Office Address"){
					self.m_office_add_view='show_m_office_add'
			}
			if(q.done==true && q.array_name=="m_Office Phone"){
					self.m_office_phone_view='show_m_office_phone'
			}
			if(q.done==true && q.array_name=="m_Nationality"){
					self.m_nationality_view='show_m_nationality'
			}

			if(q.done==true && q.array_name=="Guardian Title"){
					self.g_title_view='show_g_title'
			}
			if(q.done==true && q.array_name=="Guardian Name"){
					self.g_name_view='show_g_name'
			}
			if(q.done==true && q.array_name=="g_School Name"){
					self.g_school_name_view='show_g_school_name'
			}
			if(q.done==true && q.array_name=="g_School Exam"){
					self.g_school_exag_view='show_g_school_exam'
			}
			if(q.done==true && q.array_name=="g_College Name"){
					self.g_college_name_view='show_g_college_name'
			}
			if(q.done==true && q.array_name=="g_College Exam"){
					self.g_college_exag_view='show_g_college_exam'
			}
			if(q.done==true && q.array_name=="g_Occupation"){
					self.g_occupation_view='show_g_occupation'
			}
			if(q.done==true && q.array_name=="g_Address"){
					self.g_add_view='show_g_add'
			}
			if(q.done==true && q.array_name=="g_Phone"){
					self.g_phone_view='show_g_phone'
			}
			if(q.done==true && q.array_name=="g_Mobile"){
					self.g_mobile_view='show_g_mobile'
			}
			if(q.done==true && q.array_name=="g_Fax"){
					self.g_fax_view='show_g_fax'
			}
			if(q.done==true && q.array_name=="g_Email"){
					self.g_email_view='show_g_email'
			}
			if(q.done==true && q.array_name=="g_Organisation Type"){
					self.g_organisation_view='show_g_organisation'
			}
			if(q.done==true && q.array_name=="g_Annual Income"){
					self.g_annual_income_view='show_g_annual_income'
			}
			if(q.done==true && q.array_name=="g_Organisation Name"){
					self.g_organisation_view='show_g_organisation'
			}
			if(q.done==true && q.array_name=="g_Designation"){
					self.g_designation_view='show_g_designation'
			}
			if(q.done==true && q.array_name=="g_Department"){
					self.g_department_view='show_g_department'
			}
			if(q.done==true && q.array_name=="g_Office Address"){
					self.g_office_add_view='show_g_office_add'
			}
			if(q.done==true && q.array_name=="g_Office Phone"){
					self.g_office_phone_view='show_g_office_phone'
			}
			if(q.done==true && q.array_name=="g_Nationality"){
					self.g_nationality_view='show_g_nationality'
			}

			if(q.done==true && q.array_name=="g_relation"){
				self.g_relation_view='show_g_relation'
			}
			if(q.done==true && q.array_name=="Sibling Name"){
				self.sibling_name_view='show_sibling_name'
			}
			if(q.done==true && q.array_name=="Sibling Enrol Number"){
				self.sibling_enroll_no_view='show_sibling_enroll_no'
			}

		    if(q.done==false && q.array_name=="Group"){
	           self.title_view=''
            }

			if(q.done==false && q.array_name=="House"){
				self.house_view=''
			}
			if(q.done==false && q.array_name=="Title"){
				self.title_view=''
			}

			if(q.done==false && q.array_name== "First Name"){
					self.first_name_view=''
			}
			if(q.done==false && q.array_name=="Middle Name"){
					self.middle_name_view=''
			}
			if(q.done==false && q.array_name== "Last Name"){
					self.last_name_view=''
			}
			if(q.done==false && q.array_name=="Full Name"){
					self.student_view=''
			}

			if(q.done==false && q.array_name=="Class"){
					self.class_view=''
			}
			if(q.done==false && q.array_name=="Enroll No"){
					self.enroll_no_view=''
			}

			if(q.done==false && q.array_name=="Roll No"){
					self.roll_no_view=''
			}
			if(q.done==false && q.array_name=="Registration No"){
				self.reg_no_view=''
			}
			if(q.done==false && q.array_name=="Gender"){
					self.gender_view=''
			}

			if(q.done==false && q.array_name=="Category"){
					self.category_view=''
			}
			if(q.done==false && q.array_name=="DOB"){
					self.dob_view=''
			}
			if(q.done==false && q.array_name=="Age as on 1st Apr"){
					self.age_view=''
			}
			if(q.done==false && q.array_name=="Income"){
					self.annual_income_view=''
			}
			if(q.done==false && q.array_name=="DOA"){
					self.doa_view=''
			}
			if(q.done==false && q.array_name=="DOJ"){
					self.doj_view=''
			}
			if(q.done==false && q.array_name=="Old DOA"){
					self.old_doa_view=''
			}
			if(q.done==false && q.array_name=="Old DOJ"){
					self.old_doj_view=''
			}
			if(q.done==false && q.array_name=="Mother Tongue"){
					self.mother_tongue_view=''
			}
			if(q.done==false && q.array_name=="Last School"){
					self.last_school_view=''
			}
			if(q.done==false && q.array_name=="Last Class"){
					self.last_class_view=''
			}
			if(q.done==false && q.array_name=="Admission for Class"){
					self.admission_for_view=''
			}
			if(q.done==false && q.array_name=="Hobby"){
					self.hobby_view=''
			}
			if(q.done==false && q.array_name=="Blood Group"){
					self.blood_group_view=''
			}
			if(q.done==false && q.array_name=="Nationality"){
					self.nationality_view=''
			}
			if(q.done==false && q.array_name=="Cast"){
					self.cast_view=''
			}
			if(q.done==false && q.array_name=="Religion"){
					self.religion_view=''
			}
			if(q.done==false && q.array_name=="Correspondence Address"){
					self.c_add_view=''
			}
			if(q.done==false && q.array_name=="Permanent Address"){
					self.p_add_view=''
			}
			if(q.done==false && q.array_name=="SMS"){
					self.sms_no_view=''
			}
			if(q.done==false && q.array_name=="Residence Phone"){
					self.residence_phone_view=''
			}
			if(q.done==false && q.array_name=="Fax"){
					self.fax_view=''
			}
			if(q.done==false && q.array_name=="Student Type"){
					self.student_type_view=''
			}
			if(q.done==false && q.array_name=="Staff Child"){
					self.staff_child_view=''
			}
			if(q.done==false && q.array_name=="Staff Name"){
					self.staff_name_view=''
			}
			if(q.done==false && q.array_name=="Student Email"){
					self.student_email_view=''
			}
			if(q.done==false && q.array_name=="Father Title"){
					self.f_title_view=''
			}
			if(q.done==false && q.array_name=="Father Name"){
					self.f_name_view=''
			}
			if(q.done==false && q.array_name=="f_School Name"){
					self.f_school_name_view=''
			}
			if(q.done==false && q.array_name=="f_School Exam"){
					self.f_school_exam_view=''
			}
			if(q.done==false && q.array_name=="f_College Name"){
					self.f_college_name_view=''
			}
			if(q.done==false && q.array_name=="f_College Exam"){
					self.f_college_exam_view=''
			}
			if(q.done==false && q.array_name=="f_Occupation"){
					self.f_occupation_view=''
			}
			if(q.done==false && q.array_name=="f_Address"){
					self.f_add_view=''
			}
			if(q.done==false && q.array_name=="f_Phone"){
					self.f_phone_view=''
			}
			if(q.done==false && q.array_name=="f_Mobile"){
					self.f_mobile_view=''
			}
			if(q.done==false && q.array_name=="f_Fax"){
					self.f_fax_view=''
			}
			if(q.done==false && q.array_name=="f_Email"){
					self.f_email_view=''
			}

			if(q.done==false && q.array_name=="f_Organisation Type"){
					self.f_organisation_type_view=''
			}
			if(q.done==false && q.array_name=="f_Annual Income"){
					self.f_annual_income_view=''
			}
			if(q.done==false && q.array_name=="f_Organisation Name"){
					self.f_organisation_view=''
			}
			if(q.done==false && q.array_name=="f_Designation"){
					self.f_designation_view=''
			}
			if(q.done==false && q.array_name=="f_Department"){
					self.f_department_view=''
			}
			if(q.done==false && q.array_name=="f_Office Address"){
					self.f_office_add_view=''
			}
			if(q.done==false && q.array_name=="f_Office Phone"){
					self.f_office_phone_view=''
			}
			if(q.done==false && q.array_name=="f_Nationality"){
					self.f_nationality_view=''
			}

			if(q.done==false && q.array_name=="Mother Title"){
					self.m_title_view=''
			}
			if(q.done==false && q.array_name=="Mother Name"){
					self.m_name_view=''
			}
			if(q.done==false && q.array_name=="m_School Name"){
					self.m_school_name_view=''
			}
			if(q.done==false && q.array_name=="m_School Exam"){
					self.m_school_exam_view=''
			}
			if(q.done==false && q.array_name=="m_College Name"){
					self.m_college_name_view=''
			}
			if(q.done==false && q.array_name=="m_College Exam"){
					self.m_college_exam_view=''
			}
			if(q.done==false && q.array_name=="m_Occupation"){
					self.m_occupation_view=''
			}
			if(q.done==false && q.array_name=="m_Address"){
					self.m_add_view=''
			}
			if(q.done==false && q.array_name=="m_Phone"){
					self.m_phone_view=''
			}
			if(q.done==false && q.array_name=="m_Mobile"){
					self.m_mobile_view=''
			}
			if(q.done==false && q.array_name=="m_Fax"){
					self.m_fax_view=''
			}
			if(q.done==false && q.array_name=="m_Email"){
					self.m_email_view=''
			}
			if(q.done==false && q.array_name=="m_Organisation Type"){
					self.m_organisation_view=''
			}
			if(q.done==false && q.array_name=="m_Annual Income"){
					self.m_annual_income_view=''
			}
			if(q.done==false && q.array_name=="m_Organisation Name"){
					self.m_organisation_view=''
			}
			if(q.done==false && q.array_name=="m_Designation"){
					self.m_designation_view=''
			}
			if(q.done==false && q.array_name=="m_Department"){
					self.m_department_view=''
			}
			if(q.done==false && q.array_name=="m_Office Address"){
					self.m_office_add_view=''
			}
			if(q.done==false && q.array_name=="m_Office Phone"){
					self.m_office_phone_view=''
			}
			if(q.done==false && q.array_name=="m_Nationality"){
					self.m_nationality_view=''
			}

			if(q.done==false && q.array_name=="Guardian Title"){
					self.g_title_view=''
			}
			if(q.done==false && q.array_name=="Guardian Name"){
					self.g_name_view=''
			}
			if(q.done==false && q.array_name=="g_School Name"){
					self.g_school_name_view=''
			}
			if(q.done==false && q.array_name=="g_School Exam"){
					self.g_school_exag_view=''
			}
			if(q.done==false && q.array_name=="g_College Name"){
					self.g_college_name_view=''
			}
			if(q.done==false && q.array_name=="g_College Exam"){
					self.g_college_exag_view=''
			}
			if(q.done==false && q.array_name=="g_Occupation"){
					self.g_occupation_view=''
			}
			if(q.done==false && q.array_name=="g_Address"){
					self.g_add_view=''
			}
			if(q.done==false && q.array_name=="g_Phone"){
					self.g_phone_view=''
			}
			if(q.done==false && q.array_name=="g_Mobile"){
					self.g_mobile_view=''
			}
			if(q.done==false && q.array_name=="g_Fax"){
					self.g_fax_view=''
			}
			if(q.done==false && q.array_name=="g_Email"){
					self.g_email_view=''
			}
			if(q.done==false && q.array_name=="g_Organisation Type"){
					self.g_organisation_view=''
			}
			if(q.done==false && q.array_name=="g_Annual Income"){
					self.g_annual_income_view=''
			}
			if(q.done==false && q.array_name=="g_Organisation Name"){
					self.g_organisation_view=''
			}
			if(q.done==false && q.array_name=="g_Designation"){
					self.g_designation_view=''
			}
			if(q.done==false && q.array_name=="g_Department"){
					self.department_view=''
			}
			if(q.done==false && q.array_name=="g_Office Address"){
					self.g_office_add_view=''
			}
			if(q.done==false && q.array_name=="g_Office Phone"){
					self.g_office_phone_view=''
			}
			if(q.done==false && q.array_name=="g_Nationality"){
					self.g_nationality_view=''
			}

			if(q.done==false && q.array_name=="g_relation"){

			}
			if(q.done==false && q.array_name=="Sibling Name"){
				self.sibling_view=''
			}
			if(q.done==false && q.array_name=="Sibling Enrol Number"){
				self.sibling_enroll_no_view=''
			}

        })
    }

    self.showStudentField = () =>{
       $("#columnSetting").addClass("is-active")

    }

});
riot.tag2('student-category-strength-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h4 class="title has-text-centered " style="color: #ff3860;">Student Category : {category_name} ({session_name})</h4> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="category_id" onchange="{readStudentCategoryStrengthReport}"> <option each="{categories}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class=" column"> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i></span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readStudentCategoryStrengthReport}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th>Enroll</th> <th>Name</th> <th>Class</th> <th>Sms</th> </tr> </thead> <tbody> <tr each="{st, i in studentCategoryStrengthReports}"> <td>{i+1}</td> <td>{st.enroll_number}</td> <td>{st.name}</td> <td>{st.standard}</td> <td>{st.sms}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.role = getCookie('role')
    	self.readCategory()
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
      adminReportStore.off('read_student_category_strength_report_changed',ReadStudentCategoryStrengthReportChanged)
       categoryStore.off('categories_changed', CategoriesChanged)
    })
    self.readCategory = () => {
       categoryStore.trigger('read_categories')
    }

    self.readStudentCategoryStrengthReport = () => {
    	self.loading=true
       adminReportStore.trigger('read_student_category_strength_report',self.refs.category_id.value)
    }

    categoryStore.on('categories_changed',CategoriesChanged)
    function CategoriesChanged(categories){
      console.log(categories)
      self.loading = false
      self.categories = categories
      self.update()
      self.readStudentCategoryStrengthReport()
      console.log(self.categories)
    }

    adminReportStore.on('read_student_category_strength_report_changed',ReadStudentCategoryStrengthReportChanged)
    function ReadStudentCategoryStrengthReportChanged(studentCategoryStrengthReports,session_name){

      self.title='Create'
      self.loading = false
      self.studentCategoryStrengthReports = studentCategoryStrengthReports
      self.category_name = studentCategoryStrengthReports[0].category_name
      self.session_name = session_name
      self.update()

    }

});
riot.tag2('student-category-summary-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h4 class="title has-text-centered" style="color: #ff3860;">Class Wise Cast Category Strength({session_name}) </h4> <div class="box no-print"> <div class="columns"> <div class=" column"> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i></span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readStudentCategorySummaryReport}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th>Standard</th> <th>General</th> <th>ST</th> <th>SC</th> <th>OBC</th> </tr> </thead> <tbody> <tr each="{st, i in studentCategorySummaryReports}"> <td>{i+1}</td> <td>{st.standard}</td> <td>{st.General}</td> <td>{st.ST}</td> <td>{st.SC}</td> <td>{st.OBC}</td> </tr> <tr><th colspan="2">Total</th> <th>{totalGeneral}</th> <th>{totalST}</th> <th>{totalSC}</th> <th>{totalOBC}</th> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.role = getCookie('role')
    	self.readCategory()
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
      adminReportStore.off('read_student_category_summary_report_changed',ReadStudentCategorySummaryReportChanged)
       categoryStore.off('categories_changed', CategoriesChanged)
    })

     self.readCategory = () => {
       categoryStore.trigger('read_categories')
    }

    self.readStudentCategorySummaryReport = () => {
    	self.loading=true
       adminReportStore.trigger('read_student_category_summary_report', self.categories)
    }

    categoryStore.on('categories_changed',CategoriesChanged)
    function CategoriesChanged(categories){
      console.log(categories)
      self.title='Create'
      self.loading = false
      self.categories = categories
      self.update()
     self.readStudentCategorySummaryReport()
      console.log(self.categories)
    }

    adminReportStore.on('read_student_category_summary_report_changed',ReadStudentCategorySummaryReportChanged)
    function ReadStudentCategorySummaryReportChanged(studentCategorySummaryReports,session_name){

      self.title='Create'
      self.loading = false
      self.session_name=session_name
      self.studentCategorySummaryReports = studentCategorySummaryReports
      self.totalGeneral=0;
      self.totalST=0;
      self.totalOBC=0;
      self.totalSC=0;
      self.studentCategorySummaryReports.map(c => {
      	console.log("c.General");
      	console.log(c.General);
	      	if(c.General!=undefined){
	          self.totalGeneral=Number(self.totalGeneral) + Number(c.General)
	        }
           if(c.OBC!=undefined){
            self.totalOBC=Number(self.totalOBC) + Number(c.OBC)
          }
          if(c.ST!=undefined){
              self.totalST=Number(self.totalST) + Number(c.ST)
   			}
            if(c.SC!=undefined){
              self.totalSC=Number(self.totalSC) + Number(c.SC)
   			 }
      })
      self.update()

    }

});
riot.tag2('student-class-teacher-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h4 class="title has-text-centered" style="color: #ff3860;">Class Teacher Listing <br> Session : ({session_name})</h4> <div class="box no-print"> <div class="columns"> <div class=" column"> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i></span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readClassTeaherReport}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th>Class</th> <th>Section</th> <th>Teacher</th> </tr> </thead> <tbody> <tr each="{st, i in studentClassTeacherReports}"> <td>{i+1}</td> <td>{st.standard}</td> <td>{st.section}</td> <td>{st.teacher_name}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.readClassTeaherReport()
    	self.role = getCookie('role')
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){

      adminReportStore.off('read_class_teacher_report_change',ReadClassTeacherReportChanged)
    })

    self.readClassTeaherReport = () => {
    	self.loading=true
       adminReportStore.trigger('read_class_teacher_report')
    }

    adminReportStore.on('read_class_teacher_report_change',ReadClassTeacherReportChanged)
    function ReadClassTeacherReportChanged(studentClassTeacherReports,session_name){

      self.title='Create'
      self.loading = false
      self.session_name = session_name
      self.studentClassTeacherReports = studentClassTeacherReports
      self.update()

    }

});
riot.tag2('student-group-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h4 class="title has-text-centered" style="color: #ff3860;">Student Group Report <br> Grand Total ({grand_total})</h4> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" onchange="{getReadSection}" onkeyup="{addEnter}"> <option>Choose Standard</option> <option value="-1">All</option> <option each="{standards}" riot-value="{standard_id}">{standard} </option> </select> </div> </div> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="section_id" onkeyup="{addEnter}"> <option>Choose Section</option> <option value="-1">All</option> <option each="{readfilteredSections}" riot-value="{section_id}">{section} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readStudentGroupReport}">GO </button> <input type="checkbox" id="checkTable" checked="{e.done}" onclick="{viewTable}" style="margin-top: 12px;"> Table <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i></span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readStudentGroupReport}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <center> <div id="piechart" style="width: 900px; height: 450px;" show="{report_view ==\'show_graph\'}"></div> </center> <table class="table is-fullwidth is-striped is-hoverable is-narrow printOnly_t" show="{report_view ==\'show_table\'}" style="margin-left:400px"> <thead> <tr> <th>#</th> <th>Student Group</th> <th>Strength</th> </tr> </thead> <tbody> <tr each="{st, i in studentGroupReports}"> <td>{i+1}</td> <td>{st.group_name}</td> <td>{st.total}</td> </tr> <tr> <th colspan="2">Total</th> <th>{grand_total}</th> </tr> </tbody> </table> <table class="table is-fullwidth is-striped is-hoverable is-narrow no-print" show="{report_view ==\'show_table\'}"> <thead> <tr> <th>#</th> <th>Student Group</th> <th>Strength</th> </tr> </thead> <tbody> <tr each="{st, i in studentGroupReports}"> <td>{i+1}</td> <td>{st.group_name}</td> <td>{st.total}</td> </tr> <tr> <th colspan="2">Total</th> <th>{grand_total}</th> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.report_view='show_graph'
    	self.readStandard()
    	self.readSection()
    	self.role = getCookie('role')
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
      studentStore.off('read_standard_changed',StandardChanged)
      studentStore.off('read_section_changed',SectionChanged)
      adminReportStore.off('read_student_group_report_change',ReadStudentGroupReportChanged)
    })

    self.viewTable = () => {
    	if($('#checkTable').is(":checked")){
	        self.report_view = 'show_table'
    	}else{
	        self.report_view = 'show_graph'
    	}
    }

	self.readStandard = () => {
       studentStore.trigger('read_standard')
    }

    self.readSection = () => {
       studentStore.trigger('read_section')
    }

    self.getReadSection = () => {
    	self.readfilteredSections = []
    	self.readfilteredSections = self.sections.filter(s => {
    		return s.standard_id == self.refs.standard_id.value
    	})
    }
     self.addEnter = (e) => {
      if(e.which == 13){
        self.readStudentGroupReport()
      }
    }
    self.readStudentGroupReport = () => {
    	self.loading=true
       adminReportStore.trigger('read_student_group_report',self.refs.standard_id.value,self.refs.section_id.value)
    }

   studentStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()
    }

    studentStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections
      self.update()
      self.getReadSection()
    }
    adminReportStore.on('read_student_group_report_change',ReadStudentGroupReportChanged)
    function ReadStudentGroupReportChanged(studentGroupReports,grandTotal){
       console.log(grandTotal)
      self.title='Create'
      self.loading = false
      self.studentGroupReports = studentGroupReports
      self.grand_total = grandTotal

      var chart_percentage = []
       chart_percentage.push(['Task', 'Hours per Day'])
       for (var i = self.studentGroupReports.length - 1; i >= 0; i--) {
		   chart_percentage.push([self.studentGroupReports[i].group_name,self.studentGroupReports[i].total])
		}

      google.charts.load("current", {packages:["corechart"]});
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {

        var data = google.visualization.arrayToDataTable(chart_percentage);

        var options = {
          is3D: true,
          legend:{position: 'labeled',
                  textStyle: {bold: true} },
          pieSliceText: 'value'
        };

        var chart = new google.visualization.PieChart(document.getElementById('piechart'));
        chart.draw(data, options);
      }

	      self.update()
	      console.log(self.studentGroupReports)

    }

});
riot.tag2('student-group-student', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{view==\'student-group-students\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Group Student</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{openStudentGroupModal}"> <span class="icon"> <span class="fas fa-plus"></span> </span> </button> <button class="button is-warning is-rounded" onclick="{readStudentGroup}" style="margin-left:2px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-warning is-rounded" onclick="{readHiddenGroup}" style="margin-left:2px">Show Hidden Group</button> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"><label class="label">Standard</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="standardSelect" id="standard" onchange="{changeSection}"> <option value="">Select Standard</option> <option each="{classes}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="sectionSelect" id="section"> <option value="">Select Section</option> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readStudentGroup}">GO </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="slno">SL</th> <th>Group</th> <th>Details</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in studentGroups}"> <td>{i+1}</td> <td>{c.group_name}</td> <td>{c.group_detail}</td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, c)}">Edit</a></span> <span><a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> <span><a class="button is-small is-rounded" onclick="{assignStudentsFrom.bind(this, c)}">Students</a></span> <span><a class="button is-small is-rounded" onclick="{assignSubjectsFrom.bind(this, c)}">Subjects</a></span> <span><a class="button is-small is-rounded" onclick="{details.bind(this, c)}">Print Group</a></span> <span><a class="button is-small is-rounded" onclick="{hideGroup.bind(this, c)}">Hide Group</a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <div id="studentGroupModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">{title} Student Group</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role">Student Group</label> <div class="control"> <input class="input" type="text" ref="studentGroupInput"> </div> </div> <div class="field"> <label class="label" for="role">Details</label> <div class="control"> <textarea class="textarea" type="text" rows="2" ref="detailsInput"></textarea> </div> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-danger" onclick="{add}">{title}</button> <button class="button" id="item-modal-close" onclick="{closeStudentGroupModal}">Cancel</button> </footer> </div> </div> <section class=" is-fluid" show="{view==\'students\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Students Under : {class}</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{backToAssignStudentGroup}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-warning is-rounded ml5" onclick="{refreshStudents}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <div class="columns is-multiline is-mobile"> <div class="column"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="slno">Roll</th> <th>Enroll No</th> <th>Free Students</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in freeStudents}"> <td>{c.roll_number}</td> <td>{c.enroll_number}</td> <td>{c.first_name} {c.middle_name} {c.last_name}</td> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'freeStudentCheckBox\'+c.group_id}" onclick="{selectFreeStudent.bind(this,c)}"> </td> </tr> </tbody> </table> </div> <div class="column is-vertical-center is-narrow has-text-centered is-multiline"> <table> <tr> <td> <button class="button" onclick="{assignStudents}" style="margin-top:20px;">Assign students <span style="margin-left:10px" class="fas fa-angle-double-right"></span> </button> </td> </tr> <tr> <td> <button class="button" onclick="{freeUpStandard}" style="margin-top:20px;"><span style="margin-right:10px;" class="fas fa-angle-double-left"></span> Free up students</button> </td> </tr> </table> </div> <div class="column"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th></th> <th class="slno">Roll No</th> <th>Enroll No</th> <th>Assigned Students</th> </tr> </thead> <tbody> <tr each="{c, i in assignedStudents}"> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'assignedStudentCheckBox\'+c.group_id}" onclick="{selectAssigndStudent.bind(this,c)}"> </td> <td>{c.roll_number}</td> <td>{c.enroll_number}</td> <td>{c.first_name} {c.middle_name} {c.last_name}</td> </tr> </tbody> </table> </div> </div> </section> <section class=" is-fluid" show="{view==\'subjects\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Subjects Under : {class}</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{backToAssignStudentGroup}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> <button class="button is-warning is-rounded ml5" onclick="{refreshSubjects}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <div class="columns is-multiline is-mobile"> <div class="column"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>Free Subjects</th> <th>Subjects Short Name</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in freeSubjects}"> <td>{c.subject_name}</td> <td>{c.subject_short_name}</td> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'freeSubjectCheckBox\'+c.subject_id}" onclick="{selectFreeSubject.bind(this,c)}"> </td> </tr> </tbody> </table> </div> <div class="column is-vertical-center is-narrow has-text-centered is-multiline"> <table> <tr> <td> <button class="button" onclick="{assignSubjects}" style="margin-top:20px;">Assign subjects <span style="margin-left:10px" class="fas fa-angle-double-right"></span> </button> </td> </tr> <tr> <td> <button class="button" onclick="{freeUpSubject}" style="margin-top:20px;"><span style="margin-right:10px;" class="fas fa-angle-double-left"></span> Free up subjects</button> </td> </tr> </table> </div> <div class="column"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th></th> <th>Assigned Subject Name</th> <th>Subjects Short Name</th> <th style="width:150px">Order No</th> </tr> </thead> <tbody> <tr each="{c, i in assignedSubjects}"> <td class="has-text-right"> <input type="checkbox" checked="{selected}" id="{\'assignedSubjectCheckBox\'+c.subject_id}" onclick="{selectAssigndSubject.bind(this,c)}"> </td> <td>{c.subject_name}</td> <td>{c.subject_short_name}</td> <td><input type="text" class="input" id="{\'orderInput\'+c.subject_id}" riot-value="{c.order_no}"></td> </tr> </tbody> </table> <div class="level"> <div class="level-left"> </div> <div class="level-right"> <button class="button is-danger ml5" onclick="{saveOrderNumber}">Save Order No</button> <button class="button is-danger ml5" onclick="{openCopyOrderNumberForm}">Copy Order No</button> </div> </div> </div> </div> </section> <div id="copyOrderNumberModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Copy Order Number</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role">Standard</label> <div class="control"> <div class="select is-fullwidth"> <select ref="standardSelectCopyOrderNo" id="standardForCopyOrderNo" disabled> <option each="{classes}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="field"> <label class="label" for="role">Section</label> <div class="control"> <div class="select is-fullwidth"> <select ref="sectionSelectCopyOrderNo" id="sectionForCopyOrderNo" onchange="{readGroups}"> <option value="">Select Section</option> <option each="{tempSectionsForCopyOrderNo}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="field"> <label class="label" for="role">Group</label> <div class="control"> <div class="select is-fullwidth"> <select ref="groupSelect"> <option value="">Select Group</option> <option each="{tempSubjectGroups}" riot-value="{group_id}">{group_name}</option> </select> </div> </div> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-danger" onclick="{copyOrderNumber}">Submit</button> <button class="button" id="item-modal-close" onclick="{closeCopyOrderNumberForm}">Cancel</button> </footer> </div> </div> <section class="is-fluid" show="{view==\'details\'}"> <div class="level no-print"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Group Student</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{backToAssignStudentGroup}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <center> <h6> <strong>Class:</strong> {class} <strong>Group:</strong> {group_details} </h6> </center> <h6><strong>Students List</strong></h6> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="slno">SL</th> <th>Roll</th> <th>Enroll No</th> <th>Name</th> </tr> </thead> <tbody> <tr each="{c, i in studentsDetails}"> <td>{i+1}</td> <td>{c.roll_number}</td> <td>{c.enroll_number}</td> <td>{c.name}</td> </tr> </tbody> </table> <h6><strong>Subjects List</strong></h6> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="slno">SL</th> <th>Subject Name</th> <th>Subject Short Name</th> </tr> </thead> <tbody> <tr each="{c, i in subjectsDetails}"> <td>{i+1}</td> <td>{c.subject_name}</td> <td>{c.subject_short_name}</td> </tr> </tbody> </table> </section> <div id="hiddenGroupModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Hidden Groups</p> </header> <section class="modal-card-body"> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="slno">SL</th> <th>Group</th> <th>Details</th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in hiddenStudentsGroups}"> <td>{i+1}</td> <td>{c.group_name}</td> <td>{c.group_detail}</td> <td class="has-text-right"> <span><a class="button is-small is-rounded is-danger" onclick="{unHideGroup.bind(this, c)}">Un-hide Group</a></span> </td> </tr> </tbody> </table> </section> <footer class="modal-card-foot"> <button class="button" id="item-modal-close" onclick="{closeHiddenGroupModel}">Cancel</button> </footer> </div> </div>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title = 'Add'
      self.title_exams = 'Add'
      self.view = 'student-group-students'
      self.loading = false;
      self.update()

      self.readClass()
      self.readSection()
    })
    self.on("unmount", function(){
      studentStudentGroupStore.off('read_classes_changed',ClassesChanged)
      studentStudentGroupStore.off('read_section_changed',SectionChanged)
      studentStudentGroupStore.off('read_student_groups_changed',readStudentGroupsChanged)
      studentStudentGroupStore.off('add_student_group_changed',AddStudentGroupChanged)
      studentStudentGroupStore.off('delete_student_group_changed',DeleteStudentGroupChanged)

      studentStudentGroupStore.off('read_students_changed',ReadStudentsChanged)
      studentStudentGroupStore.off('assign_students_changed',AssignStandardChanged)

      studentStudentGroupStore.off('read_subjects_changed',ReadSubjectsChanged)
      studentStudentGroupStore.off('assign_subjects_changed',AssignSubjectsChanged)
      studentStudentGroupStore.off('save_order_number_changed',orderNumberChanged)
      studentStudentGroupStore.off('read_subject_groups_for_copy_order_no_changed',ReadSubjectGroupsForCopyOrderNumberChanged)
      studentStudentGroupStore.off('copy_order_number_changed',CopyOrderNumberChanged)

      studentStudentGroupStore.off('read_student_group_details_changed',ReadStudentGroupDetailsChanged)

      studentStudentGroupStore.off('hide_group_changed',HideGroupChanged)
      studentStudentGroupStore.off('read_hidden_groups_changed',ReadHiddenGroupChanged)
      studentStudentGroupStore.off('read_unhide_group_changed',DeleteHiddenGroupChanged)
    })

    self.readClass = () => {
       self.loading = true;
       studentStudentGroupStore.trigger('read_classes')
    }

    self.readSection = () => {
       self.loading = true;
       studentStudentGroupStore.trigger('read_section')
    }

    self.changeSection = () => {
       if(self.refs.standardSelect.value==''){
        toastr.info("Please select standard and try again")
       }else{
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.standardSelect.value
        })
       }
    }

    self.readStudentGroup = () => {
      let error = '';

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading = true
        studentStudentGroupStore.trigger('read_student_groups', self.refs.standardSelect.value, self.refs.sectionSelect.value)
      }

    }

    self.openStudentGroupModal = () => {
      let error = '';

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.title = 'Add'
        $("#studentGroupModal").addClass("is-active");
      }
    }

    self.closeStudentGroupModal = () => {
      $("#studentGroupModal").removeClass("is-active");
    }

    self.add = () => {

      let error = '';

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(!self.refs.studentGroupInput.value){
        toastr.info("Please enter student group and try again")
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        var obj={};
        obj['standard_id']=self.refs.standardSelect.value
        obj['section_id']=self.refs.sectionSelect.value
        obj['group_name']=self.refs.studentGroupInput.value
        obj['group_detail']=self.refs.detailsInput.value

        self.loading = true
        if(self.title=='Add'){
          studentStudentGroupStore.trigger('add_student_group', obj)
        }else if(self.title=='Update'){
          studentStudentGroupStore.trigger('update_student_group', obj, self.edit_id)
        }
      }
    }

    self.edit = (c,e) => {
      console.log(c)
      self.title='Update'
      $("#studentGroupModal").addClass("is-active");
      self.refs.studentGroupInput.value = c.group_name
      self.refs.detailsInput.value = c.group_detail
      self.edit_id = c.group_id
    }

    self.cancelOperation = (e) => {
      self.studentGroups.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.studentGroups.map(c => {
        if(c.group_id != e.item.c.group_id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      studentStudentGroupStore.trigger('delete_student_group', e.item.c.group_id)
    }

    self.assignStudentsFrom = (c) => {
      self.class = $("#standard option:selected").text() + ' ' + $("#section option:selected").text()
      self.group_id = c.group_id

      self.view='students'
      self.refreshStudents()
    }

    self.refreshStudents = () =>{

      let error = '';

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading = true
        studentStudentGroupStore.trigger('read_students', self.group_id, self.refs.standardSelect.value, self.refs.sectionSelect.value)
      }

    }

    self.selectFreeStudent = (student,e) => {
        self.freeStudents.map(i=>{
          if(student.student_id==i.student_id){
            i.selected=!i.selected
          }
        })
    }

    self.selectAssigndStudent = (student,e) => {
        self.assignedStudents.map(i=>{
          if(student.student_id==i.student_id){
            i.selected=!i.selected
          }
        })
        console.log(self.assignedStudents)
    }

    self.assignStudents = () =>{
      let students_to_assign = self.freeStudents.filter(c=>{
        return c.selected == true
      })
      console.log(self.group_id)
      console.log(students_to_assign)

      if(students_to_assign.length==0){
        toastr.error('Please Select Student To Assign Student Group.')
        return
      }else{
        self.loading = true
        studentStudentGroupStore.trigger('assign_students', self.group_id, students_to_assign)
      }
    }

    self.freeUpStandard = () =>{
      let students_to_free = self.assignedStudents.filter(c=>{
        return c.selected == true
      })

      if(students_to_free.length==0){
        toastr.error('Please select students to free from house .')
        return
      }else{
        self.loading = true
        studentStudentGroupStore.trigger('free_up_student', self.group_id, students_to_free)
      }
    }

    self.backToAssignStudentGroup = () =>{
      self.view='student-group-students'
    }

    self.assignSubjectsFrom = (c) => {
      self.class = $("#standard option:selected").text() + ' ' + $("#section option:selected").text()
      self.group_id = c.group_id
      self.view='subjects'
      self.refreshSubjects()
    }

    self.refreshSubjects = () =>{

      let error = '';

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading = true
        studentStudentGroupStore.trigger('read_subjects', self.group_id, self.refs.standardSelect.value, self.refs.sectionSelect.value)
      }

    }

    self.selectFreeSubject = (subject,e) => {
        self.freeSubjects.map(i=>{
          if(subject.subject_id==i.subject_id){
            i.selected=!i.selected
          }
        })
    }

    self.selectAssigndSubject = (subject,e) => {
        self.assignedSubjects.map(i=>{
          if(subject.subject_id==i.subject_id){
            i.selected=!i.selected
          }
        })
        console.log(self.assignedSubjects)
    }

    self.assignSubjects = () =>{
      let subjects_to_assign = self.freeSubjects.filter(c=>{
        return c.selected == true
      })
      console.log(self.group_id)
      console.log(subjects_to_assign)

      if(subjects_to_assign.length==0){
        toastr.error('Please Select subject To Assign subject.')
        return
      }else{
        self.loading = true
        studentStudentGroupStore.trigger('assign_subjects', self.group_id, subjects_to_assign)
      }
    }

    self.freeUpSubject = () =>{
      let subjects_to_free = self.assignedSubjects.filter(c=>{
        return c.selected == true
      })

      if(subjects_to_free.length==0){
        toastr.error('Please select subjects to free from student group .')
        return
      }else{
        self.loading = true
        studentStudentGroupStore.trigger('free_up_subject', self.group_id, subjects_to_free)
      }
    }

    self.saveOrderNumber = () =>{
      self.assignedSubjects.map(c=>{
        var orderInput = '#orderInput'+c.subject_id
        c.order_no = $(orderInput).val()
      })
      console.log(self.assignedSubjects)
      studentStudentGroupStore.trigger('save_order_number', self.group_id, self.assignedSubjects)
    }

    self.changeSectionForCopyOrderNo = (standard_id) => {
      self.tempSectionsForCopyOrderNo = []
      self.tempSectionsForCopyOrderNo = self.sections.filter(s=>{
        return s.standard_id==standard_id
      })
    }

    self.openCopyOrderNumberForm = (c,e) => {
      self.changeSectionForCopyOrderNo(self.refs.standardSelect.value)
      self.refs.standardSelectCopyOrderNo.value = self.refs.standardSelect.value
      $("#copyOrderNumberModal").addClass("is-active");
      console.log(self.tempSectionsForCopyOrderNo)
    }

    self.closeCopyOrderNumberForm = () => {
      $("#copyOrderNumberModal").removeClass("is-active");
    }

    self.readGroups = () => {
      if(self.refs.sectionSelectCopyOrderNo.value == ''){
        toastr.error('Please select section')
      }else{
        studentStudentGroupStore.trigger('read_subject_groups_for_copy_order_no', self.refs.standardSelect.value, self.refs.sectionSelectCopyOrderNo.value)
      }
    }

    self.copyOrderNumber = () => {

      let error = '';

      if(self.refs.sectionSelectCopyOrderNo.value==''){
        error = error + "Please select section, "
      }

      if(self.refs.sectionSelectCopyOrderNo.value==self.refs.sectionSelect.value){
        error = error + "Yor are in the selected section, "
      }

      if(self.refs.groupSelect.value==''){
        error = error + "Please select group, "
      }

      if(self.refs.groupSelect.value==self.group_id){
        error = error + "You are in the selected group, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading = true
        studentStudentGroupStore.trigger('copy_order_number', self.refs.groupSelect.value)
      }

    }

    self.details = (c,e) => {
      self.class = $("#standard option:selected").text() + ' ' + $("#section option:selected").text()
      self.group_details = c.group_name
      self.loading = true
      studentStudentGroupStore.trigger('read_student_group_details', c.group_id)
    }

    self.hideGroup = (c,e) => {
      self.loading = true
      studentStudentGroupStore.trigger('hide_group', c.group_id, self.refs.sectionSelect.value)
    }

    self.readHiddenGroup = () => {
      let error = '';

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading = true
        studentStudentGroupStore.trigger('read_hidden_groups', self.refs.sectionSelect.value)
      }

    }

    self.closeHiddenGroupModel = () => {
      $("#hiddenGroupModal").removeClass("is-active");
    }

    self.unHideGroup = (c,e) => {
      self.loading = true
      studentStudentGroupStore.trigger('unhide_group', c.group_id, self.refs.sectionSelect.value)
    }

    studentStudentGroupStore.on('read_classes_changed',ClassesChanged)
    function ClassesChanged(classes){
      self.loading = false
      self.classes = []
      self.classes = classes
      self.update()
      console.log(self.classes)
    }

    studentStudentGroupStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      self.loading = false
      self.sections = []
      self.sections = sections
      self.update()
    }

    studentStudentGroupStore.on('read_student_groups_changed',readStudentGroupsChanged)
    function readStudentGroupsChanged(studentGroups){
      self.loading = false
      self.studentGroups = []
      self.studentGroups = studentGroups
      self.update()
    }

    studentStudentGroupStore.on('add_student_group_changed',AddStudentGroupChanged)
    function AddStudentGroupChanged(studentGroups){
      self.refs.studentGroupInput.value=''
      self.refs.detailsInput.value=''
      self.closeStudentGroupModal()
      self.loading = false
      self.studentGroups = []
      self.studentGroups = studentGroups
      self.update()
    }

    studentStudentGroupStore.on('delete_student_group_changed',DeleteStudentGroupChanged)
    function DeleteStudentGroupChanged(studentGroups){
      self.loading = false
      self.studentGroups = []
      self.studentGroups = studentGroups
      self.update()
      console.log(self.studentGroups)
    }

    studentStudentGroupStore.on('read_students_changed',ReadStudentsChanged)
    function ReadStudentsChanged(freeStudents,assignedStudents){
      console.log('here in students')
      self.loading = false
      self.freeStudents = []
      self.freeStudents = freeStudents
      self.freeStudents.map(c => {
          c.selected=false
      })
      console.log(freeStudents)
      self.assignedStudents = []
      self.assignedStudents = assignedStudents
      self.assignedStudents.map(c => {
          c.selected=false
      })
      self.view='students'
      self.update()
    }

    studentStudentGroupStore.on('assign_students_changed',AssignStandardChanged)
    function AssignStandardChanged(students_assigned){
      self.loading = false

      self.refreshStudents()

    }

    studentStudentGroupStore.on('read_subjects_changed',ReadSubjectsChanged)
    function ReadSubjectsChanged(freeSubjects,assignedSubjects){
      self.loading = false
      self.freeSubjects = []
      self.freeSubjects = freeSubjects
      self.freeSubjects.map(c => {
          c.selected=false
      })
      console.log(freeSubjects)
      self.assignedSubjects = []
      self.assignedSubjects = assignedSubjects
      self.assignedSubjects.map(c => {
          c.selected=false
      })
      self.view='subjects'
      self.update()
    }

    studentStudentGroupStore.on('assign_subjects_changed',AssignSubjectsChanged)
    function AssignSubjectsChanged(subjects_assigned){
      self.loading = false

      self.refreshSubjects()

    }

    studentStudentGroupStore.on('save_order_number_changed',orderNumberChanged)
    function orderNumberChanged(subjects_assigned){
      self.loading = false
    }

    studentStudentGroupStore.on('read_subject_groups_for_copy_order_no_changed',ReadSubjectGroupsForCopyOrderNumberChanged)
    function ReadSubjectGroupsForCopyOrderNumberChanged(subjects){
       self.tempSubjectGroups = []
       self.tempSubjectGroups = subjects
       self.update()
    }

    studentStudentGroupStore.on('copy_order_number_changed',CopyOrderNumberChanged)
    function CopyOrderNumberChanged(subjects){
      self.loading = false
      console.log(subjects)
       self.assignedSubjects.map(s=>{
        subjects.map(o=>{
          if(s.subject_id==o.subject_id){
            s.order_no=o.order_no
          }
        })
       })
       self.closeCopyOrderNumberForm()
       console.log(self.assignedSubjects)
       self.update()
    }

    studentStudentGroupStore.on('read_student_group_details_changed',ReadStudentGroupDetailsChanged)
    function ReadStudentGroupDetailsChanged(students,subjects){
      self.loading = false
      self.studentsDetails = []
      self.studentsDetails = students

      self.subjectsDetails = []
      self.subjectsDetails = subjects

      self.view = 'details'
      self.update()
    }

    studentStudentGroupStore.on('hide_group_changed',HideGroupChanged)
    function HideGroupChanged(info){
      self.loading = false
      if(info.length!=0){
        toastr.error(info)
        self.update()
        return
      }else{
        self.readStudentGroup()
      }
    }

    studentStudentGroupStore.on('read_hidden_groups_changed',ReadHiddenGroupChanged)
    function ReadHiddenGroupChanged(students){
      self.loading = false
      self.hiddenStudentsGroups = []
      self.hiddenStudentsGroups = students
      $("#hiddenGroupModal").addClass("is-active");
      self.update()
    }

    studentStudentGroupStore.on('read_unhide_group_changed',DeleteHiddenGroupChanged)
    function DeleteHiddenGroupChanged(students){
      self.loading = false
      self.readHiddenGroup()
    }

});
riot.tag2('student-house-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h4 class="title has-text-centered" style="color: #ff3860;">House Wise Report ({session_name})<br> Grand Total ({grand_total}) </h4> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" onchange="{getReadSection}" onkeyup="{addEnter}"> <option>Choose Standard</option> <option value="-1">All</option> <option each="{standards}" riot-value="{standard_id}">{standard} </option> </select> </div> </div> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="section_id" onkeyup="{addEnter}"> <option>Choose Section</option> <option value="-1">All</option> <option each="{readfilteredSections}" riot-value="{section_id}">{section} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readStudentHouseReport}">GO </button> <input type="checkbox" id="checkTable" checked="{e.done}" onclick="{viewTable}" style="margin-top: 12px;"> Table <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i></span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readStudentGroupReport}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <center> <div id="piechart" style="width: 900px; height: 450px;" show="{report_view ==\'show_graph\'}"></div> </center> <table class="table is-fullwidth is-striped is-hoverable is-narrow printOnly_t" show="{report_view ==\'show_table\'}" style="margin-left:400px"> <thead> <tr> <th>#</th> <th>Student House</th> <th>Strength</th> </tr> </thead> <tbody> <tr each="{st, i in studentHouseReports}"> <td>{i+1}</td> <td>{st.house_name}</td> <td>{st.total}</td> </tr> <tr> <th colspan="2">Total</th> <th>{grand_total}</th> </tr> </tbody> </table> <table class="table is-fullwidth is-striped is-hoverable is-narrow no-print" show="{report_view ==\'show_table\'}"> <thead> <tr> <th>#</th> <th>Student House</th> <th>Strength</th> </tr> </thead> <tbody> <tr each="{st, i in studentHouseReports}"> <td>{i+1}</td> <td>{st.house_name}</td> <td>{st.total}</td> </tr> </tr> <tr> <th colspan="2">Total</th> <th>{grand_total}</th> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.report_view ='show_graph'
    	self.readStandard()
    	self.readSection()
    	self.role = getCookie('role')
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
      studentStore.off('read_standard_changed',StandardChanged)
      studentStore.off('read_section_changed',SectionChanged)
      adminReportStore.off('read_student_house_report_change',ReadStudentHouseReportChanged)
    })
     self.addEnter = (e) => {
      if(e.which == 13){
        self.readStudentHouseReport()
      }
    }

     self.viewTable = () => {
    	if($('#checkTable').is(":checked")){
	        self.report_view = 'show_table'
    	}else{
	        self.report_view = 'show_graph'
    	}
    }

	self.readStandard = () => {
       studentStore.trigger('read_standard')
    }

    self.readSection = () => {
       studentStore.trigger('read_section')
    }

    self.getReadSection = () => {
    	self.readfilteredSections = []
    	self.readfilteredSections = self.sections.filter(s => {
    		return s.standard_id == self.refs.standard_id.value
    	})
    }
    self.readStudentHouseReport = () => {
    	self.loading=true
       adminReportStore.trigger('read_student_house_report',self.refs.standard_id.value,self.refs.section_id.value)
    }

   studentStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()
    }

    studentStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections
      self.update()
      self.getReadSection()
    }
    adminReportStore.on('read_student_house_report_change',ReadStudentHouseReportChanged)
    function ReadStudentHouseReportChanged(studentHouseReports,grandTotal,session_name){

      self.title='Create'
      self.loading = false
      self.studentHouseReports = studentHouseReports
      self.session_name = session_name
      self.grand_total = grandTotal

       var chart_percentage = []
       chart_percentage.push(['Task', 'Hours per Day'])
       for (var i = self.studentHouseReports.length - 1; i >= 0; i--) {
		   chart_percentage.push([self.studentHouseReports[i].house_name,self.studentHouseReports[i].total])
		}

      google.charts.load("current", {packages:["corechart"]});
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {

        var data = google.visualization.arrayToDataTable(chart_percentage);

        var options = {
          is3D: true,
          legend:{position: 'labeled',
                  textStyle: {bold: true} },
          pieSliceText: 'value'
        };

        var chart = new google.visualization.PieChart(document.getElementById('piechart'));
        chart.draw(data, options);
      }

      self.update()

    }

});
riot.tag2('student-info-update', '<section class=" is-fluid" show="{student_view ==\'close_Info_update\'}"> <h2 class="title has-text-centered" style="color: #ff3860;">Student Info Update</h2> <div class="flex items-center mt-2 mb-6 no-print"> <div class="bg-green py-1 rounded w-10"> <div class="bg-grey h-px flex-auto"></div> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="read_standard_id" onchange="{getReadSection}"> <option>Choose Section</option> <option each="{standards}" riot-value="{standard_id}">{standard} </option> </select> </div> </div> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="read_section_id"> <option>Choose Class</option> <option each="{readfilteredSections}" riot-value="{section_id}">{section} </option> </select> </div> </div> </div> <div class="column is-one-third"> <input class="input" ref="read_enroll_number" type="text" placeholder="Enter Enroll No"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getStudentData}">Print Student Info </button> </div> </div> </div> </section> <section class=" is-fluid" show="{student_view ==\'open_info_update\'}"> <center> <div each="{pl, i in students}"> <table class="table is-fullwidth is-bordered"> <caption class="caption"> Student\'s Information</caption> </table> <div class="divider" style="margin-top: 10px;margin-bottom: 10px;">Part - 1</div> <table class="table is-fullwidth is-bordered"> <tr> <td rowspan="3" style="width: 60;"> <img riot-src="/images/7/student/{pl.student_id}.jpg" height="75"> </td> <th> Name </th><td>{pl.name} </td> <th>Enroll No</th><td> {pl.enroll_number}</td> </tr><tr> <th>Date of Birth </th><td>{pl.dob}</td> <th>Reg. No</th><td style="width:150px">{pl.reg_number} </td> </tr><tr> <th style="width:115px;"> Date of Admission</th> <td>{pl.doa}</td> <th style="width:100px"> Date of Joining</th><td> {pl.doj} </td> </tr> </table><table class="table is-fullwidth is-bordered"> <tr> <th>Class / Sec</th><td> {pl.standard} {pl.section}</td> <th>House</th><td> {pl.house_name} </td> <th>Blood Group</th><td> {pl.blood_group} </td> <th>Caste Category</th><td> {pl.category}</td> </tr> <tr> <th>Community</th><td> {pl.cast} </td> <th style="width:55px">Religion</th><td> {pl.religion} </td> <th style="width:95px">Nationality</th><td> {pl.nationality} </td> <th style="width:100px">Mother Tongue</th><td> {pl.mother_tongue} </td> </tr> <tr> <th>Mobile</th><td> {pl.f_mobile} </td> <th>For sms alert</th><td> {pl.mobile} </td> <th>Phone(R)</th><td> {pl.f_phone} </td> <th>Email</th><td colspan="2"> {pl.email} </td> </tr> <tr> <th style="width:95px">Father\'s Name</th><td colspan="3"> {pl.f_name} </td> <th>Mother\'s Name</th><td colspan="3"> {pl.m_name} </td> </tr> </table> <h3 style="background-color: #ddd;width: 855;color: #091378;text-align: left;padding-left:5px;-webkit-print-color-adjust: exact;">Permanent Address</h3> <table class="table is-fullwidth is-bordered"> <tr> <th style="width:100px">Address Line 1</th><td colspan="7"> {pl.p_add_l1} </td> </tr> <tr> <th style="width:100px">Address Line 2</th><td colspan="7"> {pl.p_add_l2} </td> </tr> <tr> <th style="width:100px">City </th><td> {pl.p_city} </td> <th style="width:50px">State</th><td> {pl.p_state} </td> <th style="width:70px">Country</th><td style="width:80px"> {pl.p_country} </td> <th style="width:40px">Zip</th><td style="width:70px"> {pl.p_zip} </td> </tr> </table> <h3 style="background-color: #ddd;width: 855;color: #091378;text-align: left;padding-left:5px;-webkit-print-color-adjust: exact;">Correspondence Address</h3> <table class="table is-fullwidth is-bordered"> <tr> <th style="width:100px">Address Line 1</th><td colspan="7"> {pl.c_add_l1} </td> </tr> <tr> <th style="width:100px">Address Line 2</th><td colspan="7"> {pl.c_add_l2} </td> </tr> <tr> <th style="width:100px">City </th><td> {pl.c_city} </td> <th style="width:50px">State</th><td> {pl.c_state} </td> <th style="width:70px">Country</th><td style="width:80px"> {pl.c_country} </td> <th style="width:40px">Zip</th><td style="width:70px"> {pl.c_zip} </td> </tr> </table> <div class="divider" style="margin-top: 10px;margin-bottom: 10px;">Part - 2</div> <table class="table is-fullwidth is-bordered" style="margin-bottom:10px"> <tr> <th style="width:220px">Father\'s Name:</th> <td colspan="4"> {pl.f_name}</td> </tr> <tr> <th>Occupation: Service (please tick):</th> <td><input type="checkbox"> State Govt.</td> <td><input type="checkbox"> Central Govt.</td> <td><input type="checkbox"> Private</td> <td><input type="checkbox"> Professional</td> </tr> <tr> <th>Nature of Business (if business):</th> <td colspan="2"></td> <th style="width:100px">Designation:</th> <td></td> </tr> <tr> <th>Professional Detail (if professional):</th> <td colspan="2"></td> <th>Designation:</th> <td></td> </tr> <tr> <th>Annual Income Rs:</th> <td colspan="2"></td> <th>Mobile No:</th> <td></td> </tr> <tr> <th>Community:</th> <td></td> <th>Email:</th> <td colspan="2"></td> </tr> <tr> <th>Caste Category (please tick):</th> <td><input type="checkbox"> General</td> <td><input type="checkbox"> OBC</td> <td><input type="checkbox"> SC</td> <td><input type="checkbox"> ST</td> </tr> <tr> <th colspan="2">Permanent Mobile no. for sending SMS (give only one no.):</th> <td colspan="3"></td> </tr> </table><table class="table is-fullwidth is-bordered"> <tr> <th style="width:220px">Mother\'s Name:</th> <td colspan="4">{pl.m_name}</td> </tr> <tr> <th>Occupation: Service (please tick):</th> <td><input type="checkbox"> State Govt.</td> <td><input type="checkbox"> Central Govt.</td> <td><input type="checkbox"> Private</td> <td><input type="checkbox"> Professional</td> </tr> <tr> <th>Nature of Business (if business):</th> <td colspan="2"></td> <th style="width:100px">Designation:</th> <td></td> </tr> <tr> <th>Professional Detail (if professional):</th> <td colspan="2"></td> <th>Designation:</th> <td></td> </tr> <tr> <th>Annual Income Rs:</th> <td colspan="4"></td> </tr> <tr> <th>Mobile No:</th> <td></td> <th>Email:</th> <td colspan="2"></td> </tr> </table><h3 style="background-color: #ddd;width: 855;color: #091378;text-align: left;padding-left:5px;-webkit-print-color-adjust: exact;">Permanent Address (if changed)</h3> <table class="table is-fullwidth is-bordered"> <tr> <th style="width:100px">Address Line 1</th><td colspan="7"></td> </tr> <tr> <th style="width:100px">Address Line 2</th><td colspan="7"></td> </tr> <tr> <th style="width:100px">City </th><td></td> <th style="width:50px">State</th><td></td> <th style="width:70px">Country</th><td style="width:80px"></td> <th style="width:40px">Zip</th><td style="width:70px"></td> </tr> </table><h3 style="background-color: #ddd;width: 855;color: #091378;text-align: left;padding-left:5px;-webkit-print-color-adjust: exact;">Correspondence Address (if changed)</h3> <table class="table is-fullwidth is-bordered"> <tr> <th style="width:100px">Address Line 1</th><td colspan="7"></td> </tr> <tr> <th style="width:100px">Address Line 2</th><td colspan="7"></td> </tr> <tr> <th style="width:100px">City </th><td></td> <th style="width:50px">State</th><td></td> <th style="width:70px">Country</th><td style="width:80px"></td> <th style="width:40px">Zip</th><td style="width:70px"></td> </tr> </table><table class="table is-fullwidth is-bordered"> <tr> <th>Mode of transport for sending student to school (please tick)</th> <td><input type="checkbox"> Carpool</td> <td><input type="checkbox"> Parents</td> <td><input type="checkbox"> Rikshaw</td> <td><input type="checkbox"> Bus</td> </tr> <tr> <th>Distance from school (please tick)</th> <td><input type="checkbox"> 1 km</td> <td><input type="checkbox"> 1-2 km</td> <td colspan="2"><input type="checkbox"> More than 2 km</td> </tr> </table> <table class="table is-fullwidth is-bordered"> <tr> <th>If child is Differently Abled (please tick)</th> <td><input type="checkbox"> In seeing</td> <td><input type="checkbox"> In hearing</td> <td><input type="checkbox"> In speaking</td> <td><input type="checkbox"> In movement</td> <td><input type="checkbox"> In mental ability</td> </tr> </table> </div> </center> <div class="page-break"></div> </section>', '', '', function(opts) {

	var self = this
	self.st={}
    self.on("mount", function(){
    	self.role = getCookie('role')
    	self.readStandard()
    	self.readSection()
    	self.student_view = 'close_Info_update'
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })
    self.on("unmount", function(){
      studentinfoupdateStore.off('read_standard_changed',StandardChanged)
      studentinfoupdateStore.off('read_section_changed',SectionChanged)
      studentinfoupdateStore.off('read_student_info_update_changed',StudentInfoUpdateChanged)
    })

    self.readStandard = () => {
       studentinfoupdateStore.trigger('read_standard')
    }

    self.readSection = () => {
       studentinfoupdateStore.trigger('read_section')
    }

    self.getReadSection = () => {
    	self.readfilteredSections = []
    	self.readfilteredSections = self.sections.filter(s => {
    		return s.standard_id == self.refs.read_standard_id.value
    	})
    }

     self.getStudentData = () =>{
     	self.student_view = 'open_info_update'
    	if(self.refs.read_enroll_number.value==""){
    		studentinfoupdateStore.trigger('read_student_info_update',self.refs.read_section_id.value,0)
    	}else{
    		studentinfoupdateStore.trigger('read_student_info_update',self.refs.read_section_id.value,
      	    self.refs.read_enroll_number.value)
    	}

    }

    studentinfoupdateStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()
    }

    studentinfoupdateStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections
      self.update()
      self.getReadSection()
    }
    studentinfoupdateStore.on('read_student_info_update_changed',StudentInfoUpdateChanged)
    function StudentInfoUpdateChanged(students){
      console.log(students)
      self.students = students
      self.student_id = students[0].student_id
      console.log("Student id")
      console.log(self.student_id)
      self.update()

    }
});
riot.tag2('student-login-slip', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{view==\'home\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Login Slip</h2> </div> <div class="level-right"> <button class="button has-text-weight-bold" onclick="{allowBlock}">Allow/Block</button> <button class="button has-text-weight-bold ml5" onclick="{printLoginSlipAll}"> Print Login Slip </button> <button class="button has-text-weight-bold ml5" onclick="{generateID}"> Generate ID </button> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"><label class="label">Standard</label></div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="standardSelect" id="standard" onchange="{changeSection}"> <option value="">Select Standard</option> <option each="{classes}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="sectionSelect" id="section"> <option value="">Select Section</option> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column is-narrow"> <button class="button is-danger has-text-weight-bold" onclick="{refreshStudents}">GO </button> </div> <div class="column is-narrow"> <div class="control"> <input class="input" ref="searchStudent" onkeyup="{filterStudent}" type="text" placeholder="Search Here"> </div> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="slno">Sl</th> <th>Roll No</th> <th>Enroll No</th> <th>Login ID</th> <th>Student\'s Name</th> <th>Father\'s Name</th> <th>Active</th> <th class="has-text-centered"> <input type="checkbox" id="checkStudent" onclick="{selectAll}"> </th> <th></th> </tr> </thead> <tbody> <tr each="{c, i in filteredStudent}"> <td>{i+1}</td> <td>{c.roll_number}</td> <td>{c.enroll_number}</td> <td>{c.login}</td> <td>{c.student}</td> <td>{c.f_name}</td> <td>{c.is_active}</td> <td class="has-text-centered"> <input type="checkbox" class="id_check_box" checked="{c.done}" id="{\'StudentId\' + c.student_id}" onclick="{selectStudent.bind(this,c)}"> </td> <td class="has-text-right"> <span> <a class="button is-small is-rounded" onclick="{printLoginSlip.bind(this, c)}">Print</a> <a class="button is-small is-rounded" onclick="{resetPassword.bind(this, c)}">Reset Password</a> </span> </td> </tr> </tbody> </table> </section> <section class=" is-fluid" show="{view==\'print-details\'}"> <div class="level no-print"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Login Slip</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{backToHome}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <center> <div each="{c, i in studentDetails}" class="login-slip-box"> <div class="outer"> <table class="table login-table"> <tr><th class="login-th">Student Name</th><td class="login-td">{c.student}</td></tr> <tr><th class="login-th">Class</th><td class="login-td">{c.standard} {c.section}</td></tr> <tr><th class="login-th">Enroll Number</th><td class="login-td">{c.enroll_number}</td></tr> <tr><th class="login-th">Father\'s Name</th><td class="login-td">{c.f_name}</td></tr> <tr><th class="login-th">Student\'s/Parent Login ID</th><td class="login-td">{c.login}</td></tr> <tr><th class="login-th">Student\'s Password</th><td class="login-td">{c.password}</td></tr> <tr><th class="login-th">Parent\'s Password</th><td class="login-td">{c.parent_password}</td></tr> </table> <h6 class="login-h6">How to login on website:- www.mckv.edu.in> Member Login > Enter login ID and Password >> Select user type (Students or parents) > Press OK</h6> <p style="text-align:left;">Note : Please keep the password details secure with you.</p> </div> <div class="login-slip-divider" show="{((i+1)%4)!=0}"> <hr> </div> <div class="page-break" show="{((i+1)%4)==0}"></div> </div> </center> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.loading = false;
      self.view = 'home'
      self.update()

      self.readClass()
      self.readSection()
    })
    self.on("unmount", function(){
      studentLoginSlipStore.off('read_classes_changed',ClassesChanged)
      studentLoginSlipStore.off('read_section_changed',SectionChanged)

      studentLoginSlipStore.off('read_students_changed',ReadSectionsChanged)
      studentLoginSlipStore.off('update_login_status_changed',UpdateLoginStatusChanged)
      studentLoginSlipStore.off('print_login_slip_changed',PrintLoginSlipChanged)
      studentLoginSlipStore.off('reset_password_changed', ResetPasswordChanged)
      studentLoginSlipStore.off('generate_id_changed', GenerateIDChanged)
    })

    self.readClass = () => {
       self.loading = true;
       studentLoginSlipStore.trigger('read_classes')
    }

    self.readSection = () => {
       self.loading = true;
       studentLoginSlipStore.trigger('read_section')
    }

    self.changeSection = () => {
       if(self.refs.standardSelect.value==''){
        toastr.info("Please select standard and try again")
       }else{
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.standardSelect.value
        })
       }
    }

    self.refreshStudents = () =>{

      let error = '';

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section of student, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading = true
        studentLoginSlipStore.trigger('read_students', self.refs.standardSelect.value, self.refs.sectionSelect.value)
      }

    }

    self.selectAll = () => {
      if($('#checkStudent').is(":checked")){
        self.students.map(c=>{
          c.done = true;
          $('StudentId'+c.student_id).prop('checked', true);
        })
      }else{
        self.students.map(c=>{
          c.done = false;
          $('StudentId'+c.student_id).prop('checked', false);
          self.student_id = c.student_id;
        })
      }
    }

    self.selectStudent = (item,event) => {
      item.done=!event.item.c.done
      self.student_id = item.student_id;
    }

    self.allowBlock = () =>{
      let enroll_number='';
      var is_active = 'N'
      var st = []
       self.students.map( q => {
          if(q.done){
            var ob ={}
            ob.enroll_number=q.enroll_number

            if(q.is_active=='Y'){
              ob.is_active='N'
            }else{
              ob.is_active='Y'
            }
            st.push(ob)
          }
        })
        if(st.length==0){
          toastr.info('Please select at least one student and try again')
        }else{
          self.loading = true
          studentLoginSlipStore.trigger('update_login_status', st)
      }
    }

    self.resetPassword = (c,e) =>{
      self.loading = true
      studentLoginSlipStore.trigger('reset_password', c.enroll_number)
    }

    self.printLoginSlip = (c,e) =>{
      let error = '';

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section of student, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading = true
        studentLoginSlipStore.trigger('print_login_slip', self.refs.standardSelect.value, self.refs.sectionSelect.value, c.student_id)
      }

    }

    self.printLoginSlipAll = () =>{
      let error = '';

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section of student, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading = true
        studentLoginSlipStore.trigger('print_login_slip_all', self.refs.standardSelect.value, self.refs.sectionSelect.value)
      }

    }

    self.backToHome = () => {
      self.view = 'home'
    }

    self.generateID = () =>{
      let error = '';

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section of student, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading = true
        studentLoginSlipStore.trigger('generate_id', self.refs.standardSelect.value, self.refs.sectionSelect.value)
      }

    }

    self.filterStudent = ()=>{
      self.filteredStudent = self.students.filter(c => {
        return JSON.stringify(c).toLowerCase().indexOf(self.refs.searchStudent.value.toLowerCase())>=0
      })
    }

    studentLoginSlipStore.on('read_classes_changed',ClassesChanged)
    function ClassesChanged(classes){
      self.loading = false
      self.classes = []
      self.classes = classes
      self.update()
      console.log(self.classes)
    }

    studentLoginSlipStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      self.loading = false
      self.sections = []
      self.sections = sections
      self.update()
    }

    studentLoginSlipStore.on('read_students_changed',ReadSectionsChanged)
    function ReadSectionsChanged(students){
      self.loading = false
      self.students = []
      self.students = students
      self.filteredStudent = students
      self.students.map(c => {
        c.done=false
      })
      $("#checkStudent").prop("checked", false);

      self.update()
    }

    studentLoginSlipStore.on('update_login_status_changed',UpdateLoginStatusChanged)
    function UpdateLoginStatusChanged(){
      self.loading = false

      self.refreshStudents()

    }

    studentLoginSlipStore.on('print_login_slip_changed',PrintLoginSlipChanged)
    function PrintLoginSlipChanged(details){
      self.view = 'print-details'
      self.loading = false
      self.studentDetails = []
      self.studentDetails = details
      self.update()
    }

    studentLoginSlipStore.on('reset_password_changed', ResetPasswordChanged)
    function ResetPasswordChanged(){
      self.loading = false
      self.update()
    }

    studentLoginSlipStore.on('generate_id_changed', GenerateIDChanged)
    function GenerateIDChanged(){
      self.loading = false
      self.update()
    }

});
riot.tag2('student-notification', '<section class="is-fluid"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Students Notification</h2> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" onchange="{getSection}"> <option each="{standards}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Section</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="section_id" onchange="{getStudentData}"> <option value="-1">ALL</option> <option each="{filteredSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Select Message Type</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="get_message_type" onchange="{getMessageType}"> <option value="Email">Email</option> <option value="SMS">SMS</option> <option value="Both">Both</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Send To</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="get_phone_no"> <option value="sms_number">SMS Number</option> <option value="parents">Parents</option> <option value="Both_Number">Both</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{getStudentManually}" show="{choose_button}">Choose Student Manually </button> <button class="button has-text-weight-bold" onclick="{closeStudentManually}" show="{close_button}">Close </button> </div> </div> </div> <input class="input" style="margin-bottom: 12px;" type="text" id="student_subject" ref="student_subject" show="{student_subject}" placeholder="SUBJECT"><br> <textarea class="textarea" id="student_message" ref="student_message" placeholder="MESSAGE"></textarea><br> <button class="button is-info is-pulled-right ml5" onclick="{clear}">Reset</button> <button class="button is-danger is-pulled-right" onclick="{sendStudentNotification}">Send</button> <table class="table is-fullwidth is-striped is-hoverable is-narrow" show="{student_table}"> <thead> <tr> <th>#</th> <th>Name</th> <th>Mobile</th> <th>Email</th> <th>Course</th> <th style="text-align:center;"> <input type="checkbox" id="checkStudentName" onclick="{selectAll}"> </th> </tr> </thead> <tbody> <tr each="{st, i in students}"> <td>{i+1}</td> <td>{st.name}</td> <td>{st.mobile}</td> <td>{st.email}</td> <td>{st.standard}</td> <td style="width:2%; text-align:center;"><input type="checkbox" checked="{st.done}" id="{\'addStudentName\' + st.student_id}" onclick="{selectStudent.bind(this,st)}"></td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
    	self.role = getCookie('role')
    	self.addAllCheckBox=true;
      self.addCheckBox=true;
    	self.readStandard()
    	self.readSection()
      self.choose_button = true
      self.close_button = false
      self.update()
    })

    self.on("unmount", function(){
      studentNotificationStore.off('read_standard_changed', StandardChanged)
      studentNotificationStore.off('read_section_changed', SectionChanged)
      studentNotificationStore.off('students_changed', StudentChanged)
      studentNotificationStore.off('student_sms_changed',SendSmsChanged)
    })

    self.getMessageType = () =>{
      if(self.refs.get_message_type.value =='SMS'){
        self.student_subject = false
      }else if(self.refs.get_message_type.value =='Email'){
        self.student_subject = true
      }else{
        self.student_subject = true
      }
    }

    self.getStudentManually = () =>{
      self.student_table= true;
      self.choose_button = false
      self.close_button = true
    }

    self.closeStudentManually = () =>{
      self.student_table = false;
      self.choose_button = true
      self.close_button = false
    }

    self.readStandard = () => {
       studentNotificationStore.trigger('read_standard')
    }

    self.readSection = () => {
       studentNotificationStore.trigger('read_section')
    }

    self.getSection = () => {
    	self.filteredSections = []
    	self.filteredSections = self.sections.filter(s => {
    		return s.standard_id == self.refs.standard_id.value
    	})
      self.update()
      self.getStudentData();
    }
    self.getStudentData = ()=>{
  	  var obj={}
      obj['standard_id']=self.refs.standard_id.value
      obj['section_id']=self.refs.section_id.value
      self.loading = true
      studentNotificationStore.trigger('read_students', obj)
    }

    self.selectAll = () => {
      if($('#checkStudentName').is(":checked")){
        self.students.map(i=>{
          i.done = true;
          $('addStudentName'+i.student_id).prop('checked', true);
        })
      }else{
        self.students.map(i=>{
          i.done = false;
          $('addStudentName'+i.student_id).prop('checked', false);
        })
      }
      console.log(self.students)
    }

    self.selectStudent = (item,event) => {
      item.done=!event.item.st.done
      self.mobile = item.mobile;
        console.log(self.mobile)
    }

    self.sendStudentNotification = ()=>{
     let mobile='';
     let email='';
     let p_mobile='';
     let p_email='';
     self.students.map( q => {
        if(q.done){
          if(mobile==''){
            mobile=q.mobile
          }else{
            mobile=mobile+','+q.mobile
          }

          if(email==''){
            email=q.email
          }else{
            email=email+','+q.email
          }

          if(p_mobile==''){
            p_mobile=q.p_mobile
          }else{
            p_mobile=p_mobile+','+q.p_mobile
          }
          if(p_email==''){
            p_email=q.p_email
          }else{
            p_email=p_email+','+q.p_email
          }
        }
      })

      if(self.refs.get_message_type.value =='SMS'){
        if(self.refs.student_message.value == ""){
          toastr.error("Please enter Valid Message and try again")
          return;
        }
        if(self.refs.get_phone_no.value=='sms_number'){
          studentNotificationStore.trigger('send_sms',mobile,self.refs.student_message.value)
        }else if(self.refs.get_phone_no.value=='parents') {
          studentNotificationStore.trigger('send_sms',p_mobile,self.refs.student_message.value)
        }else if(self.refs.get_phone_no.value=='Both_Number') {
          studentNotificationStore.trigger('send_sms',mobile,self.refs.student_message.value)
          studentNotificationStore.trigger('send_sms',p_mobile,self.refs.student_message.value)
        }
      }else if(self.refs.get_message_type.value =='Email'){
        if(self.refs.student_subject.value == ""){
          toastr.error("Please enter Valid Subject and try again")
          return;
        }
        if(self.refs.student_message.value == ""){
          toastr.error("Please enter Valid Message and try again")
          return;
        }
        if(self.refs.get_phone_no.value=='sms_number'){
          studentNotificationStore.trigger('send_email',email,self.refs.student_subject.value,self.refs.student_message.value)
        }else if(self.refs.get_phone_no.value=='parents') {
          studentNotificationStore.trigger('send_email',p_email,self.refs.student_subject.value,self.refs.student_message.value)
        }else if(self.refs.get_phone_no.value=='Both_Number') {
          studentNotificationStore.trigger('send_email',p_email,self.refs.student_subject.value,self.refs.student_message.value)
          studentNotificationStore.trigger('send_email',email,self.refs.student_subject.value,self.refs.student_message.value)
        }
      }else if(self.refs.get_message_type.value=='Both'){
        if(self.refs.student_subject.value == ""){
          toastr.error("Please enter Valid Subject and try again")
          return;
        }
        if(self.refs.student_message.value == ""){
          toastr.error("Please enter Valid Message and try again")
          return;
        }
        if(self.refs.get_phone_no.value=='sms_number'){
          studentNotificationStore.trigger('send_sms',mobile,self.refs.student_message.value)
          studentNotificationStore.trigger('send_email',email,self.refs.student_subject.value,self.refs.student_message.value)
        }else if(self.refs.get_phone_no.value=='parents') {
          studentNotificationStore.trigger('send_sms',p_mobile,self.refs.student_message.value)
          studentNotificationStore.trigger('send_email',p_email,self.refs.student_subject.value,self.refs.student_message.value)
        }else if(self.refs.get_phone_no.value=='Both_Number') {
          studentNotificationStore.trigger('send_sms',mobile,self.refs.student_message.value)
          studentNotificationStore.trigger('send_sms',p_mobile,self.refs.student_message.value)
          studentNotificationStore.trigger('send_email',email,self.refs.student_subject.value,self.refs.student_message.value)
          studentNotificationStore.trigger('send_email',p_email,self.refs.student_subject.value,self.refs.student_message.value)

        }
      }
    }

    self.clear = () => {
      self.refs.student_subject.value = ''
      self.refs.student_message.value = ''
    }

    studentNotificationStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()
    }

    studentNotificationStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections
      self.update()
      self.getSection()
      self.getStudentData()
    }

    studentNotificationStore.on('students_changed',StudentChanged)
    function StudentChanged(students){
      console.log(students)
      self.students = []
      self.students = students
      self.students.map(i=>{
      if(i.mobile==""){
        i.done = false;

        $('addStudentName' + i.student_id ).prop('checked', false);
      }else{
        i.done = true;
        $('addStudentName' + i.student_id ).prop('checked', true);
      }
      })
      self.update()
    }

    studentNotificationStore.on('student_sms_changed',SendSmsChanged)
    function SendSmsChanged(){
      toastr.success('sms send successfully')
      self.refs.student_subject.value = ''
      self.refs.student_message.value = ''
      self.update()
    }
    studentNotificationStore.on('student_email_changed',SendEmailChanged)
    function SendEmailChanged(){
      toastr.success('email send successfully')
      self.refs.student_subject.value = ''
      self.refs.student_message.value = ''
      self.update()
    }
});
riot.tag2('student-religion-strength-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h4 class="title has-text-centered" style="color: #ff3860;">Class Wise Religion Strength({session_name}) </h4> <div class="box no-print"> <div class="columns"> <div class=" column"> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i></span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readStudentReligionListingReport}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th>Standard</th> <th>Buddhism</th> <th>Christianity</th> <th>Hinduism</th> <th>Jainism</th> <th>Islam</th> <th>Sikhism</th> </tr> </thead> <tbody> <tr each="{st, i in studentReligionListingReports}"> <td>{i+1}</td> <td>{st.standard}</td> <td>{st.Buddhism}</td> <td>{st.Christianity}</td> <td>{st.Hinduism}</td> <td>{st.Jainism}</td> <td>{st.Islam}</td> <td>{st.Sikhism}</td> </tr> <tr> <th colspan="2">Total</th> <th>{totalBuddhism}</th> <th>{totalChristianity}</th> <th>{totalHinduism}</th> <th>{totalJainism}</th> <th>{totalIslam}</th> <th>{totalSikhism}</th> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.role = getCookie('role')
    	self.readStudentReligionListingReport()
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
      adminReportStore.off('read_student_religion_listing_report_changed',ReadStudentReligionListingReportChanged)
    })

    self.readStudentReligionListingReport = () => {
    	self.loading=true
       adminReportStore.trigger('read_student_religion_listing_report')
    }

    adminReportStore.on('read_student_religion_listing_report_changed',ReadStudentReligionListingReportChanged)
    function ReadStudentReligionListingReportChanged(studentReligionListingReports,session_name){

      self.title='Create'
      self.loading = false
      self.studentReligionListingReports = studentReligionListingReports
      self.session_name = session_name
        self.totalBuddhism=0
		self.totalChristianity=0
		self.totalHinduism=0
		self.totalJainism=0
		self.totalIslam=0
		self.totalSikhism=0
		self.studentReligionListingReports.map(c => {
      	console.log("c.General");
      	console.log(c.General);
	      	if(c.Buddhism!=undefined){
	          self.totalBuddhism=Number(self.totalBuddhism) + Number(c.Buddhism)
	        }
           if(c.Christianity!=undefined){
            self.totalChristianity=Number(self.totalChristianity) + Number(c.Christianity)
          }
          if(c.Hinduism!=undefined){
              self.totalHinduism=Number(self.totalHinduism) + Number(c.Hinduism)
   			}
            if(c.Jainism!=undefined){
              self.totalJainism=Number(self.totalJainism) + Number(c.Jainism)
   			 }
   			 if(c.Islam!=undefined){
              self.totalIslam=Number(self.totalIslam) + Number(c.Islam)
   			 }
   			 if(c.Sikhism!=undefined){
              self.totalSikhism=Number(self.totalSikhism) + Number(c.Sikhism)
   			 }
      })
      self.update()

    }

});
riot.tag2('student-result-activation', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{view==\'home\'}"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Result Activation</h2> </div> <div class="level-right"> </div> </div> <div class="level box no-print"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standardSelect" id="standard" onchange="{changeSection}"> <option value="">Select Standard</option> <option each="{classes}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Section</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="sectionSelect" id="section"> <option value="">Select Section</option> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{refreshStudents}">GO </button> </div> </div> </div> <div class="level-right"> <div class="control"> <input class="input" ref="searchStudent" onkeyup="{filterStudent}" type="text" placeholder="Search Here"> </div> <button class="button is-success has-text-weight-bold ml5 " onclick="{allowBlock}">Allow/Block </button> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <thead> <tr> <th>Roll No</th> <th>Enroll No</th> <th>Student\'s Name</th> <th>Father\'s Name</th> <th>Active</th> <th class="has-text-centered"> <input type="checkbox" id="checkStudent" onclick="{selectAll}"> </th> </tr> </thead> <tbody> <tr each="{c, i in filteredStudent}"> <td>{c.roll_number}</td> <td>{c.enroll_number}</td> <td>{c.student}</td> <td>{c.f_name}</td> <td>{c.active_result}</td> <td class="has-text-centered"> <input type="checkbox" class="id_check_box" checked="{c.done}" id="{\'StudentId\' + c.student_id}" onclick="{selectStudent.bind(this,c)}"> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.loading = false;
      self.view = 'home'
      self.update()
      self.readClass()
      self.readSection()
    })
    self.on("unmount", function(){
      studentResultActivationStore.off('read_classes_changed',ClassesChanged)
      studentResultActivationStore.off('read_section_changed',SectionChanged)

      studentResultActivationStore.off('read_students_changed',ReadSectionsChanged)
      studentResultActivationStore.off('update_result_status_changed',UpdateLoginStatusChanged)
    })

    self.readClass = () => {
       self.loading = true;
       studentResultActivationStore.trigger('read_classes')
    }

    self.readSection = () => {
       self.loading = true;
       studentResultActivationStore.trigger('read_section')
    }

    self.changeSection = () => {
       if(self.refs.standardSelect.value==''){
        toastr.info("Please select standard and try again")
       }else{
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.standardSelect.value
        })
       }
    }

    self.refreshStudents = () =>{

      let error = '';

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section of student, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading = true
        studentResultActivationStore.trigger('read_students', self.refs.standardSelect.value, self.refs.sectionSelect.value)
      }

    }

    self.selectAll = () => {

      if($('#checkStudent').is(":checked")){
        self.students.map(c=>{
          c.done = true;
          $('StudentId'+c.student_id).prop('checked', true);
        })
      }else{
        self.students.map(c=>{
          c.done = false;
          $('StudentId'+c.student_id).prop('checked', false);
          self.student_id = c.student_id;
        })
      }
    }

    self.selectStudent = (item,event) => {
      item.done=!event.item.c.done
        self.student_id = item.student_id;
    }

    self.allowBlock = () =>{
      let enroll_number='';
      var active_result = 'N'
      var st = []
       self.students.map( q => {
          if(q.done){
            var ob ={}
            ob.enroll_number=q.enroll_number

            if(q.active_result=='Y'){
              ob.active_result='N'
            }else{
              ob.active_result='Y'
            }
            st.push(ob)
          }
        })
        if(st.length==0){
          toastr.info('Please select at least one student and try again')
        }else{
          self.loading = true
          studentResultActivationStore.trigger('update_result_status', st)
      }
    }

    self.filterStudent = ()=>{
      self.filteredStudent = self.students.filter(c => {
        return JSON.stringify(c).toLowerCase().indexOf(self.refs.searchStudent.value.toLowerCase())>=0
      })
    }

    studentResultActivationStore.on('read_classes_changed',ClassesChanged)
    function ClassesChanged(classes){
      self.loading = false
      self.classes = []
      self.classes = classes
      self.update()
      console.log(self.classes)
    }

    studentResultActivationStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      self.loading = false
      self.sections = []
      self.sections = sections
      self.update()
    }

    studentResultActivationStore.on('read_students_changed',ReadSectionsChanged)
    function ReadSectionsChanged(students){
      self.loading = false
      self.students = []
      self.students = students
      self.filteredStudent = students
      self.students.map(c => {
        c.done=false
      })
      $("#checkStudent").prop("checked", false);
      self.update()
    }

    studentResultActivationStore.on('update_result_status_changed',UpdateLoginStatusChanged)
    function UpdateLoginStatusChanged(){
      self.loading = false
      self.refreshStudents()

    }

});
riot.tag2('student-school-leaving', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{view==\'home\'}"> <div class="level"> <div class="level-left"> <h2 class="title is-size-5" style="color: #ff3860;">School Leaving Certificate</h2> </div> <div class="level-right"> <div class="column is-narrow"><label class="label">Issue date</label></div> <div class="column is-narrow"> <div class="control"> <input class="input date is-small" ref="issue_date" type="text"> </div> </div> <button class="button is-primary has-text-weight-bold ml5 is-small" onclick="{printCertificate}">Print Certificate</button> <button class="button is-info has-text-weight-bold is-small ml5" onclick="{printCertificate}">Print Duplicate Certificate</button> <button class="button is-success has-text-weight-bold is-small ml5" onclick="{printFeedback}">Print Feedback Form</button> <button class="button is-link has-text-weight-bold ml5 is-small" onclick="{refreshStudents}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <div class="level box"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"><label class="label">Standard</label></div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth is"> <select ref="standardSelect" id="standard" onchange="{changeSection}"> <option each="{classes}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="sectionSelect" id="section"> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Type</label></div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="typeSelect"> <option value="Normal">Normal</option> <option value="TC">TC</option> </select> </div> </div> </div> <div class="column is-narrow"> <button class="button is-danger has-text-weight-bold" onclick="{refreshStudents}">Show Report</button> </div> </div> </div> <div class="level-right"> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <thead> <tr> <th class="sl_no">SL No</th> <th>Enroll No</th> <th>Student Name</th> <th>Withdraw Class</th> <th>Date of Withdraw</th> <th>Reason</th> <th>Certificate Issue</th> <th class="has-text-centered"> <input type="checkbox" id="checkStudent" onclick="{selectAll}"> </th> <th style="width:100px;"></th> </tr> </thead> <tbody> <tr each="{c, i in students}"> <td>{i+1}</td> <td>{c.enroll_number}</td> <td>{c.first_name} {c.middle_name} {c.last_name}</td> <td>{c.dol}</td> <td></td> <td>{c.remarks}</td> <td class="has-text-centered">{c.type}</td> <td class="has-text-centered"> <span> <input type="checkbox" class="id_check_box" checked="{c.done}" id="{\'StudentId\' + c.student_id}" onclick="{selectStudent.bind(this,c)}"> </span> </td> <td class="has-text-right"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{c.confirmDelete}"> <span><a class="button is-small" onclick="{create_certificate.bind(this, c)}" title="Create Certificate"> <i class="fa fa-plus-circle" aria-hidden="true"></i></i></a></span> <span> <a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"><i class="fa fa-trash" aria-hidden="true"></i></a></span> </div> <div class="table-buttons" if="{c.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <section class=" is-fluid" show="{view==\'school-leaving-certificate\'}"> <div class="level no-print"> <div class="level-left"> </div> <div class="level-right"> <button class="button is-primary has-text-weight-bold is-small" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning has-text-weight-bold is-small ml5" onclick="{backToHome}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <div each="{c, i in printCertificateDetails}"> <center> <div class="topHeader">CERTIFICATE OF CONDUCT & CHARACTER</div> <table class="table is-fullwidth is-bordered" style="width:860px;"> <caption class="caption-school-leaving">STUDENT PARTICULARS</caption> <tr> <th>Name in Full</th> <td colspan="5">{c.name}</td> </tr> <tr> <th>Standard</th><td> {c.standard} {c.section}</td> <th>Enrol No.</th><td>{c.enroll_number}</td> <th>House</th><td>{c.house_name}</td> </tr> <tr> <th>Name of Father</th> <td colspan="5">{c.f_name}</td> </tr> <tr> <th>Date of Birth</th> <td colspan="5">{c.dob}</td> </tr> <tr> <th>Date of Admission to MCKV</th> <td colspan="5">{c.doa}</td> </tr> <tr> <th>Class in which he took admission</th> <td colspan="5">{c.admission_for_class}</td> </tr> <tr> <th>Date of leaving school</th> <td colspan="5">{c.dol}</td> </tr> <tr> <th>Examination appeared for/passed</th> <td colspan="5">{c.examination_appeared}</td> </tr> <tr> <th>Conduct</th> <td colspan="5">{c.conduct}</td> </tr> <tr> <th>Attendance</th> <td colspan="5">{c.attendance}</td> </tr> </table> <table class="table is-fullwidth is-bordered" style="width:860px;margin-top: -25px;"> <caption style="text-align:left !important;font-size:.8em; !important " class="caption-school-leaving">Social & Life Skills:</caption> <tr> <th class="socialTitle">a) Relations with the Faculty</th><td>{c.faculty_relationship}</td> </tr> <tr> <th class="socialTitle">b) Relations with his peers</th><td>{c.peer_group_relationship}</td> </tr> <tr> <th class="socialTitle">c) Sense of responsibility towards Class </th><td>{c.class_responsibility}</td> </tr> <tr> <th class="socialTitle">d) Attitude</th><td>{c.attitude}</td> </tr> <tr> <th class="socialTitle">e) Sense of responsibility towards House </th><td>{c.house_responsibility}</td> </tr> <tr> <th class="socialTitle">f) Punctuality</th><td>{c.punctuality}</td> </tr> </table> <table class="table is-fullwidth is-bordered" style="width:860px;margin-top:-25px;"> <tr> <th>Remarks if any </th> <td>{c.remarks}</td> </tr> </table> <br><br><br> <table class="table is-fullwidth" style="width:860px;"> <tr> <td class="principal-school-leaving" style=" width:230px;">___________________<br><span class="principalText" style="padding-left: 35px;">Principal</sapn></td> </tr> </table> <table class="table is-fullwidth" style="width:860px;"> <tr> <td class="principal title"></td> <td class="profile-school-leaving">(for school profile, see reverse)</td> <td class="currentDate "><b>{issue_date}</b></td> </tr> </table> <div class="page-break"></div> <div> <center> <div class="header" style="padding: 5px;border: solid #000000 2px;width: 120px;font-size: 1em;font-weight: bold;border-radius: 10px;">School Profile</div> </center> <br> <div class="profileDetail" style="width:800px;"> <p> <strong>M.C.KEJRIWAL VIDYAPEETH</strong> offers an all-round education upto the Senior Secondary level, and is affiliated to the Council for the Indian School Certificate Examinations, New Delhi. The Council conducts the <strong>I.C.S.E</strong> and <strong>I.S.C</strong> Examinations at the close of Classes X and XII at the national level, based upon syllabi prescribed by it. </p> <br> <p> <strong>M.C.KEJRIWAL VIDYAPEETH</strong> has a very wide spectrum of co-curricular activities which receive as much importance as its academic disciplines. Through this wide range of activities, our students are exposed to varying situations and experiences. In addition to this, they regularly participate in inter-school competitions at the regional, national and international levels. </p> <br> <p> The scholastic and extra- mural programmes of MCKV are geared to the nurture of academic excellence, independent critical and creative thinking, tapping of diverse talents, leadership training and a commitment to social service. </p> </div> <div style="width:800px;"> <table class="table is-fullwidth " style="width:860px;"> <tr><td style="border: #fff;"><b><u>Explanation of Grades</u></b></td></tr> <tr><td style="border: #fff;">A = Excellent</td></tr> <tr><td style="border: #fff;">B = Very Good</td></tr> <tr><td style="border: #fff;">C = Good</td></tr> <tr><td style="border: #fff;">D = Fair</td></tr> <tr><td style="border: #fff;">E = Poor</td></tr> </table> </div> </div> </div> </center> </section> <section class=" is-fluid" show="{view==\'create-certificate-form\'}"> <div class="level"> <div class="level-left"> <h2 class="title is-size-5" style="color: #ff3860;"> Create School Leaving Certificate</h2> </div> <div class="level-right"> <button class="button is-warning has-text-weight-bold" onclick="{close_create_certificate}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <div class="box"> <div class="columns mt20"> <div class="column is-2"> <label class="label is-small" for="examination_appeared">Examination appeared for/passed</label> </div> <div class="column is-2"> <input class="input is-small" ref="examination_appeared" type="text" disabled> </div> <div class="column is-2"> <label class="label is-small" for="leaving_date">Date of Leaving</label> </div> <div class="column is-2"> <input class="input date is-small" type="text" ref="leaving_date"> </div> <div class="column is-2"> <label class="label is-small" for="conduct">Conduct</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="conduct"> <option value="A">A</option> <option value="B">B</option> <option value="C">C</option> <option value="D">D</option> <option value="E">E</option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="attendance">Attendance</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="attendance"> <option value="A">A</option> <option value="B">B</option> <option value="C">C</option> <option value="D">D</option> <option value="E">E</option> </select> </div> </div> <div class="column is-2" show="{isc_stream}"> <label class="label is-small" for="isc_stream">For ISC Student</label> </div> <div class="column is-2" show="{isc_stream}"> <div class="select is-fullwidth is-small"> <select ref="isc_stream"> <option value="Science">Science</option> <option value="Commerce">Commerce</option> <option value="Humanities">Humanities</option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Sociability</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="faculty_relationship">Relations with the Faculty</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="faculty_relationship"> <option value="A">A</option> <option value="B">B</option> <option value="C">C</option> <option value="D">D</option> <option value="E">E</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="peer_group_relationship">Relations with his peers</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="peer_group_relationship"> <option value="A">A</option> <option value="B">B</option> <option value="C">C</option> <option value="D">D</option> <option value="E">E</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="class_responsibility">Sense of Responsibility towards Class</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="class_responsibility"> <option value="A">A</option> <option value="B">B</option> <option value="C">C</option> <option value="D">D</option> <option value="E">E</option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="house_responsibility">Sense of Responsibility towards House</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="house_responsibility"> <option value="A">A</option> <option value="B">B</option> <option value="C">C</option> <option value="D">D</option> <option value="E">E</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="attitude">Attitude</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="attitude"> <option value="A">A</option> <option value="B">B</option> <option value="C">C</option> <option value="D">D</option> <option value="E">E</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="punctuality">Punctuality</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="punctuality"> <option value="A">A</option> <option value="B">B</option> <option value="C">C</option> <option value="D">D</option> <option value="E">E</option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Details of Achievement</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-4"> <textarea class="textarea" ref="remarks" rows="4"></textarea> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class=" button is-success has-text-weight-bold " onclick="{addLeavingCertificate}">Submit</button> <button class=" button is-danger has-text-weight-bold " id="" onclick="{close_create_certificate}">Cancel</button> </div> </div> </div> </section> <section class=" is-fluid" show="{view==\'school-leaving-certificate-form\'}"> <div class="level no-print"> <div class="level-left"> </div> <div class="level-right"> <button class="button is-primary has-text-weight-bold is-small" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning has-text-weight-bold is-small ml5" onclick="{backToHome}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <div each="{c, i in printFeedbackDetails}"> <center> <div class="topHeader">Feedback Format for the Certificate of Conduct & Character for the Year: {session_name}</div> <table class="table is-fullwidth is-bordered" style="width:860px;"> <div style="text-align:left;width:860px;"> <caption class="caption-school-leaving">STUDENT PARTICULARS </caption> <tr> <th>Name in Full</th><td colspan="5">{c.name}</td> </tr> <tr> <th>Standard</th><td>{c.standard}-{c.section}</td> <th>Enrol No.</th><td>{c.enroll_number}</td> <th>House</th><td>{c.house_name}</td> </tr> <tr> <th>Name of Father</th><td colspan="5">{c.f_name}</td> </tr> <tr> <th>Date of Birth</th><td colspan="5">{c.dob}</td> </tr> <tr> <th>Date of Admission to MCKV</th><td colspan="5">{c.doa}</td> </tr> <tr> <th>Class in which he took admission</th><td colspan="5">{c.admission_for_class}</td> </tr> <tr> <th>Date of leaving school</th><td colspan="5"></td> </tr> <tr> <th>Examination appeared for/passed</th><td colspan="5">{c.standard}</td> </tr> <tr> <th>Conduct</th><td colspan="5">{c.conduct}</td> </tr> <tr> <th>Attendance</th><td colspan="5">{c.attendance}</td> </tr> </table> <table class="table is-fullwidth is-bordered" style="width:860px;margin-top:-25px;"> <caption class="caption-school-leaving" style="text-align:left !important;font-size: 0.8em;">Social & Life Skills: (Please write A to E in the box)</caption> <tr> <th class="socialTitle">a) Relations with the Faculty</th><td></td> </tr> <tr> <th class="socialTitle">b) Relations with his peers</th><td></td> </tr> <tr> <th class="socialTitle">c) Sense of responsibility towards Class </th><td></td> </tr> <tr> <th class="socialTitle">d) Attitude</th><td></td> </tr> <tr> <th class="socialTitle">e) Sense of responsibility towards House </th><td></td> </tr> <tr> <th class="socialTitle">f) Punctuality</th><td></td> </tr> </table> <table class="table is-fullwidth is-bordered" style="width:860px;margin-top:-25px;"> <tr style="line-height: 30px;"> <th class="socialTitle">Remarks if any </th><td></td> </tr> </table> <table style="border-style:none;margin-top:60px; width:860px;"> <tr> <td style="text-align: center; border-style:none;">___________________<br><span class="principalText">Class Teacher </sapn></td> <td style="text-align: center;border-style:none;">_______________________<br><span class="principalText"> Senior School Incharge</sapn></td> <td style="text-align: center;border-style:none;">___________________<br><span class="principalText"> Headmistress </sapn></td> </tr> </table> <div class="page-break"></div> </div> </center> </div> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.loading = false;
      self.role = getCookie('role')
      self.view = 'home'
      self.update()
      flatpickr(".date", {
        allowInput: true,
        dateFormat: "d/m/Y",
      })
      self.readClass()
      self.readSection()
    })
    self.on("unmount", function(){
      studentSchoolLeavingStore.off('read_classes_changed',ClassesChanged)
      studentSchoolLeavingStore.off('read_section_changed',SectionChanged)

      studentSchoolLeavingStore.off('read_students_changed',ReadSectionsChanged)
      studentSchoolLeavingStore.off('print_feed_back_form_changed',PrintFeedBackFormChanged)
      studentSchoolLeavingStore.off('create_certificate_changed',CreateCertificateChanged)
      studentSchoolLeavingStore.off('print_certificate_changed',PrintCertificateChanged)
    })

    self.readClass = () => {
       self.loading = true;
       studentSchoolLeavingStore.trigger('read_classes')
    }

    self.readSection = () => {
       self.loading = true;
       studentSchoolLeavingStore.trigger('read_section')
    }

    self.changeSection = () => {
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.standardSelect.value
        })
        self.update()
        console.log(self.tempSections)
    }

    self.refreshStudents = () =>{

      let error = '';

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section of student, "
      }

      if(self.refs.typeSelect.value==''){
        error = error + "Please select type, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading = true
        studentSchoolLeavingStore.trigger('read_students', self.refs.standardSelect.value, self.refs.sectionSelect.value, self.refs.typeSelect.value)
      }

    }

    self.backToHome = () =>{
      self.view='home'
    }

    self.printFeedback = () =>{

      let student_id='';
       self.students.map( q => {
          if(q.done){
            if(student_id==''){
              student_id=q.student_id
            }else{
              student_id=student_id+','+q.student_id
            }
          }
        })
       console.log(student_id);
      if(student_id==''){
        toastr.info('Please select at least one student and try again')
      }else{

        studentSchoolLeavingStore.trigger('print_feed_back_form', student_id)
      }

    }

    self.printCertificate = () =>{

      let student_id='';
       self.students.map( q => {
          if(q.done){
            if(student_id==''){
              student_id=q.student_id
            }else{
              student_id=student_id+','+q.student_id
            }
            self.type=q.type
          }
        })
       console.log(student_id);
       console.log(self.type);
      if(student_id==''){
        toastr.info('Please select at least one student and try again')
      }else if(!self.refs.issue_date.value){
        toastr.error("Please enter Issue Date and try again")
      }else if(self.type!="Yes"){
        toastr.error("Please Create Certificate and try again")
      }else{

        studentSchoolLeavingStore.trigger('print_certificate', student_id)
      }

    }

    self.create_certificate = (c,e) => {
      if(!self.refs.issue_date.value){
        toastr.error("Please enter Issue Date and try again")
        return;
      }
       if(c.type=='Yes'){
        toastr.error("School Leaving Certificate has already been issued. please use duplicate Certificate Button to print again. ")
        return;
      }
      self.student_id = c.student_id
      self.standard = c.standard
      self.refs.examination_appeared.value = self.standard
      self.view = 'create-certificate-form'
      if(self.refs.examination_appeared.value == "TWELVE"){
        self.isc_stream = true
      }else{
        self.isc_stream = false
      }

    }

    self.close_create_certificate = () => {
      self.view='home'
    }

    self.addLeavingCertificate = () =>{
      console.log(self.student_id)
      var obj={}
      obj['type'] = "Yes"
      obj['student_id'] = self.student_id
      obj['examination_appeared'] = self.refs.examination_appeared.value
      obj['leaving_date'] = convertDate(self.refs.leaving_date.value)
      obj['conduct'] = self.refs.conduct.value
      obj['attendance'] = self.refs.attendance.value
      obj['faculty_relationship'] = self.refs.faculty_relationship.value
      obj['peer_group_relationship'] = self.refs.peer_group_relationship.value
      obj['class_responsibility'] = self.refs.class_responsibility.value
      obj['house_responsibility'] = self.refs.house_responsibility.value
      obj['attitude'] = self.refs.attitude.value
      obj['punctuality'] = self.refs.punctuality.value
      obj['remarks'] = self.refs.remarks.value
      obj['isc_stream'] = self.refs.isc_stream.value
      if(!self.refs.leaving_date.value){
        toastr.error("Please enter Date Of Leaving and try again")
        return;
      }else{
        studentSchoolLeavingStore.trigger('create_certificate', obj)
      }
    }

    self.selectAll = () => {

      if($('#checkStudent').is(":checked")){
        self.students.map(i=>{
            i.done = true;
            $('StudentId'+i.student_id).prop('checked', true);

          })
      }else{
        self.students.map(i=>{
            i.done = false;
            $('StudentId'+i.student_id).prop('checked', false);
            self.student_id = i.student_id;
            console.log(self.student_id)
          })
      }
      console.log(self.students)
    }

     self.selectStudent = (item,event) => {
      item.done=!event.item.c.done
        self.student_id = item.student_id;
        console.log(self.student_id)
    }

    self.cancelOperation = (c) => {
      self.students.map(p => {
          p.confirmDelete = false
          p.confirmEdit = false
      })
    }
    self.confirmDelete = (c) => {
      self.students.map(p => {
        if(p.student_id != c.item.c.student_id){
          p.confirmDelete = false
        }else{
          p.confirmDelete = true
        }
      })
    }

    self.delete = (c) => {
      self.loading = true
      studentSchoolLeavingStore.trigger('delete_student_certificte', c.item.c.student_id)
    }

    studentSchoolLeavingStore.on('read_classes_changed',ClassesChanged)
    function ClassesChanged(classes){
      self.loading = false
      self.classes = []
      self.classes = classes
      self.update()
      self.readSection()
    }

    studentSchoolLeavingStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      self.loading = false
      self.sections = []
      self.sections = sections
      self.update()
      self.changeSection()

    }

    studentSchoolLeavingStore.on('read_students_changed',ReadSectionsChanged)
    function ReadSectionsChanged(students){
      self.loading = false
      self.students = []
      self.students = students
      self.students.map(i=>{
        i.done = false;
      })
      self.update()
    }

    studentSchoolLeavingStore.on('create_certificate_changed',CreateCertificateChanged)
    function CreateCertificateChanged(){
      self.loading = false
      self.view='home'
      self.refs.leaving_date.value = ""
      self.refs.conduct.value = "A"
      self.refs.attendance.value = "A"
      self.refs.faculty_relationship.value = "A"
      self.refs.peer_group_relationship.value = "A"
      self.refs.class_responsibility.value = "A"
      self.refs.house_responsibility.value = "A"
      self.refs.attitude.value = "A"
      self.refs.punctuality.value = "A"
      self.refs.remarks.value = ""
      self.refs.isc_stream.value = "Science"
      self.update()
      self.refreshStudents()
    }

    studentSchoolLeavingStore.on('print_feed_back_form_changed',PrintFeedBackFormChanged)
    function PrintFeedBackFormChanged(students,session_name){
      self.loading = false
      self.view='school-leaving-certificate-form'
      self.printFeedbackDetails = students
      self.session_name = session_name
      self.update()

    }

    studentSchoolLeavingStore.on('print_certificate_changed',PrintCertificateChanged)
    function PrintCertificateChanged(students,session_name){
      self.loading = false
      self.view='school-leaving-certificate'
      self.printCertificateDetails = students
      self.session_name = session_name
      self.issue_date = self.refs.issue_date.value
      self.update()

    }

    studentSchoolLeavingStore.on('delete_student_certificte_changed',DeleteStudentCertificteChanged)
    function DeleteStudentCertificteChanged(){
      self.loading = false
      self.update()
      self.refreshStudents()

    }

});
riot.tag2('student-search', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Searched Student\'s Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <label class="label">Roll No</label> </div> </div> <div class="column is-narrow"> <div class="control"> <input type="text" name="" ref="roll_no" class="input" onkeyup="{addEnter}"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{searchByField}">Go </button> <button class="button is-info has-text-weight-bold" onclick="{showSearchBox}"><b>>></b> </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print" style="margin-left:5px"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning has-text-weight-bold is-pulled-right" onclick="{showStudentField}">Setting </button> </div> </div> </div> <div class="box no-print" show="{search_view ==\'more_search_box\'}"> <div class="columns"> <div class="column is-2"> <label class="label is-small" for="student_name"> Name</label> </div> <div class="column is-2"> <input class="input is-small" id="student_name" ref="student_name" type="text" onkeyup="{addEnter}"> </div> <div class="column is-2"> <label class="label is-small" for="middle_name">Reg.Number</label> </div> <div class="column is-2"> <input type="text" name="" ref="reg_number" class="input is-small" onkeyup="{addEnter}"> </div> </div> <div class="columns"> <div class="column is-2"> <label class="label is-small" for="f_name"> Fathes\'s Name</label> </div> <div class="column is-2"> <input type="text" name="" ref="f_name" class="input is-small" onkeyup="{addEnter}"> </div> <div class="column is-2"> <label class="label is-small" for="mother_name">Mother\'s Name</label> </div> <div class="column is-2"> <input type="text" name="" ref="m_name" class="input is-small" onkeyup="{addEnter}"> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{searchByField}">Search </button> </div> </div> </div> <div style="height:450px; overflow-x: scroll; overflow-y:scroll ;border:solid #000 3px;"> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th show="{title_view ==\'show_title\'}">Title</th> <th show="{first_name_view ==\'show_first_name\'}">First Name</th> <th show="{middle_name_view ==\'show_middle_name\'}">Middle Name </th> <th show="{last_name_view ==\'show_last_name\'}">Last Name</th> <th show="{student_view ==\'show_student\'}">Student Name</th> <th show="{withdrawn_view ==\'show_withdrawn\'}">Withdrawn</th> <th show="{enroll_no_view ==\'show_enroll_no\'}">Enroll No</th> <th show="{reg_no_view ==\'show_reg_no\'}">Reg. No</th> <th show="{roll_no_view ==\'show_roll_no\'}">Roll No</th> <th show="{income_view ==\'show_income\'}">Income</th> <th show="{group_view ==\'show_group\'}">Group</th> <th show="{house_view ==\'show_house\'}">House</th> <th show="{class_view ==\'show_class\'}">Class</th> <th show="{gender_view ==\'show_gender\'}">Gender</th> <th show="{category_view ==\'show_category\'}">Category</th> <th show="{dob_view ==\'show_dob\'}">DOB</th> <th show="{age_view ==\'show_age\'}">Age</th> <th show="{doa_view ==\'show_doa\'}">DOA</th> <th show="{doj_view ==\'show_doj\'}">DOJ</th> <th show="{old_doa_view ==\'show_old_doa\'}">Old DOA</th> <th show="{old_doj_view ==\'show_old_doj\'}">Old DOJ</th> <th show="{mother_tongue_view ==\'show_mother_tongue\'}">Mother Tongue</th> <th show="{last_school_view ==\'show_last_school\'}">Last School</th> <th show="{last_class_view ==\'show_last_class\'}">Last Class</th> <th show="{admission_for_view ==\'show_admission_for\'}">Admission For</th> <th show="{hobby_view ==\'show_hobby\'}">Hobby</th> <th show="{blood_group_view ==\'show_blood_group\'}">Blood Group</th> <th show="{nationality_view ==\'show_nationality\'}">Nationality</th> <th show="{cast_view ==\'show_cast\'}">Cast</th> <th show="{religion_view ==\'show_religion\'}">Religion</th> <th show="{c_add_view ==\'show_c_add\'}">C Add</th> <th show="{p_add_view ==\'show_p_add\'}">P Add</th> <th show="{sms_view ==\'show_sms\'}">SMS</th> <th show="{residence_phone_view ==\'show_residence_phone\'}">Residence Phone </th> <th show="{fax_view ==\'show_fax\'}">Emergency No.</th> <th show="{student_type_view ==\'show_student_type\'}">Student Type</th> <th show="{staff_child_view ==\'show_staff_child\'}">Staff Child</th> <th show="{staff_name_view ==\'show_staff_name\'}">Staff Name</th> <th show="{student_email_view ==\'show_student_email\'}">Student Email</th> <th show="{f_title_view ==\'show_f_title\'}">Father Title</th> <th show="{f_name_view ==\'show_f_name\'}">Father\'s Name</th> <th show="{f_school_name_view ==\'show_f_school_name\'}">Father\'s School Name</th> <th show="{f_school_exam__view ==\'show_f_school_exam_\'}">Father\'s School Exam</th> <th show="{f_college_name_view ==\'show_f_college_name\'}">Father\'s College Name</th> <th show="{f_college_exam_view ==\'show_f_college_exam\'}">Father\'s College Exam</th> <th show="{f_occupation_view ==\'show_f_occupation\'}">Father\'s Occupation</th> <th show="{f_add_view ==\'show_f_add\'}">Father\'s Address</th> <th show="{f_phone_view ==\'show_f_phone\'}">Father\'s Phone</th> <th show="{f_mobile_view ==\'show_f_mobile\'}">Father\'s Mobile</th> <th show="{f_fax_view ==\'show_f_fax\'}">Father\'s Fax</th> <th show="{f_email_view ==\'show_f_email\'}">Father\'s Email</th> <th show="{f_organisation_view ==\'show_f_organisation\'}">Father\'s Organisation</th> <th show="{f_annual_income_view ==\'show_f_annual_income\'}">Father\'s AnnualIncome</th> <th show="{f_designation_view ==\'show_f_designation\'}">Father\'s Designation</th> <th show="{f_department_view ==\'show_f_department\'}">Father\'s Department</th> <th show="{f_office_add_view ==\'show_f_office_add\'}">Father\'s Office Add</th> <th show="{f_office_phone_view ==\'show_f_office_phone\'}">Father\'s Office Phone</th> <th show="{f_nationality_view ==\'show_f_nationality\'}">Father\'s Nationality</th> <th show="{m_title_view ==\'show_m_title\'}">Mother Title</th> <th show="{m_name_view ==\'show_m_name\'}">Mother\'s Name</th> <th show="{m_school_exam_view ==\'show_m_school_exam\'}">Mother\'s School Name</th> <th show="{m_exam_exam_view ==\'show_m_exam_exam\'}">Mother\'s School Exam</th> <th show="{m_college_exam_view ==\'show_m_college_exam\'}">Mother\'s College Name</th> <th show="{m_college_name_view ==\'show_m_college_name\'}">Mother\'s College Exam</th> <th show="{m_occupation_view ==\'show_m_occupation\'}">Mother\'s Occupation</th> <th show="{m_add_view ==\'show_m_add\'}">Mother\'s Address</th> <th show="{m_phone_view ==\'show_m_phone\'}">Mother\'s Phone</th> <th show="{m-mobile_view ==\'show_m-mobile\'}">Mother\'s Mobile</th> <th show="{m_fax_view ==\'show_m_fax\'}">Mother\'s Fax</th> <th show="{m_email_view ==\'show_m_email\'}">Mother\'s Email</th> <th show="{m_organisation_view ==\'show_m_organisation\'}">Mother\'s Organisation</th> <th show="{m_annual_income_view ==\'show_m_annual_income\'}">Mother\'s AnnualIncome</th> <th show="{m_designation_view ==\'show_m_designation\'}">Mother\'s Designation</th> <th show="{m_department_view ==\'show_m_department\'}">Mother\'s Department</th> <th show="{m_office_add_view ==\'show_m_office_add\'}">Mother\'s Office Add</th> <th show="{m_office_phone_view ==\'show_m_office_phone\'}">Mother\'s Office Phone</th> <th show="{m_nationality_view ==\'show_m_nationality\'}">Mother\'s Nationality</th> <th show="{g_name_view ==\'show_g_name\'}">Guardian\'s Name</th> <th show="{g_school_name_view ==\'show_g_school_name\'}">Guardian\'s School Name</th> <th show="{g_school_exam_view ==\'show_g_school_exam\'}">Guardian\'s School Exam</th> <th show="{g_college_name_view ==\'show_g_college_name\'}">Guardian\'s College Name</th> <th show="{g-college_exam_view ==\'show_g-college_exam\'}">Guardian\'s College Exam</th> <th show="{g_occupation_view ==\'show_g_occupation\'}">Guardian\'s Occupation</th> <th show="{g_add_view ==\'show_g_add\'}">Guardian\'s Address</th> <th show="{g_phone_view ==\'show_g_phone\'}">Guardian\'s Phone</th> <th show="{g_mobile_view ==\'show_g_mobile\'}">Guardian\'s Mobile</th> <th show="{g_fax_view ==\'show_g_fax\'}">Guardian\'s Fax</th> <th show="{g_email_view ==\'show_g_email\'}">Guardian\'s Email</th> <th show="{g_organisation_view ==\'show_g_organisation\'}">Guardian\'s Organisation</th> <th show="{g_annual_income_view ==\'show_g_annual_income\'}">Guardian\'s AnnualIncome</th> <th show="{g_designation_view ==\'show_g_designation\'}">Guardian\'s Designation</th> <th show="{g_department_view ==\'show_g_department\'}">Guardian\'s Department</th> <th show="{g_office_add_view ==\'show_g_office_add\'}">Guardian\'s Office Add</th> <th show="{g_office_phone_view ==\'show_g_office_phone\'}">Guardian\'s Office Phone</th> <th show="{g_nationality_view ==\'show_g_nationality\'}">Guardian\'s Nationality</th> <th show="{g_relation_view ==\'show_g_relation\'}">Guardian\'s Relation</th> <th show="{sibling_name_view ==\'show_sibling_name\'}">Sibling Name</th> <th show="{sibling_enroll_no_view ==\'show_sibling_enroll_no\'}">Sibling Enroll No</th> </tr> </thead> <tbody> <tr each="{st, i in searchStudents}"> <td>{i+1}</td> <td show="{title_view ==\'show_title\'}">{st.title}</td> <td show="{first_name_view ==\'show_first_name\'}">{st.first_name}</td> <td show="{middle_name_view ==\'show_middle_name\'}">{st.middle_name}</td> <td show="{last_name_view ==\'show_last_name\'}">{st.last_name}</td> <td show="{student_view ==\'show_student\'}">{st.first_name} {st.middle_name} {st.last_name}</td> <td show="{withdrawn_view ==\'show_withdrawn\'}">{st.withdrawn}</td> <td show="{enroll_no_view ==\'show_enroll_no\'}">{st.enroll_number}</td> <td show="{reg_no_view ==\'show_reg_no\'}">{st.reg_number}</td> <td show="{roll_no_view ==\'show_roll_no\'}">{st.roll_number}</td> <td show="{income_view ==\'show_income\'}">{st.f_annual_income}</td> <td show="{group_view ==\'show_group\'}">{st.group_name}</td> <td show="{house_view ==\'show_house\'}">{st.house_name}</td> <td show="{class_view ==\'show_class\'}">{st.standard}</td> <td show="{gender_view ==\'show_gender\'}">{st.gender}</td> <td show="{category_view ==\'show_category\'}">{st.category_name}</td> <td show="{dob_view ==\'show_dob\'}">{st.dob}</td> <td show="{age_view ==\'show_age\'}">{st.age}</td> <td show="{doa_view ==\'show_doa\'}">{st.doa}</td> <td show="{doj_view ==\'show_doj\'}">{st.doj}</td> <td show="{old_doa_view ==\'show_old_doa\'}">{st.old_doa}</td> <td show="{old_doj_view ==\'show_old_doj\'}">{st.old_doj}</td> <td show="{mother_tongue_view ==\'show_mother_tongue\'}">{st.mother_tongue}</td> <td show="{last_school_view ==\'show_last_school\'}">{st.last_school}</td> <td show="{last_class_view ==\'show_last_class\'}">{st.last_class}</td> <td show="{admission_for_view ==\'show_admission_for\'}">{st.admission_for_class}</td> <td show="{hobby_view ==\'show_hobby\'}">{st.hobby}</td> <td show="{blood_group_view ==\'show_blood_group\'}">{st.blood_group}</td> <td show="{nationality_view ==\'show_nationality\'}">{st.nationality}</td> <td show="{cast_view ==\'show_cast\'}">{st.cast}</td> <td show="{religion_view ==\'show_religion\'}">{st.religion}</td> <td show="{c_add_view ==\'show_c_add\'}">{st.c_add_l1} {st.c_add_l2} <br> {st.c_city}-{st.c_zip} <br>{st.c_state}, {st.c_country}</td> <td show="{p_add_view ==\'show_p_add\'}">{st.p_add_l1} {st.p_add_l2} <br> {st.p_city}-{st.p_zip} <br>{st.p_state}, {st.p_country}</td> <td show="{mobile_view ==\'show_mobile\'}">{st.mobile}</td> <td show="{residence_phone_view ==\'show_residence_phone\'}">{st.residence_phone}</td> <td show="{fax_view ==\'show_fax\'}">{st.fax}</td> <td show="{student_type_view ==\'show_student_type\'}">{st.student_type}</td> <td show="{staff_child_view ==\'show_staff_child\'}">{st.staff_child}</td> <td show="{staff_name_view ==\'show_staff_name\'}">{st.staff_name}</td> <td show="{email_view ==\'show_email\'}">{st.email}</td> <td show="{f_title_view ==\'show_f_title\'}">{st.f_title}</td> <td show="{f_name_view ==\'show_f_name\'}">{st.f_name}</td> <td show="{f_school_name_view ==\'show_f_school_name\'}">{st.f_school_name}</td> <td show="{f_school_exam_view ==\'show_f_school_exam\'}">{st.f_school_exam_passed}</td> <td show="{f_college_name_view ==\'show_f_college_name\'}">{st.f_college_name}</td> <td show="{f_college_exam ==\'show_f_college_exam\'}">{st.f_college_exam_passed}</td> <td show="{occupation_view ==\'show_occupation\'}">{st.f_occupation}</td> <td show="{f_add_view ==\'show_f_add\'}">{st.f_add_l1} {st.f_add_l2} <br> {st.f_city}-{st.f_zip} <br>{st.f_state}, {st.f_country}</td> <td show="{f_phone_view ==\'show_f_phone\'}">{st.f_phone}</td> <td show="{f_mobile_view ==\'show_f_mobile\'}">{st.f_mobile}</td> <td show="{f_fax_view ==\'show_f_fax\'}">{st.f_fax}</td> <td show="{f_email_view ==\'show_f_email\'}">{st.f_email}</td> <td show="{f_organisation_view ==\'show_f_organisation\'}">{st.f_organisation_name}</td> <td show="{f_annual_income_view ==\'show_f_annual_income\'}">{st.f_annual_income}</td> <td show="{f_designation_view ==\'show_f_designation\'}">{st.f_designation}</td> <td show="{f_department_view ==\'show_f_department\'}">{st.f_department}</td> <td show="{f_office_add_view ==\'show_f_office_add\'}">{st.f_office_add_l1} {st.f_office_add_l2} <br> {st.f_office_city}-{st.f_office_zip} <br>{st.f_office_state}, {st.f_office_country}</td> <td show="{f_office_phone_view ==\'show_f_office_phone\'}">{st.f_office_phone}</td> <td show="{f_nationality_view ==\'show_f_nationality\'}">{st.f_nationality}</td> <td show="{m_title_view ==\'show_itle\'}">{st.m_title}</td> <td show="{m_name_view ==\'show_m_name\'}">{st.m_name}</td> <td show="{m_school_name_view ==\'show_m_school_name\'}">{st.m_school_name}</td> <td show="{m_school_exam_view ==\'show_chool_exam\'}">{st.m_school_exam_passed}</td> <td show="{m_college_name_view ==\'show_m_college_name\'}">{st.m_college_name}</td> <td show="{m_college_exam_view ==\'show_m_college_exam\'}">{st.m_college_exam_passed}</td> <td show="{occupation_view ==\'show_occupation\'}">{m_occupation}</td> <td show="{m_add_view ==\'show_m_add\'}">{st.m_add_l1} {st.m_add_l2} <br> {st.m_city}-{st.m_zip} <br>{st.m_state}, {st.m_country}</td> <td show="{m_phone_view ==\'show_m_phone\'}">{st.m_phone}</td> <td show="{m_mobile_view ==\'show_m_mobile\'}">{st.m_mobile}</td> <td show="{m_fax_view ==\'show_m_fax\'}">{st.m_fax}</td> <td show="{m_email_view ==\'show_m_email\'}">{st.m_email}</td> <td show="{m_organisation_view ==\'show_m_organisation\'}">{st.m_organisation_name}</td> <td show="{m_annual_income_view ==\'show_m_annual_income\'}">{st.m_annual_income}</td> <td show="{m_designation_view ==\'show_m_designation\'}">{st.m_designation}</td> <td show="{m_department_view ==\'show_m_department\'}">{st.m_department}</td> <td show="{m_office_add_view ==\'show_m_office_add\'}">{st.m_office_add_l1} {st.m_office_add_l2} <br> {st.m_office_city}-{st.m_office_zip} <br>{st.m_office_state}, {st.m_office_country}</td> <td show="{m_office_phone_view ==\'show_m_office_phone\'}">{st.m_office_phone}</td> <td show="{m_nationality_view ==\'show_m_nationality\'}">{st.m_nationality}</td> <td show="{g_title_view ==\'show_g_title\'}">{st.g_title}</td> <td show="{g_name_view ==\'show_g_name\'}">{st.g_name}</td> <td show="{g_school_name_view ==\'show_g_school_name\'}">{st.g_school_name}</td> <td show="{g_school_exam_view ==\'show_g_school_exam\'}">{st.g_school_exag_passed}</td> <td show="{g_college_name_view ==\'show_g_college_name\'}">{st.g_college_name}</td> <td show="{g_college_exam_view ==\'show_g_college_exam\'}">{st.g_college_exag_passed}</td> <td show="{occupation_view ==\'show_occupation\'}">{g_occupation}</td> <td show="{g_add_view ==\'show_g_add\'}">{st.g_add_l1} {st.g_add_l2} <br> {st.g_city}-{st.g_zip} <br>{st.g_state}, {st.g_country}</td> <td show="{g_phone_view ==\'show_g_phone\'}">{st.g_phone}</td> <td show="{g_mobile_view ==\'show_g_mobile\'}">{st.g_mobile}</td> <td show="{g_fax_view ==\'show_g_fax\'}">{st.g_fax}</td> <td show="{g_email_view ==\'show_g_email\'}">{st.g_email}</td> <td show="{g_organisation_view ==\'show_g_organisation\'}">{st.g_organisation_name}</td> <td show="{g_annual_income_view ==\'show_g_annual_income\'}">{st.g_annual_income}</td> <td show="{g_designation_view ==\'show_g_designation\'}">{st.g_designation}</td> <td show="{g_department_view ==\'show_g_department\'}">{st.g_department}</td> <td show="{g_office_add_view ==\'show_g_office_add\'}">{st.g_office_add_l1} {st.g_office_add_l2} <br> {st.g_office_city}-{st.g_office_zip} <br>{st.g_office_state}, {st.g_office_country}</td> <td show="{g_office_phone_view ==\'show_g_office_phone\'}">{st.g_office_phone}</td> <td show="{g_nationality_view ==\'show_g_nationality\'}">{st.g_nationality}</td> <td show="{g_relation_view ==\'show_g_relation\'}">{st.g_relation}</td> <td show="{sibling_name_view ==\'show_sibling_name\'}">{st.sibling_name}</td> <td show="{sibling_enroll_no_view ==\'show_sibling_enroll_no\'}">{st.sibling_enroll_number}</td> </tr> </tbody> </table> </div> </section> <section> <div id="columnSetting" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Setting Configuaration</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="field"> <label class="label" for="role"></label> <div class="control" each="{st, i in fieldList}"> <input class="checkbox" type="checkbox" checked="{st.done}" id="{\'addStudentName\' + st.array_name}" onclick="{addCheckedColumn.bind(this,st)}">{st.field_name} </div> </div> </div> </div> </section> <footer class="modal-card-foot"> <div class="control"> <input type="checkbox" id="checkAllCheckBox" onclick="{selectAllCheckBox}"> All </div> <button class="button" id="item-modal-close" onclick="{closeCheckBoxModal}">Close</button> </footer> </div> </div> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.search_by='more'

    	self.fieldList =[
			{ field_name : "Group", array_name : "Group"},
			{ field_name : "House", array_name : "House"},
			{ field_name : "Title", array_name : "Title"},
			{ field_name : "FirstName", array_name : "First Name"},
			{ field_name : "MiddleName", array_name : "Middle Name"},
			{ field_name : "LastName", array_name : "Last Name"},
			{ field_name : "FullName" , array_name : "Full Name"},
			{ field_name : "Standard" , array_name : "Class"},
			{ field_name : "Enroll" , array_name : "Enroll No"},
			{ field_name : "Roll" , array_name : "Roll No"},
			{ field_name : "Registration", array_name : "Registration No"},
			{ field_name : "Gender", array_name : "Gender"},
			{ field_name : "Category", array_name : "Category"},
			{ field_name : "DOB", array_name : "DOB"},
			{ field_name : "Age", array_name : "Age as on 1st Apr"},
			{ field_name : "Income", array_name : "Income"},
			{ field_name : "DOA", array_name : "DOA"},
			{ field_name : "DOj", array_name : "DOJ"},
			{ field_name : "OldDOA", array_name : "Old DOA"},
			{ field_name : "OldDOj", array_name : "Old DOJ"},
			{ field_name : "MotherTongue", array_name : "Mother Tongue"},
			{ field_name : "LastSchool", array_name : "Last School"},
			{ field_name : "LastClass", array_name : "Last Class"},
			{ field_name : "AdmissionforClass", array_name : "Admission for Class"},
			{ field_name : "Hobby", array_name : "Hobby"},
			{ field_name : "BloodGroup", array_name : "Blood Group"},
			{ field_name : "Nationality", array_name : "Nationality"},
			{ field_name : "Cast", array_name : "Cast"},
			{ field_name : "Religion", array_name : "Religion"},
			{ field_name : "c_Address", array_name : "Correspondence Address"},
			{ field_name : "p_Address", array_name : "Permanent Address"},
			{ field_name : "Mobile" , array_name : "SMS"},
			{ field_name : "ResidencePhone", array_name : "Residence Phone"},
			{ field_name : "Emergency No.", array_name : "Emergency No."},
			{ field_name : "StudentType", array_name : "Student Type"},
			{ field_name : "StaffChild", array_name : "Staff Child"},
			{ field_name : "StaffName", array_name : "Staff Name"},
			{ field_name : "stdEmail" , array_name : "Student Email"},
			{ field_name : "f_Title", array_name : "Father Title"},
			{ field_name : "f_Name" , array_name :"Father Name"},
			{ field_name : "f_School" , array_name :"f_School Name"},
			{ field_name : "f_School_Exam" , array_name :"f_School Exam"},
			{ field_name : "f_College" , array_name :"f_College Name"},
			{ field_name : "f_College_Exam" , array_name :"f_College Exam"},
			{ field_name : "f_Occupation" , array_name :"f_Occupation"},
			{ field_name : "f_Address" , array_name :"f_Address"},
			{ field_name : "f_Phone" , array_name :"f_Phone"},
			{ field_name : "f_Mobile" , array_name :"f_Mobile"},
			{ field_name : "f_Fax" , array_name :"f_Fax"},
			{ field_name : "f_Email" , array_name :"f_Email"},
			{ field_name : "f_OrganisationType" , array_name :"f_Organisation Type"},
			{ field_name : "f_AnnualIncom" , array_name :"f_Annual Income"},
			{ field_name : "f_OrganisationName" , array_name :"f_Organisation Name"},
			{ field_name : "f_Designation" , array_name :"f_Designation"},
			{ field_name : "f_Department" , array_name :"f_Department"},
			{ field_name : "f_OfficeAddess" , array_name :"f_Office Address"},
			{ field_name : "f_OfficePhone" , array_name :"f_Office Phone"},
			{ field_name : "f_Nationality" , array_name :"f_Nationality"},

			{ field_name : "m_Title" , array_name :"Mother Title"},
			{ field_name : "m_Name" , array_name :"Mother Name"},
			{ field_name : "m_School" , array_name :"m_School Name"},
			{ field_name : "m_School_Exam" , array_name :"m_School Exam"},
			{ field_name : "m_College" , array_name :"m_College Name"},
			{ field_name : "m_College_Exam" , array_name :"m_College Exam"},
			{ field_name : "m_Occupation" , array_name :"m_Occupation"},
			{ field_name : "m_Address" , array_name :"m_Address"},
			{ field_name : "m_Phone" , array_name :"m_Phone"},
			{ field_name : "m_Mobile" , array_name :"m_Mobile"},
			{ field_name : "m_Fax" , array_name :"m_Fax"},
			{ field_name : "m_Email" , array_name :"m_Email"},
			{ field_name : "m_OrganisationType" , array_name :"m_Organisation Type"},
			{ field_name : "m_AnnualIncom" , array_name :"m_Annual Income"},
			{ field_name : "m_OrganisationName" , array_name :"m_Organisation Name"},
			{ field_name : "m_Designation" , array_name :"m_Designation"},
			{ field_name : "m_Department" , array_name :"m_Department"},
			{ field_name : "m_OfficeAddess" , array_name :"m_Office Address"},
			{ field_name : "m_OfficePhone" , array_name :"m_Office Phone"},
			{ field_name : "m_Nationality" , array_name :"m_Nationality"},
			{ field_name : "g_Title" , array_name :"Guardian Title"},
			{ field_name : "g_Name" , array_name :"Guardian Name"},
			{ field_name : "g_School" , array_name :"g_School Name"},
			{ field_name : "g_School_Exam" , array_name :"g_School Exam"},
			{ field_name : "g_College" , array_name :"g_College Name"},
			{ field_name : "g_College_Exam" , array_name :"g_College Exam"},
			{ field_name : "g_Occupation" , array_name :"g_Occupation"},
			{ field_name : "g_Address" , array_name :"g_Address"},
			{ field_name : "g_Phone" , array_name :"g_Phone"},
			{ field_name : "g_Mobile" , array_name :"g_Mobile"},
			{ field_name : "g_Fax" , array_name :"g_Fax"},
			{ field_name : "g_Email" , array_name :"g_Email"},
			{ field_name : "g_OrganisationType" , array_name :"g_Organisation Type"},
			{ field_name : "g_AnnualIncom" , array_name :"g_Annual Income"},
			{ field_name : "g_OrganisationName" , array_name :"g_Organisation Name"},
			{ field_name : "g_Designation" , array_name :"g_Designation"},
			{ field_name : "g_Department" , array_name :"g_Department"},
			{ field_name : "g_OfficeAddess" , array_name :"g_Office Address"},
			{ field_name : "g_OfficePhone" , array_name :"g_Office Phone"},
			{ field_name : "g_Nationality" , array_name :"g_Nationality"},
			{ field_name : "g_relation" , array_name :"g_relation" },
			{ field_name : "sibling_Name" , array_name :"Sibling Name"},
			{ field_name : "siblingEnrollNumber" , array_name :"Sibling Enrol Number"}

			  ];

		self.student_view ='show_student'
		self.withdrawn_view ='show_withdrawn'
		self.enroll_no_view ='show_enroll_no'
		self.reg_no_view ='show_reg_no'
		self.roll_no_view ='show_roll_no'

		self.house_view ='show_house'
		self.class_view ='show_class'
		self.f_name_view ='show_f_name'
		self.m_name_view ='show_m_name'
    	self.role = getCookie('role')
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){

      studentSearchStore.off('read_by_field_change',ReadByFieldChanged)
    })

    self.closeCheckBoxModal=()=>{
    	 $("#columnSetting").removeClass("is-active");

    }
    self.selectAllCheckBox = () => {
    	console.log("checkAlll")
      if($('#checkAllCheckBox').is(":checked")){
        self.fieldList.map(i=>{
        	console.log(i)
          i.done = true;
          $('addStudentName'+i.array_name).prop('checked', true);
        })
      }else{
        self.fieldList.map(i=>{
          i.done = false;
          $('addStudentName'+i.array_name).prop('checked', false);
        })
      }
      	var item=''
      	var event=''
       self.addCheckedColumn(item,event)
    }

     self.addCheckedColumn = (item, event) => {
     	console.log(item)
     	if(item!=''){
    	 item.done=!event.item.st.done
     	}

        self.fieldList.map( q => {
        	console.log(q.field_name)
        	let a={}
	        if(q.done==true && q.array_name=="Group"){
	           self.group_view='show_group'
            }

			if(q.done==true && q.array_name=="House"){
				self.house_view='show_house'
			}
			if(q.done==true && q.array_name=="Title"){
				self.title_view='show_title'
			}

			if(q.done==true && q.array_name== "First Name"){
					self.first_name_view='show_first_name'
			}
			if(q.done==true && q.array_name=="Middle Name"){
					self.middle_name_view='show_middle_name'
			}
			if(q.done==true && q.array_name== "Last Name"){
					self.last_name_view='show_last_name'
			}
			if(q.done==true && q.array_name=="Full Name"){
					self.student_view='show_student'
			}

			if(q.done==true && q.array_name=="Class"){
					self.class_view='show_class'
			}
			if(q.done==true && q.array_name=="Enroll No"){
					self.enroll_no_view='show_enroll_no'
			}

			if(q.done==true && q.array_name=="Roll No"){
					self.roll_no_view='show_roll_no'
			}
			if(q.done==true && q.array_name=="Registration No"){
				self.reg_no_view='show_reg_no'
			}
			if(q.done==true && q.array_name=="Gender"){
					self.gender_view='show_gender'
			}

			if(q.done==true && q.array_name=="Category"){
					self.category_view='show_category'
			}
			if(q.done==true && q.array_name=="DOB"){
					self.dob_view='show_dob'
			}
			if(q.done==true && q.array_name=="Age as on 1st Apr"){
					self.age_view='show_age'
			}
			if(q.done==true && q.array_name=="Income"){
					self.income_view='show_income'
			}
			if(q.done==true && q.array_name=="DOA"){
					self.doa_view='show_doa'
			}
			if(q.done==true && q.array_name=="DOJ"){
					self.doj_view='show_doj'
			}
			if(q.done==true && q.array_name=="Old DOA"){
					self.old_doa_view='show_old_doa'
			}
			if(q.done==true && q.array_name=="Old DOJ"){
					self.old_doj_view='show_old_doj'
			}
			if(q.done==true && q.array_name=="Mother Tongue"){
					self.mother_tongue_view='show_mother_tongue'
			}
			if(q.done==true && q.array_name=="Last School"){
					self.last_school_view='show_last_school'
			}
			if(q.done==true && q.array_name=="Last Class"){
					self.last_class_view='show_last_class'
			}
			if(q.done==true && q.array_name=="Admission for Class"){
					self.admission_for_view='show_admission_for'
			}
			if(q.done==true && q.array_name=="Hobby"){
					self.hobby_view='show_hobby'
			}
			if(q.done==true && q.array_name=="Blood Group"){
					self.blood_group_view='show_blood_group'
			}
			if(q.done==true && q.array_name=="Nationality"){
					self.nationality_view='show_nationality'
			}
			if(q.done==true && q.array_name=="Cast"){
					self.cast_view='show_cast'
			}
			if(q.done==true && q.array_name=="Religion"){
					self.religion_view='show_religion'
			}
			if(q.done==true && q.array_name=="Correspondence Address"){
					self.c_add_view='show_c_add'
			}
			if(q.done==true && q.array_name=="Permanent Address"){
					self.p_add_view='show_p_add'
			}
			if(q.done==true && q.array_name=="SMS"){
					self.sms_no_view='show_sms_no'
			}
			if(q.done==true && q.array_name=="Residence Phone"){
					self.residence_phone_view='show_residence_phone'
			}
			if(q.done==true && q.array_name=="Fax"){
					self.fax_view='show_fax'
			}
			if(q.done==true && q.array_name=="Student Type"){
					self.student_type_view='show_student_type'
			}
			if(q.done==true && q.array_name=="Staff Child"){
					self.staff_child_view='show_staff_child'
			}
			if(q.done==true && q.array_name=="Staff Name"){
					self.staff_name_view='show_staff_name'
			}
			if(q.done==true && q.array_name=="Student Email"){
					self.student_email_view='show_student_email'
			}
			if(q.done==true && q.array_name=="Father Title"){
					self.f_title_view='show_f_title'
			}
			if(q.done==true && q.array_name=="Father Name"){
					self.f_name_view='show_f_name'
			}
			if(q.done==true && q.array_name=="f_School Name"){
					self.f_school_name_view='show_f_school_name'
			}
			if(q.done==true && q.array_name=="f_School Exam"){
					self.f_school_exam_view='show_f_school_exam'
			}
			if(q.done==true && q.array_name=="f_College Name"){
					self.f_college_name_view='show_f_college_name'
			}
			if(q.done==true && q.array_name=="f_College Exam"){
					self.f_college_exam_view='show_f_college_exam'
			}
			if(q.done==true && q.array_name=="f_Occupation"){
					self.f_occupation_view='show_f_occupation'
			}
			if(q.done==true && q.array_name=="f_Address"){
					self.f_add_view='show_f_add'
			}
			if(q.done==true && q.array_name=="f_Phone"){
					self.f_phone_view='show_f_phone'
			}
			if(q.done==true && q.array_name=="f_Mobile"){
					self.f_mobile_view='show_f_mobile'
			}
			if(q.done==true && q.array_name=="f_Fax"){
					self.f_fax_view='show_f_fax'
			}
			if(q.done==true && q.array_name=="f_Email"){
					self.f_email_view='show_f_email'
			}
			if(q.done==true && q.array_name=="f_Organisation Type"){
					self.f_organisation_view='show_f_organisation'
			}
			if(q.done==true && q.array_name=="f_Annual Income"){
					self.f_annual_income_view='show_f_annual_income'
			}
			if(q.done==true && q.array_name=="Income"){
					self.f_annual_income_view='show_f_annual_income'
			}
			if(q.done==true && q.array_name=="f_Organisation Name"){
					self.f_organisation_view='show_f_organisation'
			}
			if(q.done==true && q.array_name=="f_Designation"){
					self.f_designation_view='show_f_designation'
			}
			if(q.done==true && q.array_name=="f_Department"){
					self.f_department_view='show_f_department'
			}
			if(q.done==true && q.array_name=="f_Office Address"){
					self.f_office_add_view='show_f_office_add'
			}
			if(q.done==true && q.array_name=="f_Office Phone"){
					self.f_office_phone_view='show_f_office_phone'
			}
			if(q.done==true && q.array_name=="f_Nationality"){
					self.f_nationality_view='show_f_nationality'
			}

			if(q.done==true && q.array_name=="Mother Title"){
					self.m_title_view='show_m_title'
			}
			if(q.done==true && q.array_name=="Mother Name"){
					self.m_name_view='show_m_name'
			}
			if(q.done==true && q.array_name=="m_School Name"){
					self.m_school_name_view='show_m_school_name'
			}
			if(q.done==true && q.array_name=="m_School Exam"){
					self.m_school_exam_view='show_m_school_exam'
			}
			if(q.done==true && q.array_name=="m_College Name"){
					self.m_college_name_view='show_m_college_name'
			}
			if(q.done==true && q.array_name=="m_College Exam"){
					self.m_college_exam_view='show_m_college_exam'
			}
			if(q.done==true && q.array_name=="m_Occupation"){
					self.m_occupation_view='show_m_occupation'
			}
			if(q.done==true && q.array_name=="m_Address"){
					self.m_add_view='show_m_add'
			}
			if(q.done==true && q.array_name=="m_Phone"){
					self.m_phone_view='show_m_phone'
			}
			if(q.done==true && q.array_name=="m_Mobile"){
					self.m_mobile_view='show_m_mobile'
			}
			if(q.done==true && q.array_name=="m_Fax"){
					self.m_fax_view='show_m_fax'
			}
			if(q.done==true && q.array_name=="m_Email"){
					self.m_email_view='show_m_email'
			}
			if(q.done==true && q.array_name=="m_Organisation Type"){
					self.m_organisation_view='show_m_organisation'
			}
			if(q.done==true && q.array_name=="m_Annual Income"){
					self.m_annual_income_view='show_m_annual_income'
			}
			if(q.done==true && q.array_name=="m_Organisation Name"){
					self.m_organisation_view='show_m_organisation'
			}
			if(q.done==true && q.array_name=="m_Designation"){
					self.m_designation_view='show_m_designation'
			}
			if(q.done==true && q.array_name=="m_Department"){
					self.m_department_view='show_m_department'
			}
			if(q.done==true && q.array_name=="m_Office Address"){
					self.m_office_add_view='show_m_office_add'
			}
			if(q.done==true && q.array_name=="m_Office Phone"){
					self.m_office_phone_view='show_m_office_phone'
			}
			if(q.done==true && q.array_name=="m_Nationality"){
					self.m_nationality_view='show_m_nationality'
			}

			if(q.done==true && q.array_name=="Guardian Title"){
					self.g_title_view='show_g_title'
			}
			if(q.done==true && q.array_name=="Guardian Name"){
					self.g_name_view='show_g_name'
			}
			if(q.done==true && q.array_name=="g_School Name"){
					self.g_school_name_view='show_g_school_name'
			}
			if(q.done==true && q.array_name=="g_School Exam"){
					self.g_school_exag_view='show_g_school_exam'
			}
			if(q.done==true && q.array_name=="g_College Name"){
					self.g_college_name_view='show_g_college_name'
			}
			if(q.done==true && q.array_name=="g_College Exam"){
					self.g_college_exag_view='show_g_college_exam'
			}
			if(q.done==true && q.array_name=="g_Occupation"){
					self.g_occupation_view='show_g_occupation'
			}
			if(q.done==true && q.array_name=="g_Address"){
					self.g_add_view='show_g_add'
			}
			if(q.done==true && q.array_name=="g_Phone"){
					self.g_phone_view='show_g_phone'
			}
			if(q.done==true && q.array_name=="g_Mobile"){
					self.g_mobile_view='show_g_mobile'
			}
			if(q.done==true && q.array_name=="g_Fax"){
					self.g_fax_view='show_g_fax'
			}
			if(q.done==true && q.array_name=="g_Email"){
					self.g_email_view='show_g_email'
			}
			if(q.done==true && q.array_name=="g_Organisation Type"){
					self.g_organisation_view='show_g_organisation'
			}
			if(q.done==true && q.array_name=="g_Annual Income"){
					self.g_annual_income_view='show_g_annual_income'
			}
			if(q.done==true && q.array_name=="g_Organisation Name"){
					self.g_organisation_view='show_g_organisation'
			}
			if(q.done==true && q.array_name=="g_Designation"){
					self.g_designation_view='show_g_designation'
			}
			if(q.done==true && q.array_name=="g_Department"){
					self.g_department_view='show_g_department'
			}
			if(q.done==true && q.array_name=="g_Office Address"){
					self.g_office_add_view='show_g_office_add'
			}
			if(q.done==true && q.array_name=="g_Office Phone"){
					self.g_office_phone_view='show_g_office_phone'
			}
			if(q.done==true && q.array_name=="g_Nationality"){
					self.g_nationality_view='show_g_nationality'
			}

			if(q.done==true && q.array_name=="g_relation"){
				self.g_relation_view='show_g_relation'
			}
			if(q.done==true && q.array_name=="Sibling Name"){
				self.sibling_name_view='show_sibling_name'
			}
			if(q.done==true && q.array_name=="Sibling Enrol Number"){
				self.sibling_enroll_no_view='show_sibling_enroll_no'
			}

		    if(q.done==false && q.array_name=="Group"){
	           self.title_view=''
            }

			if(q.done==false && q.array_name=="House"){
				self.house_view=''
			}
			if(q.done==false && q.array_name=="Title"){
				self.title_view=''
			}

			if(q.done==false && q.array_name== "First Name"){
					self.first_name_view=''
			}
			if(q.done==false && q.array_name=="Middle Name"){
					self.middle_name_view=''
			}
			if(q.done==false && q.array_name== "Last Name"){
					self.last_name_view=''
			}
			if(q.done==false && q.array_name=="Full Name"){
					self.student_view=''
			}

			if(q.done==false && q.array_name=="Class"){
					self.class_view=''
			}
			if(q.done==false && q.array_name=="Enroll No"){
					self.enroll_no_view=''
			}

			if(q.done==false && q.array_name=="Roll No"){
					self.roll_no_view=''
			}
			if(q.done==false && q.array_name=="Registration No"){
				self.reg_no_view=''
			}
			if(q.done==false && q.array_name=="Gender"){
					self.gender_view=''
			}

			if(q.done==false && q.array_name=="Category"){
					self.category_view=''
			}
			if(q.done==false && q.array_name=="DOB"){
					self.dob_view=''
			}
			if(q.done==false && q.array_name=="Age as on 1st Apr"){
					self.age_view=''
			}
			if(q.done==false && q.array_name=="Income"){
					self.annual_income_view=''
			}
			if(q.done==false && q.array_name=="DOA"){
					self.doa_view=''
			}
			if(q.done==false && q.array_name=="DOJ"){
					self.doj_view=''
			}
			if(q.done==false && q.array_name=="Old DOA"){
					self.old_doa_view=''
			}
			if(q.done==false && q.array_name=="Old DOJ"){
					self.old_doj_view=''
			}
			if(q.done==false && q.array_name=="Mother Tongue"){
					self.mother_tongue_view=''
			}
			if(q.done==false && q.array_name=="Last School"){
					self.last_school_view=''
			}
			if(q.done==false && q.array_name=="Last Class"){
					self.last_class_view=''
			}
			if(q.done==false && q.array_name=="Admission for Class"){
					self.admission_for_view=''
			}
			if(q.done==false && q.array_name=="Hobby"){
					self.hobby_view=''
			}
			if(q.done==false && q.array_name=="Blood Group"){
					self.blood_group_view=''
			}
			if(q.done==false && q.array_name=="Nationality"){
					self.nationality_view=''
			}
			if(q.done==false && q.array_name=="Cast"){
					self.cast_view=''
			}
			if(q.done==false && q.array_name=="Religion"){
					self.religion_view=''
			}
			if(q.done==false && q.array_name=="Correspondence Address"){
					self.c_add_view=''
			}
			if(q.done==false && q.array_name=="Permanent Address"){
					self.p_add_view=''
			}
			if(q.done==false && q.array_name=="SMS"){
					self.sms_no_view=''
			}
			if(q.done==false && q.array_name=="Residence Phone"){
					self.residence_phone_view=''
			}
			if(q.done==false && q.array_name=="Fax"){
					self.fax_view=''
			}
			if(q.done==false && q.array_name=="Student Type"){
					self.student_type_view=''
			}
			if(q.done==false && q.array_name=="Staff Child"){
					self.staff_child_view=''
			}
			if(q.done==false && q.array_name=="Staff Name"){
					self.staff_name_view=''
			}
			if(q.done==false && q.array_name=="Student Email"){
					self.student_email_view=''
			}
			if(q.done==false && q.array_name=="Father Title"){
					self.f_title_view=''
			}
			if(q.done==false && q.array_name=="Father Name"){
					self.f_name_view=''
			}
			if(q.done==false && q.array_name=="f_School Name"){
					self.f_school_name_view=''
			}
			if(q.done==false && q.array_name=="f_School Exam"){
					self.f_school_exam_view=''
			}
			if(q.done==false && q.array_name=="f_College Name"){
					self.f_college_name_view=''
			}
			if(q.done==false && q.array_name=="f_College Exam"){
					self.f_college_exam_view=''
			}
			if(q.done==false && q.array_name=="f_Occupation"){
					self.f_occupation_view=''
			}
			if(q.done==false && q.array_name=="f_Address"){
					self.f_add_view=''
			}
			if(q.done==false && q.array_name=="f_Phone"){
					self.f_phone_view=''
			}
			if(q.done==false && q.array_name=="f_Mobile"){
					self.f_mobile_view=''
			}
			if(q.done==false && q.array_name=="f_Fax"){
					self.f_fax_view=''
			}
			if(q.done==false && q.array_name=="f_Email"){
					self.f_email_view=''
			}
			if(q.done==false && q.array_name=="f_Organisation Type"){
					self.f_organisation_view=''
			}
			if(q.done==false && q.array_name=="f_Annual Income"){
					self.f_annual_income_view=''
			}
			if(q.done==false && q.array_name=="f_Organisation Name"){
					self.f_organisation_view=''
			}
			if(q.done==false && q.array_name=="f_Designation"){
					self.f_designation_view=''
			}
			if(q.done==false && q.array_name=="f_Department"){
					self.f_department_view=''
			}
			if(q.done==false && q.array_name=="f_Office Address"){
					self.f_office_add_view=''
			}
			if(q.done==false && q.array_name=="f_Office Phone"){
					self.f_office_phone_view=''
			}
			if(q.done==false && q.array_name=="f_Nationality"){
					self.f_nationality_view=''
			}

			if(q.done==false && q.array_name=="Mother Title"){
					self.m_title_view=''
			}
			if(q.done==false && q.array_name=="Mother Name"){
					self.m_name_view=''
			}
			if(q.done==false && q.array_name=="Income"){
					self.income_view=''
			}
			if(q.done==false && q.array_name=="m_School Name"){
					self.m_school_name_view=''
			}
			if(q.done==false && q.array_name=="m_School Exam"){
					self.m_school_exam_view=''
			}
			if(q.done==false && q.array_name=="m_College Name"){
					self.m_college_name_view=''
			}
			if(q.done==false && q.array_name=="m_College Exam"){
					self.m_college_exam_view=''
			}
			if(q.done==false && q.array_name=="m_Occupation"){
					self.m_occupation_view=''
			}
			if(q.done==false && q.array_name=="m_Address"){
					self.m_add_view=''
			}
			if(q.done==false && q.array_name=="m_Phone"){
					self.m_phone_view=''
			}
			if(q.done==false && q.array_name=="m_Mobile"){
					self.m_mobile_view=''
			}
			if(q.done==false && q.array_name=="m_Fax"){
					self.m_fax_view=''
			}
			if(q.done==false && q.array_name=="m_Email"){
					self.m_email_view=''
			}
			if(q.done==false && q.array_name=="m_Organisation Type"){
					self.m_organisation_view=''
			}
			if(q.done==false && q.array_name=="m_Annual Income"){
					self.m_annual_income_view=''
			}
			if(q.done==false && q.array_name=="m_Organisation Name"){
					self.m_organisation_view=''
			}
			if(q.done==false && q.array_name=="m_Designation"){
					self.m_designation_view=''
			}
			if(q.done==false && q.array_name=="m_Department"){
					self.m_department_view=''
			}
			if(q.done==false && q.array_name=="m_Office Address"){
					self.m_office_add_view=''
			}
			if(q.done==false && q.array_name=="m_Office Phone"){
					self.m_office_phone_view=''
			}
			if(q.done==false && q.array_name=="m_Nationality"){
					self.m_nationality_view=''
			}

			if(q.done==false && q.array_name=="Guardian Title"){
					self.g_title_view=''
			}
			if(q.done==false && q.array_name=="Guardian Name"){
					self.g_name_view=''
			}
			if(q.done==false && q.array_name=="g_School Name"){
					self.g_school_name_view=''
			}
			if(q.done==false && q.array_name=="g_School Exam"){
					self.g_school_exag_view=''
			}
			if(q.done==false && q.array_name=="g_College Name"){
					self.g_college_name_view=''
			}
			if(q.done==false && q.array_name=="g_College Exam"){
					self.g_college_exag_view=''
			}
			if(q.done==false && q.array_name=="g_Occupation"){
					self.g_occupation_view=''
			}
			if(q.done==false && q.array_name=="g_Address"){
					self.g_add_view=''
			}
			if(q.done==false && q.array_name=="g_Phone"){
					self.g_phone_view=''
			}
			if(q.done==false && q.array_name=="g_Mobile"){
					self.g_mobile_view=''
			}
			if(q.done==false && q.array_name=="g_Fax"){
					self.g_fax_view=''
			}
			if(q.done==false && q.array_name=="g_Email"){
					self.g_email_view=''
			}
			if(q.done==false && q.array_name=="g_Organisation Type"){
					self.g_organisation_view=''
			}
			if(q.done==false && q.array_name=="g_Annual Income"){
					self.g_annual_income_view=''
			}
			if(q.done==false && q.array_name=="g_Organisation Name"){
					self.g_organisation_view=''
			}
			if(q.done==false && q.array_name=="g_Designation"){
					self.g_designation_view=''
			}
			if(q.done==false && q.array_name=="g_Department"){
					self.department_view=''
			}
			if(q.done==false && q.array_name=="g_Office Address"){
					self.g_office_add_view=''
			}
			if(q.done==false && q.array_name=="g_Office Phone"){
					self.g_office_phone_view=''
			}
			if(q.done==false && q.array_name=="g_Nationality"){
					self.g_nationality_view=''
			}
			if(q.done==true && q.array_name=="g_relation"){
				self.g_relation_view=''
			}

			if(q.done==false && q.array_name=="Sibling Name"){
				self.sibling_name_view=''
			}
			if(q.done==false && q.array_name=="Sibling Enrol Number"){
				self.sibling_enroll_no_view=''
			}

        })
    }

    self.addEnter = (e) => {
    	console.log("inside enter")
      if(e.which == 13){
        self.searchByField()
      }
    }
    self.showSearchBox = () =>{
      if(self.search_by=='one'){
      	self.search_view='search_box'
      	self.search_by='more';
      	self.refs.student_name.value='';
      	self.refs.m_name.value='';
      	self.refs.reg_number.value='';
      	self.refs.f_name.value='';
      }else{
      	self.refs.roll_no.value='';
      	self.search_by='one';
      	self.search_view='more_search_box'

      }
    }

    self.showStudentField = () =>{
    		$("#columnSetting").addClass("is-active")

    }
    self.searchByField = () => {
    	console.log("inside")
    	console.log(self.refs.roll_no.value)
    	self.loading=true
       studentSearchStore.trigger('read_by_field',self.refs.roll_no.value,self.refs.student_name.value,self.refs.reg_number.value,self.refs.f_name.value,self.refs.m_name.value)
    }

    studentSearchStore.on('read_by_field_change',ReadByFieldChanged)
    function ReadByFieldChanged(searchStudents){

      self.title='Create'
      self.loading = false
      self.searchStudents = searchStudents
      self.update()

    }

});
riot.tag2('student-strength-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h4 class="title has-text-centered" style="color: #ff3860;">Student Strength School <br> ({grand_total})</h4> <div class="box no-print"> <div class="columns"> <div class=" column"> <input type="checkbox" id="checkTable" checked="{e.done}" onclick="{viewTable}" style="margin-top: 12px;"> Table <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i></span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readStudentStrengthReport}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <center> <div id="piechart" style="width: 900px; height: 450px;" show="{report_view ==\'show_graph\'}"></div> </center> <table class="table is-fullwidth is-striped is-hoverable is-narrow printOnly_t" show="{report_view ==\'show_table\'}" style="margin-top:50px;margin-left:400px"> <thead> <tr> <th>#</th> <th>Class</th> <th>Total</th> </tr> </thead> <tbody> <tr each="{st, i in studentStrengthReports}"> <td>{i+1}</td> <td>{st.standard}</td> <td>{st.total}</td> </tr> </tbody> </table> <table class="table is-fullwidth is-striped is-hoverable is-narrow no-print" show="{report_view ==\'show_table\'}"> <thead> <tr> <th>#</th> <th>Class</th> <th>Total</th> </tr> </thead> <tbody> <tr each="{st, i in studentStrengthReports}"> <td>{i+1}</td> <td>{st.standard}</td> <td>{st.total}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.report_view='show_graph'
    	self.role = getCookie('role')
    	self.readStudentStrengthReport()
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
      adminReportStore.off('read_student_strength_report_changed',ReadStudentStrengthReportChanged)
    })

    self.readStudentStrengthReport = () => {
    	self.loading=true
       adminReportStore.trigger('read_student_strength_report')
    }

     self.viewTable = () => {
    	if($('#checkTable').is(":checked")){
	        self.report_view = 'show_table'
    	}else{
	        self.report_view = 'show_graph'
    	}
    }

    adminReportStore.on('read_student_strength_report_changed',ReadStudentStrengthReportChanged)
    function ReadStudentStrengthReportChanged(studentStrengthReports,session_name){

      self.title='Create'
      self.loading = false
      self.studentStrengthReports = studentStrengthReports
      self.grandTotal=0
      self.studentStrengthReports.map(d => {
          self.grand_total= Number(self.grandTotal) + Number(d.total)
      })
      self.session_name = session_name

      var chart_percentage = []
       chart_percentage.push(['Task', 'Hours per Day'])
       for (var i = self.studentStrengthReports.length - 1; i >= 0; i--) {
		   chart_percentage.push([self.studentStrengthReports[i].standard,self.studentStrengthReports[i].total])
		}

      google.charts.load("current", {packages:["corechart"]});
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {

        var data = google.visualization.arrayToDataTable(chart_percentage);

        var options = {
          is3D: true,
          legend:{position: 'labeled',
                  textStyle: {bold: true} },
          pieSliceText: 'value'
        };

        var chart = new google.visualization.PieChart(document.getElementById('piechart'));
        chart.draw(data, options);
      }

	      self.update()

    }

});
riot.tag2('student-summary-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h4 class="title has-text-centered" style="color: #ff3860;">Class Wise Strength ({session_name})</h4> <div class="box no-print"> <div class="columns"> <div class=" column"> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i></span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readStudentSummaryReport}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable is-narrow"> <thead> <tr> <th>#</th> <th>Standard</th> <th>A</th> <th>B</th> <th>C</th> <th>D</th> <th>E</th> <th>N</th> <th>Total</th> </tr> </thead> <tbody> <tr each="{st, i in studentSummaryReports}"> <td>{i+1}</td> <td>{st.standard}</td> <td>{st.s0}</td> <td>{st.s1}</td> <td>{st.s2}</td> <td>{st.s3}</td> <td>{st.s4}</td> <td>{st.n}</td> <td class="has-text-weight-bold">{st.total}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'
    	self.role = getCookie('role')
    	self.readStudentSummaryReport()
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
      adminReportStore.off('read_student_summary_report_changed',ReadStudentSummaryReportChanged)
    })

    self.readStudentSummaryReport = () => {
    	self.loading=true
       adminReportStore.trigger('read_student_summary_report')
    }

    adminReportStore.on('read_student_summary_report_changed',ReadStudentSummaryReportChanged)
    function ReadStudentSummaryReportChanged(studentSummaryReports,session_name){

      self.title='Create'
      self.loading = false
      self.studentSummaryReports = studentSummaryReports
      self.session_name = session_name
      self.update()

    }

});
riot.tag2('student-withdrawn-student', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="level no-print"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Withdrawn Student</h2> </div> <div class="level-right"> </div> </div> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"><label class="label">From Date</label></div> <div class="column is-small"> <div class="control"> <input class="input date" type="text" ref="fromDateInput"> </div> </div> <div class="column is-narrow"><label class="label">To Date</label></div> <div class="column is-small"> <div class="control"> <input class="input date" type="text" ref="toDateInput"> </div> </div> <div class="column is-narrow"><label class="label">Standard</label></div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="standardSelect" id="standard" onchange="{changeSection}"> <option value="">Select Standard</option> <option each="{classes}" riot-value="{standard_id}">{standard}</option> <option value="-1">All</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="sectionSelect" id="section"> <option value="">Select Section</option> <option each="{tempSections}" riot-value="{section_id}">{section}</option> <option value="-1">All</option> </select> </div> </div> </div> <div class="column is-narrow"> <button class="button is-danger has-text-weight-bold" onclick="{refreshStudents}">GO </button> </div> <div class="column is-narrow"> <button class="button is-primary has-text-weight-bold ml5" style="margin-bottom:12px;" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> </div> <h2 class="title has-text-centered is-size-6" style="color: #ff3860;">Withdraw Report</h2> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th class="slno">Sl</th> <th>Enroll No</th> <th>Student Name</th> <th>Withdraw class</th> <th>Date of withdraw</th> <th>Reason</th> <th>TC No</th> <th class="no-print"></th> </tr> </thead> <tbody> <tr each="{c, i in students}"> <td>{i+1}</td> <td>{c.enroll_number}</td> <td>{c.first_name} {c.middle_name} {c.last_name}</td> <td>{c.prev_class}</td> <td>{c.dol}</td> <td>{c.remarks}</td> <td>{c.tc_no}</td> <td class="has-text-right no-print"> <span><a class="button is-small is-rounded is-danger" rel="nofollow" onclick="{cancleWithdraw.bind(this, c)}">Cancle Withdraw</a></span> </td> </tr> </tbody> </table> </section> <div id="cancelWithdrawModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Confirmation Required</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <h1 class="title has-text-centered is-size-5" style="color: #ff3860;">Are you sure you want to Remove the selected Student?</h1> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-success" onclick="{UpdateWithdraw}">Yes</button> <button class="button is-danger" id="item-modal-close" onclick="{closecancelWithdrawModal}">No</button> </footer> </div> </div>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.loading = false;
      self.update()
      flatpickr(".date", {
        allowInput: true,
        dateFormat: "d/m/Y",
      })
      self.readClass()
      self.readSection()
    })
    self.on("unmount", function(){
      studentWithdrawnStudentStore.off('read_classes_changed',ClassesChanged)
      studentWithdrawnStudentStore.off('read_section_changed',SectionChanged)

      studentWithdrawnStudentStore.off('read_students_changed',ReadSectionsChanged)
      studentWithdrawnStudentStore.off('cancle_withdraw_students_changed',CancleWithdrawStudentChanged)
    })

    self.readClass = () => {
       self.loading = true;
       studentWithdrawnStudentStore.trigger('read_classes')
    }

    self.readSection = () => {
       self.loading = true;
       studentWithdrawnStudentStore.trigger('read_section')
    }

    self.changeSection = () => {
       if(self.refs.standardSelect.value==''){
        toastr.info("Please select standard and try again")
       }else{
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.standardSelect.value
        })
       }
    }

    self.refreshStudents = () =>{

      let error = '';

      if(self.refs.fromDateInput.value==''){
        error = error + "Please select from date, "
      }

      if(self.refs.toDateInput.value==''){
        error = error + "Please select to date, "
      }

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section of student, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading = true
        studentWithdrawnStudentStore.trigger('read_students', self.refs.standardSelect.value, self.refs.sectionSelect.value , convertDate(self.refs.fromDateInput.value), convertDate(self.refs.toDateInput.value))
      }

    }

    self.cancleWithdraw = (c,e) =>{
      self.student_id = c.student_id
      $("#cancelWithdrawModal").addClass("is-active");

    }

    self.closecancelWithdrawModal = () => {
      $("#cancelWithdrawModal").removeClass("is-active");
    }
    self.UpdateWithdraw = () =>{
      self.loading = true
      studentWithdrawnStudentStore.trigger('cancle_withdraw_students', self.student_id)
    }

    studentWithdrawnStudentStore.on('read_classes_changed',ClassesChanged)
    function ClassesChanged(classes){
      self.loading = false
      self.classes = []
      self.classes = classes
      self.update()
      console.log(self.classes)
    }

    studentWithdrawnStudentStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      self.loading = false
      self.sections = []
      self.sections = sections
      self.update()
    }

    studentWithdrawnStudentStore.on('read_students_changed',ReadSectionsChanged)
    function ReadSectionsChanged(students){
      self.loading = false
      self.students = []
      self.students = students
      self.students.map(c => {
          c.selected=false
      })

      self.update()
    }

    studentWithdrawnStudentStore.on('cancle_withdraw_students_changed',CancleWithdrawStudentChanged)
    function CancleWithdrawStudentChanged(){
      self.loading = false
      self.closecancelWithdrawModal()
      self.refreshStudents()

    }

});
riot.tag2('student', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid" show="{student_view ==\'show_student\'}"> <div class="level no-print"> <div class="level-left"> <h2 class="title is-size-5" style="color: #ff3860;">Students</h2> </div> <div class="level-right"> <button if="{role==\'ADMIN\'}" class="button is-primary is-rounded is-small" onclick="{first_edit}"> <span>Fast Edit</span> </button> <button if="{role==\'ADMIN\'}" class="button is-link is-rounded is-small ml5" onclick="{print_list}" show="{print_list_button}"> <span>Print List</span> </button> <button if="{role==\'ADMIN\'}" class="button is-info is-rounded ml5 is-small" onclick="{student_list}" show="{student_list_button}"> <span>Student List</span> </button> <button if="{role==\'ADMIN\'}" class="button is-success is-rounded ml5 is-small" onclick="{regenerate_roll_no}" show="{regenerate_roll_no_button}"> <span>Regenerate Roll No</span> </button> <button if="{role==\'ADMIN\'}" class="button is-warning is-rounded ml5 is-small" onclick="{add_new_student}"> <span class="icon"> <span class="fas fa-plus"></span> </span> <span>New Student</span> </button> </div> </div> <div class="level box no-print"> <div class="level-left" show="{role==\'ADMIN\' || role==\'Discipline\'}"> <div class="columns"> <div class="column is-narrow"> <label class="label">Standard</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="read_standard_id" id="read_standard_id" onchange="{getReadSection}"> <option each="{standards}" riot-value="{standard_id}"> {standard}</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Section</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="read_section_id" id="read_section_id" onchange="{getStudentData}"> <option each="{readfilteredSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> </div> </div> <div class="level-right"> <div class="column is-narrow field" show="{role==\'ADMIN\' || role==\'Discipline\'}"> <div class="control"> <input class="input" ref="searchStudent" onkeyup="{filterStudent}" type="text" placeholder="Search Here"> </div> </div> <div class="column is-narrow field has-addons"> <div class="control"> <input class="input" ref="read_enroll_number" type="text" placeholder="Enter Enroll No" onkeyup="{addEnter}"> </div> <div class="control"> <a class="button is-info " onclick="{getStudentData}">Search</a> </div> </div> <button show="{role==\'ADMIN\' || role==\'Discipline\'}" class="button is-link has-text-weight-bold ml5 " style="margin-bottom:12px;" onclick="{getStudentData}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button show="{role==\'ADMIN\' || role==\'Discipline\'}" class="button is-success has-text-weight-bold ml5" style="margin-bottom:12px;" onclick="{downloadCSV}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button show="{role==\'ADMIN\' || role==\'Discipline\'}" class="button is-primary has-text-weight-bold ml5" style="margin-bottom:12px;" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable is-narrow"> <center show="{role==\'ADMIN\'}"><strong>Class:{StandardName}-{SectionName} Session:{session_name} </strong></center> <thead> <tr> <th>Roll no</th> <th>Student Name</th> <th>Enroll No</th> <th>Registration No</th> <th>SMS</th> <th>Father\'s Name</th> <th class="no-print {role}" style=""></th> </tr> </thead> <tbody> <tr each="{st, i in filteredStudent}"> <td>{st.roll_number}</td> <td>{st.name}</td> <td>{st.enroll_number}</td> <td>{st.reg_number}</td> <td>{st.mobile}</td> <td>{st.f_name}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{st.confirmDelete}"> <span show="{role==\'ADMIN\'}"><a class="button is-small " onclick="{withdraw_student.bind(this, st.student_id)}" title="WithDraw Student"> <i class="fa fa-unlink" aria-hidden="true"></i> </a></span> <span><a class="button is-small" onclick="{view_profile.bind(this, st.student_id)}" title="View Profile"> <i class="fa fa-eye" aria-hidden="true"></i> </a></span> <span show="{role==\'ADMIN\' || role==\'Admission\'}"><a class="button is-small " onclick="{edit.bind(this, st.student_id)}" title="Edit"> <i class="fa fa-edit" aria-hidden="true"></i> </a></span> <span show="{role==\'ADMIN\'}"> <a class="button is-small" rel="nofollow" onclick="{confirmDelete}" title="Delete"> <i class="fa fa-trash" aria-hidden="true"></i> </a></span> </div> <div class="table-buttons" if="{st.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section> <div id="withdrawModal" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">WithDraw</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column"> <div class="field"> <div class="control"> <label class="label" for="role">Date of Leaving</label> <input class="input date" ref="withdraw_date" type="text"> </div> </div> <div class="field"> <div class="control"> <label class="label" for="role">TC No</label> <input class="input" type="text" ref="tc_no"> </div> </div> <div class="control"> <label class="label" for="read_standard_id_for_withdraw">Standard</label> <div class="select is-fullwidth"> <select ref="read_standard_id_for_withdraw" id="read_standard_id_for_withdraw" onchange="{getReadSectionForWithdraw}"> <option>Choose Section</option> <option each="{standards}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> <div class="control"> <label class="label" for="read_section_id_for_withdraw">Section</label> <div class="select is-fullwidth"> <select ref="read_section_id_for_withdraw" id="read_section_id_for_withdraw"> <option>Choose Class</option> <option each="{readwithdrawfilteredSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> <div class="control"> <label class="label" for="withdraw_remarks">Reason</label> <textarea class="textarea" ref="withdraw_remarks" rows="2"></textarea> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-success" onclick="{WithdrawStudent}">Add</button> <button class="button is-danger" id="item-modal-close" onclick="{closewithdrawModal}">Cancel</button> </footer> </div> </div> <section class=" is-fluid" show="{student_view ==\'print_list\'}"> <div class="level no-print"> <div class="level-left"> </div> <div class="level-right"> <div class="control no-print"> <div class="select is-fullwidth is-small"> <select id="add_column" ref="add_column" onchange="{AddColumn}"> <option value="0">Select Column</option> <option value="1">1</option> <option value="2">2</option> <option value="3">3</option> <option value="4">4</option> <option value="5">5</option> <option value="6">6</option> <option value="7">7</option> <option value="8">8</option> <option value="9">9</option> </select> </div> </div> <input type="checkbox" id="checkHouse" checked="{e.done}" onclick="{viewHouse}" class="no-print ml5"> <b class="ml5">House</b> <button class="button is-primary has-text-weight-bold ml5 is-small" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning has-text-weight-bold ml5 is-small " onclick="{close_print_list}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <center> <div style="text-align:left;"> <table class="table is-fullwidth is-bordered"> <caption class="caption">Students List {pl.standard} - {pl.section} ({pl.session_name}) </caption> <tr> <th style="">Roll No</th> <th style="">Enrol No</th> <th style="">Name</th> <th style="" show="{house_column}">House</th> <th show="{column_one}"></th> <th show="{column_two}"></th> <th show="{column_three}"></th> <th show="{column_four}"></th> <th show="{column_five}"></th> <th show="{column_six}"></th> <th show="{column_seven}"></th> <th show="{column_eight}"></th> <th show="{column_nine}"></th> </tr> <tr each="{pl, i in print_list}"> <td>{pl.roll_number}</td> <td>{pl.enroll_number}</td> <td>{pl.name}</td> <td show="{house_column}">{pl.house}</td> <td show="{column_one}"></td> <td show="{column_two}"></td> <td show="{column_three}"></td> <td show="{column_four}"></td> <td show="{column_five}"></td> <td show="{column_six}"></td> <td show="{column_seven}"></td> <td show="{column_eight}"></td> <td show="{column_nine}"></td> </tr> </table> </div> </center> </section> <section class=" is-fluid" show="{student_view ==\'student_list\'}"> <div class="level no-print"> <div class="level-left"> </div> <div class="level-right"> <button class="button is-primary has-text-weight-bold is-small" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning has-text-weight-bold ml5 is-small" onclick="{close_student_list}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <center> <div style="text-align:left;"> <table class="table is-fullwidth is-bordered"> <caption class="caption">Student Listing of {sl.standard} {sl.section}[{total_student}] </caption> <tr> <th style="">Sl No</th> <th style="">Enrol No</th> <th style="">Name</th> </tr> <tr each="{student, i in student_list}"> <td>{i +1}</td> <td>{student.enroll_number}</td> <td>{student.name}</td> </tr> </table> </div> </center> </section> <section class=" is-fluid" show="{student_view ==\'student_profile\'}"> <div class="level no-print"> <div class="level-left"> <h2 class="title has-text-danger is-size-5">Profile of {st.first_name} {st.middle_name} {st.last_name}</h2> </div> <div class="level-right"> <button class="button is-primary has-text-weight-bold " onclick="window.print()"> <span class="icon"> <span class="fas fa-print"></span> </span> </button> <button class="button is-warning has-text-weight-bold ml5" onclick="{close_student_profile}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <table class="table is-fullwidth is-bordered print-friendly"> <caption class="caption"> Student\\\'s Information ({st.session_name})</caption> <tr> <td rowspan="4" colspan="2"> <img id="pp_box1" width="90" height="90"> </td> <td colspan="2" style="background-color:#efefef"><h>Student\\\'s Information</td> <td colspan="3"><h>Contact Information</td> </tr> <tr> <th>Date of Admission</th> <td>{st.doa}</td> <th>Father\'s Name</th> <td colspan="2">{st.f_name}</td> </tr> <tr> <th>Date of Joining</th> <td>{st.doj} </td> <th>Mother\'s Name</th> <td colspan="2">{st.m_name}</td> </tr> <tr> <th>Date of Birth</th> <td>{st.dob}</td> <th>Permanent Address </th> <td colspan="2">{st.p_add_l1} {st.p_add_l2}</td> </tr> <tr> <th> Name </th> <td> {st.first_name} {st.middle_name} {st.last_name}</td> <th>Nationality</th> <td>{st.nationality}</td><th>city </th><td colspan="2"> {st.p_city}</td> </tr> <tr> <th>Enroll No.</th> <td> {st.enroll_number}</td> <th>Gender</th> <td>{st.gender}</td> <th>State</th> <td colspan="2">{st.p_state}</td> </tr> <tr> <th>Reg. No.</th> <td> {st.reg_number}</td> <th>Category</th> <td>{st.category_name}</td> <th>Country</th> <td colspan="2">{st.p_country}</td> </tr> <tr> <th>Class / Sec:</th> <td> {st.standard} {st.section}</td> <th>Mother Tongue</th> <td>{st.mother_tongue}</td> <th>Zip</th> <td colspan="2">{st.p_zip} </td> </tr> <tr> <th>House</th> <td> {st.house_name}</td> <th>Religion</th> <td>{st.religion}</td> <th> Correspondence Address </th> <td colspan="2">{st.c_add_l1} {st.c_add_l2}, {st.c_city}-{st.c_zip}, {st.c_state}, {st.c_country}</td> </tr> <tr> <th>Blood Group</th> <td> {st.blood_group}</td> <th>Hobbies</th> <td> {st.hobby}</td> <th>Residence Phone </th> <td colspan="2">{st.residence_phone}</td> </tr> <tr> <th>Roll No.</th> <td>{st.roll_number}</td> <th>Admission for Class</th> <td>{st.admission_for_class}</td> <th>SMS No</th> <td colspan="2">{st.mobile}</td> </tr> <tr> <th>Reference Enrol</th> <td> {st.reference_enrol}</td> <th>Last Class Attended</th> <td>{st.last_class}</td> <th>Emergency No.</th> <td colspan="2">{st.fax}</td> </tr> <tr> <th>Aadhar No.</th> <td>{st.aadhar_no}</td> <th>Second Language</th> <td colspan="4">{st.second_language}</td> </tr> <tr> <td rowspan="4" colspan="2"> <img id="f_pp_box1" width="90" height="90"> </td> <td colspan="5" style="background-color:#efefef"><h>Father\\\'s Information</td></tr> <tr> <th>Examination Passed</th> <td>{st.f_school_exam_passed}</td> <th>Address</th> <td colspan="2">{st.f_add_l1} {st.f_add_l2}</td> </tr> <tr> <th>Other Qualification</th> <td>{st.f_college_exam_passed}</td> <th>City</th> <td colspan="2">{st.f_city}</td> </tr> <tr> <th>Nationality</th> <td>{st.f_nationality}</td> <th>State</th> <td colspan="2">{st.f_state}</td> </tr> <tr> <th>Name:</th> <td colspan="3"> {st.f_name}</td> <th>Country</th> <td colspan="2">{st.f_country}</td> </tr> <tr> <th>Occupation: </th> <td>{st.f_occupation}</td> <th>Work Detail</th> <td>{st.f_work_profile}</td> <th>Pin Code</th> <td colspan="2"> {st.f_zip}</td> </tr> <tr> <th>Annual Income:</th> <td> {st.f_annual_income}</td> <th>Organisation\'s Name"</th> <td>{st.f_organisation_name}</td> <th>Residence Ph.</th> <td colspan="2">{st.f_phone}</td> </tr> <tr> <th>Designation:"</th> <td> {st.f_designation}</td> <th>Office Address</th> <td>{st.f_office_add_l1} {st.f_office_add_l2}</td> <th>Office Ph.</th> <td colspan="2">{st.f_office_phone} </td> </tr> <tr> <th>Mobile</th> <td> {st.f_mobile}</td> <th></th> <td></td> <th>Email</th> <td colspan="2">{st.f_email}</td> </tr> <tr> <td rowspan="4" colspan="2"> <img id="m_pp_box1" width="90" height="90"> </td> <td colspan="5" style="background-color:#efefef"><h>Mother\\\'s Information</td> </tr> <tr> <th>Examination Passed</th> <td>{st.m_school_exam_passed}</td> <th>Address</th> <td colspan="2">{st.m_add_l1} {st.m_add_l2}</td> </tr> <tr> <th>Other Qualification</th> <td>{st.m_college_exam_passed}</td> <th>City</th> <td colspan="2">{st.m_city}</td> </tr> <tr> <th>Nationality</th> <td>{st.m_nationality}</td> <th>State</th> <td colspan="2">{st.m_state}</td> </tr> <tr> <th>Name:</th> <td colspan="3"> {st.m_name}</td> <th>Country</th> <td colspan="2">{st.m_country}</td> </tr> <tr> <th>Occupation: </th> <td>{st.m_occupation}</td> <th>Work Detail</th> <td>{st.m_work_profile}</td> <th>Pin Code</th> <td colspan="2"> {st.m_zip}</td> </tr> <tr> <th>Annual Income:</th> <td> {st.m_annual_income}</td> <th>Organisation\'s Name"</th> <td>{st.m_organisation_name}</td> <th>Residence Ph.</th> <td colspan="2">{st.m_phone}</td> </tr> <tr> <th>Designation:"</th> <td> {st.m_designation}</td> <th>Office Address</th> <td>{st.m_office_add_l1} {st.m_office_add_l2}</td> <th>Office Ph.</th> <td colspan="2">{st.m_office_phone} </td> </tr> <tr> <th>Mobile</th> <td> {st.m_mobile}</td> <th></th> <td></td> <th>Email</th> <td colspan="2">{st.m_email}</td> </tr> <tr> <td rowspan="4" colspan="2"> <img id="g_pp_box1" width="90" height="90"> </td> <td colspan="5" style="background-color:#efefef"><h>Guardian\\\'s Information</td> </tr> <tr> <th>Examination Passed</th> <td>{st.g_school_exam_passed}</td> <th>Address</th> <td colspan="2">{st.g_add_l1} {st.g_add_l2}</td> </tr> <tr> <th>Other Qualification</th> <td>{st.g_college_exam_passed}</td> <th>City</th> <td colspan="2">{st.g_city}</td> </tr> <tr> <th>Nationality</th> <td>{st.g_nationality}</td> <th>State</th> <td colspan="2">{st.g_state}</td> </tr> <tr> <th>Name:</th> <td colspan="3"> {st.g_name}</td> <th>Country</th> <td colspan="2">{st.g_country}</td> </tr> <tr> <th>Occupation: </th> <td>{st.g_occupation}</td> <th>Work Detail</th> <td>{st.g_work_profile}</td> <th>Pin Code</th> <td colspan="2"> {st.g_zip}</td> </tr> <tr> <th>Annual Income:</th> <td> {st.g_annual_income}</td> <th>Organisation\'s Name"</th> <td>{st.g_organisation_name}</td> <th>Residence Ph.</th> <td colspan="2">{st.g_phone}</td> </tr> <tr> <th>Designation:</th> <td> {st.g_designation}</td> <th>Office Address</th> <td>{st.g_office_add_l1} {st.g_office_add_l2}</td> <th>Office Ph.</th> <td colspan="2">{st.g_office_phone} </td> </tr> <tr> <th>Mobile</th> <td> {st.g_mobile}</td> <th>Relation</th> <td>{st.g_relation}</td> <th>Email</th> <td colspan="2">{st.g_email}</td> </tr> <tr> <td colspan="7" style="background-color:#efefef"><h>Siblings Detail:</td> </tr> <tr> <th style="width:30px">Sl.</th> <th>Name</th> <th>Age</th> <th>Class</th> <th>Sec</th> <th>Enrol No</th> <th>School</th> </tr> <tr> <td>1</td> <td>{st.first_child_name}</td> <td>{st.first_child_age}</td> <td>{st.first_child_class}</td> <td>{st.first_child_section}</td> <td>{st.first_enrol}</td> <td>{st.first_child_school}</td> </tr> <tr> <td>2</td> <td>{st.second_child_name}</td> <td>{st.second_child_age}</td> <td>{st.second_child_class}</td> <td>{st.second_child_section}</td> <td>{st.second_enrol}</td> <td>{st.second_child_school}</td> </tr> <tr> <td>3</td> <td>{st.third_child_name}</td> <td>{st.third_child_age}</td> <td>{st.third_child_class}</td> <td>{st.third_child_section}</td> <td>{st.third_enrol}</td> <td>{st.third_child_school}</td> </tr> <tr> <td>4</td> <td>{st.fourth_child_name}</td> <td>{st.fourth_child_age}</td> <td>{st.fourth_child_class}</td> <td>{st.fourth_child_section}</td> <td>{st.fourth_enrol}</td> <td>{st.fourth_child_school}</td> </tr> <tr> <td colspan="7" style="background-color:#efefef"><h>Areas Where Parent(Father or Mother) can contribute to the School</h></td> </tr> <tr> <th colspan="4"><input type="checkbox" id="p_music"> Music</th> <th colspan="4"><input type="checkbox" id="p_academic"> Academic</th> </tr> <tr> <th colspan="4"><input type="checkbox" id="p_sports"> Sports</th> <th colspan="4"><input type="checkbox" id="p_community"> Community Programme </th> </tr> <tr> <th colspan="4"><input type="checkbox" id="p_social"> Social Skills</th> <th colspan="4"><input type="checkbox" id="p_medical"> Medical </th> </tr> <tr> <th colspan="4"><input type="checkbox" id="p_media"> Media/PR</th> <th colspan="4"><input type="checkbox" id="p_hr_training"> HR Training </th> </tr> <tr> <th colspan="4"><input type="checkbox" id="p_painting"> Painting/Sculpture </th> <th colspan="4"><input type="checkbox" id="p_career"> Career Counselling </th> </tr> <tr> <th colspan="4"><input type="checkbox" id="p_information"> Information Technology </th> <th colspan="4"><input type="checkbox" id="p_communication"> Public Communication / Communication Skills </th> </tr> <tr> <td colspan="7"><h>Extra Qualification Possessed by the Parent</h></td> </tr> <tr> <th colspan="4"><input type="checkbox" id="p_med"> M.Ed </th> <th colspan="4"><input type="checkbox" id="p_bed"> B.Ed </th> </tr> <tr> <th colspan="4"><input type="checkbox" id="p_ttc"> TTC </th> <th colspan="3"><input type="checkbox" id="p_montessori"> Montessori Trained </th> </tr> </table> </section> <section class=" is-fluid" show="{student_view ==\'add_student\'}"> <div class="level"> <div class="level-left"> <h2 class="title is-size-5" style="color: #ff3860;">{title} Student</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns is-multiline"> <div class="column is-one-fifth"> <div id="pp_box" class="pp-box" onclick="{trigger_file_input.bind(this,\'student_picture\')}"> <div class="icon has-text-danger" onclick="{remove_picture.bind(this, \'pp_box\',\'student_picture\')}"><i class="fas fa-trash"></i> </div> </div> <input accept="image/*" class="is-hidden" id="student_picture" name="student_picture" onchange="{loadFile.bind(this, \'pp_box\')}" type="file"> </div> <div class="column "> <div class="columns "> <div class="column is-2"> <label class="label is-small" for="first_name">First Name</label> </div> <div class="column is-2"> <input class="input is-small" id="first_name" ref="first_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="middle_name">Middle Name</label> </div> <div class="column is-2"> <input class="input is-small" id="middle_name" ref="middle_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="last_name">Last Name</label> </div> <div class="column is-2"> <input class="input is-small" id="last_name" ref="last_name" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="standard_id">Class</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="standard_id" onchange="{getSection}"> <option each="{standards}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="section_id">Section</label> </div> <div class="column is-2 "> <div class="select is-fullwidth is-small"> <select ref="section_id"> <option each="{filteredSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="section_id">House</label> </div> <div class="column is-2"> <div class=" select is-fullwidth is-small"> <select ref="house_id"> <option value="0">None</option> <option each="{houses}" riot-value="{house_id}">{house_name}</option> </select> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="enroll_number">Enroll No</label> </div> <div class="column is-2"> <input class="input is-small" ref="enroll_number" maxlength="8" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="roll_number">Roll No</label> </div> <div class="column is-2"> <input class="input is-small" ref="roll_number" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="reg_number">Reg. No</label> </div> <div class="column is-2"> <input class="input is-small" ref="reg_number" type="text"> </div> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="gender">Gender</label> </div> <div class="column is-2"> <div class="control"> <div class="select is-fullwidth is-small"> <select id="gender" ref="gender"> <option value="M">Male</option> </select> </div> </div> </div> <div class="column is-2"> <label class="label is-small" for="category_id">Cast Category</label> </div> <div class="column is-2"> <div class="control"> <div class="select is-fullwidth is-small"> <select ref="category_id"> <option each="{cast}" riot-value="{category_id}">{category_name} </option> </select> </div> </div> </div> <div class="column is-2"> <label class="label is-small" for="dob">DOB</label> </div> <div class="column is-2"> <input class="input date is-small" ref="dob" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="blood_group">Blood Group</label> </div> <div class="column is-2"> <div class="control"> <div class="select is-fullwidth is-small"> <select id="blood_group" ref="blood_group"> <option value="A+">A+</option> <option value="A-">A-</option> <option value="AB+">AB+</option> <option value="AB-">AB-</option> <option value="B+">B+</option> <option value="B-">B-</option> <option value="O+">O+</option> <option value="O-">O-</option> </select> </div> </div> </div> <div class="column is-2"> <label class="label is-small" for="nationality">Nationality</label> </div> <div class="column is-2"> <input class="input is-small" ref="nationality" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Contact Information(Permanent Address)</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em; "> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="p_add_l1">Address Line 1</label> </div> <div class="column is-2"> <input class="input is-small" ref="p_add_l1" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="p_add_l2">Address Line 2</label> </div> <div class="column is-2"> <input class="input is-small" ref="p_add_l2" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="p_city">City</label> </div> <div class="column is-2"> <input class="input is-small" ref="p_city" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="p_zip">Zip</label> </div> <div class="column is-2"> <input class="input is-small" ref="p_zip" maxlength="6" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="p_state">State</label> </div> <div class="column is-2"> <input class="input is-small" ref="p_state" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="p_country">Country</label> </div> <div class="column is-2"> <input class="input is-small" ref="p_country" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3"> Check if Correspondence Address is same as Permanent Address <input type="checkbox" id="correspondenceCheckbox" name="correspondenceCheckbox" onclick="{copyAddress.bind(this)}"> </h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="c_add_l1">Address Line 1</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_add_l1" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="c_add_l2">Address Line 2</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_add_l2" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="c_city">City</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_city" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="c_zip">Zip</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_zip" maxlength="6" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="c_state">State</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_state" type="text" id="c_state"> </div> <div class="column is-2"> <label class="label is-small" for="c_country">Country</label> </div> <div class="column is-2"> <input class="input is-small" ref="c_country" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="residence_phone">Phone(R)</label> </div> <div class="column is-2"> <input class="input is-small" ref="residence_phone" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="mobile">SMS No.</label> </div> <div class="column is-2"> <input class="input is-small" ref="mobile" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="emergency_no">Emergency No.</label> </div> <div class="column is-2"> <input class="input is-small" ref="emergency_no" type="number"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="student_type">Student Type</label> </div> <div class="column is-2"> <div class="control"> <div class="select is-fullwidth is-small"> <select id="student_type" ref="student_type"> <option value="Day Scholar">Day Scholar</option> </select> </div> </div> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Other Information</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="aadhar_no">Aadhar No</label> </div> <div class="column is-2"> <input class="input is-small" ref="aadhar_no" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="doa">Date of Admission</label> </div> <div class="column is-2"> <input class="input date is-small" ref="doa" type="text" readonly> </div> <div class="column is-2"> <label class="label is-small" for="old_doa">Old Date of Admission</label> </div> <div class="column is-2"> <input class="input date is-small" ref="old_doa" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="doj">Date of Joining</label> </div> <div class="column is-2"> <input class="input date is-small" ref="doj" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="old_doj">Old Date of Joining</label> </div> <div class="column is-2"> <input class="input date is-small" ref="old_doj" type="text" readonly> </div> <div class="column is-2"> <label class="label is-small" for="mother_tongue">Mother Tongue</label> </div> <div class="column is-2"> <input class="input is-small" ref="mother_tongue" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="last_school">Last School</label> </div> <div class="column is-2"> <input class="input is-small" ref="last_school" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="last_class">Last Class</label> </div> <div class="column is-2"> <input class="input is-small" ref="last_class" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="admission_for_class">Admission For Class</label> </div> <div class="column is-2"> <input class="input is-small" ref="admission_for_class" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="hobby">Hobbies</label> </div> <div class="column is-2"> <input class="input is-small" ref="hobby" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="cast">Cast</label> </div> <div class="column is-2"> <input class="input is-small" ref="cast" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="religion_id">Religion</label> </div> <div class="column is-2"> <div class="control"> <div class="select is-fullwidth is-small"> <select id="religion_id" ref="religion_id"> <option each="{religion}" riot-value="{religion_id}">{religion} </option> </select> </div> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="staff_child">Staff Member Child</label> </div> <div class="column is-2"> <div class="control"> <div class="select is-fullwidth is-small"> <select id="staff_child" ref="staff_child" onchange="{GetStaffName}"> <option value="N">No</option> <option value="Y">Yes</option> </select> </div> </div> </div> <div class="column is-2" show="{staff_name}"> <label class="label is-small" for="staff_name">Staff\'s Name</label> </div> <div class="column is-2" show="{staff_name}"> <input class="input is-small" ref="staff_name" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-info has-text-weight-bold adjusted-top" onclick="{addFatherInformation}"> Next >> </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{student_view ==\'add_father_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title is-size-5" style="color: #ff3860;">{title} Father</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns is-multiline"> <div class="column is-one-fifth"> <div id="f_pp_box" class="f_pp-box" onclick="{trigger_father_file_input.bind(this,\'father_picture\')}"> <div class="icon has-text-danger" onclick="{remove_father_picture.bind(this, \'f_pp_box\',\'father_picture\')}"><i class="fas fa-trash"></i></div> </div> <input accept="image/*" class="is-hidden" id="father_picture" name="father_picture" onchange="{loadFatherFile.bind(this, \'f_pp_box\')}" type="file"> </div> <div class="column "> <div class="columns"> <div class="column is-2"> <label class="label is-small" for="f_name">Father\'s Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="f_name" id="f_name" type="text"> </div> </div> <div class="columns mt35"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Work Information</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="f_occupation">Occupation</label> </div> <div class="column is-2"> <input class="input is-small" id="f_occupation" ref="f_occupation" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f_organisation_type">Organization Type</label> </div> <div class="column is-2 "> <div class="select is-fullwidth is-small"> <select id="f_organisation_type" ref="f_organisation_type"> <option value="Governmnet">Governmnet</option> <option value="Business">Business</option> <option value="NGO">NGO</option> <option value="Professional">Professional</option> <option value="Other">Other</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="f_annual_income">Annual Income</label> </div> <div class="column is-2"> <input class="input is-small" id="f_annual_income" ref="f_annual_income" type="number"> </div> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="f_work_profile">Work Profile</label> </div> <div class="column is-2"> <input class="input is-small" ref="f_work_profile" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f_organisation_name">Organization Name</label> </div> <div class="column is-2 "> <input class="input is-small" ref="f_organisation_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f_designation">Designation</label> </div> <div class="column is-2"> <input class="input is-small" ref="f_designation" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="f_department">Department</label> </div> <div class="column is-2"> <input class="input is-small" ref="f_department" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f_office_add_l1">Office Address Line 1</label> </div> <div class="column is-2 "> <input class="input is-small" ref="f_office_add_l1" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f_office_add_l2">Office Address Line 2</label> </div> <div class="column is-2"> <input class="input is-small" ref="f_office_add_l2" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="f_office_city">City</label> </div> <div class="column is-2"> <input class="input is-small" ref="f_office_city" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f_office_zip">Zip</label> </div> <div class="column is-2 "> <input class="input is-small" ref="f_office_zip" maxlength="6" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="f_office_state">State</label> </div> <div class="column is-2"> <input class="input is-small" ref="f_office_state" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="f_office_country">Country</label> </div> <div class="column is-2"> <input class="input is-small" ref="f_office_country" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f_office_phone">Phone(O)</label> </div> <div class="column is-2 "> <input class="input is-small" ref="f_office_phone" type="number"> </div> </div> <div class="columns"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Educational Information</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="f_qualification">Qualification</label> </div> <div class="column is-2"> <input class="input is-small" ref="f_qualification" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f_other_qualification">Other Qualification</label> </div> <div class="column is-2 "> <input class="input is-small" ref="f_other_qualification" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Check if Candidate\'s Correspondence Address is same as Father\'s Address <input type="checkbox" id="fatherCorrespondenceCheckbox" onclick="{copyFatherAddress.bind(this)}"> </h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="f_add_l1">Address Line 1</label> </div> <div class="column is-2"> <input class="input is-small" ref="f_add_l1" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f_add_l2">Address Line 2</label> </div> <div class="column is-2 "> <input class="input is-small" ref="f_add_l2" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f_city">City</label> </div> <div class="column is-2"> <input class="input is-small" ref="f_city" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="f_zip">Zip</label> </div> <div class="column is-2"> <input class="input is-small" ref="f_zip" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="f_state">State</label> </div> <div class="column is-2 "> <input class="input is-small" ref="f_state" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="f_country">Country</label> </div> <div class="column is-2"> <input class="input is-small" ref="f_country" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="f_mobile">Mobile</label> </div> <div class="column is-2"> <input class="input is-small" ref="f_mobile" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="f_email">Email</label> </div> <div class="column is-2 "> <input class="input is-small" ref="f_email" type="email"> </div> <div class="column is-2"> <label class="label is-small" for="f_nationality">Nationality</label> </div> <div class="column is-2"> <input class="input is-small" ref="f_nationality" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-primary has-text-weight-bold adjusted-top" onclick="{closeFatherInformation}"> Previous </button> <button class="button is-info has-text-weight-bold adjusted-top" onclick="{addMotherInformation}"> Next >> </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{student_view ==\'add_mother_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title is-size-5" style="color: #ff3860;">{title} Mother</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns is-multiline"> <div class="column is-one-fifth"> <div id="m_pp_box" class="m_pp-box" onclick="{trigger_mother_file_input.bind(this,\'mother_picture\')}"> <div class="icon has-text-danger" onclick="{remove_mother_picture.bind(this, \'m_pp_box\',\'mother_picture\')}"><i class="fas fa-trash"></i></div> </div> <input accept="image/*" class="is-hidden" id="mother_picture" name="mother_picture" onchange="{loadMotherFile.bind(this, \'m_pp_box\')}" type="file"> </div> <div class="column "> <div class="columns"> <div class="column is-2"> <label class="label is-small" for="m_name">Mother\'s Name</label> </div> <div class="column is-2"> <input class="input is-small" ref="m_name" id="m_name" type="text"> </div> </div> <div class="columns mt35"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Work Information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="student-hr"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="m_occupation">Occupation</label> </div> <div class="column is-2"> <input class="input is-small" ref="m_occupation" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="m_organisation_type">Organization Type</label> </div> <div class="column is-2 "> <div class="select is-fullwidth is-small"> <select ref="m_organisation_type"> <option value="Governmnet">Governmnet</option> <option value="Business">Business</option> <option value="NGO">NGO</option> <option value="Professional">Professional</option> <option value="Other">Other</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="m_annual_income">Annual Income</label> </div> <div class="column is-2"> <input class="input is-small" ref="m_annual_income" type="number"> </div> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="m_work_profile">Work Profile</label> </div> <div class="column is-2"> <input class="input is-small" ref="m_work_profile" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="m_organisation_name">Organization Name</label> </div> <div class="column is-2 "> <input class="input is-small" ref="m_organisation_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="m_designation">Designation</label> </div> <div class="column is-2"> <input class="input is-small" ref="m_designation" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="m_department">Department</label> </div> <div class="column is-2"> <input class="input is-small" ref="m_department" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="m_office_add_l1">Office Address Line 1</label> </div> <div class="column is-2 "> <input class="input is-small" ref="m_office_add_l1" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="m_office_add_l2">Office Address Line 2</label> </div> <div class="column is-2"> <input class="input is-small" ref="m_office_add_l2" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="m_office_city">City</label> </div> <div class="column is-2"> <input class="input is-small" ref="m_office_city" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="m_office_zip">Zip</label> </div> <div class="column is-2 "> <input class="input is-small" ref="m_office_zip" maxlength="6" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="m_office_state">State</label> </div> <div class="column is-2"> <input class="input is-small" ref="m_office_state" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="m_office_country">Country</label> </div> <div class="column is-2"> <input class="input is-small" ref="m_office_country" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="m_office_phone">Phone(O)</label> </div> <div class="column is-2 "> <input class="input is-small" ref="m_office_phone" type="number"> </div> </div> <div class="columns"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Educational Information</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="m_qualification">Qualification</label> </div> <div class="column is-2"> <input class="input is-small" ref="m_qualification" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="m_other_qualification">Other Qualification</label> </div> <div class="column is-2 "> <input class="input is-small" ref="m_other_qualification" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Contact Information Check if Mother\'s Address is same as Father\'s Address <input type="checkbox" id="motherCorrespondenceCheckbox" onclick="{copyMotherAddress.bind(this)}"> </h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="m_add_l1">Address Line 1</label> </div> <div class="column is-2"> <input class="input is-small" ref="m_add_l1" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="m_add_l2">Address Line 2</label> </div> <div class="column is-2 "> <input class="input is-small" ref="m_add_l2" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="m_city">City</label> </div> <div class="column is-2"> <input class="input is-small" ref="m_city" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="m_zip">Zip</label> </div> <div class="column is-2"> <input class="input is-small" ref="m_zip" maxlength="6" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="m_state">State</label> </div> <div class="column is-2 "> <input class="input is-small" ref="m_state" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="m_country">Country</label> </div> <div class="column is-2"> <input class="input is-small" ref="m_country" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="m_mobile">Mobile</label> </div> <div class="column is-2"> <input class="input is-small" ref="m_mobile" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="m_email">Email</label> </div> <div class="column is-2 "> <input class="input is-small" ref="m_email" type="email"> </div> <div class="column is-2"> <label class="label is-small" for="m_nationality">Nationality</label> </div> <div class="column is-2"> <input class="input is-small" ref="m_nationality" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-primary has-text-weight-bold adjusted-top" onclick="{closeMotherInformation}"> Previous </button> <button class="button is-info has-text-weight-bold adjusted-top" onclick="{addGuardianInformation}"> Next >> </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{student_view ==\'add_guardian_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title is-size-5" style="color: #ff3860;">{title} Guardian</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns is-multiline"> <div class="column is-one-fifth"> <div id="g_pp_box" class="g_pp-box" onclick="{trigger_guardian_file_input.bind(this,\'guardian_picture\')}"> <div class="icon has-text-danger" onclick="{remove_guardian_picture.bind(this, \'g_pp_box\',\'guardian_picture\')}"><i class="fas fa-trash"></i></div> </div> <input accept="image/*" class="is-hidden" id="guardian_picture" name="guardian_picture" onchange="{loadGuardianFile.bind(this, \'g_pp_box\')}" type="file"> </div> <div class="column "> <div class="columns"> <div class="column is-2"> <label class="label is-small" for="is_guardian">Select Guardian</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="is_guardian" id="guardian" onchange="{getGuardianInformation}"> <option>Select Guardian</option> <option value="Father">Father</option> <option value="Mother">Mother</option> <option value="Other">Other</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="g_name">Guardian\'s Name</label> </div> <div class="column is-2"> <input class="input is-small" id="g_name" ref="g_name" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Work Information</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="student-hr is-full"> </div> </div> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="g_occupation">Occupation</label> </div> <div class="column is-2"> <input class="input is-small" id="g_occupation" ref="g_occupation" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="g_organisation_type">Organization Type</label> </div> <div class="column is-2 "> <div class="select is-fullwidth is-small"> <select ref="g_organisation_type" id="g_organisation_type"> <option value="Governmnet">Governmnet</option> <option value="Business">Business</option> <option value="NGO">NGO</option> <option value="Professional">Professional</option> <option value="Other">Other</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="g_annual_income">Annual Income</label> </div> <div class="column is-2"> <input class="input is-small" id="g_annual_income" ref="g_annual_income" type="number"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="g_work_profile">Work Profile</label> </div> <div class="column is-2"> <input class="input is-small" id="g_work_profile" ref="g_work_profile" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="g_organisation_name">Organization Name</label> </div> <div class="column is-2 "> <input class="input is-small" id="g_organisation_name" ref="g_organisation_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="g_designation">Designation</label> </div> <div class="column is-2"> <input class="input is-small" id="g_designation" ref="g_designation" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="g_department">Department</label> </div> <div class="column is-2"> <input class="input is-small" id="g_department" ref="g_department" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="g_office_add_l1">Office Address Line 1</label> </div> <div class="column is-2 "> <input class="input is-small" id="g_office_add_l1" ref="g_office_add_l1" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="g_office_add_l2">Office Address Line 2</label> </div> <div class="column is-2"> <input class="input is-small" id="g_office_add_l2" ref="g_office_add_l2" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="g_office_city">City</label> </div> <div class="column is-2"> <input class="input is-small" id="g_office_city" ref="g_office_city" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="g_office_zip">Zip</label> </div> <div class="column is-2 "> <input class="input is-small" id="g_office_zip" ref="g_office_zip" maxlength="6" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="g_office_state">State</label> </div> <div class="column is-2"> <input class="input is-small" id="g_office_state" ref="g_office_state" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="g_office_country">Country</label> </div> <div class="column is-2"> <input class="input is-small" id="g_office_country" ref="g_office_country" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="g_office_phone">Phone(O)</label> </div> <div class="column is-2 "> <input class="input is-small" id="g_office_phone" ref="g_office_phone" type="number"> </div> </div> <div class="columns mt20"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Educational Information</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="g_qualification">Qualification</label> </div> <div class="column is-2"> <input class="input is-small" id="g_qualification" ref="g_qualification" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="g_other_qualification">Other Qualification</label> </div> <div class="column is-2 "> <input class="input is-small" id="g_other_qualification" ref="g_other_qualification" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Contact Information</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="g_add_l1">Address Line 1</label> </div> <div class="column is-2"> <input class="input is-small" id="g_add_l1" ref="g_add_l1" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="g_add_l2">Address Line 2</label> </div> <div class="column is-2 "> <input class="input is-small" id="g_add_l2" ref="g_add_l2" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="g_city">City</label> </div> <div class="column is-2"> <input class="input is-small" id="g_city" ref="g_city" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="g_zip">Zip</label> </div> <div class="column is-2"> <input class="input is-small" id="g_zip" ref="g_zip" maxlength="6" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="g_state">State</label> </div> <div class="column is-2 "> <input class="input is-small" id="g_state" ref="g_state" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="g_country">Country</label> </div> <div class="column is-2"> <input class="input is-small" id="g_country" ref="g_country" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="g_phone">Phone(R)</label> </div> <div class="column is-2"> <input class="input is-small" id="g_phone" ref="g_phone" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="g_mobile">Mobile</label> </div> <div class="column is-2 "> <input class="input is-small" id="g_mobile" ref="g_mobile" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="g_email">Email</label> </div> <div class="column is-2"> <input class="input is-small" id="g_email" ref="g_email" type="email"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="g_nationality">Nationality</label> </div> <div class="column is-2"> <input class="input is-small" id="g_nationality" ref="g_nationality" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="g_relation">Relationship</label> </div> <div class="column is-2 "> <input class="input is-small" id="g_relation" ref="g_relation" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-primary has-text-weight-bold adjusted-top" onclick="{closeGuardianInformation}"> Previous </button> <button class="button is-info has-text-weight-bold adjusted-top" onclick="{addSiblingInformation}"> Next >> </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{close}"> Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{student_view ==\'add_sibling_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title is-size-5" style="color: #ff3860;">{title} Sibling Detail</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">First Child</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="student-hr is-full"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="first_child_name">Name</label> </div> <div class="column is-2"> <input class="input is-small" id="first_child_name" ref="first_child_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="first_child_age">Age</label> </div> <div class="column is-2 "> <input class="input is-small" id="first_child_age" ref="first_child_age" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="first_child_class">Class</label> </div> <div class="column is-2"> <input class="input is-small" id="first_child_class" ref="first_child_class" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="first_child_section">Section</label> </div> <div class="column is-2"> <input class="input is-small" id="first_child_section" ref="first_child_section" type="text" onkeyup="this.value = this.value.toUpperCase();"> </div> <div class="column is-2"> <label class="label is-small" for="first_enrol">Enroll No.</label> </div> <div class="column is-2 "> <input class="input is-small" id="first_enrol" ref="first_enrol" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="first_child_school">School</label> </div> <div class="column is-2"> <input class="input is-small" id="first_child_school" ref="first_child_school" type="text"> </div> </div> <div class="columns mt35"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Second Child</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="second_child_name">Name</label> </div> <div class="column is-2"> <input class="input is-small" id="second_child_name" ref="second_child_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="second_child_age">Age</label> </div> <div class="column is-2 "> <input class="input is-small" id="second_child_age" ref="second_child_age" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="second_child_class">Class</label> </div> <div class="column is-2"> <input class="input is-small" id="second_child_class" ref="second_child_class" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="second_child_section">Section</label> </div> <div class="column is-2"> <input class="input is-small" id="second_child_section" ref="second_child_section" type="text" onkeyup="this.value = this.value.toUpperCase();"> </div> <div class="column is-2"> <label class="label is-small" for="second_enrol">Enroll No.</label> </div> <div class="column is-2 "> <input class="input is-small" id="second_enrol" ref="second_enrol" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="second_child_school">School</label> </div> <div class="column is-2"> <input class="input is-small" id="second_child_school" ref="second_child_school" type="text"> </div> </div> <div class="columns mt35"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Third Child</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="student-hr is-full"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="third_child_name">Name</label> </div> <div class="column is-2"> <input class="input is-small" id="third_child_name" ref="third_child_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="third_child_age">Age</label> </div> <div class="column is-2 "> <input class="input is-small" id="third_child_age" ref="third_child_age" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="third_child_class">Class</label> </div> <div class="column is-2"> <input class="input is-small" id="third_child_class" ref="third_child_class" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="third_child_section">Section</label> </div> <div class="column is-2"> <input class="input is-small" id="third_child_section" ref="third_child_section" type="text" onkeyup="this.value = this.value.toUpperCase();"> </div> <div class="column is-2"> <label class="label is-small" for="third_enrol">Enroll No.</label> </div> <div class="column is-2 "> <input class="input is-small" id="third_enrol" ref="third_enrol" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="third_child_school">School</label> </div> <div class="column is-2"> <input class="input is-small" id="third_child_school" ref="third_child_school" type="text"> </div> </div> <div class="columns mt35"> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Fourth Child</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="fourth_child_name">Name</label> </div> <div class="column is-2"> <input class="input is-small" id="fourth_child_name" ref="fourth_child_name" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="fourth_child_age">Age</label> </div> <div class="column is-2 "> <input class="input is-small" id="fourth_child_age" ref="fourth_child_age" type="number"> </div> <div class="column is-2"> <label class="label is-small" for="fourth_child_class">Class</label> </div> <div class="column is-2"> <input class="input is-small" id="fourth_child_class" ref="fourth_child_class" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-2"> <label class="label is-small" for="fourth_child_section">Section</label> </div> <div class="column is-2"> <input class="input is-small" id="fourth_child_section" ref="fourth_child_section" type="text" onkeyup="this.value = this.value.toUpperCase();"> </div> <div class="column is-2"> <label class="label is-small" for="fourth_enrol">Enroll No.</label> </div> <div class="column is-2 "> <input class="input is-small" id="fourth_enrol" ref="fourth_enrol" type="text"> </div> <div class="column is-2"> <label class="label is-small" for="fourth_child_school">School</label> </div> <div class="column is-2"> <input class="input is-small" id="fourth_child_school" ref="fourth_child_school" type="text"> </div> </div> <div class="columns mt30"> <div class="column is-full"> <button class="button is-primary has-text-weight-bold adjusted-top" onclick="{closeSiblingInformation}">Previous </button> <button class="button is-info has-text-weight-bold adjusted-top" onclick="{addOtherInformation}">Next >> </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{close}">Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{student_view ==\'add_other_information\'}"> <div class="label"> <div class="level-left"> <h2 class="title is-size-5" style="color: #ff3860;">{title} Other Information</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns "> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Areas Where Parent(Father or Mentor) can contribute to the school</h3> <hr style="margin-top: 0.5em; margin-bottom: 0.5em;" class="student-hr is-full"> </div> </div> <div class="columns"> <table class="table is-fullwidth no-border"> <tbody> <tr> <td> <input type="checkbox" id="music" ref="music">Music </td> <td> <input type="checkbox" id="sports" ref="sports">Sports </td> <td> <input type="checkbox" id="social" ref="social">Social Skills </td> <td> <input type="checkbox" id="media" ref="media">Media/PR </td> </tr> <tr> <td> <input type="checkbox" id="academic" ref="academic">Academic </td> <td> <input type="checkbox" id="community" ref="community"> Community Programme </td> <td> <input type="checkbox" id="painting" ref="painting"> Painting/Sculpture </td> <td> <input type="checkbox" id="information" ref="information"> Information Technology </td> </tr> <tr> <td> <input type="checkbox" id="hr_training" ref="hr_training">HR Training </td> <td> <input type="checkbox" id="medical" ref="medical">Medical </td> <td> <input type="checkbox" id="career" ref="career"> Career Counselling </td> <td> <input type="checkbox" id="communication" ref="communication"> Public Speaking / Communication Skills </td> </tr> </tbody> </table> </div> <div class="columns "> <div class="column is-full"> <h3 class="has-text-weight-bold is-size-6 has-text-link student-h3">Please Mention if either parent possesses any of the following Qualification</h3> <hr class="student-hr is-full" style="margin-top: 0.5em; margin-bottom: 0.5em;"> </div> </div> <div class="columns"> <table class="table is-fullwidth"> <tbody> <tr> <td> <input type="checkbox" id="med" ref="med">MEd </td> <td> <input type="checkbox" id="bed" ref="bed">BEd </td> <td> <input type="checkbox" id="ttc" ref="ttc">TTC </td> <td> <input type="checkbox" id="montessori" ref="montessori"> Montessori Trained </td> </tr> </tbody> </table> </div> <div class="columns "> <div class="column is-2"> <label class="label is-small" for="transport_mode">Mode of Transport</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="transport_mode" id="transport_mode"> <option value="None">None</option> <option value="Bus">Bus</option> <option value="Carpool">Carpool</option> <option value="Rikshaw">Rikshaw</option> <option value="Self">Self</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="school_distance">Distance from school</label> </div> <div class="column is-2 "> <div class="select is-fullwidth is-small"> <select ref="school_distance" id="school_distance"> <option value="1 km">1 km</option> <option value="1-2 km">1-2 km</option> <option value="More than 2 km">More than 2 km</option> </select> </div> </div> <div class="column is-2"> <label class="label is-small" for="differently_abled">If child is Differently Abled</label> </div> <div class="column is-2"> <div class="select is-fullwidth is-small"> <select ref="differently_abled" id="differently_abled"> <option value="None">None</option> <option value="In seeing">In seeing</option> <option value="In hearing">In hearing</option> <option value="In speaking">In speaking</option> <option value="In movement">In movement</option> <option value="In mental ability">In mental ability</option> </select> </div> </div> </div> <div class="columns"> <div class="column is-full"> <button class="button is-primary has-text-weight-bold adjusted-top" onclick="{closeOtherInformation}">Previous </button> <button class="button is-info has-text-weight-bold adjusted-top" onclick="{addInformation}">Submit </button> <button class="button is-danger has-text-weight-bold adjusted-top" onclick="{close}">Cancel </button> </div> </div> </div> </section> <section class=" is-fluid" show="{student_view ==\'first_edit_view\'}"> <div class="level"> <div class="level-left"> <div class="level-item"> <h2 class="title is-size-5" style="color: #ff3860;">First Edit Student</h2> </div> </div> <div class="level-right"> <button class="button is-warning has-text-weight-bold is-small" onclick="{close_first_edit}"> <span class="icon"> <span class="fas fa-arrow-left"></span> </span> </button> </div> </div> <div class="level box no-print"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="firstEditValue" onchange="{getFirstEditData}"> <option value="0">Choose Any Field</option> <option value="reg_number">Registration No</option> <option value="enroll_number">Enroll No</option> <option value="mobile">SMS</option> <option value="residence_phone">Student\'s Phone(R)</option> <option value="fax">Emergency No</option> <option value="email">Student Email</option> <option value="blood_group">Blood Group</option> <option value="f_mobile">Father\'s Mobile</option> <option value="f_email">Father\'s Email</option> <option value="m_mobile">Mother\'s Mobile</option> <option value="m_email">Mother\'s Email</option> <option value="reference_enrol">Reference Enrol</option> </select> </div> </div> </div> </div> </div> <div class="level-right"> <button class="button is-success has-text-weight-bold" onclick="{EditFirstData}">Submit</button> <button class="button is-danger has-text-weight-bold ml5" onclick="{close_first_edit}">Cancel</button> </div> </div> <table class="table is-fullwidth is-hoverable is-narrow is-bordered"> <thead> <tr> <th>SL No</th> <th>Enroll No</th> <th>Name</th> <th>Father\'s Name</th> <th></th> </tr> </thead> <tbody> <tr each="{st, i in student_first_edit}"> <td>{i+1}</td> <td>{st.enroll_number}</td> <td>{st.name}</td> <td>{st.f_name}</td> <td> <input class="input is-small" type="text" riot-value="{st.edit_field}" id="{\'first_edit_field\' + st.student_id}" if="{text_box}"> <select class="select is-small" id="{\'first_edit_field\'+st.student_id}" if="{!text_box}" riot-value="{st.edit_field}"> <option value="A+">A+</option> <option value="A-">A-</option> <option value="AB+">AB+</option> <option value="AB-">AB-</option> <option value="B+">B+</option> <option value="B-">B-</option> <option value="O+">O+</option> <option value="O-">O-</option> </select> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {

	var self = this
	self.st={}
	self.sl={}
	self.pl={}
	self.text_box = true;
    self.on("mount", function(){
    	self.title='Add'
    	self.student_view = 'show_student'
    	self.is_student_picture=false
    	self.student_picture=false
    	self.role = getCookie('role')
    	self.readStandard()
    	self.readHouse()
    	self.readCategory()
    	self.readReligion()
    	self.loading = false
    	self.print_list_button = false;
    	self.student_list_button = false;
    	self.regenerate_roll_no_button = false;
    	self.staff_name = true
    	self.house_column = false
    	self.column_one = false
    	self.column_two = false
    	self.column_three = false
		self.column_four = false
		self.column_five = false
		self.column_six = false
		self.column_seven = false
		self.column_eight = false
		self.column_nine = false

		self.is_father_image=false
		self.is_student_image=false
		self.is_mother_image=false
		self.is_guardian_image=false

        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
      studentStore.off('read_standard_changed',StandardChanged)
      studentStore.off('read_section_changed',SectionChanged)
      studentStore.off('read_house_changed',HouseChanged)
      studentStore.off('read_cast_changed',CastChanged)
      studentStore.off('read_religion_changed',ReligionChanged)
      studentStore.off('read_student_changed',StudentChanged)
      studentStore.off('add_student_changed',AddStudentChanged)
      studentStore.off('read_for_edit_student_changed',ReadForEditStudentChanged)
      studentStore.off('upload_student_image_changed',UploadStudentImage)
      studentStore.off('upload_father_image_changed',UploadFatherImage)
      studentStore.off('delete_upload_student_image_changed',DeleteUploadStudentImage)
      studentStore.off('delete_upload_father_image_changed',DeleteUploadFatherImage)
      studentStore.off('delete_upload_mother_image_changed',DeleteUploadMotherImage)
      studentStore.off('delete_upload_guardian_image_changed',DeleteUploadGuardianImage)
      studentStore.off('upload_mother_image_changed',UploadMotherImage)
      studentStore.off('upload_guardian_image_changed',UploadGuardianImage)
      studentStore.off('upload_copy_father_image_changed',UploadGuardianCopyFatherImage)
      studentStore.off('upload_copy_mother_image_changed',UploadGuardianCopyMotherImage)
      studentStore.off('edit_student_changed',EditStudentChanged)
      studentStore.off('read_student_profile_changed',StudentProfileChanged)
      studentStore.off('student_list_changed',StudentListChanged)
      studentStore.off('regenerate_roll_no_changed',RegenerateRollNoChanged)
    })

    self.addEnter = (e) => {
      if(e.which == 13){
        self.getStudentData()
      }
    }

    self.getStudentData = () =>{
    	if(self.refs.read_section_id.value !=""){
    		self.print_list_button = true;
    		self.student_list_button = true;
    		self.regenerate_roll_no_button = true;
    	}

    	if(self.refs.read_section_id.value ==""){
    		self.print_list_button = false;
    		self.student_list_button = false;
    		self.regenerate_roll_no_button = false;
    		return;
    	}
    	if(self.refs.read_enroll_number.value=="" ){
    		self.loading = true
    		studentStore.trigger('read_student', self.refs.read_standard_id.value,self.refs.read_section_id.value,0)
    	}else{
    		self.loading = true
    		studentStore.trigger('read_student', self.refs.read_standard_id.value,
    			self.refs.read_section_id.value,self.refs.read_enroll_number.value)
    	}
    }

    self.downloadCSV = () =>{

        if(self.refs.read_section_id.value !=""){
    		self.print_list_button = true;
    		self.student_list_button = true;
    		self.regenerate_roll_no_button = true;
    	}

    	if(self.refs.read_section_id.value ==""){
    		self.print_list_button = false;
    		self.student_list_button = false;
    		self.regenerate_roll_no_button = false;
    		return;
    	}
    	if(self.refs.read_enroll_number.value=="" ){

    		studentStore.trigger('read_student_csv', self.refs.read_standard_id.value,self.refs.read_section_id.value,0)
    	}else{

    		studentStore.trigger('read_student_csv', self.refs.read_standard_id.value,
    			self.refs.read_section_id.value,self.refs.read_enroll_number.value)
    	}
    }

    self.add_new_student = () =>{
    	self.student_view='add_student'
    	self.title='Add'
    	self.clearForm()
    	self.update()
    	self.refs.p_state.value = "West Bengal"
    	self.refs.c_state.value = "West Bengal"
    	self.refs.p_country.value = "India"
    	self.refs.c_country.value = "India"
    	self.refs.nationality.value = "India"
    	document.getElementById("first_name").focus()
    }

    self.close = () =>{
    	self.student_view = 'show_student'
    }

    self.GetStaffName = () =>{
    	if(self.refs.staff_child.value == "Y"){
    		self.staff_name = true
    	}else{
    		self.staff_name = false
    	}
    }

    self.addFatherInformation = () =>{
    	var phoneno = /^\d{10}$/;

    	if(!self.refs.first_name.value){
    		toastr.error("Please enter First Name and try again")
    		return;
    	}else if(!self.refs.enroll_number.value){
        	toastr.error("Please enter Enroll No and try again")
        	return;
      	}else if((self.refs.enroll_number.value).length!=8){
        	toastr.error("Please enter Valid Enroll No and try again")
        	return;
      	} else if((self.refs.p_zip.value).length!=6 && (self.refs.p_zip.value).length!=0){
          	toastr.error("Please enter Valid Zip Code and try again")
          	return;
        }else if(!self.refs.dob.value){
        	toastr.error("Please enter DOB and try again")
        	return;
      	}else if((self.refs.residence_phone.value).length<16 && (self.refs.residence_phone.value).length!=0){
          	toastr.error("Please enter Valid PhoneNo No and try again")
          	return;
        }else if(!self.refs.mobile.value){
        	toastr.error("Please enter SMS No and try again")
        	return;
      	}else if(!self.refs.mobile.value.match(phoneno)){
        	toastr.error("Please enter Valid SMS No and try again")
        	return;
      	}else if((self.refs.aadhar_no.value).length!=12 && (self.refs.aadhar_no.value).length!=0){
          	toastr.error("Please enter Valid Aadhar No and try again")
          	return;
        }else if(!self.refs.doa.value){
        	toastr.error("Please enter DOA and try again")
        	return;
      	}else if(!self.refs.doj.value){
        	toastr.error("Please enter DOJ and try again")
        	return;
      	}else if(!self.refs.religion_id.value){
        	toastr.error("Please select Religion and try again")
        	return;
      	}else{
    		self.student_view='add_father_information'
    		self.update()
    		document.getElementById("f_name").focus()
      	}
    }
    self.closeFatherInformation = () =>{
    	self.student_view = 'add_student'
    	self.update()
    }
    self.addMotherInformation = () =>{
    	var phoneno = /^\d{10}$/;
    	var validate_email = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
    	if(!self.refs.f_name.value){
    		toastr.error("Please enter Father Name and try again")
    		return;
    	}else if((self.refs.f_office_zip.value).length!=6 && (self.refs.f_office_zip.value).length!=0){
        	toastr.error("Please enter Valid Office Zip Code and try again")
        	return;
      	} else if((self.refs.f_zip.value).length!=6 && (self.refs.f_zip.value).length!=0){
        	toastr.error("Please enter Valid Zip Code and try again")
        	return;
      	}else if(!self.refs.f_mobile.value.match(phoneno) && (self.refs.f_mobile.value).length!=0){
        	toastr.error("Please enter Valid Mobile No and try again")
        	return;
      	}else if(!self.refs.f_email.value.match(validate_email) && (self.refs.f_email.value).length!=0){
        	toastr.error("Please enter Valid Email Address and try again")
        	return;
      	}else{
    		self.student_view='add_mother_information'
    		self.update()
    		document.getElementById("m_name").focus()
      	}
    }
    self.closeMotherInformation = () =>{
    	self.student_view = 'add_father_information'
    	self.update()
    }

    self.addGuardianInformation = () =>{
    	var phoneno = /^\d{10}$/;
    	var validate_email = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;

    	if(!self.refs.m_name.value){
    		toastr.error("Please enter Mother Name and try again")
    		return;
    	}else if((self.refs.m_office_zip.value).length!=6 && (self.refs.m_office_zip.value).length!=0){
        	toastr.error("Please enter Valid Office Zip Code and try again")
        	return;
      	} else if((self.refs.m_zip.value).length!=6 && (self.refs.m_zip.value).length!=0){
        	toastr.error("Please enter Valid Zip Code and try again")
        	return;
      	}else if(!self.refs.m_mobile.value.match(phoneno) && (self.refs.m_mobile.value).length!=0){
        	toastr.error("Please enter Valid Mobile No and try again")
        	return;
      	}else if(!self.refs.m_email.value.match(validate_email) && (self.refs.m_email.value).length!=0){
        	toastr.error("Please enter Valid Email Address and try again")
        	return;
      	}else{
    		self.student_view='add_guardian_information'
    		self.update()
    		document.getElementById("guardian").focus()
      	}
    }
    self.closeGuardianInformation = () =>{
    	self.student_view = 'add_mother_information'
    }
    self.addOtherInformation = () =>{

    	self.student_view='add_other_information'
    	self.update()
    }
    self.closeOtherInformation = () =>{
    	self.student_view = 'add_sibling_information'
    }

    self.addSiblingInformation = () =>{
    	var phoneno = /^\d{10}$/;
    	var validate_email = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;

    	if(!self.refs.g_name.value){
    		toastr.error("Please enter Guardian Name and try again")
    		return;
    	}else if((self.refs.g_office_zip.value).length!=6 && (self.refs.g_office_zip.value).length!=0){
        	toastr.error("Please enter Valid Office Zip Code and try again")
        	return;
      	} else if((self.refs.g_zip.value).length!=6 && (self.refs.g_zip.value).length!=0){
        	toastr.error("Please enter Valid Zip Code and try again")
        	return;
      	} else if(!self.refs.g_mobile.value.match(phoneno) && (self.refs.g_mobile.value).length!=0){
        	toastr.error("Please enter Valid Mobile No and try again")
        	return;
      	}else if(!self.refs.g_email.value.match(validate_email) && (self.refs.g_email.value).length!=0){
        	toastr.error("Please enter Valid Email Address and try again")
        	return;
      	}else{
    		self.student_view='add_sibling_information'
    		self.update()
    	}
    }

    self.closeSiblingInformation = () =>{
    	self.student_view = 'add_guardian_information'
    }

    self.withdraw_student = (c,st) => {

      self.student_id = c
      console.log(self.student_id)
      $("#withdrawModal").addClass("is-active");
    }

    self.closewithdrawModal = () => {
      $("#withdrawModal").removeClass("is-active");
    }

    self.WithdrawStudent = () =>{
    	console.log("addInformation")
    	var obj={}
    	var student={};
    	student['withdraw_date']=convertDate(self.refs.withdraw_date.value)
    	student['tc_no']=self.refs.tc_no.value
    	student['withdraw_remarks']=self.refs.withdraw_remarks.value
    	self.prev_class = $("#read_standard_id_for_withdraw option:selected").text() + ' -' + $("#read_section_id_for_withdraw option:selected").text()
    	student['prev_class'] = self.prev_class
    	obj['student']=student;
    	studentStore.trigger('create_student_withdraw', obj,self.student_id)

    }

    self.getGuardianInformation = () =>{
    	self.copyGuardianImage=self.refs.is_guardian.value
    	if(self.refs.is_guardian.value == 'Father'){

    		document.getElementById("g_name").disabled = true;
    		document.getElementById("g_occupation").disabled = true;
    		document.getElementById("g_organisation_type").disabled = true;
    		document.getElementById("g_annual_income").disabled = true;
    		document.getElementById("g_work_profile").disabled = true;
    		document.getElementById("g_organisation_name").disabled = true;
    		document.getElementById("g_designation").disabled = true;
    		document.getElementById("g_department").disabled = true;
    		document.getElementById("g_office_add_l1").disabled = true;
    		document.getElementById("g_office_add_l2").disabled = true;
    		document.getElementById("g_office_city").disabled = true;
    		document.getElementById("g_office_zip").disabled = true;
    		document.getElementById("g_office_state").disabled = true;
    		document.getElementById("g_office_state").disabled = true;
    		document.getElementById("g_office_country").disabled = true;
    		document.getElementById("g_office_phone").disabled = true;
    		document.getElementById("g_qualification").disabled = true;
    		document.getElementById("g_other_qualification").disabled = true;
    		document.getElementById("g_add_l1").disabled = true;
    		document.getElementById("g_add_l2").disabled = true;
    		document.getElementById("g_city").disabled = true;
    		document.getElementById("g_zip").disabled = true;
    		document.getElementById("g_state").disabled = true;
    		document.getElementById("g_country").disabled = true;
    		document.getElementById("g_mobile").disabled = true;
    		document.getElementById("g_email").disabled = true;
    		document.getElementById("g_nationality").disabled = true;
    		document.getElementById("g_relation").disabled = true;
    		console.log(self.session_id)
    		if(self.title == 'Add'){
    			document.getElementById("g_pp_box").style.backgroundImage = 'url(' + self.f_image + ')';
    		}else if(self.title == "Update"){
    			document.getElementById('g_pp_box').style.backgroundImage = 'url(/images/'+self.session_id+'/fatherImages/'+self.student_id+'.jpg)';
    		}
    		self.refs.g_name.value = self.refs.f_name.value
    		self.refs.g_occupation.value = self.refs.f_occupation.value
    		self.refs.g_organisation_type.value = self.refs.f_organisation_type.value
    		self.refs.g_annual_income.value = self.refs.f_annual_income.value
    		self.refs.g_work_profile.value = self.refs.f_work_profile.value
    		self.refs.g_organisation_name.value = self.refs.f_organisation_name.value
    		self.refs.g_designation.value = self.refs.f_designation.value
    		self.refs.g_department.value = self.refs.f_department.value
    		self.refs.g_office_add_l1.value = self.refs.f_office_add_l1.value
    		self.refs.g_office_add_l2.value = self.refs.f_office_add_l2.value
    		self.refs.g_office_city.value = self.refs.f_office_city.value
    		self.refs.g_office_zip.value = self.refs.f_office_zip.value
    		self.refs.g_office_state.value = self.refs.f_office_state.value
    		self.refs.g_office_country.value = self.refs.f_office_country.value
    		self.refs.g_office_phone.value = self.refs.f_office_phone.value
    		self.refs.g_qualification.value = self.refs.f_qualification.value
    		self.refs.g_other_qualification.value = self.refs.f_other_qualification.value
    		self.refs.g_add_l1.value = self.refs.f_add_l1.value
    		self.refs.g_add_l2.value = self.refs.f_add_l2.value
    		self.refs.g_city.value = self.refs.f_city.value
    		self.refs.g_zip.value = self.refs.f_zip.value
    		self.refs.g_state.value = self.refs.f_state.value
    		self.refs.g_country.value = self.refs.f_country.value
    		self.refs.g_mobile.value = self.refs.f_mobile.value
    		self.refs.g_email.value = self.refs.f_email.value
    		self.refs.g_nationality.value = self.refs.f_nationality.value
    		self.refs.g_relation.value = self.refs.is_guardian.value

    	}else if(self.refs.is_guardian.value == 'Mother'){

    		document.getElementById("g_name").disabled = true;
    		document.getElementById("g_occupation").disabled = true;
    		document.getElementById("g_organisation_type").disabled = true;
    		document.getElementById("g_annual_income").disabled = true;
    		document.getElementById("g_work_profile").disabled = true;
    		document.getElementById("g_organisation_name").disabled = true;
    		document.getElementById("g_designation").disabled = true;
    		document.getElementById("g_department").disabled = true;
    		document.getElementById("g_office_add_l1").disabled = true;
    		document.getElementById("g_office_add_l2").disabled = true;
    		document.getElementById("g_office_city").disabled = true;
    		document.getElementById("g_office_zip").disabled = true;
    		document.getElementById("g_office_state").disabled = true;
    		document.getElementById("g_office_state").disabled = true;
    		document.getElementById("g_office_country").disabled = true;
    		document.getElementById("g_office_phone").disabled = true;
    		document.getElementById("g_qualification").disabled = true;
    		document.getElementById("g_other_qualification").disabled = true;
    		document.getElementById("g_add_l1").disabled = true;
    		document.getElementById("g_add_l2").disabled = true;
    		document.getElementById("g_city").disabled = true;
    		document.getElementById("g_zip").disabled = true;
    		document.getElementById("g_state").disabled = true;
    		document.getElementById("g_country").disabled = true;
    		document.getElementById("g_mobile").disabled = true;
    		document.getElementById("g_email").disabled = true;
    		document.getElementById("g_nationality").disabled = true;
    		document.getElementById("g_relation").disabled = true;

    		if(self.title == 'Add'){
    			document.getElementById("g_pp_box").style.backgroundImage = 'url(' + self.m_image + ')';
    		}else if(self.title == "Update"){
    			document.getElementById('g_pp_box').style.backgroundImage = 'url(/images/'+self.session_id+'/motherImages/'+self.student_id+'.jpg)';
    		}
    		self.refs.g_name.value = self.refs.m_name.value
    		self.refs.g_occupation.value = self.refs.m_occupation.value
    		self.refs.g_organisation_type.value = self.refs.m_organisation_type.value
    		self.refs.g_annual_income.value = self.refs.m_annual_income.value
    		self.refs.g_work_profile.value = self.refs.m_work_profile.value
    		self.refs.g_organisation_name.value = self.refs.m_organisation_name.value
    		self.refs.g_designation.value = self.refs.m_designation.value
    		self.refs.g_department.value = self.refs.m_department.value
    		self.refs.g_office_add_l1.value = self.refs.m_office_add_l1.value
    		self.refs.g_office_add_l2.value = self.refs.m_office_add_l2.value
    		self.refs.g_office_city.value = self.refs.m_office_city.value
    		self.refs.g_office_zip.value = self.refs.m_office_zip.value
    		self.refs.g_office_state.value = self.refs.m_office_state.value
    		self.refs.g_office_country.value = self.refs.m_office_country.value
    		self.refs.g_office_phone.value = self.refs.m_office_phone.value
    		self.refs.g_qualification.value = self.refs.m_qualification.value
    		self.refs.g_other_qualification.value = self.refs.m_other_qualification.value
    		self.refs.g_add_l1.value = self.refs.m_add_l1.value
    		self.refs.g_add_l2.value = self.refs.m_add_l2.value
    		self.refs.g_city.value = self.refs.m_city.value
    		self.refs.g_zip.value = self.refs.m_zip.value
    		self.refs.g_state.value = self.refs.m_state.value
    		self.refs.g_country.value = self.refs.m_country.value
    		self.refs.g_mobile.value = self.refs.m_mobile.value
    		self.refs.g_email.value = self.refs.m_email.value
    		self.refs.g_nationality.value = self.refs.m_nationality.value
    		self.refs.g_relation.value = self.refs.is_guardian.value
    	}else {

    		document.getElementById("g_name").disabled = false;
    		document.getElementById("g_occupation").disabled = false;
    		document.getElementById("g_organisation_type").disabled = false;
    		document.getElementById("g_annual_income").disabled = false;
    		document.getElementById("g_work_profile").disabled = false;
    		document.getElementById("g_organisation_name").disabled = false;
    		document.getElementById("g_designation").disabled = false;
    		document.getElementById("g_department").disabled = false;
    		document.getElementById("g_office_add_l1").disabled = false;
    		document.getElementById("g_office_add_l2").disabled = false;
    		document.getElementById("g_office_city").disabled = false;
    		document.getElementById("g_office_zip").disabled = false;
    		document.getElementById("g_office_state").disabled = false;
    		document.getElementById("g_office_state").disabled = false;
    		document.getElementById("g_office_country").disabled = false;
    		document.getElementById("g_office_phone").disabled = false;
    		document.getElementById("g_qualification").disabled = false;
    		document.getElementById("g_other_qualification").disabled = false;
    		document.getElementById("g_add_l1").disabled = false;
    		document.getElementById("g_add_l2").disabled = false;
    		document.getElementById("g_city").disabled = false;
    		document.getElementById("g_zip").disabled = false;
    		document.getElementById("g_state").disabled = false;
    		document.getElementById("g_country").disabled = false;
    		document.getElementById("g_mobile").disabled = false;
    		document.getElementById("g_email").disabled = false;
    		document.getElementById("g_nationality").disabled = false;
    		document.getElementById("g_relation").disabled = false;

    		if(self.title == 'Add'){
    			document.getElementById("g_pp_box").style.backgroundImage = "";
    		}else if(self.title == "Update"){
    			document.getElementById('g_pp_box').style.backgroundImage = 'url(/images/'+self.session_id+'/guardianImages/'+self.student_id+'.jpg)';
    		}
    		self.refs.g_name.value = ''
    		self.refs.g_occupation.value = ''
    		self.refs.g_organisation_type.value = ''
    		self.refs.g_annual_income.value = ''
    		self.refs.g_work_profile.value = ''
    		self.refs.g_organisation_name.value = ''
    		self.refs.g_designation.value = ''
    		self.refs.g_department.value = ''
    		self.refs.g_office_add_l1.value = ''
    		self.refs.g_office_add_l2.value = ''
    		self.refs.g_office_city.value = ''
    		self.refs.g_office_zip.value = ''
    		self.refs.g_office_state.value = ''
    		self.refs.g_office_country.value = ''
    		self.refs.g_office_phone.value = ''
    		self.refs.g_qualification.value = ''
    		self.refs.g_other_qualification.value = ''
    		self.refs.g_add_l1.value = ''
    		self.refs.g_add_l2.value = ''
    		self.refs.g_city.value = ''
    		self.refs.g_zip.value = ''
    		self.refs.g_state.value = ''
    		self.refs.g_country.value = ''
    		self.refs.g_mobile.value = ''
    		self.refs.g_email.value = ''
    		self.refs.g_nationality.value = ''
    		self.refs.g_relation.value = ''
    	}
    }
    self.copyAddress = (e) => {
    	let cbox = '#correspondenceCheckbox'
    	if($(cbox).prop('checked') == true){
    		console.log("true")
    		self.refs.c_add_l1.value=self.refs.p_add_l1.value
    		self.refs.c_add_l2.value=self.refs.p_add_l2.value
    		self.refs.c_city.value=self.refs.p_city.value
    		self.refs.c_zip.value=self.refs.p_zip.value
    		self.refs.c_state.value=self.refs.p_state.value
    		self.refs.c_country.value=self.refs.p_country.value
    		self.update()
    	}else{
    		console.log("false")
    		self.refs.c_add_l1.value=''
    		self.refs.c_add_l2.value=''
    		self.refs.c_city.value=''
    		self.refs.c_zip.value=''
    		self.refs.c_state.value=''
    		self.refs.c_country.value=''
    	}
    }
    self.copyFatherAddress = (e) => {
    	let cbox = '#fatherCorrespondenceCheckbox'
    	if($(cbox).prop('checked') == true){
    		console.log("true")
    		self.refs.f_add_l1.value=self.refs.c_add_l1.value
    		self.refs.f_add_l2.value=self.refs.c_add_l2.value
    		self.refs.f_city.value=self.refs.c_city.value
    		self.refs.f_zip.value=self.refs.c_zip.value
    		self.refs.f_state.value=self.refs.c_state.value
    		self.refs.f_country.value=self.refs.c_country.value
    		self.update()
    	}else{
    		console.log("false")
    		self.refs.f_add_l1.value=''
    		self.refs.f_add_l2.value=''
    		self.refs.f_city.value=''
    		self.refs.f_zip.value=''
    		self.refs.f_state.value=''
    		self.refs.f_country.value=''
    	}
    }
    self.copyMotherAddress = (e) => {
    	let cbox = '#motherCorrespondenceCheckbox'
    	if($(cbox).prop('checked') == true){
    		console.log("true")
    		self.refs.m_add_l1.value=self.refs.f_add_l1.value
    		self.refs.m_add_l2.value=self.refs.f_add_l2.value
    		self.refs.m_city.value=self.refs.f_city.value
    		self.refs.m_zip.value=self.refs.f_zip.value
    		self.refs.m_state.value=self.refs.f_state.value
    		self.refs.m_country.value=self.refs.f_country.value
    		self.update()
    	}else{
    		console.log("false")
    		self.refs.m_add_l1.value=''
    		self.refs.m_add_l2.value=''
    		self.refs.m_city.value=''
    		self.refs.m_zip.value=''
    		self.refs.m_state.value=''
    		self.refs.m_country.value=''
    	}
    }

	self.remove_picture = (item1, item2, e) => {
		console.log('item1'+item1)
		console.log('item2'+item2)
		var pp_box = document.getElementById(item1);
		pp_box.style.backgroundImage = "";
		document.getElementById(item2).value = ""
		event.stopPropagation();
		if(self.title=='Update'){
			studentStore.trigger('delete_upload_student_image',self.student_id)
		}
	}

	self.trigger_file_input = (item,e) => {
		document.getElementById(item).click();
	}

     self.loadFile = (item,event) => {
		var reader = new FileReader();
		reader.onload = function (e) {
			console.log(item)
			document.getElementById(item).style.backgroundImage = 'url(' + e.target.result + ')';
			console.log(e.target.result)
			self.is_student_image=true
		};
		reader.readAsDataURL(event.target.files[0]);

		console.log(event.target.files[0])
		self.student_picture = event.target.files[0]
	}

	self.uploadStudentImage = (student_id) => {
		if(self.is_student_image == true){
    		studentStore.trigger('upload_student_image', self.student_picture,student_id)
		}
    }

	self.remove_father_picture = (item1, item2, e) => {
		console.log('item1'+item1)
		console.log('item2'+item2)
		var f_pp_box = document.getElementById(item1);
		f_pp_box.style.backgroundImage = "";
		document.getElementById(item2).value = ""
		event.stopPropagation();
		self.is_father_image=false
		console.log(self.is_father_image)
		if(self.title=='Update'){
			studentStore.trigger('delete_upload_father_image',self.student_id)
		}
	}

	self.trigger_father_file_input = (item,e) => {
		document.getElementById(item).click();
	}

     self.loadFatherFile = (item,event) => {
		var reader = new FileReader();
		reader.onload = function (e) {
			console.log(item)
			document.getElementById(item).style.backgroundImage = 'url(' + e.target.result + ')';
			console.log(e.target.result)
			self.f_image=e.target.result
			self.is_father_image=true
		};
		reader.readAsDataURL(event.target.files[0]);

		console.log(event.target.files[0])
		self.father_picture = event.target.files[0]
	}

	self.uploadFatherImage = (student_id) => {
		if(self.is_father_image == true){
    		studentStore.trigger('upload_father_image', self.father_picture,student_id)
		}
    }

	self.remove_mother_picture = (item1, item2, e) => {
		console.log('item1'+item1)
		console.log('item2'+item2)
		var m_pp_box = document.getElementById(item1);
		m_pp_box.style.backgroundImage = "";
		document.getElementById(item2).value = ""
		event.stopPropagation();
		if(self.title=='Update'){
			studentStore.trigger('delete_upload_mother_image',self.student_id)
		}
	}

	self.trigger_mother_file_input = (item,e) => {
		document.getElementById(item).click();
	}

     self.loadMotherFile = (item,event) => {
		var reader = new FileReader();
		reader.onload = function (e) {
			console.log(item)
			document.getElementById(item).style.backgroundImage = 'url(' + e.target.result + ')';
			console.log(e.target.result)
			self.m_image=e.target.result
			self.is_mother_image=true
		};
		reader.readAsDataURL(event.target.files[0]);

		console.log(event.target.files[0])
		self.mother_picture = event.target.files[0]
	}

	self.uploadMotherImage = (student_id) => {
		if(self.is_mother_image == true){
    		studentStore.trigger('upload_mother_image', self.mother_picture,student_id)
		}
    }

    self.uploadCopyFatherImage = (student_id) => {

    	studentStore.trigger('upload_copy_father_image',student_id)

    }

    self.uploadCopyMotherImage = (student_id) => {
    	studentStore.trigger('upload_copy_mother_image',student_id)
    }

	self.remove_guardian_picture = (item1, item2, e) => {
		console.log('item1'+item1)
		console.log('item2'+item2)
		var g_pp_box = document.getElementById(item1);
		g_pp_box.style.backgroundImage = "";
		document.getElementById(item2).value = ""
		event.stopPropagation();
		if(self.title=='Update'){
			studentStore.trigger('delete_upload_guardian_image',self.student_id)
		}
	}

	self.trigger_guardian_file_input = (item,e) => {
		document.getElementById(item).click();
	}

     self.loadGuardianFile = (item,event) => {
		var reader = new FileReader();
		reader.onload = function (e) {
			console.log(item)
			document.getElementById(item).style.backgroundImage = 'url(' + e.target.result + ')';
			console.log(e.target.result)
			self.g_image=e.target.result
			self.is_guardian_image=true
		};
		reader.readAsDataURL(event.target.files[0]);

		console.log("event.target.files[0]")
		console.log(event.target.files[0])
		self.guardian_picture = event.target.files[0]
	}

	self.uploadGuardianImage = (student_id) => {
		if(self.is_guardian_image == true){
    		studentStore.trigger('upload_guardian_image', self.guardian_picture,student_id)
		}
    }

	self.readStandard = () => {
       studentStore.trigger('read_standard')
    }

    self.readSection = () => {
       studentStore.trigger('read_section')
    }

    self.readHouse = () => {
       studentStore.trigger('read_house')
    }

    self.readCategory = () => {
       studentStore.trigger('read_cast')
    }

    self.readReligion = () => {
       studentStore.trigger('read_religion')
    }

	self.getSection = () => {
    	self.filteredSections = []
    	self.filteredSections = self.sections.filter(s => {
    		return s.standard_id == self.refs.standard_id.value
    	})
    }

    self.getReadSection = () => {
    	self.readfilteredSections = []
    	self.readfilteredSections = self.sections.filter(s => {
    		return s.standard_id == self.refs.read_standard_id.value
    	})
    	self.update()
    	self.getStudentData()
    	console.log(self.readfilteredSections)
    }
    self.getReadSectionForWithdraw = () => {
    	self.readwithdrawfilteredSections = []
    	self.readwithdrawfilteredSections = self.sections.filter(s => {
    		return s.standard_id == self.refs.read_standard_id_for_withdraw.value
    	})
    }

    self.addInformation = () =>{
    	console.log("addInformation")
    	var obj={}

        var student={};

    	student['first_name']=self.refs.first_name.value
    	student['middle_name']=self.refs.middle_name.value
    	student['last_name']=self.refs.last_name.value
    	student['enroll_number']=self.refs.enroll_number.value
    	student['roll_number']=self.refs.roll_number.value
    	student['reg_number']=self.refs.reg_number.value
    	student['gender']=self.refs.gender.value
    	student['category_id']=self.refs.category_id.value
    	student['dob']=convertDate(self.refs.dob.value)
    	student['blood_group']=self.refs.blood_group.value
    	student['nationality']=self.refs.nationality.value
    	student['p_add_l1']=self.refs.p_add_l1.value
    	student['p_add_l2']=self.refs.p_add_l2.value
    	student['p_city']=self.refs.p_city.value
    	student['p_zip']=self.refs.p_zip.value
    	student['p_state']=self.refs.p_state.value
    	student['p_country']=self.refs.p_country.value
    	if($('#correspondenceCheckbox').prop('checked') == true){
    		student['is_permanent'] = 1
    	}else{
    		student['is_permanent'] = 0
    	}

    	student['c_add_l1']=self.refs.c_add_l1.value
    	student['c_add_l2']=self.refs.c_add_l2.value
    	student['c_city']=self.refs.c_city.value
    	student['c_zip']=self.refs.c_zip.value
    	student['c_state']=self.refs.c_state.value
    	student['c_country']=self.refs.c_country.value
    	student['residence_phone']=self.refs.residence_phone.value
    	student['mobile']=self.refs.mobile.value
    	student['fax']=self.refs.emergency_no.value
    	student['student_type']=self.refs.student_type.value
    	student['aadhar_no']=self.refs.aadhar_no.value
    	student['doa']=convertDate(self.refs.doa.value)
    	student['old_doa']=convertDate(self.refs.old_doa.value)
    	student['doj']=convertDate(self.refs.doj.value)
    	student['old_doj']=convertDate(self.refs.old_doj.value)
    	student['mother_tongue']=self.refs.mother_tongue.value
    	student['last_school']=self.refs.last_school.value
    	student['last_class']=self.refs.last_class.value
    	student['admission_for_class']=self.refs.admission_for_class.value
    	student['hobby']=self.refs.hobby.value
    	student['cast']=self.refs.cast.value
    	student['religion_id']=self.refs.religion_id.value
    	student['staff_child']=self.refs.staff_child.value
    	student['staff_name']=self.refs.staff_name.value

    	student['transport_mode']=self.refs.transport_mode.value
    	student['school_distance']=self.refs.school_distance.value
    	student['differently_abled']=self.refs.differently_abled.value

        obj['student']=student;

        var student_current_standing={};

    	student_current_standing['section_id']=self.refs.section_id.value
    	student_current_standing['house_id']=self.refs.house_id.value

    	obj['student_current_standing'] = student_current_standing

        var student_login={};

    	student_login['enroll_number']=self.refs.enroll_number.value
    	student_login['password']=self.refs.dob.value
    	student_login['parent_password']='123456'
    	student_login['is_active']='Y'
    	if(self.title=='Add'){
    		obj['student_login'] = student_login
    	}else if(self.title=='Update'){
    		obj['student_login']=""
    	}

        var parent={};

    	parent['f_name']=self.refs.f_name.value
    	parent['f_occupation']=self.refs.f_occupation.value
    	parent['f_organisation_type']=self.refs.f_organisation_type.value
    	parent['f_annual_income']=self.refs.f_annual_income.value
    	parent['f_work_profile']=self.refs.f_work_profile.value
    	parent['f_organisation_name']=self.refs.f_organisation_name.value
    	parent['f_designation']=self.refs.f_designation.value
    	parent['f_department']=self.refs.f_department.value
    	parent['f_office_add_l1']=self.refs.f_office_add_l1.value
    	parent['f_office_add_l2']=self.refs.f_office_add_l2.value
    	parent['f_office_city']=self.refs.f_office_city.value
    	parent['f_office_zip']=self.refs.f_office_zip.value
    	parent['f_office_state']=self.refs.f_office_state.value
    	parent['f_office_country']=self.refs.f_office_country.value
    	parent['f_office_phone']=self.refs.f_office_phone.value
    	parent['f_school_exam_passed']=self.refs.f_qualification.value
    	parent['f_college_exam_passed']=self.refs.f_other_qualification.value

    	if($('#fatherCorrespondenceCheckbox').prop('checked') == true){
    		parent['is_caddress'] = 1
    	}else{
    		parent['is_caddress'] = 0
    	}

    	parent['f_add_l1']=self.refs.f_add_l1.value
    	parent['f_add_l2']=self.refs.f_add_l2.value
    	parent['f_city']=self.refs.f_city.value
    	parent['f_zip']=self.refs.f_zip.value
    	parent['f_state']=self.refs.f_state.value
    	parent['f_country']=self.refs.f_country.value
    	parent['f_mobile']=self.refs.f_mobile.value
    	parent['f_email']=self.refs.f_email.value
    	parent['f_nationality']=self.refs.f_nationality.value

    	parent['m_name']=self.refs.m_name.value
    	parent['m_occupation']=self.refs.m_occupation.value
    	parent['m_organisation_type']=self.refs.m_organisation_type.value
    	parent['m_annual_income']=self.refs.m_annual_income.value
    	parent['m_work_profile']=self.refs.m_work_profile.value
    	parent['m_organisation_name']=self.refs.m_organisation_name.value
    	parent['m_designation']=self.refs.m_designation.value
    	parent['m_department']=self.refs.m_department.value
    	parent['m_office_add_l1']=self.refs.m_office_add_l1.value
    	parent['m_office_add_l2']=self.refs.m_office_add_l2.value
    	parent['m_office_city']=self.refs.m_office_city.value
    	parent['m_office_zip']=self.refs.m_office_zip.value
    	parent['m_office_state']=self.refs.m_office_state.value
    	parent['m_office_country']=self.refs.m_office_country.value
    	parent['m_office_phone']=self.refs.m_office_phone.value
    	parent['m_school_exam_passed']=self.refs.m_qualification.value
    	parent['m_college_exam_passed']=self.refs.m_other_qualification.value

		if($('#motherCorrespondenceCheckbox').prop('checked') == true){
    		parent['is_motherAdd'] = 1
    	}else{
    		parent['is_motherAdd'] = 0
    	}

    	parent['m_add_l1']=self.refs.m_add_l1.value
    	parent['m_add_l2']=self.refs.m_add_l2.value
    	parent['m_city']=self.refs.m_city.value
    	parent['m_zip']=self.refs.m_zip.value
    	parent['m_state']=self.refs.m_state.value
    	parent['m_country']=self.refs.m_country.value
    	parent['m_mobile']=self.refs.m_mobile.value
    	parent['m_email']=self.refs.m_email.value
    	parent['m_nationality']=self.refs.m_nationality.value

    	if($('#motherCorrespondenceCheckbox').prop('checked') == true){
    		parent['is_motherAdd'] = 1
    	}else{
    		parent['is_motherAdd'] = 0
    	}
    	if(self.refs.is_guardian.value == 'Father'){
    		parent['is_guardian'] = 'Father'

    	}else if(self.refs.is_guardian.value == 'Mother'){
    		parent['is_guardian'] = 'Mother'
    	}else{
    		parent['is_guardian'] = 'Other'
    	}

    	parent['g_name']=self.refs.g_name.value
    	parent['g_occupation']=self.refs.g_occupation.value
    	parent['g_organisation_type']=self.refs.g_organisation_type.value
    	parent['g_annual_income']=self.refs.g_annual_income.value
    	parent['g_work_profile']=self.refs.g_work_profile.value
    	parent['g_organisation_name']=self.refs.g_organisation_name.value
    	parent['g_designation']=self.refs.g_designation.value
    	parent['g_department']=self.refs.g_department.value
    	parent['g_office_add_l1']=self.refs.g_office_add_l1.value
    	parent['g_office_add_l2']=self.refs.g_office_add_l2.value
    	parent['g_office_city']=self.refs.g_office_city.value
    	parent['g_office_zip']=self.refs.g_office_zip.value
    	parent['g_office_state']=self.refs.g_office_state.value
    	parent['g_office_country']=self.refs.g_office_country.value
    	parent['g_office_phone']=self.refs.g_office_phone.value
    	parent['g_school_exam_passed']=self.refs.g_qualification.value
    	parent['g_college_exam_passed']=self.refs.g_other_qualification.value
    	parent['g_add_l1']=self.refs.g_add_l1.value
    	parent['g_add_l2']=self.refs.g_add_l2.value
    	parent['g_city']=self.refs.g_city.value
    	parent['g_zip']=self.refs.g_zip.value
    	parent['g_state']=self.refs.g_state.value
    	parent['g_country']=self.refs.g_country.value
    	parent['g_phone']=self.refs.g_phone.value
    	parent['g_mobile']=self.refs.g_mobile.value
    	parent['g_email']=self.refs.g_email.value
    	parent['g_nationality']=self.refs.g_nationality.value
    	parent['g_relation']=self.refs.g_relation.value

    	parent['first_child_name']=self.refs.first_child_name.value
    	parent['first_child_age']=self.refs.first_child_age.value
    	parent['first_child_class']=self.refs.first_child_class.value
    	parent['first_child_section']=self.refs.first_child_section.value
    	parent['first_enrol']=self.refs.first_enrol.value
    	parent['first_child_school']=self.refs.first_child_school.value

    	parent['second_child_name']=self.refs.second_child_name.value
    	parent['second_child_age']=self.refs.second_child_age.value
    	parent['second_child_class']=self.refs.second_child_class.value
    	parent['second_child_section']=self.refs.second_child_section.value
    	parent['second_enrol']=self.refs.second_enrol.value
    	parent['second_child_school']=self.refs.second_child_school.value

    	parent['third_child_name']=self.refs.third_child_name.value
    	parent['third_child_age']=self.refs.third_child_age.value
    	parent['third_child_class']=self.refs.third_child_class.value
    	parent['third_child_section']=self.refs.third_child_section.value
    	parent['third_enrol']=self.refs.third_enrol.value
    	parent['third_child_school']=self.refs.third_child_school.value

    	parent['fourth_child_name']=self.refs.fourth_child_name.value
    	parent['fourth_child_age']=self.refs.fourth_child_age.value
    	parent['fourth_child_class']=self.refs.fourth_child_class.value
    	parent['fourth_child_section']=self.refs.fourth_child_section.value
    	parent['fourth_enrol']=self.refs.fourth_enrol.value
    	parent['fourth_child_school']=self.refs.fourth_child_school.value

    	if($('#music').prop('checked') == true){
    		parent['music'] = 1
    	}else{
    		parent['music'] = 0
    	}

    	if($('#sports').prop('checked') == true){
    		parent['sports'] = 1
    	}else{
    		parent['sports'] = 0
    	}

    	if($('#social').prop('checked') == true){
    		parent['social'] = 1
    	}else{
    		parent['social'] = 0
    	}

    	if($('#media').prop('checked') == true){
    		parent['media'] = 1
    	}else{
    		parent['media'] = 0
    	}

    	if($('#academic').prop('checked') == true){
    		parent['academic'] = 1
    	}else{
    		parent['academic'] = 0
    	}

    	if($('#community').prop('checked') == true){
    		parent['community'] = 1
    	}else{
    		parent['community'] = 0
    	}

    	if($('#painting').prop('checked') == true){
    		parent['painting'] = 1
    	}else{
    		parent['painting'] = 0
    	}

    	if($('#information').prop('checked') == true){
    		parent['information'] = 1
    	}else{
    		parent['information'] = 0
    	}

    	if($('#hr_training').prop('checked') == true){
    		parent['hr_training'] = 1
    	}else{
    		parent['hr_training'] = 0
    	}

    	if($('#medical').prop('checked') == true){
    		parent['medical'] = 1
    	}else{
    		parent['medical'] = 0
    	}

    	if($('#career').prop('checked') == true){
    		parent['career'] = 1
    	}else{
    		parent['career'] = 0
    	}

    	if($('#communication').prop('checked') == true){
    		parent['communication'] = 1
    	}else{
    		parent['communication'] = 0
    	}

    	if($('#med').prop('checked') == true){
    		parent['med'] = 1
    	}else{
    		parent['med'] = 0
    	}

    	if($('#bed').prop('checked') == true){
    		parent['bed'] = 1
    	}else{
    		parent['bed'] = 0
    	}

    	if($('#ttc').prop('checked') == true){
    		parent['ttc'] = 1
    	}else{
    		parent['ttc'] = 0
    	}

    	if($('#montessori').prop('checked') == true){
    		parent['montessori'] = 1
    	}else{
    		parent['montessori'] = 0
    	}

    	obj['parent']=parent

    	if(self.title=='Add'){

    	  obj['student'].student_id=null
          studentStore.trigger('add_student', obj)

        }else if(self.title=='Update'){
          studentStore.trigger('edit_student', obj,self.student_id)
          self.student_view = 'show_student'
        }
    }

    self.edit = (c,st) => {
      console.log(c)
      self.student_id = c
      flatpickr(".date", {
	    allowInput: true,
        dateFormat: "d/m/Y",
  		})
      self.student_view = 'add_student'

      self.title='Update'
      studentStore.trigger('read_for_edit_student',self.student_id)
      document.getElementById('pp_box').style.backgroundImage = 'url(/images/'+self.session_id+'/studentImages/'+c+'.jpg)';
      document.getElementById('f_pp_box').style.backgroundImage = 'url(/images/'+self.session_id+'/fatherImages/'+c+'.jpg)';
      document.getElementById('m_pp_box').style.backgroundImage = 'url(/images/'+self.session_id+'/motherImages/'+c+'.jpg)';

      if(self.refs.is_guardian.value == 'Father'){
      	document.getElementById('g_pp_box').style.backgroundImage = 'url(/images/'+self.session_id+'/fatherImages/'+c+'.jpg)';
      }else if(self.refs.is_guardian.value == 'Mother'){
      	document.getElementById('g_pp_box').style.backgroundImage = 'url(/images/'+self.session_id+'/motherImages/'+c+'.jpg)';
      }else{
      	document.getElementById('g_pp_box').style.backgroundImage = 'url(/images/'+self.session_id+'/guardianImages/'+c+'.jpg)';
      }

    }

    self.cancelOperation = (st) => {
      self.students.map(c => {
          c.confirmDelete = false
          c.confirmEdit = false
      })
    }
    self.confirmDelete = (st) => {
      self.students.map(c => {
        if(c.student_id != st.item.st.student_id){
          c.confirmDelete = false
        }else{
          c.confirmDelete = true
        }
      })
    }

    self.delete = (st) => {
      self.loading = true
      studentStore.trigger('delete_student', st.item.st.student_id)
    }

    self.regenerate_roll_no = () =>{
    	studentStore.trigger('regenerate_roll_no', self.refs.read_section_id.value)
    }

    self.student_list = () =>{
    	self.student_view = 'student_list'
    	var today = new Date();
		var dd = today.getDate();
		var mm = today.getMonth()+1;

		var yyyy = today.getFullYear();
		if(dd<10){
    		dd='0'+dd;
		}
		if(mm<10){
    		mm='0'+mm;
		}
		var today = dd+'/'+mm+'/'+yyyy;
		self.print_date = today
    	studentStore.trigger('student_list', self.refs.read_section_id.value)
    }

    self.close_student_list = () => {
    	self.student_view = 'show_student'
    }

    self.print_list = () =>{
    	var today = new Date();
		var dd = today.getDate();
		var mm = today.getMonth()+1;

		var yyyy = today.getFullYear();
		if(dd<10){
    		dd='0'+dd;
		}
		if(mm<10){
    		mm='0'+mm;
		}
		var today = dd+'/'+mm+'/'+yyyy;
		self.print_date = today
    	self.student_view = 'print_list'
    	studentStore.trigger('print_list', self.refs.read_standard_id.value,self.refs.read_section_id.value)
    }

    self.close_print_list = () => {
    	self.student_view = 'show_student'
    }

    self.viewHouse = () => {
    	if($('#checkHouse').is(":checked")){
	        self.house_column = true
    	}else{
	        self.house_column = false
    	}
    }

    self.AddColumn = () =>{

    	if(self.refs.add_column.value == "0"){
    		self.column_one = false
    		self.column_two = false
    		self.column_three = false
    		self.column_four = false
    		self.column_five = false
    		self.column_six = false
    		self.column_seven = false
    		self.column_eight = false
    		self.column_nine = false
    	}else if(self.refs.add_column.value == "1"){
    		self.column_one = true
    		self.column_two = false
    		self.column_three = false
    		self.column_four = false
    		self.column_five = false
    		self.column_six = false
    		self.column_seven = false
    		self.column_eight = false
    		self.column_nine = false
    	}else if(self.refs.add_column.value == "2"){
			self.column_one = true
    		self.column_two = true
    		self.column_three = false
    		self.column_four = false
    		self.column_five = false
    		self.column_six = false
    		self.column_seven = false
    		self.column_eight = false
    		self.column_nine = false
    	}else if(self.refs.add_column.value == "3"){
			self.column_one = true
    		self.column_two = true
    		self.column_three = true
    		self.column_four = false
    		self.column_five = false
    		self.column_six = false
    		self.column_seven = false
    		self.column_eight = false
    		self.column_nine = false
    	}else if(self.refs.add_column.value == "4"){
			self.column_one = true
    		self.column_two = true
    		self.column_three = true
    		self.column_four = true
    		self.column_five = false
    		self.column_six = false
    		self.column_seven = false
    		self.column_eight = false
    		self.column_nine = false
    	}else if(self.refs.add_column.value == "5"){
			self.column_one = true
    		self.column_two = true
    		self.column_three = true
    		self.column_four = true
    		self.column_five = true
    		self.column_six = false
    		self.column_seven = false
    		self.column_eight = false
    		self.column_nine = false
    	}else if(self.refs.add_column.value == "6"){
			self.column_one = true
    		self.column_two = true
    		self.column_three = true
    		self.column_four = true
    		self.column_five = true
    		self.column_six = true
    		self.column_seven = false
    		self.column_eight = false
    		self.column_nine = false
    	}else if(self.refs.add_column.value == "7"){
			self.column_one = true
    		self.column_two = true
    		self.column_three = true
    		self.column_four = true
    		self.column_five = true
    		self.column_six = true
    		self.column_seven = true
    		self.column_eight = false
    		self.column_nine = false
    	}else if(self.refs.add_column.value == "8"){
			self.column_one = true
    		self.column_two = true
    		self.column_three = true
    		self.column_four = true
    		self.column_five = true
    		self.column_six = true
    		self.column_seven = true
    		self.column_eight = true
    		self.column_nine = false
    	}else if(self.refs.add_column.value == "9"){
			self.column_one = true
    		self.column_two = true
    		self.column_three = true
    		self.column_four = true
    		self.column_five = true
    		self.column_six = true
    		self.column_seven = true
    		self.column_eight = true
    		self.column_nine = true
    	}
    }

    self.view_profile = (c,st) => {
    	console.log("self.session_id")
    	console.log(self.session_id)
    	self.student_id = c
    	self.student_view = 'student_profile'
    	studentStore.trigger('read_student_profile', self.student_id)
    	document.getElementById('pp_box1').src = '/images/'+self.session_id+'/studentImages/'+c+'.jpg';
    	document.getElementById('f_pp_box1').src = '/images/'+self.session_id+'/fatherImages/'+c+'.jpg';
        document.getElementById('m_pp_box1').src = '/images/'+self.session_id+'/motherImages/'+c+'.jpg';
        document.getElementById('g_pp_box1').src = '/images/'+self.session_id+'/guardianImages/'+c+'.jpg';

    }

    self.close_student_profile = () => {
    	self.student_view = 'show_student'
    }

    self.clearForm = () => {
    	self.refs.first_name.value = ""
    	self.refs.middle_name.value = ""
    	self.refs.last_name.value = ""
    	self.refs.enroll_number.value = ""
    	self.refs.roll_number.value = ""
    	self.refs.reg_number.value = ""
    	self.refs.gender.value = "M"
    	self.refs.dob.value = ""
    	self.refs.blood_group.value = "A+"
    	self.refs.p_add_l1.value = ""
    	self.refs.p_add_l2.value = ""
    	self.refs.p_city.value = ""
    	self.refs.p_zip.value = ""
    	self.refs.p_state.value = ""
    	self.refs.p_country.value = ""
    	self.refs.c_add_l1.value = ""
    	self.refs.c_add_l2.value = ""
    	self.refs.c_city.value = ""
    	self.refs.c_zip.value = ""
    	self.refs.c_state.value = ""
    	self.refs.c_country.value = ""
    	self.refs.residence_phone.value = ""
    	self.refs.mobile.value = ""
    	self.refs.emergency_no.value = ""
    	self.refs.student_type.value = "Day Scholar"
    	self.refs.aadhar_no.value = ""
    	self.refs.doa.value= ""
    	self.refs.old_doa.value= ""
    	self.refs.doj.value= ""
    	self.refs.old_doj.value= ""
    	self.refs.mother_tongue.value = ""
    	self.refs.last_school.value = ""
    	self.refs.last_class.value = ""
    	self.refs.admission_for_class.value = ""
    	self.refs.hobby.value = ""
    	self.refs.cast.value = ""
    	self.refs.religion_id.value = ""
    	self.refs.staff_child.value = "N"
    	self.refs.staff_name.value = ""
    	self.GetStaffName()
    	$('#correspondenceCheckbox').prop('checked', false)

    	self.refs.transport_mode.value = "None"
    	self.refs.school_distance.value = "1 km"
    	self.refs.differently_abled.value = "None"

    	self.refs.section_id.value = ""
    	self.refs.house_id.value = "0"

    	self.refs.enroll_number.value = ""
    	self.refs.dob.value =""

    	self.refs.f_name.value = ""
    	self.refs.f_occupation.value = ""
    	self.refs.f_organisation_type.value = ""
    	self.refs.f_annual_income.value = ""
    	self.refs.f_work_profile.value = ""
    	self.refs.f_organisation_name.value = ""
    	self.refs.f_designation.value = ""
    	self.refs.f_department.value = ""
    	self.refs.f_office_add_l1.value = ""
    	self.refs.f_office_add_l2.value = ""
    	self.refs.f_office_city.value = ""
    	self.refs.f_office_zip.value = ""
    	self.refs.f_office_state.value = ""
    	self.refs.f_office_country.value = ""
    	self.refs.f_office_phone.value = ""
    	self.refs.f_qualification.value = ""
    	self.refs.f_other_qualification.value = ""

    	self.refs.f_add_l1.value = ""
    	self.refs.f_add_l2.value = ""
    	self.refs.f_city.value = ""
    	self.refs.f_zip.value = ""
    	self.refs.f_state.value = ""
    	self.refs.f_country.value = ""
    	self.refs.f_mobile.value = ""
    	self.refs.f_email.value = ""
    	self.refs.f_nationality.value = ""

    	self.refs.m_name.value = ""
    	self.refs.m_occupation.value = ""
    	self.refs.m_organisation_type.value = ""
    	self.refs.m_annual_income.value = ""
    	self.refs.m_work_profile.value = ""
    	self.refs.m_organisation_name.value = ""
    	self.refs.m_designation.value = ""
    	self.refs.m_department.value = ""
    	self.refs.m_office_add_l1.value = ""
    	self.refs.m_office_add_l2.value = ""
    	self.refs.m_office_city.value = ""
    	self.refs.m_office_zip.value = ""
    	self.refs.m_office_state.value = ""
    	self.refs.m_office_country.value = ""
    	self.refs.m_office_phone.value = ""
    	self.refs.m_qualification.value = ""
    	self.refs.m_other_qualification.value = ""

    	self.refs.m_add_l1.value = ""
    	self.refs.m_add_l2.value = ""
    	self.refs.m_city.value = ""
    	self.refs.m_zip.value = ""
    	self.refs.m_state.value = ""
    	self.refs.m_country.value = ""
    	self.refs.m_mobile.value = ""
    	self.refs.m_email.value = ""
    	self.refs.m_nationality.value = ""

    	self.refs.g_name.value = ""
    	self.refs.g_occupation.value = ""
    	self.refs.g_organisation_type.value = ""
    	self.refs.g_annual_income.value = ""
    	self.refs.g_work_profile.value = ""
    	self.refs.g_organisation_name.value = ""
    	self.refs.g_designation.value = ""
    	self.refs.g_department.value = ""
    	self.refs.g_office_add_l1.value = ""
    	self.refs.g_office_add_l2.value = ""
    	self.refs.g_office_city.value = ""
    	self.refs.g_office_zip.value = ""
    	self.refs.g_office_state.value = ""
    	self.refs.g_office_country.value = ""
    	self.refs.g_office_phone.value = ""
    	self.refs.g_qualification.value = ""
    	self.refs.g_other_qualification.value = ""
    	self.refs.g_add_l1.value = ""
    	self.refs.g_add_l2.value = ""
    	self.refs.g_city.value = ""
    	self.refs.g_zip.value = ""
    	self.refs.g_state.value = ""
    	self.refs.g_country.value = ""
    	self.refs.g_phone.value = ""
    	self.refs.g_mobile.value = ""
    	self.refs.g_email.value = ""
    	self.refs.g_nationality.value = ""
    	self.refs.g_relation.value = ""

    	self.refs.first_child_name.value = ""
    	self.refs.first_child_age.value = ""
    	self.refs.first_child_class.value = ""
    	self.refs.first_child_section.value = ""
    	self.refs.first_enrol.value = ""
    	self.refs.first_child_school.value = ""

    	self.refs.second_child_name.value = ""
    	self.refs.second_child_age.value = ""
    	self.refs.second_child_class.value = ""
    	self.refs.second_child_section.value = ""
    	self.refs.second_enrol.value = ""
    	self.refs.second_child_school.value = ""

    	self.refs.third_child_name.value = ""
    	self.refs.third_child_age.value = ""
    	self.refs.third_child_class.value = ""
    	self.refs.third_child_section.value = ""
    	self.refs.third_enrol.value = ""
    	self.refs.third_child_school.value = ""

    	self.refs.fourth_child_name.value = ""
    	self.refs.fourth_child_age.value = ""
    	self.refs.fourth_child_class.value = ""
    	self.refs.fourth_child_section.value = ""
    	self.refs.fourth_enrol.value = ""
    	self.refs.fourth_child_school.value = ""
    	pp_box.style.backgroundImage = "";
		f_pp_box.style.backgroundImage = "";
		m_pp_box.style.backgroundImage = "";
		g_pp_box.style.backgroundImage = "";
    	self.readStandard()
    	self.getSection()
    	self.readSection()
    	self.readCategory()
    	self.readReligion()
    	self.readHouse()
    }

    self.first_edit = ()=>{
    	self.student_view = 'first_edit_view'
    	self.refs.firstEditValue.value=0
    	self.student_first_edit =[]

    }

    self.close_first_edit = () => {
    	self.student_view = 'show_student'
    }

    self.getFirstEditData = ()=>{

    	if(self.refs.firstEditValue.value=='blood_group'){
    		self.text_box=false
    	}else{
    		self.text_box=true
    	}
    	if(self.refs.firstEditValue.value=='0'){
    		toastr.info("Please Select Any Field");
    		return;
    	}
    	self.loading = true

    	studentStore.trigger('read_student_first_edit', self.refs.read_standard_id.value,
    		self.refs.read_section_id.value,self.refs.firstEditValue.value)
    }

    self.EditFirstData = ()=>{
    	self.loading = true
    	var editValues = []
    	console.log(self.student_first_edit)
    	self.student_first_edit.map( q => {
    		var obj={}
    		obj['student_id'] = q.student_id
    		obj['value'] = $('#first_edit_field'+q.student_id).val();
    		editValues.push(obj);
    	})
    	studentStore.trigger('edit_student_first',editValues,self.refs.firstEditValue.value)
    }

    self.filterStudent = ()=>{
    	self.filteredStudent = self.students.filter(c => {
       		return JSON.stringify(c).toLowerCase().indexOf(self.refs.searchStudent.value.toLowerCase())>=0
   		})
    }

    studentStore.on('read_student_first_edit_changed',ReadStudentFirstEditChanged)
    function ReadStudentFirstEditChanged(student_first_edit){
      console.log(student_first_edit)
      self.loading=false

      self.student_first_edit = student_first_edit
      self.update()
    }

    studentStore.on('edit_student_first_changed',EditStudentFirstEditChanged)
    function EditStudentFirstEditChanged(){
      self.loading=false
      self.student_view = 'show_student'
      self.update()
      self.getStudentData()
    }

    studentStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()
      self.readSection()

    }

    studentStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections
      self.update()
      self.getSection()
      self.getReadSection()
      self.getStudentData()
      self.getReadSectionForWithdraw()
    }

    studentStore.on('read_house_changed',HouseChanged)
    function HouseChanged(houses){
      console.log(houses)
      self.houses = houses
      self.update()
    }

    studentStore.on('read_cast_changed',CastChanged)
    function CastChanged(cast){
      console.log(cast)
      self.cast = cast
      self.update()
    }

    studentStore.on('read_religion_changed',ReligionChanged)
    function ReligionChanged(religion){
      console.log(religion)
      self.religion = religion
      self.update()
    }

    studentStore.on('read_student_changed',StudentChanged)
    function StudentChanged(students,session_id,session_name ,role){
      self.loading = false
      self.students = students
      self.filteredStudent = students
      self.session_id = session_id
      self.session_name = session_name
      self.StandardName = $("#read_standard_id option:selected").text();
      self.SectionName = $("#read_section_id option:selected").text();

      if(self.students.length==0 && role=="ADMIN" && role=="Admission" && role=="Discipline"){
      	toastr.info("No Data Found")
      }
      self.update()
    }

    studentStore.on('read_student_profile_changed',StudentProfileChanged)
    function StudentProfileChanged(student_profile_details,session_id){
    	self.session_id = session_id
    	console.log(self.session_id)
    	self.st=student_profile_details[0]
    	console.log(student_profile_details)
      	self.student_profile_details = student_profile_details

		if(student_profile_details[0].music == 1){
			$('#p_music').prop('checked', true)
		}
		else{
			$('#p_music').prop('checked', false)
		}

		if(student_profile_details[0].sports == 1){
			$('#p_sports').prop('checked', true)
		}
		else{
			$('#p_sports').prop('checked', false)
		}

		if(student_profile_details[0].social == 1){
			$('#p_social').prop('checked', true)
		}
		else{
			$('#p_social').prop('checked', false)
		}

		if(student_profile_details[0].media == 1){
			$('#p_media').prop('checked', true)
		}
		else{
			$('#p_media').prop('checked', false)
		}

		if(student_profile_details[0].academic == 1){
			$('#p_academic').prop('checked', true)
		}
		else{
			$('#p_academic').prop('checked', false)
		}

		if(student_profile_details[0].community == 1){
			$('#p_community').prop('checked', true)
		}
		else{
			$('#p_community').prop('checked', false)
		}

		if(student_profile_details[0].painting == 1){
			$('#p_painting').prop('checked', true)
		}
		else{
			$('#p_painting').prop('checked', false)
		}

		if(student_profile_details[0].information == 1){
			$('#p_information').prop('checked', true)
		}
		else{
			$('#p_information').prop('checked', false)
		}

		if(student_profile_details[0].hr_training == 1){
			$('#p_hr_training').prop('checked', true)
		}
		else{
			$('#p_hr_training').prop('checked', false)
		}

		if(student_profile_details[0].medical == 1){
			$('#p_medical').prop('checked', true)
		}
		else{
			$('#p_medical').prop('checked', false)
		}

		if(student_profile_details[0].career == 1){
			$('#p_career').prop('checked', true)
		}
		else{
			$('#p_career').prop('checked', false)
		}

		if(student_profile_details[0].communication == 1){
			$('#p_communication').prop('checked', true)
		}
		else{
			$('#p_communication').prop('checked', false)
		}

		if(student_profile_details[0].med == 1){
			$('#p_med').prop('checked', true)
		}
		else{
			$('#p_med').prop('checked', false)
		}

		if(student_profile_details[0].bed == 1){
			$('#p_bed').prop('checked', true)
		}
		else{
			$('#p_bed').prop('checked', false)
		}

		if(student_profile_details[0].ttc == 1){
			$('#p_ttc').prop('checked', true)
		}
		else{
			$('#p_ttc').prop('checked', false)
		}

		if(student_profile_details[0].montessori == 1){
			$('#p_montessori').prop('checked', true)
		}
		else{
			$('#p_montessori').prop('checked', false)
		}

      	self.update()
    }

    studentStore.on('add_student_changed',AddStudentChanged)
    function AddStudentChanged(students,student_id){
      console.log(students)
      self.students = students
      self.uploadStudentImage(student_id)
      self.uploadFatherImage(student_id)
      self.uploadMotherImage(student_id)
      console.log("self.copyGuardianImage")
      console.log(self.copyGuardianImage)
      if(self.copyGuardianImage =='Father'){
      	self.uploadCopyFatherImage(student_id)
      }else if(self.copyGuardianImage=='Mother'){
      	self.uploadCopyMotherImage(student_id)
      }else{
      	self.uploadGuardianImage(student_id)
      }

      self.student_view = 'show_student'
      self.getStudentData()
      self.update()
    }

    studentStore.on('edit_student_changed',EditStudentChanged)
    function EditStudentChanged(students){
      console.log(students)
      self.students = students
      console.log(self.student_id)
      self.uploadStudentImage(self.student_id)

      if(document.getElementById("f_pp_box").style.backgroundImage != ""){
      	self.uploadFatherImage(self.student_id)
      }if(document.getElementById("m_pp_box").style.backgroundImage != ""){
      	self.uploadMotherImage(self.student_id)
      }if(document.getElementById("g_pp_box").style.backgroundImage != ""){
      	self.uploadGuardianImage(self.student_id)
      }

      if(self.copyGuardianImage =='Father'){
      	self.uploadCopyFatherImage(self.student_id)
      }else if(self.copyGuardianImage=='Mother'){
      	self.uploadCopyMotherImage(self.student_id)
      }
      self.clearForm()
      self.getStudentData()
      self.student_view = 'show_student'
      self.update()
    }

    studentStore.on('delete_student_changed',DeleteStudentChanged)
    function DeleteStudentChanged(){
      self.loading = false
      self.getStudentData()
      self.update()
    }

    studentStore.on('regenerate_roll_no_changed',RegenerateRollNoChanged)
    function RegenerateRollNoChanged(){
      self.loading = false
      self.getStudentData()
      self.update()
    }

    studentStore.on('student_list_changed',StudentListChanged)
    function StudentListChanged(student_list,total){
      console.log(student_list)
      self.student_list = student_list
      self.total_student = total
      self.sl=student_list[0]
      self.update()
    }

    studentStore.on('print_list_changed',PrintListChanged)
    function PrintListChanged(print_list){
      console.log(print_list)
      self.print_list = print_list
      self.pl=print_list[0]
      self.update()
    }

    studentStore.on('create_student_withdraw_changed',WithDrawStudentChanged)
    function WithDrawStudentChanged(withdraw_students){
      self.closewithdrawModal();
      self.getStudentData();
      self.update()
    }

    studentStore.on('read_for_edit_student_changed',ReadForEditStudentChanged)
    function ReadForEditStudentChanged(student_details,session_id){
     	console.log(student_details)
     	console.log(session_id)
     	self.session_id = session_id
      	self.student_details = student_details
      	self.refs.first_name.value = student_details[0].first_name
      	self.refs.middle_name.value = student_details[0].middle_name
      	self.refs.last_name.value = student_details[0].last_name
      	self.refs.standard_id.value = student_details[0].standard_id
      	self.filteredSections = []
    	self.filteredSections = self.sections.filter(s => {
    		return s.standard_id == student_details[0].standard_id
    	})
    	self.refs.house_id.value = student_details[0].house_id
    	if(student_details[0].house_id==null){
    		self.refs.house_id.value=0
    	}
    	self.refs.enroll_number.value = student_details[0].enroll_number
		self.refs.roll_number.value = student_details[0].roll_number
		self.refs.reg_number.value = student_details[0].reg_number
		self.refs.gender.value = student_details[0].gender
		self.refs.category_id.value = student_details[0].category_id
		self.refs.dob.value = student_details[0].dob
		self.refs.blood_group.value = student_details[0].blood_group
		self.refs.p_add_l1.value = student_details[0].p_add_l1
		self.refs.p_add_l2.value = student_details[0].p_add_l2
		self.refs.p_city.value = student_details[0].p_city
		self.refs.p_zip.value = student_details[0].p_zip
		self.refs.p_state.value = student_details[0].p_state
		self.refs.p_country.value = student_details[0].p_country

		if(student_details[0].is_permanent == 1){
			$('#correspondenceCheckbox').prop('checked', true)
		}
		else{
			$('#correspondenceCheckbox').prop('checked', false)
		}
		self.refs.c_add_l1.value=student_details[0].c_add_l1
    	self.refs.c_add_l2.value=student_details[0].c_add_l2
    	self.refs.c_city.value=student_details[0].c_city
    	self.refs.c_zip.value=student_details[0].c_zip
    	self.refs.c_state.value=student_details[0].c_state
    	self.refs.c_country.value=student_details[0].c_country

		self.refs.mobile.value = student_details[0].mobile
		self.refs.emergency_no.value = student_details[0].fax
		self.refs.student_type.value = student_details[0].student_type
		self.refs.aadhar_no.value = student_details[0].aadhar_no
		self.refs.doa.value = student_details[0].doa
		self.refs.old_doa.value = student_details[0].old_doa
		self.refs.doj.value = student_details[0].doj
		self.refs.old_doj.value = student_details[0].old_doj
		self.refs.mother_tongue.value = student_details[0].mother_tongue
		self.refs.last_school.value = student_details[0].last_school
		self.refs.last_class.value = student_details[0].last_class
		self.refs.admission_for_class.value = student_details[0].admission_for_class
		self.refs.hobby.value = student_details[0].hobby
		self.refs.cast.value = student_details[0].cast
		self.refs.religion_id.value = student_details[0].religion_id
		self.refs.staff_child.value = student_details[0].staff_child
		if(self.refs.staff_child.value == "Y"){
    		self.staff_name = true
    	}else{
    		self.staff_name = false
    	}
		self.refs.f_name.value = student_details[0].f_name
		self.refs.f_occupation.value = student_details[0].f_occupation
		self.refs.f_organisation_type.value = student_details[0].f_organisation_type
		self.refs.f_annual_income.value = student_details[0].f_annual_income
		self.refs.f_work_profile.value = student_details[0].f_work_profile
		self.refs.f_organisation_name.value = student_details[0].f_organisation_name
		self.refs.f_designation.value = student_details[0].f_designation
		self.refs.f_department.value = student_details[0].f_department
		self.refs.f_office_add_l1.value = student_details[0].f_office_add_l1
		self.refs.f_office_add_l2.value = student_details[0].f_office_add_l2
		self.refs.f_office_city.value = student_details[0].f_office_city
		self.refs.f_office_zip.value = student_details[0].f_office_zip
		self.refs.f_office_state.value = student_details[0].f_office_state
		self.refs.f_office_country.value = student_details[0].f_office_country
		self.refs.f_office_phone.value = student_details[0].f_office_phone
		self.refs.f_qualification.value = student_details[0].f_school_exam_passed
		self.refs.f_other_qualification.value = student_details[0].f_college_exam_passed
		self.refs.f_mobile.value = student_details[0].f_mobile
		self.refs.f_email.value = student_details[0].f_email
		self.refs.f_nationality.value = student_details[0].f_nationality

    	if(student_details[0].is_caddress == 1){
			$('#fatherCorrespondenceCheckbox').prop('checked', true)
		}
		else{
			$('#fatherCorrespondenceCheckbox').prop('checked', false)
		}
		self.refs.f_add_l1.value=student_details[0].f_add_l1
		self.refs.f_add_l2.value=student_details[0].f_add_l2
		self.refs.f_city.value=student_details[0].f_city
		self.refs.f_zip.value=student_details[0].f_zip
		self.refs.f_state.value=student_details[0].f_state
		self.refs.f_country.value=student_details[0].f_country

		self.refs.m_name.value = student_details[0].m_name
		self.refs.m_occupation.value = student_details[0].m_occupation
		self.refs.m_organisation_type.value = student_details[0].m_organisation_type
		self.refs.m_annual_income.value = student_details[0].m_annual_income
		self.refs.m_work_profile.value = student_details[0].m_work_profile
		self.refs.m_organisation_name.value = student_details[0].m_organisation_name
		self.refs.m_designation.value = student_details[0].m_designation
		self.refs.m_department.value = student_details[0].m_department
		self.refs.m_office_add_l1.value = student_details[0].m_office_add_l1
		self.refs.m_office_add_l2.value = student_details[0].m_office_add_l2
		self.refs.m_office_city.value = student_details[0].m_office_city
		self.refs.m_office_zip.value = student_details[0].m_office_zip
		self.refs.m_office_state.value = student_details[0].m_office_state
		self.refs.m_office_country.value = student_details[0].m_office_country
		self.refs.m_office_phone.value = student_details[0].m_office_phone
		self.refs.m_qualification.value = student_details[0].m_school_exam_passed
		self.refs.m_other_qualification.value = student_details[0].m_college_exam_passed

		if(student_details[0].is_motherAdd == 1){
			$('#motherCorrespondenceCheckbox').prop('checked', true)
		}
		else{
			$('#motherCorrespondenceCheckbox').prop('checked', false)
		}

		self.refs.m_add_l1.value = student_details[0].m_add_l1
		self.refs.m_add_l2.value = student_details[0].m_add_l2
		self.refs.m_city.value = student_details[0].m_city
		self.refs.m_zip.value = student_details[0].m_zip
		self.refs.m_state.value = student_details[0].m_state
		self.refs.m_country.value = student_details[0].m_country
		self.refs.m_mobile.value = student_details[0].m_mobile
		self.refs.m_email.value = student_details[0].m_email
		self.refs.m_nationality.value = student_details[0].m_nationality

		if(student_details[0].is_guardian == 'Father'){
			self.refs.is_guardian.value = 'Father'
		}else if(student_details[0].is_guardian == 'Mother'){
			self.refs.is_guardian.value = 'Mother'
		}else{
			self.refs.is_guardian.value = 'Other'
		}

		self.refs.g_name.value = student_details[0].g_name
		self.refs.g_occupation.value = student_details[0].g_occupation
		self.refs.g_organisation_type.value = student_details[0].g_organisation_type
		self.refs.g_annual_income.value = student_details[0].g_annual_income
		self.refs.g_work_profile.value = student_details[0].g_work_profile
		self.refs.g_organisation_name.value = student_details[0].g_organisation_name
		self.refs.g_designation.value = student_details[0].g_designation
		self.refs.g_department.value = student_details[0].g_department
		self.refs.g_office_add_l1.value = student_details[0].g_office_add_l1
		self.refs.g_office_add_l2.value = student_details[0].g_office_add_l2
		self.refs.g_office_city.value = student_details[0].g_office_city
		self.refs.g_office_zip.value = student_details[0].g_office_zip
		self.refs.g_office_state.value = student_details[0].g_office_state
		self.refs.g_office_country.value = student_details[0].g_office_country
		self.refs.g_office_phone.value = student_details[0].g_office_phone
		self.refs.g_qualification.value = student_details[0].g_school_exam_passed
		self.refs.g_other_qualification.value = student_details[0].g_college_exam_passed
		self.refs.g_add_l1.value = student_details[0].g_add_l1
		self.refs.g_add_l2.value = student_details[0].g_add_l2
		self.refs.g_city.value = student_details[0].g_city
		self.refs.g_zip.value = student_details[0].g_zip
		self.refs.g_state.value = student_details[0].g_state
		self.refs.g_country.value = student_details[0].g_country
		self.refs.g_phone.value = student_details[0].g_phone
		self.refs.g_mobile.value = student_details[0].g_mobile
		self.refs.g_email.value = student_details[0].g_email
		self.refs.g_nationality.value = student_details[0].g_nationality
		self.refs.g_relation.value = student_details[0].g_relation

		self.refs.first_child_name.value = student_details[0].first_child_name
		self.refs.first_child_age.value = student_details[0].first_child_age
		self.refs.first_child_class.value = student_details[0].first_child_class
		self.refs.first_child_section.value = student_details[0].first_child_section
		self.refs.first_enrol.value = student_details[0].first_enrol
		self.refs.first_child_school.value = student_details[0].first_child_school
		self.refs.second_child_name.value = student_details[0].second_child_name
		self.refs.second_child_age.value = student_details[0].second_child_age
		self.refs.second_child_class.value = student_details[0].second_child_class
		self.refs.second_child_section.value = student_details[0].second_child_section
		self.refs.second_enrol.value = student_details[0].second_enrol
		self.refs.second_child_school.value = student_details[0].second_child_school
		self.refs.third_child_name.value = student_details[0].third_child_name
		self.refs.third_child_age.value = student_details[0].third_child_age
		self.refs.third_child_class.value = student_details[0].third_child_class
		self.refs.third_child_section.value = student_details[0].third_child_section
		self.refs.third_enrol.value = student_details[0].third_enrol
		self.refs.third_child_school.value = student_details[0].third_child_school
		self.refs.fourth_child_name.value = student_details[0].fourth_child_name
		self.refs.fourth_child_age.value = student_details[0].fourth_child_age
		self.refs.fourth_child_class.value = student_details[0].fourth_child_class
		self.refs.fourth_child_section.value = student_details[0].fourth_child_section
		self.refs.fourth_enrol.value = student_details[0].fourth_enrol
		self.refs.fourth_child_school.value = student_details[0].fourth_child_school

		if(student_details[0].music == 1){
			$('#music').prop('checked', true)
		}
		else{
			$('#music').prop('checked', false)
		}

		if(student_details[0].sports == 1){
			$('#sports').prop('checked', true)
		}
		else{
			$('#sports').prop('checked', false)
		}

		if(student_details[0].social == 1){
			$('#social').prop('checked', true)
		}
		else{
			$('#social').prop('checked', false)
		}

		if(student_details[0].media == 1){
			$('#media').prop('checked', true)
		}
		else{
			$('#media').prop('checked', false)
		}

		if(student_details[0].academic == 1){
			$('#academic').prop('checked', true)
		}
		else{
			$('#academic').prop('checked', false)
		}

		if(student_details[0].community == 1){
			$('#community').prop('checked', true)
		}
		else{
			$('#community').prop('checked', false)
		}

		if(student_details[0].painting == 1){
			$('#painting').prop('checked', true)
		}
		else{
			$('#painting').prop('checked', false)
		}

		if(student_details[0].information == 1){
			$('#information').prop('checked', true)
		}
		else{
			$('#information').prop('checked', false)
		}

		if(student_details[0].hr_training == 1){
			$('#hr_training').prop('checked', true)
		}
		else{
			$('#hr_training').prop('checked', false)
		}

		if(student_details[0].medical == 1){
			$('#medical').prop('checked', true)
		}
		else{
			$('#medical').prop('checked', false)
		}

		if(student_details[0].career == 1){
			$('#career').prop('checked', true)
		}
		else{
			$('#career').prop('checked', false)
		}

		if(student_details[0].communication == 1){
			$('#communication').prop('checked', true)
		}
		else{
			$('#communication').prop('checked', false)
		}

		if(student_details[0].med == 1){
			$('#med').prop('checked', true)
		}
		else{
			$('#med').prop('checked', false)
		}

		if(student_details[0].bed == 1){
			$('#bed').prop('checked', true)
		}
		else{
			$('#bed').prop('checked', false)
		}

		if(student_details[0].ttc == 1){
			$('#ttc').prop('checked', true)
		}
		else{
			$('#ttc').prop('checked', false)
		}

		if(student_details[0].montessori == 1){
			$('#montessori').prop('checked', true)
		}
		else{
			$('#montessori').prop('checked', false)
		}

		self.refs.transport_mode.value = student_details[0].transport_mode
		self.refs.school_distance.value = student_details[0].school_distance
		self.refs.differently_abled.value = student_details[0].differently_abled
		self.student_id = student_details[0].student_id
		self.edit_student_id = student_details[0].student_id
		self.update()
		self.refs.staff_name.value = student_details[0].staff_name
        self.refs.section_id.value = student_details[0].section_id

    }

    studentStore.on('upload_student_image_changed',UploadStudentImage)
    function UploadStudentImage(image_name){
      console.log(image_name)
      self.student_profile_picture = image_name
    }

    studentStore.on('delete_upload_student_image_changed',DeleteUploadStudentImage)
    function DeleteUploadStudentImage(){

    }

    studentStore.on('upload_father_image_changed',UploadFatherImage)
    function UploadFatherImage(image_name){
      console.log(image_name)
      self.father_profile_picture = image_name
    }

    studentStore.on('delete_upload_father_image_changed',DeleteUploadFatherImage)
    function DeleteUploadFatherImage(){

    }

    studentStore.on('upload_mother_image_changed',UploadMotherImage)
    function UploadMotherImage(image_name){
      console.log(image_name)
      self.mother_profile_picture = image_name
    }

    studentStore.on('delete_upload_mother_image_changed',DeleteUploadMotherImage)
    function DeleteUploadMotherImage(){

    }

    studentStore.on('upload_guardian_image_changed',UploadGuardianImage)
    function UploadGuardianImage(image_name){
      console.log(image_name)
      self.guardian_profile_picture = image_name
    }

    studentStore.on('delete_upload_guardian_image_changed',DeleteUploadGuardianImage)
    function DeleteUploadGuardianImage(){

    }
    studentStore.on('upload_copy_father_image_changed',UploadGuardianCopyFatherImage)
    function UploadGuardianCopyFatherImage(image_name){
      console.log(image_name)
      self.guardian_profile_picture = image_name
    }

    studentStore.on('upload_copy_mother_image_changed',UploadGuardianCopyMotherImage)
    function UploadGuardianCopyMotherImage(image_name){
      console.log(image_name)
      self.guardian_profile_picture = image_name
    }
});
riot.tag2('subject', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title has-text-centered" style="color: #ff3860;">Subject Details</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <label class="label">Name</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="subject_name" type="text"> </div> </div> <div class="column is-narrow"> <label class="label">Short Name</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="subject_short_name" type="text" style="width:150px"> </div> </div> <div class="column is-narrow"> <label class="label">Department</label> </div> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="department_id" onkeyup="{addEnter}"> <option>Select</option> <option each="{departments}" riot-value="{department_id}">{department_name} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{add}">{title} </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readSubject}" style="margin-right:3px;margin-left:2px"> <span class="icon"><span class="fas fa-sync-alt"></span></span> </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>SL</th> <th>Name</th> <th>Short Name</th> <th>Department</th> <th></th> </tr> </thead> <tbody> <tr each="{ev, i in subjects}"> <td>{i+1}</td> <td>{ev.subject_name}</td> <td>{ev.subject_short_name}</td> <td>{ev.department_name}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{ev.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, ev)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{ev.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <span disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.loading=false
      self.readDepartment()
      self.readSubject()
      self.update()
    })
    self.on("unmount", function(){
      departmentStore.off('departments_changed', DepartmentChanged)
      subjectStore.off('add_subject_changed', AddSubjectChanged)
      subjectStore.off('read_subject_changed',ReadSubjectChanged)
      subjectStore.off('edit_subject_changed',EditSubjectChanged)
      subjectStore.off('delete_subject_changed',DeleteSubjectChanged)
    })

    self.readDepartment = () => {
       self.loading=true
       departmentStore.trigger('read_department')
    }

    self.readSubject = () => {
        self.loading=true
       subjectStore.trigger('read_subject')
    }

     self.add = () => {
      if(!self.refs.subject_name.value){
        toastr.info("Please enter Subject and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          self.loading=true
          subjectStore.trigger('add_subject', self.refs.subject_name.value,
           self.refs.subject_short_name.value,self.refs.department_id.value)

        }else if(self.title=='Update'){
          self.loading=true
          subjectStore.trigger('edit_subject', self.refs.subject_name.value,
            self.refs.subject_short_name.value, self.refs.department_id.value, self.edit_id)

        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.subjects.map(ev => {
          ev.confirmDelete = false
          ev.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.subjects.map(ev => {
        if(ev.subject_id != e.item.ev.subject_id){
          ev.confirmDelete = false
        }else{
          ev.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      subjectStore.trigger('delete_subject', e.item.ev.subject_id)
    }

    self.edit = (ev,e) => {
      console.log(ev)
      self.title='Update'
      self.refs.subject_name.value = ev.subject_name
      self.refs.subject_short_name.value = ev.subject_short_name
      self.refs.department_id.value = ev.department_id
      self.edit_id = ev.subject_id
    }

    subjectStore.on('add_subject_changed',AddSubjectChanged)
    function AddSubjectChanged(subjects){
      console.log(subjects)
      self.title='Create'
      self.refs.subject_name.value = ''
      self.refs.subject_short_name.value = ''
      self.refs.department_id.value = ''
      self.loading = false
      self.subjects = subjects
      self.readSubject()
      self.update()
    }

    subjectStore.on('edit_subject_changed',EditSubjectChanged)
    function EditSubjectChanged(subjects){
      console.log(subjects)
      self.title='Create'
      self.refs.subject_name.value = ''
      self.refs.subject_short_name.value = ''
      self.refs.department_id.value = ''
      self.loading = false
      self.subjects = subjects
      self.update()
    }

    subjectStore.on('delete_subject_changed',DeleteSubjectChanged)
    function DeleteSubjectChanged(subjects){
      console.log(subjects)
      self.title='Create'
      self.loading = false
      self.subjects = subjects
      self.update()
    }

    departmentStore.on('departments_changed',DepartmentChanged)
    function DepartmentChanged(departments){
      self.title='Create'
      self.departments = departments
      self.loading = false
      self.update()
    }

    subjectStore.on('read_subject_changed',ReadSubjectChanged)
    function ReadSubjectChanged(subjects){
      console.log(subjects)
      self.subjects = subjects
       self.loading=false
      self.update()
      console.log(self.subjects)
    }

});
riot.tag2('teacher-time-table', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Teacher Time Table</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"><label class="label">Teacher</label></div> <div class="column is-narrow"> <div class="control"> <div class="select "> <select ref="teacherSelect" onchange="{refreshTimeTable}"> <option value="">Select Teacher</option> <option each="{teachers}" riot-value="{emp_id}">{name}</option> </select> </div> </div> </div> <div class="column is-narrow"> <button class="button is-danger is-narrow has-text-weight-bold" onclick="{refreshTimeTable}">GO </button> </div> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable"> <thead> <tr> <th class="has-text-centered" style="vertical-align: middle;">Days/Periods</th> <th each="{p, i in periods}" class="has-text-centered"> <span style="color:#ff0000">{p.period_name}</span><br> <span style="font-size:12px">{p.period_time}</span> </th> </tr> </thead> <tbody> <tr each="{d, i in days}"> <th class="has-text-centered" style="vertical-align: middle;">{d.day_name}</th> <td each="{p, j in periods}" class="has-text-centered" onclick="{openTimeTableModal.bind(this, d, p)}"> <div each="{t, k in time_table}"> <p if="{d.day_id==t.day_id && p.period_id==t.period_id}" style="font-size:12px"> <span style="color:#ff0000">{t.subject_short_name}({t.period_type})</span><br>{t.room_name}<br>{t.standard} </p> </div> </td> </tr> </tbody> </table> </section> <div id="timeTableModalEdit" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Day:{day} &nbsp;&nbsp;&nbsp;&nbsp; Period:{period_name}{period_time}</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column is-narrow"> <div class="field"> <label class="label" for="role">Room</label> <div class="control"> <div class="select "> <select ref="editRoomSelect"> <option value="-1">No Room</option> <option each="{rooms}" riot-value="{room_id}">{room_name}</option> </select> </div> </div> </div> <div class="field"> <label class="label" for="role">Subject</label> <div class="control is-narrow"> <div class="select "> <select ref="editSubjectSelect"> <option each="{subjects}" riot-value="{subject_id}">{subject_name}</option> </select> </div> </div> </div> </div> <div class="column is-narrow"> <div class="field"> <label class="label" for="role">Standard</label> <div class="control"> <div class="select "> <select ref="editStandardSelect" onchange="{changeSection}"> <option each="{standards}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="field"> <label class="label" for="role">Period Type</label> <div class="control"> <div class="select "> <select ref="editPeriodTypeSelect"> <option value="T">Theory</option> <option value="P">Practical</option> </select> </div> </div> </div> </div> <div class="column is-narrow"> <div class="field"> <label class="label" for="role">Section</label> <div class="control"> <div class="select "> <select ref="editSectionSelect"> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-primary" onclick="{updateTimeTable}">Update</button> <button class="button is-danger" onclick="{deleteTimeTable}">Remove</button> <button class="button" id="item-modal-close" onclick="{closeTimeTableEditModal}">Cancel</button> </footer> </div> </div> <div id="timeTableModalAdd" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Day:{day} &nbsp;&nbsp;&nbsp;&nbsp; Period:{period_name}{period_time}</p> </header> <section class="modal-card-body"> <div class="columns"> <div class="column is-narrow"> <div class="field"> <label class="label" for="role">Room</label> <div class="control"> <div class="select "> <select ref="addRoomSelect"> <option value="-1">No Room</option> <option each="{rooms}" riot-value="{room_id}">{room_name}</option> </select> </div> </div> </div> <div class="field"> <label class="label" for="role">Subject</label> <div class="control is-narrow"> <div class="select "> <select ref="addSubjectSelect"> <option each="{subjects}" riot-value="{subject_id}">{subject_name}</option> </select> </div> </div> </div> </div> <div class="column is-narrow"> <div class="field"> <label class="label" for="role">Standard</label> <div class="control"> <div class="select "> <select ref="addStandardSelect" onchange="{changeSection}"> <option each="{standards}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="field"> <label class="label" for="role">Period Type</label> <div class="control"> <div class="select "> <select ref="addPeriodTypeSelect"> <option value="T">Theory</option> <option value="P">Practical</option> </select> </div> </div> </div> </div> <div class="column is-narrow"> <div class="field"> <label class="label" for="role">Section</label> <div class="control"> <div class="select "> <select ref="addSectionSelect"> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="field"> </div> </div> </div> <div class="field"> <label class="label" for="role">Days</label> <div each="{d, i in tempDays}" style="float: left;padding-right: 15px;"> <input type="checkbox" checked="{d.checked}" id="{\'addDay\' + d.day_id}" onclick="{selectDay.bind(this,d)}"> {d.day_name} </div> </div> </section> <footer class="modal-card-foot"> <button class="button is-primary" onclick="{addTimeTable}">Add</button> <button class="button" id="item-modal-close" onclick="{closeTimeTableAddModal}">Cancel</button> </footer> </div> </div>', '', '', function(opts) {
	var self = this
    self.day = ''
    self.period_name = ''
    self.period_time = ''
    self.tempSections = []

    self.on("mount", function(){
      self.loading = false;
      self.readInit();
    })
    self.on("unmount", function(){
      teacherTimeTableStore.off('read_init_changed',InitChanged)
      teacherTimeTableStore.off('read_periods_changed',PeriodsChanged)
      teacherTimeTableStore.off('read_edit_time_table_changed',readEditChanged)
      teacherTimeTableStore.off('update_time_table_changed',updateTimeTableChanged)
      teacherTimeTableStore.off('add_time_table_changed',addTimeTableChanged)
      teacherTimeTableStore.off('delete_time_table_changed',deleteTimeTableChanged)
    })

   self.readInit = () => {
    self.loading = true;
    teacherTimeTableStore.trigger('read_init')
   }

   self.refreshTimeTable = () => {
    console.log(self.refs.teacherSelect.value)
    if(self.refs.editStandardSelect.value==''){
        toastr.info("Please select standard and try again")
    }else{
        self.loading = true;
        teacherTimeTableStore.trigger('read_periods',self.refs.teacherSelect.value)
    }
   }

   self.changeSection = () => {
       if(self.refs.editStandardSelect.value==''){
        toastr.info("Please select standard and try again")
       }else{
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.editStandardSelect.value
        })
       }
       console.log(self.tempSections)
    }

   self.changeSectionEdit = () => {
       if(self.refs.editStandardSelect.value==''){
        toastr.info("Please select standard and try again")
       }else{
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.editStandardSelect.value
        })
       }
       console.log(self.tempSections)
      self.refs.editSectionSelect.value=self.edit_data.section_id
      self.update()
    }

   self.closeTimeTableEditModal = () => {
      $("#timeTableModalEdit").removeClass("is-active");
   }

   self.closeTimeTableAddModal = () => {
      $("#timeTableModalAdd").removeClass("is-active");
   }

   self.openTimeTableModal = (d,p,e) => {
      console.log(d)
      console.log(p)

      if(p.is_break=='Y'){
        console.log('short_break');
        return;
      }

      self.day = d.day_name
      self.day_id = d.day_id

      self.period_name = p.period_name
      self.period_id = p.period_id
      self.period_time = p.period_time

      let edit = 0;
      self.edit_data = {};
      self.time_table.map(t=>{
        if(d.day_id==t.day_id && p.period_id==t.period_id){
          edit = 1
          self.edit_data = t
        }
      })

      if(edit==1){
        console.log('edit')
        self.loading = true;
        self.rooms = []
        if(self.edit_data.room_id!==-1){
          let obj = {}
          obj['room_id'] = self.edit_data.room_id
          obj['room_name'] = self.edit_data.room_name
          self.rooms.push(obj)
        }
        teacherTimeTableStore.trigger('read_edit_time_table',p.period_id,d.day_id)
      }else if(edit == 0){

        console.log('add')
        console.log(self.tempDays)
        console.log(self.day_id)

        self.tempDays.map(td=>{

          if(self.day_id==td.day_id){
            td.checked=true
            $('#addDay' + td.day_id ).prop('checked', true);
          }else{
            td.checked=false
            $('#addDay' + td.day_id ).prop('checked', false);
          }

        })
        self.changeSection()
        $("#timeTableModalAdd").addClass("is-active");
        self.update()
      }
   }

   self.updateTimeTable = () => {
      var obj = {}
      obj['day_id'] = self.edit_data.day_id
      obj['period_id'] = self.edit_data.period_id
      obj['teacher_id'] = self.refs.teacherSelect.value

      obj['subject_id'] = self.refs.editSubjectSelect.value
      obj['period_type'] = self.refs.editPeriodTypeSelect.value
      obj['room_id'] = self.refs.editRoomSelect.value
      obj['section_id'] = self.refs.editSectionSelect.value

      self.loading = true;
      teacherTimeTableStore.trigger('update_time_table',obj)
   }

  self.deleteTimeTable = () => {
      var obj = {}
      obj['day_id'] = self.day_id
      obj['period_id'] = self.period_id
      obj['teacher_id'] = self.refs.teacherSelect.value

      self.loading = true;
      teacherTimeTableStore.trigger('delete_time_table',obj)
   }

   self.selectDay = (d,event) => {
    console.log(d)
    console.log(event)
      d.checked=!event.item.d.checked
      console.log(self.tempDays)
   }

   self.addTimeTable = () => {
      var obj = {}
      obj['day_id'] = self.day_id
      obj['period_id'] = self.period_id
      obj['teacher_id'] = self.refs.teacherSelect.value

      obj['subject_id'] = self.refs.addSubjectSelect.value
      obj['period_type'] = self.refs.addPeriodTypeSelect.value
      obj['room_id'] = self.refs.addRoomSelect.value
      obj['section_id'] = self.refs.addSectionSelect.value

      obj['days'] = self.tempDays.filter(td => {
        return td.checked == true
      })

      self.loading = true;
      teacherTimeTableStore.trigger('add_time_table',obj)
   }

   teacherTimeTableStore.on('read_init_changed',InitChanged)
    function InitChanged(teachers,days,periods,standards,sections,subjects){
      self.loading = false

      self.teachers = []
      self.teachers = teachers

      self.days = []
      self.days = days

      self.tempDays = []
      self.tempDays = days

      self.periods = []
      self.periods = periods

      self.standards = []
      self.standards = standards

      self.sections = []
      self.sections = sections

      self.subjects = []
      self.subjects = subjects

      self.update()
    }

    teacherTimeTableStore.on('read_edit_time_table_changed',readEditChanged)
    function readEditChanged(rooms){

      self.loading = false

      rooms.map(r=>{
        self.rooms.push(r)
      })

      self.update()
      $("#timeTableModalEdit").addClass("is-active");
      console.log('calling change section')
      self.refs.editStandardSelect.value=self.edit_data.standard_id
      self.update()
      self.changeSectionEdit()

      self.refs.editRoomSelect.value=self.edit_data.room_id
      self.refs.editSubjectSelect.value=self.edit_data.subject_id
      self.refs.editPeriodTypeSelect.value=self.edit_data.period_type
      self.refs.editSectionSelect.value=self.edit_data.section_id
      self.update()
    }

   teacherTimeTableStore.on('read_periods_changed',PeriodsChanged)
    function PeriodsChanged(time_table){
      self.loading = false

      self.time_table = []
      self.time_table = time_table

      self.update()
      console.log(self.periods)
      console.log(self.time_table)
      console.log(self.days)
    }

    teacherTimeTableStore.on('update_time_table_changed',updateTimeTableChanged)
      function updateTimeTableChanged(){
        self.loading = false
        toastr.success("Time Table Updated Successfully ")
        self.closeTimeTableEditModal()
        self.refreshTimeTable()

    }

    teacherTimeTableStore.on('add_time_table_changed',addTimeTableChanged)
      function addTimeTableChanged(){
        self.loading = false
        toastr.success("Time Table Added Successfully ")
        self.closeTimeTableAddModal()
        self.refreshTimeTable()
    }

    teacherTimeTableStore.on('delete_time_table_changed',deleteTimeTableChanged)
      function deleteTimeTableChanged(){
        self.loading = false
        toastr.success("Time Table Deleted Successfully ")
        self.closeTimeTableEditModal()
        self.refreshTimeTable()
    }

});
riot.tag2('time-table-admin', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_time_table_admin == \'time-table-class-report\'}" href="#/time-table-admin/time-table-class-report"> <span>Class</span> </a> </p> <p class="control"> <a class="button {is-active: selected_time_table_admin == \'time-table-room-report\'}" href="#/time-table-admin/time-table-room-report"> <span>Room</span> </a> </p> <p class="control"> <a class="button {is-active: selected_time_table_admin == \'time-table-teacher-report\'}" href="#/time-table-admin/time-table-teacher-report"> <span>Teacher</span> </a> </p> <p class="control"> <a class="button {is-active: selected_time_table_admin == \'time-table-assign-teacher\'}" href="#/time-table-admin/time-table-assign-teacher"> <span>Assign Teacher</span> </a> </p> <p class="control"> <a class="button {is-active: selected_time_table_admin == \'time-table-settings\'}" href="#/time-table-admin/time-table-settings"> <span>Settings</span> </a> </p> </div> <div id="time-table-admin-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_time_table_admin')
    console.log(opts.selected_time_table_admin)
    if(!opts.selected_time_table_admin){
      self.selected_time_table_admin = 'time-table-class-report'
    }else{
      self.selected_time_table_admin = opts.selected_time_table_admin
    }
});
riot.tag2('time-table-assign-teacher', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Time Table Assign Teacher</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"><label class="label">Select Teacher to make TT</label></div> <div class="column is-narrow"> <div class="control"> <div class="select "> <select ref="teacherOneSelect"> <option each="{teachers}" riot-value="{emp_id}">{name}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Select Teacher whose TT to be assigned</label></div> <div class="column is-narrow"> <div class="control"> <div class="select "> <select ref="teacherTwoSelect"> <option each="{teachersTwo}" riot-value="{emp_id}">{name}</option> </select> </div> </div> </div> <div class="column"> <button class="button is-rounded" onclick="{assignTimeTable}"> Go </button> </div> </div> </div> </section>', '', '', function(opts) {
	var self = this

    self.on("mount", function(){
      self.loading = false;
      self.readInit();
    })
    self.on("unmount", function(){
      timeTableAdminStore.off('read_init_assign_teacher_changed',InitChanged)
      timeTableAdminStore.off('assign_teacher_time_table_changed',AssignTeacherChanged)
    })

   self.readInit = () => {
    self.loading = true;
    timeTableAdminStore.trigger('read_init_assign_teacher')
   }

   self.assignTimeTable = () => {
    self.loading = true;
    timeTableAdminStore.trigger('assign_teacher_time_table',self.refs.teacherOneSelect.value,self.refs.teacherTwoSelect.value)
   }

   timeTableAdminStore.on('read_init_assign_teacher_changed',InitChanged)
    function InitChanged(teachers){
      self.loading = false

      self.teachers = []
      self.teachers = teachers

      self.teachersTwo = []
      self.teachersTwo = teachers

      self.update()
    }

   timeTableAdminStore.on('assign_teacher_time_table_changed',AssignTeacherChanged)
    function AssignTeacherChanged(){
      self.loading = false

      toastr.success("Teacher Assigned Successfully ")

      self.update()
    }

});
riot.tag2('time-table-class-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title is-size-5 has-text-centered" style="color: #ff3860;">Time Table Class</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"><label class="label">Standard</label></div> <div class="column is-narrow"> <div class="control"> <div class="select "> <select ref="standardSelect" id="standardSelect" onchange="{changeSection}"> <option value="">Select Standard</option> <option each="{standards}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column is-narrow"> <div class="control"> <div class="select "> <select ref="sectionSelect" id="sectionSelect"> <option value="">Select Section</option> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger" onclick="{refreshTimeTable}"> Go </button> </div> <div class="column"> <button class="button is-link ml5" style="float:right" onclick="{refreshTimeTable}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-primary" style="float:right" onclick="window.print()"> <span class="icon"><i class="fas fa-print"></i></span> </button> </div> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable"> <center><strong>Class:{StandardName}-{SectionName} Session:{session_name} <thead> <tr> <th class="has-text-centered" style="vertical-align: middle;">Days/Periods</th> <th each="{p, i in periods}" class="has-text-centered"> <span style="color:#ff0000">{p.period_name}</span><br> <span style="font-size:12px">{p.period_time}</span> </th> </tr> </thead> <tbody> <tr each="{d, i in days}"> <th class="has-text-centered" style="vertical-align: middle;">{d.day_name}</th> <td each="{p, j in periods}" class="has-text-centered"> <div each="{t, k in time_table}"> <p if="{d.day_id==t.day_id && p.period_id==t.period_id}" style="font-size:12px"> <span style="color:#ff0000">{t.subject_short_name}({t.period_type})</span><br>{t.room_name}<br>{t.short_name} </p> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.day = ''
    self.period_name = ''
    self.period_time = ''
    self.tempSections = []

    self.on("mount", function(){
      self.loading = false;
      self.readInit();
    })
    self.on("unmount", function(){
      timeTableAdminStore.off('read_init_class_report_changed',InitChanged)
      timeTableAdminStore.off('read_periods_class_report_changed',PeriodsChanged)
    })

   self.readInit = () => {
    self.loading = true;
    timeTableAdminStore.trigger('read_init_class_report')
   }

   self.refreshTimeTable = () => {
    console.log(self.refs.sectionSelect.value)
    if(self.refs.sectionSelect.value==''){
        toastr.info("Please select section and try again")
    }else{
        self.loading = true;
        timeTableAdminStore.trigger('read_periods_class_report',self.refs.sectionSelect.value)
    }
   }

   self.changeSection = () => {
       if(self.refs.standardSelect.value==''){
        toastr.info("Please select standard and try again")
       }else{
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.standardSelect.value
        })
       }
       console.log(self.tempSections)
    }

   timeTableAdminStore.on('read_init_class_report_changed',InitChanged)
    function InitChanged(teachers,days,periods,rooms,standards,sections){
      self.loading = false

      self.teachers = []
      self.teachers = teachers

      self.days = []
      self.days = days

      self.tempDays = []
      self.tempDays = days

      self.periods = []
      self.periods = periods

      self.rooms = []
      self.rooms = rooms

      self.standards = []
      self.standards = standards

      self.sections = []
      self.sections = sections

      self.update()
    }

   timeTableAdminStore.on('read_periods_class_report_changed',PeriodsChanged)
    function PeriodsChanged(time_table,session_name){
      self.loading = false

      self.time_table = []
      self.time_table = time_table
      self.session_name = session_name
      self.StandardName = $("#standardSelect option:selected").text();
      self.SectionName = $("#sectionSelect option:selected").text();

      self.update()
      console.log(self.periods)
      console.log(self.time_table)
      console.log(self.days)
    }

});
riot.tag2('time-table-day-settings', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <h2 class="title is-size-5 has-text-centered" style="color: #ff3860;">Day Settings</h2> <div class="level box no-print"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"> <label class="label">Day</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addDayInput" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold " onclick="{add}"> {title} </button> </div> </div> </div> <div class="level-right"> <button class="button is-link has-text-weight-bold ml5 " onclick="{readDay}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-success has-text-weight-bold ml5" onclick="{downloadCSV}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold ml5" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>#</th> <th>Day</th> <th class="no-print"></th> </tr> </thead> <tbody> <tr each="{d, i in days}"> <td>{i + 1}</td> <td>{d.day_name}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{d.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, d)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{d.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.loading=false
      self.update()
      self.readDay()
    })

     self.on("unmount", function(){
      timeTableDaySettingsStore.off('day_changed', DayChanged)
    })

    self.readDay = () => {
      self.loading=true
       timeTableDaySettingsStore.trigger('read_day')
    }

     self.add = () => {
      if(!self.refs.addDayInput.value){
        toastr.info("Please enter Day and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          self.loading=true
          timeTableDaySettingsStore.trigger('add_day', self.refs.addDayInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          self.loading=true
          timeTableDaySettingsStore.trigger('edit_day', self.refs.addDayInput.value, self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.levels.map(d => {
          d.confirmDelete = false
          d.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.days.map(d => {
        if(d.day_id != e.item.d.day_id){
          d.confirmDelete = false
        }else{
          d.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      timeTableDaySettingsStore.trigger('delete_day', e.item.d.day_id)
    }

    self.edit = (d,e) => {
      console.log(d)
      self.title='Update'
      self.refs.addDayInput.value = d.day_name
      self.edit_id = d.day_id
    }

    timeTableDaySettingsStore.on('day_changed',DayChanged)
    function DayChanged(days){
      console.log('day_changed1')
      console.log(days)
      self.title='Create'
      self.refs.addDayInput.value = ''
      self.loading = false
      self.days = days
      self.update()
    }

});
riot.tag2('time-table-detail-report', '<loading-bar if="{loading}"></loading-bar> <header></header> <section class="is-fluid"> <div class="level no-print"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Detail List</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{readTimeTableDetail}" style="margin-left:2px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-warning is-rounded" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> <p class="has-text-centered printOnly" style="color: #ff3860;font-weight:bold">Detail List</p> <table class="table is-fullwidth is-striped is-hoverable"> <tbody> <thead> <tr> <th>Subject Teacher</th> <th>Signature</th> <th>Absent Teacher</th> <th>Period</th> <th>Class</th> </tr> </thead> <tbody> <tr each="{d in details}"> <td>{d.teacher}</td> <td></td> <td>{d.absent_teacher}</td> <td>{d.period_name}</td> <td>{d.standard}</td> </tr> </tbody> </tbody> </table> </section>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.loading=false
      self.update()
      self.readTimeTableDetail()
    })

     self.on("unmount", function(){
      timeTableReportStore.off('detail_changed', DetailChanged)
    })

    self.readTimeTableDetail = () => {
      self.loading=true
       timeTableReportStore.trigger('read_detail')
    }

    timeTableReportStore.on('detail_changed',DetailChanged)
    function DetailChanged(details){
      console.log(details)
      self.loading = false
      self.details = details
      self.update()
    }

});
riot.tag2('time-table-period-settings', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <h2 class="title is-size-5 has-text-centered" style="color: #ff3860;">Period Settings</h2> <div class="level box no-print"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"> <label class="label">Period</label> <div class="control"> <input class=" input" ref="addPeriodInput" type="text"> </div> </div> <div class="column is-narrow"> <label class="label">Start Time</label> <div class="control"> <input class=" input" ref="addStartTimeInput" type="text" placeholder="00:00"> </div> </div> <div class="column is-narrow"> <label class="label">End Time</label> <div class="control"> <input class=" input" ref="addEndTimeInput" type="text" placeholder="00:00"> </div> </div> <div class="column is-narrow"> <label class="label">Interval</label> <div class="control"> <div class="select "> <select ref="IntervalSelect"> <option value="N">N</option> <option value="Y">Y</option> </select> </div> </div> </div> <div class="column is-narrow"> <label class="label">Remarks</label> <div class="control"> <input class=" input" ref="addRemarksInput" type="text"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" style="margin-top: 31px;" onclick="{add}">{title} </button> </div> </div> </div> <div class="level-right" style="margin-top: 26px;"> <button class="button is-link has-text-weight-bold ml5 " onclick="{readPeriod}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-success has-text-weight-bold ml5" onclick="{downloadCSV}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold ml5" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>#</th> <th>Period</th> <th>Start Time</th> <th>End Time</th> <th>Remarks</th> <th class="no-print"></th> </tr> </thead> <tbody> <tr each="{d, i in periods}"> <td>{i + 1}</td> <td>{d.period_name}</td> <td>{d.start_time}</td> <td>{d.end_time}</td> <td>{d.remarks}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{d.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, d)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{d.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.loading=false
      self.update()
      self.readPeriod()
    })

     self.on("unmount", function(){
      timeTablePeriodSettingsStore.off('period_changed', PeriodChanged)
    })

    self.readPeriod = () => {
      self.loading=true
       timeTablePeriodSettingsStore.trigger('read_period')
    }

     self.add = () => {
      if(!self.refs.addPeriodInput.value){
        toastr.info("Please enter Period and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          self.loading=true
          timeTablePeriodSettingsStore.trigger('add_period', self.refs.addPeriodInput.value,self.refs.addStartTimeInput.value,self.refs.addEndTimeInput.value,self.refs.IntervalSelect.value,self.refs.addRemarksInput.value)
        }else if(self.title=='Update'){
          console.log('update')
          self.loading=true
          timeTablePeriodSettingsStore.trigger('edit_period', self.refs.addPeriodInput.value,self.refs.addStartTimeInput.value,self.refs.addEndTimeInput.value,self.refs.IntervalSelect.value,self.refs.addRemarksInput.value, self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.levels.map(d => {
          d.confirmDelete = false
          d.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.periods.map(d => {
        if(d.period_id != e.item.d.period_id){
          d.confirmDelete = false
        }else{
          d.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      timeTablePeriodSettingsStore.trigger('delete_period', e.item.d.period_id)
    }

    self.edit = (d,e) => {
      console.log(d)
      self.title='Update'
      self.refs.addPeriodInput.value = d.period_name
      self.refs.addStartTimeInput.value = d.start_time
      self.refs.addEndTimeInput.value = d.end_time
      self.refs.IntervalSelect.value = d.is_break
      self.refs.addRemarksInput.value = d.remarks
      self.edit_id = d.period_id
    }

    timeTablePeriodSettingsStore.on('period_changed',PeriodChanged)
    function PeriodChanged(periods){
      console.log('period_changed1')
      console.log(periods)
      self.title='Create'
      self.refs.addPeriodInput.value = ''
      self.refs.addStartTimeInput.value = ''
      self.refs.addEndTimeInput.value = ''
      self.refs.IntervalSelect.value = 'N'
      self.refs.addRemarksInput.value = ''
      self.loading = false
      self.periods = periods
      self.update()
    }

});
riot.tag2('time-table-report-nav', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_time_table_report == \'time-table-summary-report\'}" href="#/time-table-report-nav/time-table-summary-report"> <span>Summary List</span> </a> </p> <p class="control"> <a class="button {is-active: selected_time_table_report == \'time-table-detail-report\'}" href="#/time-table-report-nav/time-table-detail-report"> <span>Detail List</span> </a> </p> </div> <div id="time-table-report-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_time_table_report')
    console.log(opts.selected_time_table_report)
    if(!opts.selected_time_table_report){
      self.selected_time_table_report = 'time-table-summary-report'
    }else{
      self.selected_time_table_report = opts.selected_time_table_report
    }
});
riot.tag2('time-table-room-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title is-size-5 has-text-centered" style="color: #ff3860;">Time Table Room</h2> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"><label class="label">Room</label></div> <div class="column is-narrow"> <div class="control"> <div class="select "> <select ref="roomSelect" id="roomSelect" onchange="{refreshTimeTable}"> <option value="">Select Room</option> <option each="{rooms}" riot-value="{room_id}">{room_name}</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger" onclick="{refreshTimeTable}"> Go </button> </div> <div class="column"> <button class="button is-link ml5" style="float:right" onclick="{refreshTimeTable}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-primary" style="float:right" onclick="window.print()"> <span class="icon"><i class="fas fa-print"></i></span> </button> </div> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable"> <center><strong>Time Table Of Room : {RoomdName} / Session:{session_name} <thead> <tr> <th class="has-text-centered" style="vertical-align: middle;">Days/Periods</th> <th each="{p, i in periods}" class="has-text-centered"> <span style="color:#ff0000">{p.period_name}</span><br> <span style="font-size:12px">{p.period_time}</span> </th> </tr> </thead> <tbody> <tr each="{d, i in days}"> <th class="has-text-centered" style="vertical-align: middle;">{d.day_name}</th> <td each="{p, j in periods}" class="has-text-centered"> <div each="{t, k in time_table}"> <p if="{d.day_id==t.day_id && p.period_id==t.period_id}" style="font-size:12px"> <span style="color:#ff0000">{t.subject_short_name}({t.period_type})</span><br>{t.standard}<br>{t.short_name} </p> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.day = ''
    self.period_name = ''
    self.period_time = ''
    self.tempSections = []

    self.on("mount", function(){
      self.loading = false;
      self.readInit();
    })
    self.on("unmount", function(){
      timeTableAdminStore.off('read_init_room_report_changed',InitChanged)
      timeTableAdminStore.off('read_periods_room_report_changed',PeriodsChanged)
    })

   self.readInit = () => {
    self.loading = true;
    timeTableAdminStore.trigger('read_init_room_report')
   }

   self.refreshTimeTable = () => {
    console.log(self.refs.roomSelect.value)
    if(self.refs.roomSelect.value==''){
        toastr.info("Please select section and try again")
    }else{
        self.loading = true;
        timeTableAdminStore.trigger('read_periods_room_report',self.refs.roomSelect.value)
    }
   }

   timeTableAdminStore.on('read_init_room_report_changed',InitChanged)
    function InitChanged(teachers,days,periods,rooms,standards,sections){
      self.loading = false

      self.teachers = []
      self.teachers = teachers

      self.days = []
      self.days = days

      self.tempDays = []
      self.tempDays = days

      self.periods = []
      self.periods = periods

      self.rooms = []
      self.rooms = rooms

      self.standards = []
      self.standards = standards

      self.sections = []
      self.sections = sections

      self.update()
    }

   timeTableAdminStore.on('read_periods_room_report_changed',PeriodsChanged)
    function PeriodsChanged(time_table,session_name){
      self.loading = false

      self.time_table = []
      self.time_table = time_table
      self.session_name = session_name
      self.RoomdName = $("#roomSelect option:selected").text();
      self.update()
      console.log(self.periods)
      console.log(self.time_table)
      console.log(self.days)
    }

});
riot.tag2('time-table-room-settings', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <h2 class="title is-size-5 has-text-centered" style="color: #ff3860;">Room List</h2> <div class="level box no-print"> <div class="level-left"> <div class="columns"> <div class="column is-narrow"> <label class="label">Room</label> </div> <div class="column is-narrow"> <div class="control"> <input class=" input" ref="addRoomInput" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column is-narrow"> <label class="label">Details</label> </div> <div class="column is-half"> <div class="control"> <input class=" input" ref="addDetailsInput" type="text" onkeyup="{addEnter}"> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold " onclick="{add}"> {title} </button> </div> </div> </div> <div class="level-right"> <div class="control"> <input class="input" ref="searchRoomSetting" onkeyup="{filterRoomSetting}" type="text" placeholder="Search By Event"> </div> <button class="button is-link has-text-weight-bold ml5 " onclick="{readRoom}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-success has-text-weight-bold ml5" onclick="{downloadCSV}"> <span class="icon"> <i class="far fa-file-excel"></i> </span> </button> <button class="button is-primary has-text-weight-bold ml5" onclick="window.print()"> <span class="icon"> <i class="fas fa-print"></i> </span> </button> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th>#</th> <th>Room</th> <th>Details</th> <th class="no-print"></th> </tr> </thead> <tbody> <tr each="{d, i in filteredRoomSetting}"> <td>{i + 1}</td> <td>{d.room_name}</td> <td>{d.room_details}</td> <td class="has-text-right no-print"> <div class="inline-flex rounded border border-grey overflow-hidden" hide="{d.confirmDelete}"> <span><a class="button is-small is-rounded" onclick="{edit.bind(this, d)}">Edit</a></span> <span if="{role==\'ADMIN\'}"> <a class="button is-small has-text-danger is-rounded" rel="nofollow" onclick="{confirmDelete}">Delete</a></span> </div> <div class="table-buttons" if="{d.confirmDelete}"> <span disabled="{loading}" class="button is-small is-rounded" onclick="{delete}"><i class="fa fa-check"></i></span> <soan disabled="{loading}" class="button is-small has-text-danger is-rounded" onclick="{cancelOperation}"><i class="fa fa-times"></i></span> </div> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.loading=false
      self.update()
      self.readRoom()
    })

     self.on("unmount", function(){
      timeTableRoomSettingsStore.off('room_changed', RoomChanged)
    })

    self.readRoom = () => {
      self.loading=true
       timeTableRoomSettingsStore.trigger('read_room')
    }
    self.filterRoomSetting = ()=>{
      self.filteredRoomSetting = self.rooms.filter(c => {
        return JSON.stringify(c).toLowerCase().indexOf(self.refs.searchRoomSetting.value.toLowerCase())>=0
      })
    }

     self.add = () => {
      if(!self.refs.addRoomInput.value){
        toastr.info("Please enter Room and try again")
      }else{
        self.loading = true
        if(self.title=='Create'){
          console.log('create')
          self.loading=true
          timeTableRoomSettingsStore.trigger('add_room', self.refs.addRoomInput.value,self.refs.addDetailsInput.value,)
        }else if(self.title=='Update'){
          console.log('update')
          self.loading=true
          timeTableRoomSettingsStore.trigger('edit_room', self.refs.addRoomInput.value,self.refs.addDetailsInput.value,
            self.edit_id)
        }
      }
    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

     self.editEnter = (e) => {
      if(e.which == 13){
        self.edit(e)
      }
    }

   self.cancelOperation = (e) => {
      self.levels.map(d => {
          d.confirmDelete = false
          d.confirmEdit = false
      })
    }

    self.confirmDelete = (e) => {
      self.rooms.map(d => {
        if(d.room_name != e.item.d.room_name){
          d.confirmDelete = false
        }else{
          d.confirmDelete = true
        }
      })
    }

    self.delete = (e) => {
      self.loading = true
      timeTableRoomSettingsStore.trigger('delete_room', e.item.d.room_name)
    }

    self.edit = (d,e) => {
      console.log(d)
      self.title='Update'
      self.refs.addRoomInput.value = d.room_name
      self.refs.addDetailsInput.value = d.room_details
      self.edit_id = d.room_name
    }

    timeTableRoomSettingsStore.on('room_changed',RoomChanged)
    function RoomChanged(rooms){
      console.log('room_changed1')
      console.log(rooms)
      self.title='Create'
      self.refs.addRoomInput.value = ''
      self.refs.addDetailsInput.value = ''
      self.loading = false
      self.rooms = rooms
      self.filteredRoomSetting = rooms
      self.update()
    }

});
riot.tag2('time-table-settings', '<div class="field has-addons no-print"> <p class="control"> <a class="button {is-active: selected_time_table_settings == \'time-table-room-settings\'}" href="#/time-table-admin/time-table-settings/time-table-room-settings"> <span>Room Setting</span> </a> </p> <p class="control"> <a class="button {is-active: selected_time_table_settings == \'time-table-period-settings\'}" href="#/time-table-admin/time-table-settings/time-table-period-settings"> <span>Period Setting</span> </a> </p> <p class="control"> <a class="button {is-active: selected_time_table_settings == \'time-table-day-settings\'}" href="#/time-table-admin/time-table-settings/time-table-day-settings"> <span>Day Setting</span> </a> </p> </div> <div id="time-table-settings-view"></div>', '', '', function(opts) {
    var self = this
    console.log('opts.selected_time_table_settings')
    console.log(opts.selected_time_table_settings)
    if(!opts.selected_time_table_settings){
      self.selected_time_table_settings = 'time-table-room-settings'
    }else{
      self.selected_time_table_settings = opts.selected_time_table_settings
    }
});
riot.tag2('time-table-substitutation', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Time Table Substitutation</h2> </div> <div class="level-right"> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"><label class="label">Teacher</label></div> <div class="column is-narrow"> <div class="control"> <div class="select "> <select ref="teacherSelect" onchange="{refreshTimeTable}"> <option value="">Select Teacher</option> <option each="{teachers}" riot-value="{emp_id}">{name}</option> </select> </div> </div> </div> <div class="column is-narrow"> <button class="button is-danger is-narrow has-text-weight-bold" onclick="{resetTimeTable}">Reset </button> </div> <div class="column"> <button class="button is-warning is-rounded" style="float:right" onclick="{refreshTimeTable}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable"> <thead> <tr> <th class="has-text-centered" style="vertical-align: middle;">Days/Periods</th> <th each="{p, i in periods}" class="has-text-centered"> <span style="color:#ff0000">{p.period_name}</span><br> <span style="font-size:12px">{p.period_time}</span> </th> </tr> </thead> <tbody> <tr each="{d, i in days}"> <th class="has-text-centered" style="vertical-align: middle;">{d.day_name}</th> <td each="{p, j in periods}" class="has-text-centered" onclick="{openTimeTableModal.bind(this, d, p)}"> <div each="{t, k in time_table}"> <p if="{d.day_id==t.day_id && p.period_id==t.period_id}" style="font-size:12px"> <span style="color:#ff0000">{t.subject_short_name}({t.period_type})</span><br>{t.room_name}<br>{t.standard} </p> </div> </td> </tr> </tbody> </table> </section> <div id="timeTableModalEdit" class="modal "> <div class="modal-background"></div> <div class="modal-card"> <header class="modal-card-head"> <p class="modal-card-title">Day:{day} &nbsp;&nbsp;&nbsp;&nbsp; Period:{period_name}{period_time}</p> </header> <section class="modal-card-body"> <table class="table is-fullwidth is-bordered is-hoverable"> <thead> <tr> <th class="has-text-centered">Teacher</th> <th class="has-text-centered">Periods of Day</th> <th></th> </tr> </thead> <tbody> <tr each="{t, i in teacher_peiods}"> <td>{t.teacher}</td> <td class="has-text-centered">{t.period_count_day}</td> <td> <span><a class="button is-small is-rounded is-primary" onclick="{updateTimeTable.bind(this, t)}">Assign</a></span> </td> </tr> </tbody> </table> </section> <footer class="modal-card-foot"> <button class="button" id="item-modal-close" onclick="{closeTimeTableAddModal}">Cancel</button> </footer> </div> </div>', '', '', function(opts) {
	var self = this
    self.day = ''
    self.period_name = ''
    self.period_time = ''
    self.tempSections = []

    self.on("mount", function(){
      self.loading = false;
      self.readInit();
    })
    self.on("unmount", function(){
      timeTableSubstitutaionStore.off('read_init_changed',InitChanged)
      timeTableSubstitutaionStore.off('read_periods_changed',PeriodsChanged)
      timeTableSubstitutaionStore.off('reset_time_table_changed',resetTimeTableChanged)
      timeTableSubstitutaionStore.off('read_edit_time_table_changed',readEditChanged)
      timeTableSubstitutaionStore.off('update_time_table_changed',updateTimeTableChanged)
    })

   self.readInit = () => {
    self.loading = true;
    timeTableSubstitutaionStore.trigger('read_init')
   }

   self.refreshTimeTable = () => {
    console.log(self.refs.teacherSelect.value)
    if(self.refs.teacherSelect.value==''){
        toastr.info("Please select standard and try again")
    }else{
        self.loading = true;
        timeTableSubstitutaionStore.trigger('read_periods',self.refs.teacherSelect.value)
    }
   }

   self.resetTimeTable = () => {
       self.loading = true;
       timeTableSubstitutaionStore.trigger('reset_time_table')
    }

   self.closeTimeTableAddModal = () => {
      $("#timeTableModalEdit").removeClass("is-active");
   }

   self.openTimeTableModal = (d,p,e) => {
      console.log(d)
      console.log(p)

      if(p.is_break=='Y'){
        console.log('short_break');
        return;
      }

      self.day = d.day_name
      self.day_id = d.day_id

      self.period_name = p.period_name
      self.period_id = p.period_id
      self.period_time = p.period_time

      let edit = 0;
      self.edit_data = {};
      self.time_table.map(t=>{
        if(d.day_id==t.day_id && p.period_id==t.period_id){
          edit = 1
          self.edit_data = t
        }
      })

      if(edit==1){

        console.log('edit')
        var read_obj = {}
        read_obj['day_id']=self.day_id
        read_obj['period_id']=self.period_id
        read_obj['emp_id']=self.refs.teacherSelect.value
        timeTableSubstitutaionStore.trigger('read_edit_time_table',read_obj)

      }else if(edit == 0){

        console.log('add')
        toastr.error("This teacher is not assigned for this class")

      }

   }

   self.updateTimeTable = (t,e) => {
      var obj = {}
      obj['day_id'] = self.edit_data.day_id
      obj['period_id'] = self.edit_data.period_id
      obj['teacher_id'] = t.emp_id
      obj['prev_teacher_id'] = self.refs.teacherSelect.value

      self.loading = true;
      timeTableSubstitutaionStore.trigger('update_time_table',obj)
   }

   timeTableSubstitutaionStore.on('read_init_changed',InitChanged)
    function InitChanged(teachers,days,periods,rooms){
      self.loading = false

      self.teachers = []
      self.teachers = teachers

      self.days = []
      self.days = days

      self.tempDays = []
      self.tempDays = days

      self.periods = []
      self.periods = periods

      self.rooms = []
      self.rooms = rooms

      self.update()
    }

   timeTableSubstitutaionStore.on('reset_time_table_changed',resetTimeTableChanged)
      function resetTimeTableChanged(){
        self.loading = false
        toastr.success("Time Table Reset Successfully ")
        self.refreshTimeTable()
    }

   timeTableSubstitutaionStore.on('read_periods_changed',PeriodsChanged)
    function PeriodsChanged(time_table){
      self.loading = false

      self.time_table = []
      self.time_table = time_table

      self.update()
      console.log(self.periods)
      console.log(self.time_table)
      console.log(self.days)
    }

    timeTableSubstitutaionStore.on('read_edit_time_table_changed',readEditChanged)
    function readEditChanged(teacher_peiods){

      self.loading = false
      self.teacher_peiods = []
      self.teacher_peiods = teacher_peiods

      $("#timeTableModalEdit").addClass("is-active");
      self.update()
    }

    timeTableSubstitutaionStore.on('update_time_table_changed',updateTimeTableChanged)
      function updateTimeTableChanged(){
        self.loading = false
        toastr.success("Time Table Updated Successfully ")
        self.closeTimeTableAddModal()
        self.refreshTimeTable()

    }

});
riot.tag2('time-table-summary-report', '<loading-bar if="{loading}"></loading-bar> <section class="is-fluid"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Summary List</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded" onclick="{readTimeTableSummary}" style="margin-left:2px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <div each="{s in summaries}"> <p>{s.teacher}</p> <table class="table is-fullwidth is-striped is-hoverable"> <tbody> <thead> <tr> <th>Period</th> <th>Class</th> <th>Subject</th> </tr> </thead> <tbody> <tr each="{d in s.details}"> <td>{d.period_name}</td> <td>{d.standard}</td> <td>{d.subject_name}</td> </tr> </tbody> </tbody> </table> </div> </section>', '', '', function(opts) {
  var self = this
    self.on("mount", function(){
      self.title='Create'
      self.role = getCookie('role')
      self.loading=false
      self.update()
      self.readTimeTableSummary()
    })

     self.on("unmount", function(){
      timeTableReportStore.off('summary_changed', SummaryChanged)
    })

    self.readTimeTableSummary = () => {
      self.loading=true
       timeTableReportStore.trigger('read_summary')
    }

    timeTableReportStore.on('summary_changed',SummaryChanged)
    function SummaryChanged(summaries){
      console.log(summaries)
      self.loading = false
      self.summaries = summaries
      self.update()
    }

});
riot.tag2('time-table-teacher-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h2 class="title is-size-5 has-text-centered" style="color: #ff3860;">Time Table Teacher</h2> <div class="box no-print"> <div class="columns"> <div class="column"> <button class="button is-danger" onclick="{refreshTimeTable}"> Go </button> </div> <div class="column"> <button class="button is-link ml5" style="float:right" onclick="{refreshTimeTable}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> <button class="button is-primary" style="float:right" onclick="window.print()"> <span class="icon"><i class="fas fa-print"></i></span> </button> </div> </div> </div> <table class="table is-fullwidth is-bordered is-hoverable"> <center><strong>Session:{session_name} <thead> <tr> <th class="has-text-centered" style="vertical-align: middle;">Teacher/Day</th> <th each="{d, i in days}" class="has-text-centered"> <span style="color:#ff0000">{d.day_name}</span> </th> </tr> </thead> <tbody> <tr each="{t in time_table}"> <th class="has-text-centered" style="vertical-align: middle;">{t.teacher}</th> <td each="{d in days}" class="has-text-centered"> <p if="{d.day_name==\'Mon\'}"> <raw content="{t.day_one}"></raw> </p> <p if="{d.day_name==\'Tues\'}"> <raw content="{t.day_two}"></raw> </p> <p if="{d.day_name==\'Wed\'}"> <raw content="{t.day_three}"></raw> </p> <p if="{d.day_name==\'Thurs\'}"> <raw content="{t.day_four}"></raw> </p> <p if="{d.day_name==\'Fri\'}"> <raw content="{t.day_five}"></raw> </p> </td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.day = ''
    self.period_name = ''
    self.period_time = ''
    self.tempSections = []

    self.on("mount", function(){
      self.loading = false;
      self.readInit();
    })
    self.on("unmount", function(){
      timeTableAdminStore.off('read_init_teacher_report_changed',InitChanged)
      timeTableAdminStore.off('read_periods_teacher_report_changed',PeriodsChanged)
    })

   self.readInit = () => {
    self.loading = true;
    timeTableAdminStore.trigger('read_init_teacher_report')
   }

   self.refreshTimeTable = () => {
      self.loading = true;
      timeTableAdminStore.trigger('read_periods_teacher_report')
   }

   timeTableAdminStore.on('read_init_teacher_report_changed',InitChanged)
    function InitChanged(teachers,days,periods,rooms,standards,sections){
      self.loading = false

      self.teachers = []
      self.teachers = teachers

      self.days = []
      self.days = days

      self.tempDays = []
      self.tempDays = days

      self.periods = []
      self.periods = periods

      self.rooms = []
      self.rooms = rooms

      self.standards = []
      self.standards = standards

      self.sections = []
      self.sections = sections

      self.update()
    }

   timeTableAdminStore.on('read_periods_teacher_report_changed',PeriodsChanged)
    function PeriodsChanged(time_table,session_name){
      self.loading = false

      self.time_table = []
      self.time_table = time_table
      self.session_name = session_name
      self.update()
      console.log(self.periods)
      console.log(self.time_table)
      console.log(self.days)
    }

});
riot.tag2('top-five', '<loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <div class="level"> <div class="level-left"> <h2 class="title" style="color: #ff3860;">Top Five</h2> </div> <div class="level-right"> <button class="button is-warning is-rounded ml5" onclick="{readReport}"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> <div class="box"> <div class="columns"> <div class="column is-narrow"><label class="label">Standard</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="standardSelect" onchange="{changeSection}"> <option value="">Select Standard</option> <option each="{classes}" riot-value="{standard_id}">{standard}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Section</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="sectionSelect" onchange="{readExamScheme}"> <option value="">Select Section</option> <option each="{tempSections}" riot-value="{section_id}">{section}</option> </select> </div> </div> </div> <div class="column is-narrow"><label class="label">Exam Scheme</label></div> <div class="column"> <div class="control"> <div class="select is-fullwidth"> <select ref="examTypeSelect"> <option value="">Select Exam Scheme</option> <option each="{examTypes}" riot-value="{exam_type_id}">{exam_type}</option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readReport}">GO </button> </div> </div> </div> <table class="table is-fullwidth is-striped is-hoverable"> <thead> <tr> <th style="width:200px;">Enroll No</th> <th>Name</th> <th>Max Marks</th> <th>Min Marks</th> <th>Obtained Marks</th> <th>Percentage</th> </tr> </thead> <tbody> <tr each="{c, i in reports}"> <td>{c.enroll_number}</td> <td>{c.student_name}</td> <td>{c.max_marks}</td> <td>{c.min_marks}</td> <td>{c.marks_obtained}</td> <td>{c.percentage}</td> </tr> </tbody> </table> </section>', '', '', function(opts) {
	var self = this
    self.on("mount", function(){
      self.loading = false;
      self.update()
      self.readClass()
      self.readSection()
    })
    self.on("unmount", function(){
      marksReportStore.off('read_classes_changed',ClassesChanged)
      marksReportStore.off('read_section_changed',SectionChanged)
      marksReportStore.off('read_exam_scheme_changed',ExamTypesChanged)

      marksReportStore.off('read_top_five_changed',ReportChanged)
    })

    self.readClass = () => {
       self.loading = true;
       marksReportStore.trigger('read_classes')
    }

    self.readSection = () => {
       self.loading = true;
       marksReportStore.trigger('read_section')
    }

    self.changeSection = () => {
       if(self.refs.standardSelect.value==''){
        toastr.info("Please select standard and try again")
       }else{
        self.tempSections = []
        self.tempSections = self.sections.filter(s=>{
          return s.standard_id==self.refs.standardSelect.value
        })
       }

       marksReportStore.trigger('read_exam_types',self.refs.standardSelect.value)
    }

    self.readExamScheme = () => {
      let error = '';

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(self.refs.standardSelect.value==''){
        error = error + "Please select standard, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading=true
        marksReportStore.trigger('read_exam_scheme',self.refs.standardSelect.value, self.refs.sectionSelect.value)
      }

    }

    self.readReport = () => {
      let error = '';

      if(self.refs.sectionSelect.value==''){
        error = error + "Please select section, "
      }

      if(self.refs.examTypeSelect.value==''){
        error = error + "Please select exam type, "
      }

      if(error.length!=0){
        toastr.error(error)
        return
      }else{
        self.loading=true
        marksReportStore.trigger('read_top_five',self.refs.examTypeSelect.value, self.refs.sectionSelect.value)
      }

    }

    self.addEnter = (e) => {
      if(e.which == 13){
        self.add()
      }
    }

    marksReportStore.on('read_classes_changed',ClassesChanged)
    function ClassesChanged(classes){
      self.loading = false
      self.classes = []
      self.classes = classes
      self.update()
      console.log(self.classes)
    }

    marksReportStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      self.loading = false
      self.sections = []
      self.sections = sections
      self.update()
    }

    marksReportStore.on('read_exam_scheme_changed',ExamTypesChanged)
    function ExamTypesChanged(examTypes){
      self.loading = false
      self.examTypes = []
      self.examTypes = examTypes
      self.update()
    }

    marksReportStore.on('read_top_five_changed',ReportChanged)
    function ReportChanged(reports){
      self.loading = false
      self.reports = []
      self.reports = reports
      self.update()
    }

});
riot.tag2('udise-report', '<print-header></print-header> <loading-bar if="{loading}"></loading-bar> <section class=" is-fluid"> <h4 class="title has-text-centered" style="color: #ff3860;">Data Capture Format for student tracking in SDMIS {session_name} (in sync with U-DISE) Class:{standard} Section: {section}</h4> <div class="box no-print"> <div class="columns"> <div class="column is-narrow"> <div class="control"> <div class="select"> <select ref="standard_id" id="standard_id" onchange="{getReadSection}" onkeyup="{addEnter}"> <option>Choose Standard</option> <option value="-1">All</option> <option each="{standards}" riot-value="{standard_id}">{standard} </option> </select> </div> </div> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="section_id" id="section_id" onkeyup="{addEnter}"> <option>Choose Section</option> <option value="-1">All</option> <option each="{readfilteredSections}" riot-value="{section_id}">{section} </option> </select> </div> </div> </div> <div class="column is-narrow"> <div class="control"> <div class="select is-fullwidth"> <select ref="session_id" id="session_id" onkeyup="{addEnter}"> <option>Choose Session</option> <option each="{sessions}" riot-value="{session_id}">{session_name} </option> </select> </div> </div> </div> <div class="column"> <button class="button is-danger has-text-weight-bold" onclick="{readUdiseReport}">GO </button> <button class="button is-primary has-text-weight-bold is-pulled-right" onclick="window.print()" title="Print"> <span class="icon"> <i class="fas fa-print"></i></span> </button> <button class="button is-warning is-rounded is-pulled-right" onclick="{readUdiseReport}" style="margin-left:5px;margin-right:5px"> <span class="icon"> <span class="fas fa-sync-alt"></span> </span> </button> </div> </div> </div> <div style="overflow-x: scroll; overflow-y:scroll" id="mydiv"> <table class="table_t"> <tr class="tr_t"> <td class="td_t">1.Student AADHAR No.</td> <td class="td_t">2.Name of Student </td> <td class="td_t">3.Fatder Name </td> <td class="td_t">4.Motder Name </td> <td class="td_t">5.Date of Birtd</td> <td class="td_t">6.Gender</td> <td class="td_t">7.Social Category</td> <td class="td_t">8.Religion</td> <td class="td_t">9.Motder Tongue</td> <td style="widtd:56px !important">10.Locality........</td> <td class="td_t">11.Date of Admission</td> <td class="td_t">12.Admission Number</td> <td class="td_t">13.Whetder belong to BPL</td> <td class="td_t">14.Belong to Disadv. Group</td> <td class="td_t">15.Getting free education as RTE Act. (for private unaided school)</td> <td class="td_t">16.Studying in class in tde year {session_name}</td> <td class="td_t">17.Class studying in tde previous year</td> <td class="td_t">18.If studying in class I, status of tde previous year</td> <td class="td_t">19.No. of day child attended school (in tde prev year)</td> <td class="td_t">20.Medium of Instructn</td> <td class="td_t">21.Type of disablities (if any)</td> <td class="td_t">22.Facility received by CWSN</td> <td class="td_t">23.No. of unifrom set</td> <td class="td_t">24.set of free text book</td> <td class="td_t">25.Free Transport</td> <td class="td_t">26.Free Escort Facility</td> <td class="td_t">27.Free Bicycle</td> <td class="td_t">28.Free Hostel facility</td> <td class="td_t">29.Special Training</td> <td class="td_t">30.Whetder tde child is homeless</td> <td class="td_t">31.Exam</td> <td class="td_t">32.% of marks obtained</td> <td class="td_t">33.Schooling status in {session_name}</td> <td class="td_t">34.Stream(For students of grades 11 & 12) </td> <td class="td_t">35.Trade/Sector</td> <td class="td_t">36.Job Role</td> <td class="td_t">37.Compl. NSQF Level</td> <td class="td_t">38.Stud opted for</td> <td class="td_t">39.EMPL</td> <td class="td_t">40.Salary offered</td> <td class="td_t">41.Student Bank Account Number</td> <td class="td_t">42.IFSC code of tde bank branch</td> <td class="td_t">43.Mobile Number(of student/parent)</td> <td class="td_t">44.Email Address(of student/parent)</td> </tr> <tr each="{st, i in udiseReports}" class="tr_t"> <td class="td_t">{st.aadhar_no}</td> <td class="td_t">{st.student_name}</td> <td class="td_t">{st.f_name}</td> <td class="td_t">{st.m_name}</td> <td class="td_t">{st.dob}</td> <td class="td_t">{st.gender}</td> <td class="td_t">{st.category_name}</td> <td class="td_t">{st.religion}</td> <td class="td_t">{st.mother_tongue}</td> <td style="width:56px !important"></td> <td class="td_t">{st.doa}</td> <td class="td_t">{st.reg_number}</td> <td class="td_t">No</td> <td class="td_t">No</td> <td class="td_t">No</td> <td class="td_t">{st.standard}</td> <td class="td_t">{st.previous_class}</td> <td class="td_t"></td> <td class="td_t">{st.attendance}</td> <td class="td_t">English</td> <td class="td_t">No</td> <td class="td_t">NA</td> <td class="td_t">NA</td> <td class="td_t">NA</td> <td class="td_t">NA</td> <td class="td_t">NA</td> <td class="td_t">NA</td> <td class="td_t">NA</td> <td class="td_t">NA</td> <td class="td_t">NA</td> <td class="td_t">P</td> <td class="td_t">{st.percentage}</td> <td class="td_t">Regular</td> <td class="td_t"></td> <td class="td_t">NA</td> <td class="td_t">NA</td> <td class="td_t">NA</td> <td class="td_t">NA</td> <td class="td_t">NA</td> <td class="td_t">NA</td> <td class="td_t">NA</td> <td class="td_t">NA</td> <td class="td_t">{st.mobile}</td> <td class="td_t">{st.email}</td> </tr> </table> </div> </section>', '', '', function(opts) {

	var self = this
    self.on("mount", function(){
    	self.title='Add'

    	self.readStandard()
    	self.readSection()
    	self.readSession()
    	self.role = getCookie('role')
        self.update()
        flatpickr(".date", {
	    	allowInput: true,
        	dateFormat: "d/m/Y",
  		})
    })

    self.on("unmount", function(){
      studentStore.off('read_standard_changed',StandardChanged)
      studentStore.off('read_section_changed',SectionChanged)
      adminReportStore.off('read_udise_report_change',ReadUdiseReportChanged)
      adminReportStore.off('read_session_change',ReadSessionChange)
    })

	self.readStandard = () => {
       studentStore.trigger('read_standard')
    }
    self.readSession = () => {
       adminReportStore.trigger('read_session')
    }

    self.readSection = () => {
       studentStore.trigger('read_section')
    }

    self.getReadSection = () => {
    	self.readfilteredSections = []
    	self.readfilteredSections = self.sections.filter(s => {
    		return s.standard_id == self.refs.standard_id.value
    	})
    }
     self.addEnter = (e) => {
      if(e.which == 13){
        self.readUdiseReport()
      }
    }
    self.readUdiseReport = () => {
    	self.loading=true
    	 self.standard = $("#standard_id option:selected").text();
    	 self.section = $("#section_id option:selected").text();
    	 self.session_name = $("#session_id option:selected").text();
       adminReportStore.trigger('read_udise_report',self.refs.standard_id.value,self.refs.section_id.value, self.refs.session_id.value,)
    }

   studentStore.on('read_standard_changed',StandardChanged)
    function StandardChanged(standards){
      console.log(standards)
      self.standards = standards
      self.update()
    }

    adminReportStore.on('read_session_change',ReadSessionChange)
    function ReadSessionChange(sessions){
      console.log(sessions)
      self.sessions = sessions
      self.update()
    }

    studentStore.on('read_section_changed',SectionChanged)
    function SectionChanged(sections){
      console.log(sections)
      self.sections = sections
      self.update()
      self.getReadSection()
    }
    adminReportStore.on('read_udise_report_change',ReadUdiseReportChanged)
    function ReadUdiseReportChanged(udiseReports) {
      self.title='Create'
      self.loading = false
      self.udiseReports = udiseReports

	      self.update()
	      console.log(self.udiseReports)

    }

});